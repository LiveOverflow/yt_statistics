So this video will be very different from
the first three parts covering the white box
crypto challenge from the rhme3 qualifier.
They are pretty long and rambling, so let
me quickly summarise.
White box crypto is method where you try to
hide the secret key of for example AES encryption
inside a binary.
It’s called whitebox crypto, because essentially
you can perform a whitebox analysis of the
binary that implements the crypto and extract
the key.
So it uses some fancy tricks like Look Up
tables instead of straight calculations to
hide the actual steps.
Now in the past videos I have spent a lot
of time reversing the binary, understanding
AES and coming up with a few attack ideas
but in the end none lead to the key.
So let me show you how I and most other players
have solved this challenge.
Very early during the qualifier people were
sharing the link to this repository on the
official IRC channel.
And peopel were saying it’s not a spoiler
and whatever and I think you could even find
the repository when googling for it because
of a commit message.
So this is a repository of various public
white-box crypto implementations and their
attacks.
So apparently it can be used for this challenge.
And during the CTF this commit appeared, adding
a feature that allows passing the key via
standard input to the binary.
And we know that the challenge has an option
to read from stdin.
So when you look around there are actually
three relevant repositories.
Deadpool contains a lot of examples from various
other white-box challenges.
So that’s a cool start.
Then we have Daredevil which is a tool to
perform correlationn power analysis attacks.
So it’s a side channel attack tool.
Which makes sense because we know from hardware
that sidechannels can leak information about
a secret key, so maybe the solution here is
also use a side channel attack on the whitebox
binary.
An then there is a Tracer respository.
It contains a set of dynamic binary instrumentation
and visualization tools for execution traces.
So when you look at a relevant example in
Deadpool, for example I looked for some AES
implementation.
you can see that it requires the deadpool
script and then uses the tracer tool to collect
traces from the binary.
In this case the binary was called wb_challenge
and we collect 2000 traces.
And we configure it with some attack algorithms
targeting sbox or the multiplicative inverse.
No clue.
So we definitely have to install daredevil
and tracer.
I like to always work on fresh Linux machines
so I often just click myself some server and
rent it for a few hours or days.
Then we just follow the readmes of the respoitories,
install dependencies and compile it.
This takes a while.
The real challenge here is to compile Tracer.
There are two ways to run tracer and I tried
to get PIN working.
But when you follow the instructions PIN fails
to compile.
The C++ ABI of your computer does not match
the ABI of the pin kit.
This is really difficult.
Because you have to realize in this moment
that you can use google.
And when you spend minutes reading through
results you find this tip that you can specify
the ABU version that shall be used for PIN.
So we have to add these compile flags to the
makefile of pin.
The next problem I had was that simply make
didn’t work because the sqlite3 library
was not found.
But this happened for the 32bit version, and
we only need 64bit.
Soooo.
The crazy trick I used was to just to make
the 64bit version.
And then it worked.
Wow.
Next we also have to adjust the tracer example
script for our whitebox binary.
If we look at the commit that added the stdin
feature we see that processinput returns now
a tuple.
First element is what is passed to the std
input and the second one are the argv commands.
So we pass in the raw bytes for stdin and
for the arguments we specify the option --stdin.
And process output simply has to read the
hex values and convert it back to an integer.
Then we can run it!.
Urgh it’s pretty slow.
Collecting execution traces takes a while.
So let’s lower the amount of traces for
now.
Okay.
Let it run.
Ok it’s just done now?
Where is the key?
Well we should have read more of the readmes.
Man that’s so difficult.
Well.
Here it says that we now have to use daredevil
and use the config that was generated by tracer.
So let’s just use one and let it run.
Oh wow thies goes fast.
It performs some side channel analysis of
the traces and finds good candidates for the
key bytes with a super high confidence.
So we just have to let it run and wait for
it to finish.
Ok there we go, this already looks like ascii,
let’s decode it.
All tables are ors.
Mh…
This was the solution.
We didn’t have to understand anything about
AES.
As you can tell, I’m salty again about this.
I feel ashamed for having used this tool.
And I’m sure the challenge creators knew
that this tool exists.
I also want to mention that I know a few who
solved it without this tool.
And for them it was probably a very insightful
and interesting challenge.
So if I’m being honest, then I’m just
salty because I’m not smart enough and expect
people to make challenges that I can solve.
But you know I wanna learn something with
CTFs and especially for the easy, low points,
qualification challenges kind stuff I would
love to see more approachable challenges.
And then for the higher once, go crazy, make
it hart and let the smart people shine.
So here is how I see this challenge.
You wanna create a whitebox crypto challenge,
right?
So.
You can do it super simple, just use some
lookup tables but don’t mask it, or don’t
mask the last round or so.
Then it’s a lot easier.
Like we explored in the previous videos we
could reverse the key from those steps.
Or you can create a much more advanced version,
with a lot of counter measurements where you
either have to dig really deep or use some
advanced tool.
And you see, both challenge versions can be
easily solved with the tool.
Right?
If you expect it to be easy because there
is a tool, make sure that you lead noobs to
discover those tools.
A few more hints or tips in the binary.
Or just link the tool.
Otherwise nobody wins here.
Advanced players throw the tool they know
at it, and noobs like me can’t solve it
by hand because it’s just already a bit
too advanced and we get frustrated.
Especially for the qualifier and to create
a learning experience for noobs, it’s greate
to make a more simple challenge.
If you make it approachable for beginners,
they could have learned about AES and implement
their own attack.
It would be soo beneficial.
And people who discover the tool can still
cheese it.
If there is a tool that works against a hard
and a simple problem, just make the challenge
a simple problem, so there is more options
to solve it and encourage doing it by hand,
rather than giving up and using a tool like
I did.
Anyway, I still learned a lot.
A little bit salty but that’s fine.
I’m looking forward to the actual CTF, it’s
gonna be awesome.
