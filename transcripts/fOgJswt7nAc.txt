A lot of hacking videos on youtube are about
Wifi hacking.
They show how you can use various tools, on
Kali linux, like aircrack or some deauther
to DoS clients.
But I never wanted to do that, I find it quite
boring.
That doesn’t mean that I’m entirely not
interested in wifi hacking, it’s just that
if I would make a video about it, it would
be about one specific attack in detail, how
it works, rather than just how to use a tool.
And so with the recent disclosure for KRACK
- Key Reinstallation Attacks on WPA2, I figured,
that’s the perfect moment to do exactly
that.
“Key Reinstallation Attacks: Forcing Nonce
Reuse in WPA2” by Mathy Vanhoef released
around October 2017, is a paper detailing
a specific protocol flaw.
And I encourage you to read this paper, because
the news around this attack is obviously going
completely insane with sooo much misinformation
going around.
And so if you are actually interested in what
this attack means, how it works, and what
are the actual threats read it from the source.
I know papers can look intimidating, but it’s
often enough to read the “Abstract” and
the “Conclusion” to get a good intuition
for what this is about.
And then you have all the content in between
to go more indepth.
So let’s start with that.
“All protected Wi-Fi networks use the 4-way
handshake to generate a fresh session key.
[...] However, we show that the 4-way handshake
is vulnerable to a key reinstallation
attack.
Here, the adversary tricks a victim into reinstalling
an already-in-use key.
This is achieved by manipulating and replaying
handshake messages.
When reinstalling the key, associated parameters
such as the incremental transmit packet number
(nonce) and
receive packet number (replay counter) are
reset to their initial value.
Our key reinstallation attack also breaks
the PeerKey, group key, and Fast BSS Transition
handshake.
The impact depends on the handshake being
attacked, and the data-confidentiality protocol
in use.
Notably, our attack is exceptionally devastating
against Android 6.0: it forces the client
into using a predictable all-zero encryption
key”
So, there is a lot of information here and
so let’s try to dissect the meaning of this.
“All protected Wi-Fi networks use the 4-way
handshake to generate a fresh session key”.
Figure 2 shows the messages exchanged when
a client connects to an access point.
And of course those initial messages are not
encrypted.
You see that after the 4-way handshake “encrypted
data frames can now be exchanged”.
The fresh session key they were talking about
is the the PTK (the Pairwise Transient Key),
which is derived here.
The PTK is “generated by concatenating the
Pairwise master key, which itself is derived
from basically the password you enter for
the Wifi, the Access Point nonce (ANonce),
you see it here being sent from the access
point to the client and the client nonce (SNonce),
which is generated by the client and sent
to the access point, but that’s not all,
also the access point MAC address, and the
station MAC address is used in the generation
of PTK.
So using this pre-shared secret (the wifi
password) both the client and the server now
know the same Pairwise Transient Key.
And you can already see here what that means
generally for the security.
If anybody else also knows the wifi password,
and observes these nonces being exchanged
they can derive your Pairwise Transient Key
and can decrypt your traffic.
So when you connect to a “secure” wifi
in a hotel, you might not be as secure as
you thought you would be.
But that’s a different issues.
And then there are different protocols to
actually implement the encryption.
For example if TKIP is used then the encryption
algorithm is RC4 and that is basically the
same as WEP, and therefore vulnerable to a
number of similar attacks.
But another option is “the CCMP protocol,
which is AES in
CCM mode (counter mode with CBC-MAC).
[... it is] secure as long as no Initialization
Vector (IV) is repeated under a particular
key.
And the IV here is the nonce.
And the nonce is again constantly incremented
to make sure it will never repeat.
And basically the same is true for the GCMP
protocol, it uses AES-GCM, and is secure as
long as no IV is repeated under a particular
key.
If that sounds weird to you, you could watch
my video “Breaking ECDSA (Elliptic Curve
Cryptography)”.
Of course ECDSA is very strong but there can
be a flaw if it’s not properly implemented,
namely if a fixed value is used for a parameter
instead of a random one.
So very similar in the sense that the security
of a crypto algorithm can be very fragile.
And so for these algorithms, if the IV, the
nonce, is reused for the same key it can probably
be broken.
So you can kinda see where this is going.
Let’s continue reading,
“[...], we show that the 4-way handshake
is vulnerable to a key reinstallation attack.
Here, the adversary tricks a victim into reinstalling
an already-in-use key.
This is achieved by manipulating and replaying
handshake messages.”
Just in case it confuses you what “reinstalling”
or “installing” the key, it basically
just means that the protocol decided “this
is the key we use”.
If we make an analogy how that is implemented
in code, it’s basically just assigning the
key now to the variable “the_key_we_use”.
Ok.
So radio networks, or any other communication
has to handle the case when messages get lost.
And they have to agree how to handle that.
For example retransmitting them.
And so, “[...], because messages may be
lost or dropped, the Access Point will retransmit
message 3 if it did not receive an appropriate
response as acknowledgment.
As a result, the client may receive message
3 multiple times.
Each time it receives this message, it will
reinstall the same session key, and thereby
reset the incremental transmit packet number
(nonce) [...].
We show that an attacker can force these nonce
resets by collecting and replaying retransmissions
of message 3”
“When reinstalling the key, associated parameters
such as the incremental transmit packet number
(nonce) and receive packet number (replay
counter) are reset to their initial value.”
“Depending on which protocol is used, this
allows an adversary to replay, decrypt, and/or
forge packets.”
And so it’s now pretty easy to imagine that
if you can keep resetting the key parameters
some crypto stuff will be f’ed up.
And this is a protocol flaw because the official
specification tells you that message 3 could
be resent and you have to reset the parameters.
Thus resetting the crypto algorithm parameters.
And thus opening the door for certain crypto
attackes depending on which crypto algorithm
is used.
Some are more susceptible than others.
The author also checked the behaviour of different
implementations and it turns out iOS and Windows
both don’t follow the spec and don’t accept
the retransmission of message 3.
And the worst implementation is by some linux
based systems because there is an additional
implementation bug that resets the key to
all zeroes.
So you don’t even have to perform this crypto
attack, limiting you to maybe “only” decryption,
I don’t know.
Because with this flaw you actually now know
the key because all the values are set to
0.
Okay.
There are a lot of technical details and challenges
and nuances that you can read about in the
paper.
I presented it more simplified but hopefully
it’s more accurate than some other news
headlines.
So summarise.
WAP2 uses a 4way handshake where nonces are
exchanged and used together with the wifi
password to generate a key.
This key is then used for encrypting packets.
How it is used depends on the actual crypto
algorithm being used.
A lot of crypto algorithms are very fragile
when certain values are reused.
And the attack presented in this paper is
about forcing a reset of these values - specifically
the nonce which would be constantly incremented
and thus would always be different.
And thus opening the door to perform certain
crypto attacks.
And this is a protocol design flaw.
But additionally, during this research, a
very serious software bug was discovered where
on certain implementations the key was not
just reset to initial parameters, but was
actually set to 0.
So you actually know the key and you don’t
have to perform a crypto attack.
But you know what.
Why don’t read the paper.
You don’t learn hacking when reading security
news headlines or use the tool Mathy Vanhoef
wrote.
Go read the actual research, or at least parts
of it.
