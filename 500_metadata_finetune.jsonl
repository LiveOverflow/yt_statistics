{"prompt": "What is the name of the challenge from the TUM CTF 2016 that this video is discussing?", "completion": "In this video we will script radare2 in python with r2pipe to extract the encrypted code and recover the flag. Last video we reverse engineered the algorithm that is used to verify the input key (the flag) with binary ninja and gdb. The challenge is called Zwiebel from the TUM CTF 2016, and that\u2019s the german name for onion. We learned that the binary will decrypt itself layer for layer and check different bits of the input during each step. Now we want to create an automated script that performs the tedious reverse engineering task for us."}
{"prompt": "What is the command to reopen a binary in debugging mode with radare2?", "completion": "First make sure that your radare2 installation is up to date. Always work with the repository and not install it from a package manager. Then simply run sys/install.sh which will update to the latest commit. And make sure you have r2pipe for python installed. Now we can access radare from python. The API is super simple. After opening a file you simply execute commands as you would with the radare commandline. So let\u2019s get started. Open the binary with radare2. Then use doo, which reopens the binary in debugging mode."}
{"prompt": "What is the command used to set a breakpoint in radare2?", "completion": "Then I take the address of the call r14 and set a breakpoint with db. With dc we can continue the process execution which will for the input key. After that we hit the breakpoint. Now let\u2019s do the same in our script. First we need to import r2pipe and then we can open the executable with radare. Then we can simply execute those commands with the cmd() function. It\u2019s that easy. Here is what I try to do. I will write the script here and in this small window I try to show you the radare command descriptions and what it does."}
{"prompt": "What command should be used to execute a single step in radare2?", "completion": "Then I hope it\u2019s easier to follow. So the first command was doo, which reopens the binary in debug mode. After that we want to add the first breakpoint. Which is db. Then we resume/continue the process with dc which should hit the breakpoint. At this point we should be just about to execute the call to r14. Which is the actual code doing the checks and deecryption loops. So we want to do a step forward of one instruction into that code. I think we will single step a few times, so let\u2019s define a helper function step(), which will execute ds, which is a single step."}
{"prompt": "What command can be used to seek to the value of the register rip in radare2?", "completion": "When you execute a single step, then obviously the instruction pointer of the CPU moves on, but the current address of radare does not update. So we want to also seek to the new address. We can use sr rip, which will seek to the value of the register rip. Cool. We will use that function in a moment. So now we can start writing the loop that will perform the same steps over and over again. So our first step is to extract the current bit checking rule. How does this look like. We can scroll back up to where we looked at this in gdb and look at how this looked like in assembler."}
{"prompt": "How does the pd command work in radare2?", "completion": "So we are somewhere before this code, and what we want is to now extract all those lines of assembler until we reach that jump-equal. So we define a list disass, which will hold each line. Then we do the following loop. We first step one instruction forward, and then use pd, which prints the disassembly of one instruction at the current address of radare. That\u2019s why we seek to RIP in the step function(). But actually we will do pdj, because that outputs json information instead of just a text line."}
{"prompt": "How can we specify input for a radare2 process in a python script?", "completion": "And in python we can call this now with cmdj, which will automatically return a python dict to easily access the JSON data. Let\u2019s quickly see if our script works by opening a python shell and copy the code. Looks pretty good? Or no. Somehow it all hangs. Mh. We kind of forgot to handle the input. The process is currently waiting for a key, which we can\u2019t enter. I started to google a bit and found this. So I created a rarun profile that specifies, that the process shall receive this string as input."}
{"prompt": "What command is used in radare2 to set a profile?", "completion": "We can set this profile through radare\u2019s environment variables. So we add this command to our script. Then we can try to run it again, and indeed, it now proceeds and the breakpoint after the key input is hit. Now let\u2019s continue with the script. Let\u2019s add the current instruction opcode to the list. Pdj returns a list of instructions. So we get the first element. And then we get the \u201copcode\u201d value of the dictionary. Then we also check if the instruction type is a conditional jump. Cjump. If that is the case we reiched the jump-equal."}
{"prompt": "What syntax does the MOV opcode use?", "completion": "This means we reached the end. If the bit check was ok, it will continue to the decrypt loop afterwards. This means, after we break out of this loop, we have a list of instruction and the last one is the jump-equal. And the one before is the binary and value. And the one before that is the mov that get\u2019s the character at a certain offset. So the first instruction is the character offset. The syntax of the mov opcode has the offset + something after rax. So this is ugly python, but it get\u2019s the job done."}
{"prompt": "What is the syntax for splitting a string in Python?", "completion": "We split the string at \u201crax\u201d. And the second element of the result, minus the last character is our offset value as a hex string. Though, sometimes the first character is references, then it doesn\u2019t have a + hex 0. So if we got an empty string, we simply set the offset by hand to 0. Then we can convert the hex offset value to an integer number. Next instruction is the binary and value. Which will tell us which bit is checked. Similarely like before, we can take the opcode string and split, after the comma."}
{"prompt": "How do we print out the current state of the flag in the radare2 script?", "completion": "And that is the hex value which we can convert to an integer. Cool. One more thing we need now is a variable to build our flag. I\u2019d suggest we simply make a long list of numbers, which we then can add the single bit informations we extract to. I initialize it to hex 20, which is the ascii space. So once we got this info, we can simply update the flag at the offset and set this particular byte with a binary or operation. After that we can write some code to print the current state of the flag. We loop over each number, if it is between a certain printable ascii range we convert it to the ascii character, otherwise we append a space to the output."}
{"prompt": "What command can be used in radare2 to get the current and the next instruction?", "completion": "With sys.stdout.write we can directly write to the output, because python print appends a newline. This way we can use \\r instead, which makes the script look really cool. The next step in our script will be to perform the decryption. If you remember, after the loop instruction we have the jump into the decrypted code. So we could simply perform single steps forward and check after each step the opcode of the current instruction. And if we found the loop instruction we can stop. The instruction afterwards is the jump, so we can use pdj 2, to get the current and the next instruction."}
{"prompt": "What is the instruction that is used to check the bits?", "completion": "And from the next instruction we can take the address where it wants to jump to. We can extract that value easily thanks to the json data, and then add a breakpoint at this new address. Next we simply continue. I think we are bsically done. Let\u2019s test it. No syntax errors, but something else seems wrong. It stops way too quickly after only a few rounds. Let\u2019s add some debugging output that displays us some of the instructions. When we run it now, we get the instruction that check the bits. And when you look closely you can see, that it\u2019s not always jump-equal."}
{"prompt": "What binary operator is used to set a flag bit to 0 when a jump-not-equal is detected?", "completion": "There are actually some jump-not-equal. So that is the inverse of the check we know. The normal one, checked if a character has a certain bit set to 1. the jump-not-equal check will make sure that a certain bit is NOT set. So it\u2019s 0. And we don\u2019t have this logic yet. Let\u2019s write that code. We can simply check the last opcode if the jump was jump-equal and then set the bit to one, with the binary OR that we already know. Or if we have a jump-not-equal, we set the bit in the flag to 0. That\u2019s a bit more tricky, but basically you use a binary AND, with a bit sequence of all ones, except the one bit you want to set to 0."}
{"prompt": "What is the result of taking hex FF and XORing it with a bit that is set to zero?", "completion": "To get this binary sequence you can take hex FF, which is all 1s and XOR it with the bit you want to set to zero, this will produce the bit sequence with that one bit 0. Just play it through on a paper it becomes clear. But there is another problem, which is our input flag. because we specified in the rarun profile that it\u2019s a fixed \u201cAAAAA\u201d string, which will eventually fail the bit checks. And that\u2019s the real reason why it stopped. But we could add some code that bypasses this check and always continues to the next layer."}
{"prompt": "What is the purpose of the zero flag in CPU registers?", "completion": "These conditional jumps je, and jne are sometimes also called jump if zero and jump if not zero. The CPU has a register that contains flags and one of those flags is the zero flag, which will be 1 if the previous calculation resulted in a 0. And it will be 0 if the result was non-zero. This makes sense, because if you want to compare two values you can simply subtract them from another and if the result is 0, they were the same and the zero flag will be set. This means we always want to make sure the zero flag is set to 0 or 1, whatever makes the code continue."}
{"prompt": "What command can be used to redirect Radare's output to /dev/null?", "completion": "We can set those registers in radare during debugging with dr, and then set zf, zero-flag to 0, so the jump-equal will not jump. And we can set it to 1, so the jump if not equal will not jump. Oh and we should remove our debug output. Now let\u2019s run it and see what will happen. Urgh ehm. Radare outputs everytime we hit a breakpoint. That\u2019s not pretty. But it does it on the standard error out. So we can simply redirect the stderror to /dev/null. Now we have a very pretty output. The program is running, decrypts each layer,"}
{"prompt": "How can I join the Cyber Security Challenge Germany?", "completion": "I like helping people that's also why I have this YouTube channel I like to share what I know I get a lot of questions by Twitter email Instagram whatever and I really try to answer as many questions as I can but it's it's impossible to answer all the questions I there's just no time for it I also have two separate life overflow where you can ask questions and the great thing is that not only I can answer about other people as well if they see it so so there's a great book thing if you have been answering questions to other people on there thank you so much thank you [Music]"}
{"prompt": "What type of attacks does the Crypto WAF security product protect against?", "completion": "In this video, we are going to develop a\u00a0 cybersecurity product called \u201cCrypto WAF\u201d. It is an advanced web application firewall, which\u00a0 automagically protects any user data with military grade encryption, as well as stopping serious\u00a0 hacking attacks such as XSS and SQL Injections. Ok I admit. I didn\u2019t invent this product. And\u00a0 this is just a Capture the Flag challenge I created for our ALLES! CTF 2021. BUT, this\u00a0 is more than just a CTF challenge, because like the recent \u201cscreenshotr\u201d challenge I made,"}
{"prompt": "What kind of security audit was the challenge encountered in?", "completion": "this is based on a real-life product that\u00a0 I encountered during a security audit. But this is not going to be a regular CTF\u00a0 walkthrough. In this video I want to focus a bit more on the idea of the challenge and how I\u00a0 built it - I think it\u2019s a unique perspective for a bug hunter or aspiring security researcher.\u00a0 Understanding or imagining how a product was developed can help you when hunting bugs.\u00a0 There will be spoilers ahead, so if you want to try to solve this challenge yourself,\u00a0 you can find the link to the challenge below."}
{"prompt": "How did the challenge inspiration originate?", "completion": "If you are here for a regular CTF walkthrough,\u00a0 checkout the video by Bug Bounty Reports Explained. He is another YouTuber who solved this\u00a0 challenge during the CTF and even got FIRSTBLOOD! In his video he will walk you through how\u00a0 he approached and solved the challenge. Anyway... So what\u2019s the idea for this challenge?  As I mentioned this challenge is based\u00a0 on a product that exists in real-life, but I implemented the code for the\u00a0 challenge myself. The vulnerability and attack idea is inspired by what was found\u00a0 in the real product, but I want to emphasize that I made here a very basic, minimal and\u00a0 insecure implementation of the general idea,"}
{"prompt": "What is the benefit of having the source code available in a CTF challenge?", "completion": "so it obviously doesn\u2019t compare\u00a0 to the real mature product. Anyway, let\u2019s look at the challenge. I like challenges where the source code is available. This means there is no trickery,\u00a0 no guessing, all the information you need is in front of you. And so if you cannot solve it,\u00a0 you know you lack some knowledge or skills. I know that might sound harsh, but that\u2019s what I love\u00a0 when playing CTFs myself: \u201cI have the full code, so if I cannot solve it, I still have to\u00a0 learn more!\u201d - and that\u2019s motivating to me."}
{"prompt": "What advantages does using a Dockerfile or docker-compose file provide for web applications?", "completion": "Anyway, nowadays basically 99% of all web\u00a0 applications come with Dockerfiles or even docker-compose files that are being used for local\u00a0 development, testing and even deployment. And they are awesome, because they make test setups for\u00a0 research very easy and also give you a quick overview of all the components. And yes, most bug\u00a0 bounty programs are about attacking proprietary blackbox closed-sourced software, BUT there are\u00a0 many bug bounties for open source apps as well, for example GitLab. So this challenge\u00a0 is a great learning opportunity."}
{"prompt": "What is the purpose of the Crypto WAF product?", "completion": "Ok but what is the idea here?\u00a0 What is this Crypto WAF. Let me tell you about the\u00a0 problem this product will solve. Let\u2019s say you have developed a notes taking\u00a0 application and you want to take privacy seriously. Now imagine you have a bug like\u00a0 a SQL Injection and your database is stolen. Do you want to be responsible for leaking\u00a0 those extremely private notes of your users? No! You want to protect them. Ideally you\u00a0 don\u2019t even want to have access to the notes of your users yourself! So you decide, you want\u00a0 to encrypt them. But if you encrypt it yourself in the database, then you know the private\u00a0 key. And you can still decrypt everything and read the private notes. And you don\u2019t\u00a0 like that. So here comes \u201cCrypto WAF\u201d."}
{"prompt": "What are the benefits of using a Crypto WAF product for web application security?", "completion": "This Crypto WAF product is a layer\u00a0 sitting between your app and the user. And it automagically encrypts user data passing\u00a0 through it. Which means, YOU as the developer, don\u2019t have to do anything. You can focus on making\u00a0 a great notes app, and the Crypto WAF developers just have to focus on securely handling the\u00a0 crypto. Perfect separation of responsibility. Now I want to be clear, this is not\u00a0 the best solution for this problem and what I will show you is not\u00a0 perfect. there are way better and more \u201ccorrect\u201d ways of doing this."}
{"prompt": "What type of requests can the Crypto WAF process and encrypt the user data from?", "completion": "But still I think that\u2019s an interesting idea for a product. So let\u2019s\u00a0 think about the implementation details. Remember, we want to have a\u00a0 layer sitting between the user and the application. So the HTTP requests\u00a0 and responses pass through our Crypto WAF. Encrypting the user data seems simple. When a\u00a0 request is coming through our system, the HTTP request might carry data. This could be a POST\u00a0 request with url form encoded data or json. And so it\u2019s easy for the Crypto WAF to take the values\u00a0 in the request, encrypt it, and forward it to the actual app. Now the app only receives encrypted\u00a0 values and never knows what really was written."}
{"prompt": "What problems can arise when encrypting every value coming through a WAF crypto layer?", "completion": "And this is how it looks in\u00a0 practice. If you add a note here, you see text. But if you would look at\u00a0 the site without the WAF crypto layer, all the data is encrypted. You need to go\u00a0 through the crypto layer to get the real data. BUT! Do you really want to encrypt\u00a0 EVERY value coming through? You will quickly realize you run into practical\u00a0 problems. Specifically with identifiers. Let\u2019s say you write a comment on a post. You\u00a0 submit the request and it has the comment text, as well as the ID of the post this comment\u00a0 belongs to. If both values are encrypted,"}
{"prompt": "What is the name of the function that defines the exceptions for certain values to be not encrypted?", "completion": "the app receives an encrypted ID rather than\u00a0 the number. Now you don\u2019t know which post the comment belongs to. You need the real ID value. So IDs must not be encrypted in this setup. Which means you have to define exceptions\u00a0 for certain values to be not encrypted. When you look into the app.py source code\u00a0 of the crypter part. You can find here the \u201cencrypt_params\u201d function which defines exactly\u00a0 these exceptions. The submitted data keys uuid, id, pk (primary key), username\u00a0 and password are not encrypted."}
{"prompt": "What is a practical problem that needs to be solved when implementing a security product that encrypts user data?", "completion": "And of course, in a proper product this\u00a0 should be configurable by the customer. Ok. One practical problem solved!\u00a0 But what about the decryption? Imagine a user wants to read a post with comments.\u00a0 If the app is implemented with a clean API returning JSON data, then you could just do it in\u00a0 reverse. if encrypted values arrive from the app, you decrypt them and return it to the browser. But many websites have server-side template rendering. So the note could be embedded within\u00a0 the HTML response. And now you don\u2019t know, which parts are encrypted and which parts are not?"}
{"prompt": "What regular expression is used to identify encrypted strings in the decrypt_data function?", "completion": "This can be solved by making a clear pattern for encrypted strings, this way you\u00a0 can find and decrypt them easily. So let\u2019s have a look into the decrypt_data\u00a0 function in the source code. Here you can see that it uses a regular expression looking for\u00a0 a string starting with ENCRYPT, colon :, and then expects a base64 encoded text. It then goes\u00a0 through all matched strings, decrypts them, and replaces them in the data. Cool! So let\u2019s think about a fundamental\u00a0 design issue of this implementation."}
{"prompt": "What is the purpose of using the crypto layer in the security product?", "completion": "Remember the main purpose of this crypto\u00a0 layer? We, as the developer of the app, do not want to handle the private data of\u00a0 users. So we use the service to encrypt and decrypt the data for us. Our hands stay clean.\u00a0 But the other promise of the Crypto WAF is that when your database leaks or is exploited through\u00a0 an SQL injection, the data will be worthless for the attacker. Because all the notes are\u00a0 encrypted with a key we don\u2019t have on our server. It\u2019s the same reason why we hash passwords.\u00a0 It protects us from a compromised database."}
{"prompt": "How can attackers exploit the design flaw in the security product to decrypt a value from the database?", "completion": "But is that really true? mhhh...\u00a0 Here is the potential design flaw. Let\u2019s say we compromised the database, and we\u00a0 got an encrypted value. How can we decrypt it. Well\u2026 we happen to have a service that happily\u00a0 decrypts any value when it\u2019s returned by the app. So IF we manage to inject this string\u00a0 into a response, the crypto WAF would happily decrypt it for us, right?! The problem is just how to actually do that. Because when we would insert this as a note, this\u00a0 string would be encrypted, then stored in the DB,"}
{"prompt": "What is the vulnerability that can be exploited to make encrypted data decrypted?", "completion": "and when returned it would get decrypted to its\u00a0 original encrypted format. So it wouldn\u2019t work. And so we need to implement a first \u201cflaw\u201d in\u00a0 the code to make that possible. That\u2019s one of the issues you need to figure out when attacking this. Looking around you might notice that when you delete a note, the response will be a redirect,\u00a0 where the redirect URL is also shown in the response body. And the value here is a uuid.\u00a0 And UUIDs are excluded and not encrypted. So this is the way you can control what is\u00a0 reflected here onto the page. So if we take a encrypted string, place it here, we can see\u00a0 that the result will be the decrypted value now."}
{"prompt": "How can an SQL injection vulnerability in the order by clause be exploited?", "completion": "So this is how you can decrypt any leaked value. And basically this defeats the\u00a0 crypto part of the Crypt WAF. But how do we get the encrypted\u00a0 data in the first place? When you look at the where the flag\u00a0 is located for the challenge, you can see that it's added as a note by the flagger\u00a0 user. So somehow we have to leak the database. And here is where the other bug is. The main\u00a0 app had an SQL injection vulnerability in the order by clause. And I chose this, because\u00a0 I didn\u2019t want it to be easily discoverable and solvable with SQLmap. And it seems like\u00a0 SQLmap fails to identify the vulnerability."}
{"prompt": "What technique can be used to identify the design flaw in the security product discussed in the video?", "completion": "Here I run sqlmap against the URL, and you\u00a0 can see, no injectable parameter was found. This was by the way without the Crypto wafc But when reading the source code, the vulnerability is super clear. Here is\u00a0 a typical string concatenation failure. So I guess this is a great example, how\u00a0 a genuinely awesome tool like sqlmap, still has limitations, and how a source code\u00a0 audit would very easily reveal this vulnerability. But it wouldn\u2019t be a crypto\u00a0 WAF, a web application firewall, if it also wouldn\u2019t prevent hacking attempts\u00a0 such as an SQL injection in the first place."}
{"prompt": "How can we bypass the WAF in this security product?", "completion": "And the source code of the WAF has here this\u00a0 function waf_param, which checks the GET and POST parameters for attacks. If there is any occurrence\u00a0 of select, union, alert, script sleep or even just single and double quotes, the WAF will\u00a0 block the request and return an error. So all we need is to bypass the WAF, then we can\u00a0 use the blind SQL injection to leak the encrypted note of flagger, and combine it with the design\u00a0 flaw of the crypto part, to decrypt the flag. BUT! I won't tell you how to bypass\u00a0 the WAF. The flaw is on the screen right now, so maybe you can see it."}
{"prompt": "What is the GitHub repository link where the challenge files and source code can be found?", "completion": "I\u2019d say, for the full solution you should check out the video from Greg of\u00a0 BugBountyReportsExplained. Or look at my solution script in the description. You can find\u00a0 all the challenge files and source code on GitHub. Also I wanted to say, I was very impressed\u00a0 by Greg. he got firstblood, so solved the challenge before any of the other teams. WHAT THE HECK CTF PLAYERS. I ALWAYS BELIEVE YOU TO BE THE BEST. AND NOW WE HAVE\u00a0 SOME RANDOM BUG BOUNTY HUNTER COMING INTO OUR SPACE AND THEN KILLING IT??!?!!? WHAT?!?"}
{"prompt": "What is the correlation between CTF players and bug bounty hunters?", "completion": "Of course I\u2019m just kidding. But I have a theory. I\u2019m a strong believer that good CTF players,\u00a0 who solve a challenge like this, will also be great bug bounty hunters. And I think here we\u00a0 saw evidence of that. Well\u2026 the reverse of it. Greg is spending a lot of time studying the\u00a0 top bug reports for his videos. These are not the basic XSS, subdomain takeovers or whatever\u00a0 issues. These are really impressive findings. And they are often complex, sometimes\u00a0 difficult to understand, so they are very to CTF challenges. So I believe exposing himself\u00a0 to these more advanced topics, instead of doing the same basic boring bug bounty stuff all the\u00a0 time, made him a successful CTF player as well."}
{"prompt": "What is the difference between a program written in C and a program written in Python?", "completion": "In this video we will write the same program from the previous part, just in a different language. The C program got compiled by a compiler in machine code that can be executed directly. Python on the other hand is an interpreted language. To understand the difference I try to make an abstract example. You can imagine a program written in C as a machine built for a very specific task. And python itself is such a machine written in C. But it\u2019s a special machine ... a robot, which is built to interpret different language of code - python code."}
{"prompt": "What type of file is created when a Python program is compiled?", "completion": "So in a trivialized sense, somebody wrote C code in a file \u201cpython.c\u201d. Then used gcc like in the previous video to compile this sourcecode into a binary with the name python. You can see that when you use the tool \u201cfile\u201d to display file information. When you use file on our c matrix program, it says it\u2019s an ELF executable. And when you do the same for the python program it also says that it is an ELF executable. Now when you execute the \u201cpython\u201d program, you get an interpreter prompt, where you can enter text and python will interpret it for you."}
{"prompt": "What command can be used to open two files side by side in Vim?", "completion": "Or just pass it a python script file and it will execute it. I hope that makes sense. So let\u2019s create a new python script called matrix.py. We will also open our previous code alongside,to compare them. We can do that with vim by specifying both filenames with minus capital O. This tells vim to open the files split vertically. Now check if the cursor is in the correct document. If not you can use CTRL+W Left or Right to switch between the views. Now enter the insert mode by pressing i and let\u2019s get started."}
{"prompt": "How do you access the command-line arguments argv in Python?", "completion": "In python we don\u2019t have to specify a main function. The code will be just executed sequentially from the start of the file to the end. To access the command-line arguments argv we have to import a python module called sys. With print sys.argv we can print the content of this variable. So let\u2019s see how this sys.argv variable looks like. First save the file with esc, colon, w. Then you can use colon ! to execute a command. For example ls. You will see that the editor disappeared into the background and it displays the result of the ls command."}
{"prompt": "What is the command used to start a Python program in Vim?", "completion": "So let\u2019s use that to execute our python program. Go back by pressing Enter. Colon ! python to start python and as first argument we specify the script name which is matrix.py. Instead of writing the name you can also just use %. Vim will automatically replace the % with the current filename. You can now see that the first argument was matrix.py. And that\u2019s all we got. Like I explained in the last video, the arguments passed to the program start with the programs filename. Now let\u2019s add a few arbitrary arguments."}
{"prompt": "What is the syntax for checking if two arguments have been passed in a Python program?", "completion": "A normal one, one with quotes and spaces and some more words. Maybe even with more spaces in between, to just see what happens. There is the output. So the brackets indicate a list in python. and the elements are comma separated. And the list contains many strings starting with the filename and the stuff we placed afterwards. Hope that makes command-line arguments a bit more clearer. Ok so to check if we have got two arguments, we don\u2019t need a counter of arguments like argc. We can just check if len(sys.argv)==2."}
{"prompt": "How can you specify the number of spaces used when pressing the TAB key in Python?", "completion": "Note that python doesn\u2019t use curly braces to define context. We have to use indentation\u2026 urgh. When I press TAB I get tabs. That\u2019s ugly. I prefer everything to be filled with simple spaces. So you can use set expandtab shiftwidth=4 softtabstop=4. Now we get 4 spaces when tab is pressed. Now we wan\u2019t to print the first argument. So with print and pythons special format string syntax we can do exactly the same like in C. Inside the string with curley braces we can define which following format parameter shall be placed here."}
{"prompt": "How do you access standard error in Python?", "completion": "And we start counting with 0, so here will be the first format parameter. and obviosuly our first format parameter will be sys.argv[1]. Then we do the else and to print to standard error we have to access stderr directly through the sys module. So sys.stderr.write and the again Usage curley braces 0 to indicate here should be the first format variable. and the first format variable is the first element of the argv list. Note that the simple print doesn\u2019t need the backslash n newline at the end. but the write needs it."}
{"prompt": "How does Python handle printing a newline at the end of a statement?", "completion": "That\u2019s because pythons says that printing with a newline at the end is pretty common, so it does that automatically for print. but if you use a bit more low level access function, then we have to add it ourselves. Also that fact that we use \u201cwrite\u201d to output text should peak your curiosity. Sounds like writing to a file? Well. Everything is a file as you may remember from the linux introduction video. So keep that in mind when we talk about this more. Ok done. Let\u2019s test it. save it and quit vim."}
{"prompt": "How can you create a new line above the cursor in a Python script?", "completion": "Make sure to quit two times for both open views. python matrix.py works. Just like our C program. If you don\u2019t want to type python before your python script all the time we can do something about that. Open the script again and create a new line above the import. Remember how you can press o instead of i to enter insert mode, which creates a new empty line below your cursor? Guess what happens when you use shift O. It creates a new empty line above your cursor and enters insert mode. Now add shebang with the path to the python binary."}
{"prompt": "What does the line \"#!/usr/bin/python\" do in a python script?", "completion": "#!/usr/bin/python There is also a nice wikipedia entry about shebang, so check that out. This line tells the program loader that this is a script that should be executed with python. So it basically does python matrix.py for us. Now we can execute it like our C program, by using the path to the python script\u2026 permission denied? Why is that? let\u2019s have a look at the permissions. ls -la to display all files along with their permissions but also use matrix *. This basically means that it should display all files that start with matrix and anything can then follow."}
{"prompt": "How can we add execution permissions to a file in Python?", "completion": "When we compare our matrix binary with the matrix python script we notice that it has a couple of x. X stands for executable. But our file only has r and w, which stands for read and write permissions. So to be allowed to execute it, we have to add the execute permission to that file. We can sue chmod for that, which stands for change mode bits of a file. Remember to always read the man page to learn more about the commands. So we can use chmod +x to add execution rights and the filename. When we now list the files we see that it now has execution permissions."}
{"prompt": "What is a useful feature in Python when typing commands?", "completion": "I mentioned this in the very first video briefly, but maybe now is a good moment to talk about it a bit more. Tab completion is extremely handy. For example when I start typing the current path with dot slash. And hit tab twice, it shows me all possible files that could follow. So we want matrix. Let\u2019s just type one letter m and hit tab again. Now it will have automatically filled it in as matrix. Because there are multiple matrix files it has stopped at the part where they start to differ. Double Tab to display all options."}
{"prompt": "How do you update the package list from the repositories in Ubuntu?", "completion": "Now add a . which makes the only option left matrix.py. Tab again and we got the whole filename. I use python a lot. Almost anything I program I write in python. So most of my examples will be written in python and it\u2019s also a language I highly recommend to learn in general. So maybe checkout codecademy python courses or just google yourself. Before we finish, let\u2019s keep our system updated. Type sudo apt-get update, to update the package list from the repositories. And the apt-get upgrade, to install new versions for software you have installed."}
{"prompt": "What is the website mentioned in the video that provides the challenge?", "completion": "In this episode we will have a look at the first level of protostar from exploit-exercises.com. If you have questions about the setup, you can watch the previous video. Generally I advise you to stop the video right here, and work on it by yourself first. Maybe give it a day and see how much you can figure out. And after that, watch my explanation. But if you feel completely lost, then just follow me. This here should give you enough information to solve the next level on your own. So let\u2019s first have a look at the challenge description."}
{"prompt": "What C library function is used to read user input in the program's source code?", "completion": "This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution. And this level is located at /opt/protostar/bin/stack0 Ok. Next we will have a look at the source code which is provided below. Let\u2019s start with a first quick overview. This is clearly a program written in C. It reads some input with gets(), then checks the modified variable and prints either a success or fail message."}
{"prompt": "What are the two local variables declared in the stack0 program?", "completion": "So obviously the goal of this level is to make the program print the success string. Note, this level is not about executing arbitrary code to gain root privileges. First we have to understand a couple of basics. A real full root exploit will come in later levels. So for now, let\u2019s focus on this smaller goal. We can also execute the stack0 program. And we can see that it seems to wait for some input, and then prints \u201cTry again?\u201d. Ok so let\u2019s have a more detailed look at the code. There are two local variables."}
{"prompt": "How can we identify the vulnerability in the program?", "completion": "An integer number modified, and a char array buffer with space for 64 characters. An array of chars in C is basically just a string. Then modified will be set to 0. And apparently never changed changed. Next is the gets function with our 64 character long char buffer. Let\u2019s have a look at the gets man page. So gets is used to read a string from the input. When we scroll down we can also find a Bugs section, which is telling us, to never use gets()! This cannot be more clear that this is the vulnerability in this program."}
{"prompt": "How can the variable \"modified\" be changed from 0 to a non-zero value in the stack0 level of exploit-exercises.com?", "completion": "As an explanation it says, that it\u2019s impossible to tell how many characters gets will read. It has been used to break computer security. And after the gets call, modified is compared to 0. If it is not 0, we have won. But how can modified ever become non zero? It\u2019s set to 0 and never changed. btw. the volatile is a way to tell the compiler, that it should not optimize the usage of this variable. Because at first glance it looks like modified will always be 0 and thus it might simply remove the unnecessary if-case."}
{"prompt": "What command can be used to disassemble the current function in gdb?", "completion": "But with volatile we can force the compiler to keep it as it is. I think we have a good understanding of this program now in C. Let\u2019s open it with gdb and start debugging. First let\u2019s set a breakpoint in main with break *main. Then type run or short r to start the program from the beginning. Now it stopped at the start of main. With disassemble you can disassemble the current function. But also set the disassembly-flavor to intel, because I like it more. Let\u2019s try to understand fully what is happening here."}
{"prompt": "What is the starting memory address of the stack according to the video transcript?", "completion": "I ignored those parts in my reverse-engineering introduction, but here we need to fully understand how the stack works. So let\u2019s start with the first instruction \u2018push ebp\u2019. A quick flashback to my CPU introduction video. I mentioned that the stack is just a memory area at the bottom. When we look at the mapped memory with \u2018info proc mappings\u2019, we can see that the stack goes from bffeb000 to c0000. And because the stack grows from the bottom, it starts at the highest address. c0000 doesnt belong to it anymore, so basically the stack starts at c0000-8."}
{"prompt": "What does the Intel instruction reference say about the leave instruction?", "completion": "which is bfffff8. So push EBP. EBP is a register which is used as the base pointer. And it contains an address pointing somwhere into the stack. esp right now is actually bffff7bc. And at that position is this b7something value. Ok so whatever the meaning of this address is, it seems to be important, because it get\u2019s pushed on the stack. Which is like saving the value. And at the end of the main function you find a leave. And the intel instruction reference tells us that leave is just basically a mov esp,"}
{"prompt": "What does the instruction \"pop ebp\" do?", "completion": "ebp and pop ebp. As you can see the start and end of a function is symmetrical. At the start we push ebp and mov esp into ebp. And when the function is done, we do the reverse. Don\u2019t worry, I will illustrate this nicely in a moment. Just one more little thing. After those two instructions we mask esp, which basically just sets the last 4 bits to 0, to keep it nicely aligned. Not that important. And then we subtract hex 60 from it. So ESP, the stack pointer now points to a bit lower address than ebp."}
{"prompt": "What are the 3 important registers mentioned in the video transcript?", "completion": "And the next instruction moves a 0 at the memory location at offset hex 5c from the stack pointer. And that seems to perfectly match our modified variable that gets set to 0. At first it\u2019s a lot to take in. But let\u2019s do it again but this time with an animation. So here on the left you can see the assembler code. And on the right I will illustrate the stack. with the 3 important registers, the instruction pointer EIP, the stack pointer ESP and the base pointer EBP. So first it starts somewhere else with a \u2018call main\u2019."}
{"prompt": "What value does the stack pointer hold after the address of the next instruction is pushed?", "completion": "Call will push the theoretically next instruction pointer onto the stack. And then jump to our main function. As you can see, when the address of the next instruction was pushed, the stack pointer got incremented and the address placed there. So now comes our push EBP. I will illustrate with some arrows that this value is a stack address, which points to another location on the stack. Now we overwrite EBP with the value from ESP. mov ebp, esp. Then we subtract hex 0x60 from esp. Look at the stack now."}
{"prompt": "What is the purpose of the stack frame in the main function?", "completion": "This area between esp and ebp is called a stack frame. This is now a small area of memory, that we can use for local variables and calculations inside the main function. And do you notice where EBP is pointing to? It\u2019s pointing to the OLD ebp. So this area here is basically the stack frame of the previous function, which called main. And we know that we move 0 into esp+0x5c. Which we think is the modified variable. And that\u2019s true. The local variables all have their space in this stack frame. And it\u2019s so big, because it had to make space for at least 64 characters and the modified integer."}
{"prompt": "What is the purpose of the 'leave' instruction?", "completion": "At the end of this function we will now perform a leave. Which moves EBP into ESP. Effectively destroying the previous stack frame. Then we pop EBP, which restores the previous stack frame. Isn\u2019t that amazing? But WAIT! it gets cooler. How do we now know where to return to from main? Well if you remember, call pushed the address of the instruction after the call. So the next value on the stack is where we want to return to. And the ret instruction is basically just popping this address into the instruction pointer."}
{"prompt": "What is the purpose of the LEA instruction?", "completion": "And thus jumping back where we came from. Computers. ha! aren\u2019t they mindblowing. So much smart stuff in there. Now let\u2019s continue with the assembler code. After a value on the stack got set to 0, we prepare the eax register with an address from the stack at offset 0x1c. LEA (load effective address) is similar to a move, but instead of moving the content of an register offset into a register, it moves the address of an register offset into a register. And this address then get\u2019s placed at the top of the stack."}
{"prompt": "What does the gets function take as a parameter?", "completion": "This is called calling convention. The programs and functions have to agree how to pass function parameters in assembler. In this case the parameters are placed on the stack. And the gets function takes one parameter, which points to a character buffer. and the character buffer is on the stack, thus we have to pass it the address where the character buffer starts. Afterwards we read the value we previously set to 0, and with test we can check if it is 0 or not. And branch off to print one of the messages."}
{"prompt": "What GDB command can be used to show the registers, stack and next two instructions when a breakpoint is hit?", "completion": "So let\u2019s remove the breakpoint form main with \u2018del\u2019 delete and set a breakpoint before and after the gets. Before we restart, I want to show you a cool trick. We will define a hook, that will execute some gdb commands when we stop at a breakpoint. To do this type define hook-stop then info registers to show the registers and x/24wx $esp. and x/2i $eip and finish with end. This will now print the registers, the stack and the next two instructions every time when we hit a breakpoint. Now restart the program."}
{"prompt": "How many characters do we need to write in order to overwrite the zeroes in the stack?", "completion": "Boom. first breakpoint. Now continue and enter a couple of capital A\u2019s. Do you see those hex 41s. those are all the As you have entered. Now let\u2019s see the content of the address we check if it\u2019s 0. Simply examine $esp + hex 5c. Still 0. But it shows us where it is located on the stack. and when we look at our stack, we see that our As are still a little bit too far away. So let\u2019s count how much we need. 4 characters here. Then 4 times 4 that\u2019s 16 for a row. And we have 3 full rows. And with the next full row we can apparently write into those zeroes."}
{"prompt": "How can we make the input for the stack0 program more convenient?", "completion": "So run again. Enter that many characters. I like to use recognizable patterns. So I can clearly see which letter which row is. looks promising. So a single step forward, and it will load the modified variable from the stack into eax. And indeed. Those are the characters that we entered. Let\u2019s try this without gdb. We can use echo and our previous string and pipe it into the stack0 program. Cool! it worked. Before we end, let me show you how we can make the input a bit more convenient thanks to python."}
{"prompt": "What syntax can be used in Python to repeat a character multiple times?", "completion": "With python -c we can specify a command that should be executed. Then we can use print and pythons cool string syntax which allows us to repeat this character multiple times. With this knowledge you should be able to solve stack1 and stack2. It\u2019s pretty much the same task, just with some different ways of input and a different vulnerable function. But if you invest some time, you can absolutely solve it. And I will not make a video about those. Next video will be about stack3. This is when things start to get juicy."}
{"prompt": "What type of Arduino-based access control system is being used in the lab?", "completion": "Let\u2019s check out our first reversing challenge in the \u201cdesert of reversing\u201d called Jumpy. If you haven\u2019t seen last video, you really should watch it, because we are about to read a lot of AVR assembler and we have to understand the AVR architecture a little bit. The description reads: We really need access to this lab, protected with an Arduino-based access control system. Our operatives obtained a flash dump from a non-personalized engineering sample, but we are having trouble reverse engineering it."}
{"prompt": "What is the prompt presented to the user when connecting to the board?", "completion": "Ah! That is great. So as we know, the .hex binaries we flash onto the board are personalized, or rather encrypted. So we can\u2019t disassemble them. But this challenges gives us a Jumpy.bin file, which presumably is a non-personalized version. So not encrypted. I also wonder what the name Jumpy could mean. Will the program jump around a lot to obfuscate what the password is. Or does it mean we have to use a jumper on some of the pins, of the arduino. Well, we will figure it out eventually. So let\u2019s load the challenge onto the board and connect to it via screen. We are presented with an Input prompt, and when we send some data it says: \u201cBetter luck next time\u201d."}
{"prompt": "What command can be used to check if the correct input password is embedded in the .bin file?", "completion": "Next we have a first look at the .bin file. With `file` we see that it is not a standard executable file format like ELF, so it\u2019s probably basically a raw dump of the memory. We can also quickly check with the strings command, if the correct input password is simply embedded in it. I had a little bit of hope for only 100 points, but it turns out, it\u2019s not in here. The next steps I will present look like I had a straightforward plan, but in reality what followed where hours over hours of looking at stuff all over the place, trying to understand this binary and there was a lot of frustration."}
{"prompt": "How can one use simavr to debug an AVR binary?", "completion": "It was the first time ever I had to reverse engineer AVR, and especially such lowlevel hardware stuff. So let me give you a short list what I setup and explored, and afterwards I tell you how I ultimately solved it. First I was looking into how I could debug this, because static analysis is always a bit harder if you don\u2019t know what to look for. And I quickly found simavr and installed that and tried to run the binary. It took some time to understand how I can run it. Ran into some issues with setting the frequency and a floating-point exception that I had to track down. But in the end I figured out how to use the simduino example, which basically simulates an arduino board. So that\u2019s perfect."}
{"prompt": "What is the difference between the simulated UART serial interface and the real address in the binary disassembled by IDA?", "completion": "To use that I had to convert the binary file to an intel hex format, like the arduino would expect. And then I could actually execute it. It also starts a gdb server you can attach to with gdb, but it has to be a special avr-gdb built included in the GNU AVR toolchain. With simavr you can also use picocom to interact via the simulated UART serial interface. But there were countless of issues. More about that soon. I also checked out the binary with IDA, luckily my ida license can disassemble AVR, but if you look at the addresses they increment by one, even though the opcodes are actually 2 bytes and you see here the real address."}
{"prompt": "What is the purpose of an interrupt table in AVR programming?", "completion": "So this was quite annoying to cross reference with debugging it in gdb. Because I like binary ninja I also installed a plugin somebody wrote to for AVR, because it\u2019s not supported by default, and that also kinda works, at least it displays the addresses so I can work with them, but it\u2019s a very basic plugin and doesn\u2019t identify a lot of functions, also doesn\u2019t really understand the interrupt table at the beginning. Btw, this here is an interrupt table. It\u2019s easy to guess because it\u2019s just a big list of jumps to somwhere else, and we can read in the datasheet which address is which interrupt."}
{"prompt": "What techniques can be used to reverse engineer AVR-based systems?", "completion": "So for example when the board is reset or turned on, the exeuction will start at 0. But you can have other interrupts triggered, for example from a timer, and then the CPU would start continue execution here and jump to the actual code that should be executed. Very typical for an embedded system. Anyhow, while I used all these tools during my exploration phase and experimented with them in the end I used radare, also mostly I read that a lot of people use radare a lot for AVR. I want to emphasize again, before I walk you through the solution, I had a lot of frustration with this. It will look kinda easy, but I don\u2019t even know how many hours and days I spend on learning AVR and getting things like simavr running. So don\u2019t be discouraged when you tackle a new platform or CTF challenge where you get stuck and have no idea what to do. I didn\u2019t have any idea either. But the satisfaction in the end from finally solving it after working so hard is worth it."}
{"prompt": "What methods can be used to analyze the Jumpy challenge in radare2?", "completion": "So here is basically my line of thinking after I started to understand AVR disassembly and also generally the hardware plattform. This challenge wants you to input a password over serial. And last video we have learned how that works on the low level. This means we want to look for locations where this special address 0xc6 is written to or read from. Because this is where single characters from the serial interface will be handled. We can open Jumpy with radare2, tell it that it is avr and we can analyze it with aaa."}
{"prompt": "What command can be used in radare2 to print the disassembly of a specific length?", "completion": "With pD we can print disassembly for a specific length, so we can simply print the disassembly of the whole binary and use the tilde, which is basically just grep, to filter lines that do something with 0xc6. And we find here two lines that load that address into register r24. Let\u2019s have a look at these two locations. The first one is at 0xea. So we can print the disassembly of the function this address belongs to. Pdf. Or we can also show a graph view with VV at that location. But I will stick with the linear view for now. We can also enable assembler descriptions as comments which are soooo helpful for reading AVR for the first time."}
{"prompt": "What is the purpose of register Z in the ATmega datasheet?", "completion": "So here you can see that 0xc6 is moved into r24. And that\u2019s it? It doesn\u2019t load from that address, it just loads the value into that register? Here is another weird AVR thing that took bit until I realized that. The value in r24 is moved into register 30. So now that register contains 0xC6. And then whatever value is in register 18, it is moved, stored into the memory location referenced by Z. We can check the datasheet of the ATmega again and read up about general purpose registers and we learn, that Z is simply referring to register 30 and register 31 combined."}
{"prompt": "What instruction is used to load the byte that is contained in the serial buffer?", "completion": "And 30 contains 0xc6, so whatever is in register 18 will be written into the UART buffer register and sent out via serial. So this is the location where one character is sent to the computer. These registers X,Y Z make this so annoying to read, until you can memorize which registers they refers to what. Anyhow, let\u2019s check out the other location. Here we can basically see the same, 0xc6 is loaded into register 24, which is then loaded into register 30, which is then used in the load indirect instruction to load the byte that is contained in the serial buffer."}
{"prompt": "What is the purpose of the function that reads the input line?", "completion": "So this is where our input is read. We can also follow the cross reference, which called this function and find this here. where if we look at the graph, see, that it apparently checks if the character is a carriage return or newline. And if not, will read the next character. Cool, so that function seems to read the Input: line. So the password check can\u2019t be far away, but the issue is, this function doesn\u2019t have any xrefs. No idea where this is coming from or where execution will go after it returns."}
{"prompt": "What value is loaded into the register r24 when a character 'A' is entered via the serial interface?", "completion": "So I now choose to debug this with gdb and simavr. First I start simavr, or to be more precise, the simduino example and use Jumpy in the converted hex format. This will also spawn a gdb server. So now I can use the avr-gdb to connect to this server, and we can see that execution is still waiting at the start. We can now set a breakpoint at 0x2ba, which is just before loading the value from the serial buffer. I can then use picocom to simulate serial input and I type a capital A, which will trigger the breakpoint here. Slowly stepping forward and I see the 0x41, which is our character A."}
{"prompt": "How can the bug in the AVR reverse engineering challenge be solved?", "completion": "So that works. Well\u2026 not really. this is buggy as it turns out. After reading the first character it will continue reading some rubbish in infinite loop and I couldn\u2019t figure out why. If I would send a newline immediatly, it would read that and continue, but I couldn\u2019t enter any more data. At this point, thank you so much bvernoux from IRC, that person created an issue on simavr and explained it. Turns out there is a bug where the emulator doesn\u2019t reset the flags that inidicate new data arrived, thus it constanly thinks that the serial buffer is full and reads from it. This patch solves this. So modifying the sources of simavr,"}
{"prompt": "What is the result of entering a longer string into the challenge?", "completion": "recompling it and now it works like a charm. Now we can actually enter a longer string. So the breakpoint I have set here is immediatly after reading the next character, so we can see that I entered the alphabet ABCDEF and so forth. We can continue until we read the carriage return from pressing enter. Now we can carefully single step forward, we go passed the check for a carriage return and return from this function. So where are we returning to? Turns out radare did not find this function, but that\u2019s not a problem, we can define a new one here."}
{"prompt": "What is the minimum number of characters required for the input string?", "completion": "When we look at the graph view we can immediately see a loop. And when the loop is done a compare with 0xd. I stepped through this and it turns out it\u2019s basically counting the amount of characters of our input string, so I assumed we need 13 characters for our input. If we look at what happens if this compare succeeds or fails we see that when it fails it will load a value from SRAM, perform an OR on it. Meaning that it will definitely set a 1 there. And then write this value back. In the case the compare would have been ok,"}
{"prompt": "What instruction is used to set the error flag if the compare fails?", "completion": "it would not do that. I didn\u2019t immediately catch that when I first looked at this, but afterwards it\u2019s pretty clear that this will set an error flag. Basically if you do something wrong with your input, it will set that flag and you failed. But even though our input will clearly fail eventually, we can step further. And see where this function will return to. And it turns out, what a surprise, it\u2019s also not a function radare2 identified. We can immediately see that there is also a compare that looks pretty much like the one from before. If the compare fails we set the error flag."}
{"prompt": "What is the first big breakthrough on how the password is checked?", "completion": "And if we debug this step by step we can see that from this SRAM location 0x135 and 0x136 it loads the letters \u201cH\u201d and \u201cI\u201d. Then adds the ascii values together, and compares the result with 0xd3. And this is our first big breakthrough on how the password is checked. If you continue this path you will find more and more functions like this. All of those take two characters add them together and check the result. There are many same functions, just with different character offsets. And when you keep stepping you also find a second kind of these, which multiply the ascii values of two characters. Otherwise it\u2019s the same. It checks the result of the multiplication."}
{"prompt": "What does the regex pattern represent in relation to the AVR reverse engineering challenge?", "completion": "So first step is to find all these blocks, which I did by printing a linear disassembly for the whole binary, copy it into sublime and used an ugly huge regex to find all functions that have this pattern of loading two values into r24. Then I copy them into another file and start cleaning them up until I have the important pieces extracted. Basically we now know all the rules. These two characters have to have this sum. These two characters have to have this sum. Thise two characters multiplied have to have this result And so forth."}
{"prompt": "What is the output of the Z3 solver when given the constraints described in the video?", "completion": "A super easy and perfect tool to solve this now is using an SMT solver like Z3. I won\u2019t go into much detail, as the video is already super long, but basically I just write a couple of constraints that express exactly that logic. The variable values represents our input character array and I say, the sum of character 7 and character 8 has to be 0xd3. The multiplication of character 4 and 5 has to be 0x122f. I write that all down, and let z3 solve this puzzle for me and I get a string that follows all these rules."}
{"prompt": "What address was hardcoded as the logger address in the game contract?", "completion": "In the first video I talked about how I approached this challenge and some of the thoughts and ideas I had. I\u2019d like to emphasize again that I worked on this for both days of the CTF, so I cannot include every small detail and struggle I had, but I hope I showed the important steps. At some point I was looking closer at the deployed contracts bytecode and transactions and noticed that the hardcoded logger address of the game contract was wrong. And so early on the second day I went to the organizers and told them that."}
{"prompt": "What technique did the author of the Acoraida Monica contract use to make the exploit successful?", "completion": "I thought all my attack ideas didn\u2019t work because of that. However the author then kinda dropped a hint because he said:\u201doh, but it doesn\u2019t really matter. The exploit doesn\u2019t need the logger contract\u201d. And I was like WHAT THE F\u2019\u2019\u2019\u2019\u2019. This is all just distraction? All the function signature collision, all the delegate call stuff here? All just unimportant. F\u2019 my life\u2026 He then also announced this hint publicly over the microphone, so that the competition stays fair and everybody knew about that as well."}
{"prompt": "What is the name of the plugin used to analyze the opcodes of the game contract in Binary Ninja?", "completion": "But for me this meant, back to square one. I was so lost\u2026 Out of desperation, also because I knew the trick must be here in the game contract, I decided to reverse engineer the deployed game contract binary code more closely, which I got through calling getCode when attached to the web3 API. Together with a teammate we were looking over the opcodes and stumbled over a backdoor in the TheAnswerIs function. Oh ship. So here is the call graph of this contract in Binary ninja using the etherplay plugin from trailofbits."}
{"prompt": "What value is compared to 1 Ether in the Acoraida Monica contract?", "completion": "If you go into the TheAnswerIsFfunction, follow it down, you find the first check. This is the isHuman check where it looks at the codesize. Following further the execution you reach some code that contains a SHA3 opcode, so that\u2019s the keccak256 call. So here it calculates the hash of your supplied answer and compares to the stored hash. After that we find another condition where the callvalue, so the ether you sent along the transaction, is compared to 0xde0b-blahblah, so this checks if you sent 1 Ether."}
{"prompt": "What is the purpose of the check on the calldatasize in the contract code?", "completion": "So far so good. It\u2019s exactly what you see in the contract code. But then we find a check on the calldatasize, so this is the input data you send with your transaction. This input contains the function signature you want to call including the parameters, serialized. And that size has to be 0xa0. If that is not the case, which is the normal case for this function, then you see here how the hardcoded address of the logger is loaded, it checks the extcodesize of the logger and either reverts (this is btw what happened last video when we played with the remix debugger),"}
{"prompt": "What binary operation is used to retrieve the last two bytes of the caller address in the Acoraida Monica contract?", "completion": "or everything is fine. But there are two weird things. First of all this code DOES NOT include the transfer of the ether if you win. It\u2019s simply not there in the bytecode. And instead we have this check of the input size which was not in the solidity source. So if the codesize is 0xa0, the caller address, so our address if you get to here, is loaded onto the stack, ffff is pushed onto the stack. Then a binary AND is executed, which leaves only the last 2 bytes of the address, and then it uses that value and performs a JUMP."}
{"prompt": "What is the purpose of the JUMPDEST instruction in Ethereum?", "completion": "This is the backdoor. You have here an arbitrary jump that you can control with the last 2 bytes of your address. The question is just, where do you to jump to now? And this is what I basically spent most my time on during the second day. In ethereum you can\u2019t just jump anywhere, you can only jump to addresses where there is a JUMPDEST instruction, which you see all over the place. So while there are a limited amount of places you can jump to, it\u2019s still a lot. And I just knew it wouldn\u2019t be one single jump, it probably must mean you have to CHAIN multiple jumpgadgets together."}
{"prompt": "What opcode is used to send away ether in an Ethereum smart contract?", "completion": "It\u2019s like ROP, or more like JOP, Jump Oriented Programming, but in an ethereum smart contract. So this means you have to find and reuse code that is already there, to send away the ether to your account. But the only transfer we know about from the original source, was missing in the backdoored binary code. You can only send ether away with something like a CALL instruction, so opcode f1, or with a DELEGATECALL opcode f4. While there were a few f1 calls, nothing looked good. But during this research I also found this \u201cbzz\u201d string."}
{"prompt": "What is the purpose of the bzz string that the solidity compiler appends to the end of a smart contract?", "completion": "And when you disassemble that then there is a JUMPDEST, so you can jump here AND there is a DELEGATECALL. WHAT THE F\u201d? Through a bit of research about the bzz string, I learned that this belongs to metadata the solidity compiler appends at the end of smart contracts. Encoding of the Metadata Hash in the Bytecode. And the challenge author made it so that the 32 bytes swarm hash contains a jumpdest and delagate call. This cannot be a coincidence. I swear this was done on purpose to hide a gadget. Problem was though, that jumping here right away, doesn\u2019t work, because the parameters that are needed on the stack for the delegate call don\u2019t match."}
{"prompt": "What can be found in the contract creation code that is sent along with a contract creation transaction?", "completion": "It will run into an error. So we need to jump somewhere else first, but I\u2019m SURE we must jump here at SOME point. One other small thing I found out was from disassembling the contract creation code which is sent along the contract creation transaction, and is different from the actual deployed contract on the blockchain. It contains the constructor code. So all this code actually deploys the backdoored contract but at the end we reach this jump relative to the program counter. And so we can calculate where it jumps to and disassemble the code there and it\u2019s very short."}
{"prompt": "What is the function signature for the withdraw() function in the Acoraida Monica contract?", "completion": "It simply pushes these 4 bytes on the stack, pushes another byte identifier on the stack and then stores this 4byte value in the contract storage at this key. For whatever reason I looked up these 4 bytes in a big database of solidity function signatures and it turns out this matches the function signature for withdraw(). Again, must not be a coincidence. One other thin I also remembered, were those weird characters in this one string. I also assumed, these must have purpose. And because these hardcoded strings are just in regular code of the smart contract, I assumed it contains ethereum bytecode."}
{"prompt": "What is the opcode for JUMPDEST in the Ethereum Virtual Machine?", "completion": "And there was actually a JUMPTDEST! The opening bracket is 5b, the opcode for JUMPDEST. So I thought we could jump there. I assumed that also MUST be a gadget. And this is as far as I got during the CTF. The last struggle I had was fighting with that I just couldn\u2019t jump there. It would always fail, even though there was a JUMPDEST! I was sad but also learned SO MUCH more about reversing. I later realized the problem was that the ethereum VM saw this as part of a large PUSH32. The 5b is in there, and the EVM doesn\u2019t allow to jump into the middle of an instruction."}
{"prompt": "How long did it take the challenge author to create the Acoraida Monica smart contract?", "completion": "But after the CTF I really wanted to talked to the challenge author. Because I wanted to understand how to solve it. So let me introduce you to him. But don\u2019t be fooled by his good looks. THIS IS THE FACE OF PURE EVIL, HE IS A MANIAC, WHO MADE ME SPEND PROBABLY 50 HOURS or more ON THIS CHALLENGE. He answered some of my questions, which was really nice and he was really happy that I enjoyed the challenge so far. He told me it took him a week to create it, and that it was the hardest challenge he could come up with."}
{"prompt": "What did the challenge creator tell the speaker about the malicious contract?", "completion": "Yeah I believe that. One of the things he told me, and I didn\u2019t notice that, that the weird string appeared twice. In the backdoored contract further down. There a few bytes different and so here there were invalid commands and so the JUMPDEST was in the clear and reachable. Dangit! Well.. after the CTF was over, after I talked to the challenge creator I also talked to the only team that solved it. 217. But unfortunately the person who solved it was not on-site, and they only knew that there was a backdoor, which I also already knew."}
{"prompt": "What motivated the speaker to continue working on the Acoraida Monica smart contract challenge?", "completion": "The small technical details were what I was struggling with. So I was still SO obsessed for not having solved this challenge, that back in hotel after the CTF, during our over 24h trip back to Germany, in the train home and then more hours at home, I just had to PWN THIS DAMN CONTRACT! At this point it wasn\u2019t about fun anymore. It was pure self-loathing. Driven by the hate about my stupid little brain who just can\u2019t solve this damn challenge. My own obsession and owing it to my team members for having spent all my time on this, did not allow me to give up."}
{"prompt": "What program did the speaker use to debug the smart contract during the CTF?", "completion": "Anyway\u2026 I solved... Finally\u2026 About a week after the CTF the challenge finally fell\u2026 I\u2019m free again. Before I walk you through that, I just want to mention a share a few notes on my experience testing and debugging smart contracts. I never really had to debug smart contracts beyond simple debugging with remix. So this complex setup of this backdoored contract and stuff like that was new to me. For most of the time during the CTF I was using this evm program to run the code and debug it, but there were a lot of these checks like answering the question correctly, which I couldn\u2019t figure out how to do."}
{"prompt": "What tools did the author use to deploy and debug their smart contracts?", "completion": "So I actually always patched the binary bytecode to ignore those checks. So that was very cumbersome. Eventually I realized I need more of a dynamic debugging environment and that\u2019s when I went through the trouble and used geth to run my own local environment and deployed the contracts there. I will link all my deploy and setup scripts in the description so you can just do the same. This is very cleaned up code but it was obviously VERY messy during the CTF. I basically just replay all the contract creation inputs that I extracted with my simple transaction logger."}
{"prompt": "What is the purpose of the debug API exposed by Geth in this context?", "completion": "However because I don\u2019t have the private key of the real admin, my contract addresses will be different. So a lot of the hardcoded values, like the logger address, and the function calls had to be adjusted. Oh, and I also added a few different accounts in the genesis block, so we have ether there to deploy the contracts. By having this local ethereum chain running with geth, we can also expose the debug api, which allows us to retrieve a detailed execution trace of transactions. So I could try to trigger the backdoor and then request a trace and look through what happened."}
{"prompt": "What is the python script used for in the video?", "completion": "I also wrote a small python script to just filter and more nicely display the important checkpoints of the trace. I really wish remix would support that. One other detail that is important is, that I forgot about the a() contrct which calls Start() on b. Which is a bit distraction because the real address for b is passed in dynamically, and I knew already that it passes in the address of the game contract. So it calls Start() on AcoraidaMonicaGame. So I forgot that in my local deployment script,"}
{"prompt": "What is the backdooring vulnerability the Acoraida Monica contract used?", "completion": "and only had the second transaction that calls start() directly, but that one used a longer answer. And the problem was, that this long answer was then the correct one for my local test, and the way the backdoor worked meant that the answer reached into one address used as another jump gadget. Blah blah. I just got stuck there. theoretically I knew that the a() contract was there which also called Start, but I forgot about it. And that contract was actually using the same question, but just used a single character as an answer."}
{"prompt": "What is the purpose of the a contract in the Acoraida Monica smart contract?", "completion": "And it was executed first. So that meant to answer the question correctly to trigger the backdoor, the answer was short, and in reality there was never a problem with the long answer. But that little mistake cost me probably another 8-16h of running in circle, trying to find another backdoor, or using the existing backdoor to somehow set a short new answer. And then in a second stage do the actual exploit. But that was wrong because like I said, I\u2019m so dumb and forgot about the a contract. So the purpose of the a contract was another obfuscation trick used by the author, because this transaction doesn\u2019t immediatly look on first sight like it would call Start(),"}
{"prompt": "What character must be inputted in the constructor to enable the attack?", "completion": "but it actually does, in the constructor. Long story short, the real answer for the question is just a single character \u201cr\u201d. And the second call to start was just distraction and at the same time a way to transfer the ether we have to steal to the contract. Anyway\u2026 this is the final payload. The whole attack actually requires an additional contract, an attack contract that I have to deploy first, but let\u2019s look at that contract once we reach that step. Now just lean back and enjoy the ride of what this input does."}
{"prompt": "What is the function signature being used in the transaction to call the TheAnswerIs() function?", "completion": "This sends one transaction with 1 Ether, using this payload as input, to the AcoraidaMonicaGame contract. So first of all we see the function signature that is being used. 0x46a3ec67 So that\u2019s just calling the TheAsnwerIs() function. We can follow this here in binary ninja. Then comes the isHuman check. But this is a normal transaction, no contract, so perfectly fine. After that we get the SHA3 calculation again and the equal, and we know now from the obfuscated Start() call, that our answer is just one byte long."}
{"prompt": "What is the purpose of the padding in the malicious contract?", "completion": "A single \u2018r\u2019. After that it checks the call value, so if we sent one ether, and that is also fine. Next we check the calldatasize. It has to be 0xa0, so 160 bytes long. And yes, I made the payload exactly 160 bytes long. That\u2019s why there is a bit of padding. And now we enter the backdoor code. It takes my address, apply the FFFF and, leaves the last two bytes of my carefully chosen address. 0x5e6. I wanted to jump there because we identified that as an interesting gadget earlier inside of that weird string here."}
{"prompt": "What is the public address of the private key used for the malicious delegatecall transaction?", "completion": "And so I wrote a small script to bruteforce a private key until I get these two last bytes. So this private key that we use for this transaction has this public address. Anyway, this means we continue execution in our first JUMP gadget at 0x5e6. This gadget was carefully created by the author and it prepares the parameters for the delegatecall gadget, I showed you earlier. So for example this will actually load a function signature from the contract\u2019s storage at 262a, which if you remember was set at the injected constructor code."}
{"prompt": "What does the CALLDATALOAD function do in the context of deploying a smart contract?", "completion": "So this actually loads the function signature of withdraw(). It also calls CALLDATALOAD to load the address of the target contract from your input and puts it onto the stack. So the address here in my input is actually the contract that is being called if we execute a delegatecall. And this is how the stack in the end looks like, this whole gadget inside this string is just to prepare the stack carefully. So this is the GAS for the transaction, the target address, and then some parameters that define the input data."}
{"prompt": "What is the purpose of the delegate call gadget in the Acoraida Monica contract?", "completion": "So the withdraw() function signature. And the other calldataload loads the next jump address, also from the input. It\u2019s this value here, and this is also where the error happened that caused me to run in circles. If the answer would be super long, the answer would reach into here. And because the ethereum VM works on these 32byte values, that JUMP address was obviously completely wrong. But now it\u2019s fine. And this address for this jump here, points at the delegate call gadget, we found in the contract metadata which the compiler placed there."}
{"prompt": "What does the malicious contract in the video do?", "completion": "we jump there, and execute delegatecall. So this will call now into the contract I defined here. Now let me show you this attack contract I mentioned at the beginning. this is how it looks like. I simply define here the player and the game contract address. And then we have the withdraw function that it wants to call. So this will be called. And it\u2019s simple, it just performs a transfer with the balance of the game contract, so all the ether from the game contract, and transfers it to our player account."}
{"prompt": "What is the purpose of the delegatecall function in Ethereum smart contracts?", "completion": "This works because of delegatecall. A delegatecall is a special call which basically means you still operate in the environment of the original contract, but execute the code of the other contract. And so if we delgatecall this withdraw function, and do a transfer, it\u2019s as if the game contract would have done the transfer directly. So that allows us to send ether away. But to make sure this transaction actually happens, we have to ensure that the code doesn\u2019t run into an error and reverts. So you probably wonder what that weird huge return value is, but it\u2019s also carefully chosen."}
{"prompt": "What happens if the delegatecall returns a value?", "completion": "So when we return from the delegatecall it will load another jump destination onto the stack, which when debugging we can see jumps to 0x49d. And there we see a load which actually loads the return value from the delegatecall and then performs an ADD. If we hadn\u2019t returned a value, or for example when you do a selfdestruct instead of a transfer, which I originally tried, this would be 0, and we would perform 0x4b1 + 0 and jump to 0x4b1. And that would then continue in the original execution flow, with the logger contract and eventually it will run into a revert."}
{"prompt": "What is the hexadecimal value of the integer overflow that is used to jump to a clean exit in the ROP chain?", "completion": "So to avoid that we have to return a value from the call, so that when it adds the return value on 0x4b1, it will actually jump somewhere where the contract gracefully stops and commits all the transactions. So like a clean exit in a ROP chain. And so here we just do an integer overflow with the add of ffffbe7, or more like a subtraction of -0x419, and the result is 0x98. Jumping there means it leads to 0x99, and this is where it STOPs. BOOM! Now the blockchain recorded the transfer of all the ether from the game contract to the player contract."}
{"prompt": "What practical experience and insight did the speaker gain from solving the Acoraida Monica CTF challenge?", "completion": "Here I queried the balance of the game contract before, and here afterwards. F\u2019 YEAH! The game contract is empty. And we won. This was probably the hardest CTF challenge I have solved in a long time. And some of you might think that it was a waste of time to spend dozens of hours on this. I can\u2019t really show everything in these videos, but you have to remember that I didn\u2019t know all what I explained before, and I gained SO MUCH practical experience and insight into the ethereum VM. I kinda understood smart contracts before,"}
{"prompt": "What is a regular expression pattern used for?", "completion": "A regular expression, in simple terms, is a pattern that can match a string of characters. For example /abc/ would first look for an A, then a B and then a C. You could also draw this pattern as a finite-state automaton. This is the kind of theoretical stuff you would learn when you study computer science. So we start here, then we can move to the next state when we see an A, to the next when we see a B and to the last one when we see a C, which means we match the string. And obviously if our string would have been A,X,C instead, then we would find the A and move forward, but there is no path for the X."}
{"prompt": "What website can be used to translate finite-state machines into text-based regex patterns?", "completion": "So our pattern doesn\u2019t match the string AXC. And if you think about regexes as these graphs, all the other features of regex become very clear. So it\u2019s really helpful to draw this, if you find a more complex regex you don\u2019t understand, or if you want to come up with a regex yourself maybe start drawing a finite-state machine instead. And then translate it into the text version. There is this really awesome website called debuggex which basically does exactly that for you. And I use it all the time because regex are often used to validate input, and it can be really helpful to see if you can somehow get malicious input through."}
{"prompt": "What techniques can be used to bypass the invisible wall around the stage in the Palais de Congr\u00e8s on the Emmanuel Macron Minecraft Server?", "completion": "Do you know where I am? I\u2019m on stage in the palais de congres on the official Minecraft Server from French\u00a0 president Emmanuel Macron. Usually you cannot walk on the stage, there is an invisible wall. But\u00a0 with some teleport hacks I can teleport into it. In real-life, breaching the security of the stage\u00a0 from the president would probably result in me getting visited by the french secret service, but\u00a0 here on this minecraft server this is harmless. Minecraft is an awesome game to learn hacking, in\u00a0 a playful, legal and ethical way. I\u2019m LiveOverflow and usually I make videos about IT security. So if\u00a0 you want to explore with me the awesome technical side of minecraft, reverse engineering,\u00a0 fly hacking, teleporting, seedcracking,"}
{"prompt": "How can a user gain root access in a CTF challenge?", "completion": "So I was browsing reddit, and this new CTF for beginners popped up. Obviously I had to check it out and directly head to my favorite category, the binary exploitation stuff. And of course there is a server you can connect to as a regular user, and when you exploit a challenge you will elevate privileges to another user to gain access to the secret flag. But the biggest challenge of all, and I couldn\u2019t find rules that would forbid this, would be to gain root. So let\u2019s do that. Remember my dirty cow explanation video?"}
{"prompt": "How can we verify that the dirty cow exploit works on a server?", "completion": "Let\u2019s use the proof of concept exploit that we had there and test if it works on this server. So we can simply copy this code to a file in tmp and compile it. To test if we can overwrite files that don\u2019t belong to us, without overwriting critical root owned files, we log in as another challenge user on the system, create a file with some content. And then we go back to the first user, execute dirty cow on that file and attempt to write some other characters to it. And when we check, we can see that it works."}
{"prompt": "What is a common method for gaining root access on a vulnerable server?", "completion": "At this point I wrote the author a message on reddit to inform him that the server is vulnerable and he should quickly update. But now we need a plan what root file we could overwrite to become root ourselves. Our restriction is, that we have to overwrite something in a file, we can\u2019t append or prepend anything. The first obvious idea would be a setuid binary, but the issue is that in order to write a backdoor shell to the binary, we would have to parse the elf file format and figure out where the entry point is."}
{"prompt": "What is the offset of the pwn1 user in the /etc/passwd file?", "completion": "An easier strategy is to overwrite data in a text file. And I chose /etc/passwd. You can see here the user id of the users, and if we would change the uid of the pwn1 user to 0, we would login as root. So. The dirty cow proof of concept writes to the beginning of the file. So first we have to figure out the offset inside of /etc/passwd. We can use hexdump for that and count a little bit. So pwn1 user is at offset hex 4c0 plus a little bit. I use python as a caluclator and modify the exploit code to write to a fixed offset."}
{"prompt": "What is one step that should be taken when using the Dirty COW exploit?", "completion": "I think here would be a good plan. And you have to be very very careful with choosing these offsets and choosing what to write, because you can screw up the whole system if you don\u2019t. So I copy /etc/passwd to try what I want to do before doing it to the real binary. And of course, my first attempt would have wrecked the system. So adjusting the offset a bit and also appending a newline at the end is finally successful and I write to the real /etc/passwd. Now when we switch to pwn1 or ssh login to pwn1, we get a root shell."}
{"prompt": "What precautions should be taken when exploiting a system with the Dirty COW exploit?", "completion": "Then we can read out all flags. Once we are done, we revert back /etc/passwd to the original state. Some important notes. Be very very careful what you overwrite with an exploit like this. Just one byte miscalculated, and you might destabilize, crash, DoS the system or simply lock yourself out. Also if you find a server vulnerable, think about the impact or context you are in. This small private CTF server project, that is intended to be hammered is different from a webserver you exploited from some random company."}
{"prompt": "Is ProtonMail able to provide any guarantees of end-to-end encryption?", "completion": "Nadim Kobeissi has written a paper called \u201cAn Analysis of the ProtonMail Cryptographic Architecture\u201d where he says that \u201cno end-to-end encryption guarantees have ever been provided by the ProtonMail service\u201d. This is quite a big and serious claim. End-To-End encryption is the first feature they list in their security details, along Zero Access to User data, which means: \u201c[...] we don't have the technical ability to decrypt your messages, and as a result, we are unable to hand your data over to third parties."}
{"prompt": "What cryptographic architecture does ProtonMail use to ensure privacy?", "completion": "With ProtonMail, privacy isn't just a promise, it is mathematically ensured\u201d. Protonmail has been around for quite some time now, if something so fundamentally seems wrong, it must be some kind of crazy complicated crypto attack, right? But if you read the paper, you will realise it\u2019s something fairly basic. So in this video I want to explore one specific thing from this paper. This whole topic has caused quite some controversy and before we head into this I think it\u2019s just fair to disclose that I have worked,"}
{"prompt": "What encryption protocol does ProtonMail use to secure emails sent between two users?", "completion": "with nadim, many times professionally. So you can accuse me of bias, but I don\u2019t think that this actually affects the content of this video. It was merely the reason why I paid attention to this paper in the first place. But let\u2019s not waste more time, let\u2019s head into the paper. Nadim first introduces some entities. We need to know about a ProtonMail user A and a ProtonMail user B. We also consider a ProtonMail webmail server P. So we have two protonmail users A and B, and they want to send an email to each other by using protonmail webmail sever P. Because Protonmail offers End-to-end encryption this email will actually be encrypted with PGP."}
{"prompt": "What public key exchange methods can be used to ensure secure end-to-end encryption when using ProtonMail?", "completion": "And there is nothing wrong with PGP. The only challenge with PGP here is the secure exchange of the public key. But we just assume keys were exchanged securely, for example A and B met in person before. So if user A encrypts the mail with the public key from user B, and uses Protonmail to transfer the mail to B, there is no security issue. End-to-end encryption is working fine. But then how can nadim claim that \u201cno end-to-end encryption guarantees have ever been provided by the ProtonMail service\u201d."}
{"prompt": "What does Figure 2.a. in the paper Analysis of the ProtonMail Cryptographic Architecture illustrate?", "completion": "It looks all perfectly fine, right? Well, the devil is in the real-world implementation details. You see this graph that describes the email exchange assumes that User A and User B just have trusted implementations of PGP. The code that will do the encryption for them. However in the web, just as matter of fact how the web works, the program, the code that implements the encryption, the webapp you use, protonmail, is also delivered by the protonmail server P. And this can be seen here in Figure 2.a."}
{"prompt": "What is indicated by the letter 'J' in the paper's analysis of ProtonMail's cryptographic architecture?", "completion": "Before user A can PGP encrypt the email message m, for the public key from user B, it has to receive the code to do that in the browser. This is indicated here by J. J refers to the Javascript implementation of PGP that is served by Protonmail. And, we are done, that\u2019s for me the important part of the paper, so the conclusion is simple. When Protonmail says: \u201c[...] we don't have the technical ability to decrypt your messages\u201d. It\u2019s kinda wrong, right? Technically they can just deliver a malicious javascript J-evil, that will just steal your plaintext message before encryption, or just straight up steal your private key\u2026 The technical ability is absolutely there."}
{"prompt": "What is the opinion of Nadim Kobeissi regarding whether web applications can constitute end to end encryption?", "completion": "And so the claim that this \u201cend-to-end encryption\u201d is not just a promise but \u201cmathematically ensured\u201d. seems objectively, false. No? So let\u2019s have a look what Protonmail has to say about that. The key question being debated is whether or not web applications can constitute end to end encryption. Nadim's opinion is that, as he writes, \"no webmail-style application could\". His viewpoint is that E2EE is not possible with web clients, period, end of discussion. This is a rather extreme position to take as it would also apply to the web versions of Whatsapp or Wire, for instance."}
{"prompt": "What arguments does Nadim Kobeissi use to support the opinion that end-to-end encryption cannot be implemented in a webapp?", "completion": "Like Whatsapp and Wire, we also offer a web app. The major opinion Nadim is expressing here is that [...], you can't do end-to-end encryption in a webapp. Obviously Whatspp and Wire do not share this opinion. Signal coincidentally does share this opinion. We do understand Nadim's arguments, and agree that web-apps are less secure than say a native iOS app. Okay\u2026 so they do somewhat agree, however they think it\u2019s not that significant. They use the fact that Whatsapp and Wire also offer webapps, as an argument for their side - but of course these are also other commercial applications, that like protonmail have a user demand and an economic incentive, to offer web-app versions."}
{"prompt": "What security vulnerabilities does ProtonMail face in its cryptographic architecture?", "completion": "But for a moment, let\u2019s go back to this figure. We say we have here a problem because Protonmail Server P provides the javascript code, for the browser and could thus provide malicious code as well. But then how is this different from a mobile app. Protonmail also provides the mobile app and the automatic updates for it. So protonmail could also just deliver an evil app-update that steals the cleartext emails. And you can now actually continue with this rabbithole. Apple offers iOS updates, which means they push the code you run on your phone - they could create an operating-system update that specifically extracts the decrypted emails from the protonmail app and sends it away."}
{"prompt": "What security risks are associated with malicious mobile-app updates?", "completion": "And wait, you run this all on hardware that you bought from somewhere and the CPU could just once in a while jump to some secret malicious code that could take the decrypted messages out of the memory and steal it. You see you can extend these circles quite far. However at some point it gets silly. While technically your hardware could be backdoored, that\u2019s very unlikely. Like the recent bullshit bloomberg story. And yes, technically apple could push a malicious operating system update, but that is also super unrealistic\u2026 But what about \u201cprotonmail creating a malicious mobile-app update\u201d?"}
{"prompt": "What are some examples of hurdles that can make a server or webserver that offers a final software for download vulnerable to a trojanized version?", "completion": "Here we start to get into a bit more realistic realms. build servers or webservers that offer the final softwares for download have been comproised before and replaced with a trojanized version. This is something we could be concerned about. However we also know these compromised versions are caught fairly quickly, because this attack has quite some hurdles. And Nadim shares an example about the delivery process of android apps. Simply speaking, in case of a mobile-app, it\u2019s not as simple as saying that Protonmail server P delivers it, there are developers,"}
{"prompt": "What is the threat posed by websites being compromised and cryptocurrency coinhive miners being included in the javascript?", "completion": "signing keys, app-stores, and everybody gets the same new version. So overall this is very unlikely. So this leads us to typical web applications, which are delivered from the server everytime when you access protonmail. We know for a fact that a lot of websites get compromised and for example a cryptocurrency coinhive miners get included in the javascript. So we can already see that this is a more realistic threat. And the big danger here is also, that you could carefully control which user gets delivered which version."}
{"prompt": "What is ProtonMail's argument against the paper by Nadim Kobeissi?", "completion": "You could only target a specific IP, a region, a user. And only deliver a malicious javascript J-evil once. And after that, all future requests are safe again. You see that is VERY different from a malicious mobile app. And so protonmail questions if the line that nadim draws here reasonable. Can we, for the current state of our technology say, that webapps cannot implement End-To-End encryption because the code is also always delivered with HTTP requests? Well, PotonMail\u2019s argument against the paper is saying, that this is just an opinion - saying that nadim draws the line here arbitrarily."}
{"prompt": "What are the arguments made by Nadim in his paper regarding ProtonMail's cryptographic architecture?", "completion": "Nadim's opinion is that, as he writes, \"no webmail-style application could\". But this is a bit unfair. This quote is not the root of nadim\u2019s argument - it is quite an extreme positon to take. But he takes this position as a result of his argument, this is nadim\u2019s conclusion. And while I agree with conclusion, let\u2019s not get distracted by this. Conclusions are more likely subjective and thus Protonmail uses it to discredit him. But nadim wrote a paper specifically about Protonmail and we have to look at his actual arguments regarding protonmail."}
{"prompt": "What security measures has ProtonMail implemented to protect users' passwords?", "completion": "And more specifically the claims that protonmail makes, and nadim uses to construct his argument. So Protonmail attacks nadim\u2019s general conclusion but seems to ignore, and sidestep, the claims that lead nadim there. But I know why, because ProtonMail is in a predicament. They themselves acknowledge nadim\u2019s threat in their business paper \u201cProtonMail Security Features and Infrastructure\u201d, they write: ProtonMail conservatively assumes that all mail servers may eventually be compromised. And even further into the paper where they talk about how they want to protect passwords (different story) they again refer to this threat."}
{"prompt": "What security model does Protonmail advertise for their mobile app?", "completion": "\u201cIf the server is compromised, whether from malicious code injected onto the server or due to a [blah blah unimportant]\u201d you can see Protonmail themselves claim that the Protonmail Server P is untrustworthy. And based on this claim nadim succesfully makes the argument, well if Protonmail can be compromised (which they say shouldn\u2019t be a problem), the javascript code delivered is also compromised. Protonmail does not make such claims about the mobile app. They don\u2019t advertise a security model where a compromised build queue including developer signing keys is not a problem."}
{"prompt": "Is it possible to implement end-to-end encryption in a web browser?", "completion": "But they do say a compromised server P is supposed to be safe. So as it stands, ProtonMail does not meet its self-professed security goals. Which means, ProtonMail must overhaul its existing specifications, documentation and product presentation materials. To reflect this matter of fact. So It doesn\u2019t mean that Protonmail is less secure than alternatives, it simply means Protonmail\u2019s very high security-goals and public marketing claims, specifically about a compromised server, have been refuted."}
{"prompt": "What conclusion does Nadim draw from his analysis of ProtonMail's cryptographic architecture?", "completion": "Nothing more. Nothing less. And of course if for YOU personally a compromised protonmail server is not in your threat model, because you trust them, then you are also fine. So I hope that Protonmail can properly address these very specific claims and admit that in this case their claims fall a bit short. It doesn\u2019t have to be such a big deal. But I personally would like to move away from Protonmail now and rather generally ask, what conclusion do you draw from this. Do you agree with nadim\u2019s radical(?) or reasonable(?) view that end-to-end encryption is simply not possible in this strong mathematical sense as a web app?"}
{"prompt": "What is the XOR loop in the code that is visualized with a drawing?", "completion": "Last week we started to work on the Nintendo HIREME! Crypto or keygen challenge. And we basically just spend time trying to understand the algorithm and thinking about ways how we might be able to attack it. So if you want a bit more context, feel free to watch that other video first, otherwise we will now go and solve it with math. So remember when I tried to visualize this XOR loop in the code with this drawing here? Basically showing that each byte of the input array, is the result of XORing multiple out bytes."}
{"prompt": "What method did the speaker use to find a solution for the Nintendo HireMe.cpp challenge?", "completion": "But which outbytes get XORed, is selected by this bitmask. Well. what made it click for me was when I decided to write down the same information differently. Changing the way how I present this information to myself, helps me find a solution. And I think this is a huge takeaway. I didn\u2019t get magically smarter, I just tried to approach the same thing from a different angle. I didn\u2019t know that it would help me for the solution, but in the end it\u2019s what made my brain click. So long story short, what did I do?"}
{"prompt": "How is P, Q, R, and S calculated in the Nintendo HireMe challenge?", "completion": "I decided to write down one part of the algorithm in a function notation like in math class. I started from the end of the algorithm again. And As we know. a byte in the out array, is the result of XORing two values. Call it P and Q for now. And the next value in out is the result of XORing R and S. of course the out array is longer, but it\u2019s just an example. Alright. So how is P, Q, R and S calculated. This is just an example, it\u2019s not the real values. But P is calculated by XORing different out values selected by the bitshifting diffusion expression."}
{"prompt": "What technique is used to create the variable Q and R in the Nintendo HireMe.cpp challenge?", "completion": "So for example it might take the first out byte XOR it with the second and the third. And now Q has a different selection of out bytes. It might not include the first out byte. So maybe it\u2019s XORing the second and the third one. And now R could include the first out byte, but not the second, but include the third again. And what I now saw, blew my mind. I wonder if anybody here now recognizes this. Or even recognized this much earlier just reading the code. I didn\u2019t recognize this before. I only recognized it after writing it down like this."}
{"prompt": "What is the technique used to solve the Nintendo HireMe.cpp challenge?", "completion": "What do you see here? This looks like the math you had to learn in like the 8th or 9th grade or so. This looks like a System of linear equations. Imagine it like this P = a + b + c ; Q = b + c ; and R = a + c. This looks like very basic school math, right? if we know the values of capital P,Q and R, then we can solve this system of equations to find out the values for the variables a,b,c. Which means if we know the internal state of the input array, which is basically those values, we should be able to find the values of the out array through highschool math."}
{"prompt": "How is matrix math used to solve a system of equations?", "completion": "But applying this math efficiently requires a bit more experience than just high school. Or rather, I don\u2019t remember when Matrix math stuff is taught. Is it in highschool? or maybe just college? Anyway. There is a very efficient way of solving linear equations using matrices. I found a very simple and clean example of this on this mathisfun website. Let\u2019s say you want to solve this system of equations. You write it down as a matrix. For example x,y and z are there only once, so it\u2019s a 1. And then x was missing in the second equation and that\u2019s why x was basically multiplied with 0."}
{"prompt": "What is the equation used to solve the unknown values of xyz in the Nintendo HireMe challenge?", "completion": "Whatever... you can pattern match it\u2019s simple to translate these equations into this matrix. And like you can rearrange a basic equation, you can rearrange those matrix equations. This is like A times X = B. And to find now the values of the unknown xyz, we can rearrange X to one side and then on the other we have the inverse of A times B. the inverse of a matrix is a bit ugly and annoying to calculate by hand, but computers are REALLY really good at that stuff. And suddenly I have a super clear plan, at least for this stage of the algorithm."}
{"prompt": "How can matrix math be used to find the output array when an input array is given?", "completion": "I simply want to use matrix math to find the outarray, if I have an input array. Now I want to reference a video I did quite a while ago, about a CTF challenge called software update, from the 34C3 CTF. Because there my teammates also had to solve a system of linear equations made up of XORs, and they did that with sage math. Which is a computer algebra system, built on top of python. And this was my basis trying to write my own code in sage. I have never written sage on my own before. Now developing this was not straight forward to me, because I\u2019m a noob in math."}
{"prompt": "What is the significance of the XOR operation for the challenge when it comes to the Gallois Field 2 (GF2)?", "completion": "I can reason about it somewhat taking notes like this, but practically implementing this in code, is another beast. From the software_update challenge, I learned that the XOR operation acts like the addition operation if you are in the Gallois FIeld 2 GF(2). Fancy name, watch my other video if you want to know a bit more. Essentially it just means we live in a world of 0 and 1. No larger numbers exist. So I somewhat knew that it should work if I restrict the matrix to GF2, because then the plus is equivalent to XOR.."}
{"prompt": "What is the difference between solving XOR equations with a byte level versus a bit level?", "completion": "I was playing around with code but it didn\u2019t work and I got frustrated and eventually I had to ask my teammates. Which started a discussion that XOR is not a linear operation. Which means you can\u2019t solve XOR equations with this method, at least on a byte level. However my GF(2) thoughts still applied. If I calculate on the BIT level, then it works. So essentially instead having a matrix, or a vector of for example three bytes, I need a vector of 3 times 8, so 24 bits. Which means it\u2019s not a system of three linear equations, one for each byte, it\u2019s a system of 24 linear equations, defined for each individual BIT."}
{"prompt": "How does the code create a matrix of 32 rows?", "completion": "Or in reality with our 32 bytes, we have a system with 256 single-bit equations. And here is my super ugly code for this. This long hex string is actually a test value I have gotten straight from the program. I printed the internal state of input and out before and after the XOR calculations. So this value is the result. And when we solve our system of equations we expect the output bytes to be this value here. Anyway, this line of python code is incredibly ugly. But this simply creates a matrix of 32 rows,"}
{"prompt": "How does the solve_right function work in the Nintendo HireMe challenge?", "completion": "each row being the bits of one byte. So that\u2019s the B matrix, the expected result. Now we need to create the A matrix, which are the 1s and 0s from the diffusion array. These integers define which out array elements are XORed. And we also extract the 32 bits of those 32 integers. This will create a big matrix. Please note that both matrices are defined over GF2, so that the addition operation is equivalent to the XOR operation. And now we can call solve_right on the matrix A, with B. This essentially is like the inverse of A times B. You could quite literally also write here, take the inverse of A and multiply by B. Whatever."}
{"prompt": "What method is used to recover the internal state of the confusion array?", "completion": "Now that we have calculated X, we can go through the rows, which are rows of bits that we can combine to bytes and print them as hex values. And look at the resulting hex values. They are the same as we have seen when executing the program with the debug output. 1c, c6, 24, 23, and so forth. So this worked! This means, if we get a candidate for our internal input array, we have now a method to recover the internal state of out. Out was the result of substituting the bytes using the confusion array."}
{"prompt": "What is the maximum number of times we need to loop in order to solve the equation systems and find the original input array?", "completion": "Which we know we can somewhat reverse. As mentioned in the previous video, there are bytes that cannot be reversed, in that case we can just reject this guess and try something else. Other bytes have multiple options, which means we get multiple candidates for the input array here. But all of this can be done in a loop of 256 times, so we just have try to reverse solve these equations. And if we successfully solve 256 equation systems in a row, we find the original input array that we want. Awesome!"}
{"prompt": "How can we optimize the bruteforce of the 16 bytes at the start of the Nintendo HireMe.cpp challenge?", "completion": "We are getting really close. Now I still haven\u2019t figured out how to optimize the bruteforce of the 16 bytes at the start. But once we have a candidate, we have a way no to check it\u2019s our solution. I still think that bruteforcing those 16 byte candidates will take wayyy too long though. But I decided to try it anyway. So how do you bruteforce those 16 bytes? from the confusion substitution, we know that not every byte can be reversed, so we only include the bytes where we have a reverse. And there are different possible values for the even and odd numbers."}
{"prompt": "What is the purpose of using a theorem prover like z3 in solving the Nintendo HireMe.cpp challenge?", "completion": "You can see that the confusion substitution array is 512 large. And when it applies the substitution, then the even indices are taken from 0 to 255, and the odd indices get added an offset of 256, so the odd ones are substituted with the bytes from 256 to 511. But this is allll annoying to do by hand and my solution actually uses z3. Z3 is a theorem prover, or SAT solver. And I have used z3 on this channel before. If you are interested in cracking license key verifications or custom ciphers or stuff like that, z3 can be a very useful tool."}
{"prompt": "What is the purpose of the sbox function in the Nintendo HireMe.cpp challenge?", "completion": "And I use it as a generator of input candidates. It\u2019s very simple if you get the hang of it, so let\u2019s look at my solution. First I generate a reverse index of the confusion array. I create s1 and s2 which map from a byte back to the potential inputs. The function sbox takes a list of bytes and attempts to reverse them using the s1 mapping. It will be used for the substitutions done here. If a byte cannot be reversed, then this returns None, which means whatever we tried to reverse was definitely invalid."}
{"prompt": "How can we keep track of all possible reversals when some bytes can be reversed to multiple bytes?", "completion": "Otherwise we use itertools.product, to return all possible reversals. Remember that some bytes could be reversed to multiple bytes, so we need to make sure we keep track of all possibilities. The inp_to_out function is the magical matrix function, which takes an input candidate and then solves the equation system for Y. And we return that result. The heart of my solution is solve_round which is a recursive function. It expects to be given a potential input array candidate and then uses inp_to_out to find the internat out values."}
{"prompt": "How many times does the solve_round() function need to be called in order to find the solution to the Nintendo HireMe challenge?", "completion": "Once we have that it\u2019s actually not quite the out array, because remember it was substituted first, so now we try to reverse the substitution. If it cannot be reversed, then we just ignore this and return None. If there are valid substitution reversals, then we have to go through all possible combinations and call recursively solve_round. And this recursion has to succeed 256 times. If we called solve_round 256 times the round_i will be -1 and the input we have found is infact the solution. Now this function expects a input key candidate,"}
{"prompt": "What operation is used to determine the first letter of the target string in the Nintendo HireMe.cpp challenge?", "completion": "so how to we get those. And this is where we get to z3. We are basically looking for the last internal input array, that results into the \u201cHire me!!!!\u201d string, that can then be reversed using the matrix equation solving 256 times. So this is where we prepare the z3 bit vectors to be our input candidate. Now comes the real z3 magic. We are adding an equation to z3 based on our target string. We are saying, the first letter here, capital H, is the result of xoring two input bytes. Just FYI in case you are confused about this operation, we are using sage here, so it\u2019s a bit weird python."}
{"prompt": "What is the difference between using a single caret and a double caret in Sage?", "completion": "Usually a single caret is XOR in python, but that is to the power to in sage. And the xor is now the double caret. Anyway. By adding these constraints, we can tell z3 to give us valid values for input, that satisfy this equation. Which means we only get selections that are valid. Selections that can be xored to get HIRE ME. But there are more constraints we can add. Because the values that are XORed are the substitution result, so we need to make sure those input bytes can be reversed! So here I\u2019m looping over the reverse substitution list and if a byte is not included in s1 for the even, or s2 for the odd indices, then we are adding a constraint that the input at a given index MUST NOT be that value."}
{"prompt": "What is the process for solving the Nintendo HireMe.cpp challenge using linear algebra?", "completion": "With that setup of constraints we can now let z3 solve those constraints and when it finds candidates in the model we can use the bytes as a potential valid input array. But again not quite, we know the input bytes were also substituted, so we need to find all possible reverse substitutions and loop over all options. Here we don\u2019t need to check if it can even be reversed, because we added that constraint earlier. So z3 only will generate input candidates that can be reversed. Anyway, here we kick of the true solution."}
{"prompt": "How long does it take to bruteforce the Nintendo HireMe.cpp challenge?", "completion": "Given our very good input candidates we now call the recursive function solve_round. If this returns not None, and returned an actual value, we know we reached a depth of 256 reversed rounds and we have the solution that we can print. So let\u2019s run it! This will actually take a while. It takes maybe like 15-30 minutes to bruteforce. But it works! And it will find a solution. BTW in case you are wondering what I\u2019m using here, this is a Jupyter notebook and when you install sagemath it comes bundled with it."}
{"prompt": "What command can be used to install additional Python packages in the context of Sage?", "completion": "If you start the Sage Notebook then you will get this web interface. It\u2019s really awesome for CTF stuff. And if you need to install additional python packages for this, you can use this snippet to pip install other python modules in the context of sage. Anyway. I fast forward to the end, here is the solution. And if we now copy those bytes into the hireme source code as the input, we should have solved it. So let\u2019s compile it again and run it. And there we go! We get the output hireme! And the exit code is now also the expected 0."}
{"prompt": "What is the main difficulty in solving the Nintendo HireMe.cpp challenge?", "completion": "I hope you can take something away from how I approached this harder challenge. I learned a lot new stuff from doing this. I have never used sage before and doing this kind of math is also not something I\u2019m good at. But I think it\u2019s fascinating how this complex looking algorithm can be boiled down to relatively basic math that you would learn if you study computer science in university. The actual difficulty is then just to recognize that this is even such a math problem. As you have seen it also took me a while until I realized that."}
{"prompt": "What type of services does Google Cloud Platform provide?", "completion": "In August last year 2019, Google announced the Google Cloud Plattform (GCP) prize, to promote security research of GCP. With a prize of 100,000 dollars [...] to the reporter of the best vulnerability affecting GCP reported through the Vulnerability Reward Program. AND having a public write-up. The Google Cloud Platform is basically the Google version of Amazon\u2019s AWS services or Microsoft\u2019s Azure. So you have stuff like Compute Engine, which is general purpose VMs, or even fancy machines with GPUs."}
{"prompt": "What type of bug did Wouter find in the Google Cloud Shell?", "completion": "Various Networking stuff like DNS or CDNs. And of course database and storage solutions. Loads of different stuff. We have actually used BigQuery from it before, to scan through GitHub repositories and look for bitcoin wallets. And I made one video with the bug hunter Wouter about one bug he found in the Google Cloud Shell. This in-browser IDE. I actually heard about this prize when I went to the Google CTF finals in November 2019. And there eduardo reminding everybody of it. Okay. So one thing that happened recently."}
{"prompt": "What is the amount of the GCP Prize offered by Google?", "completion": "That we launched something called the GCP prize where we give 100.000 USD to one reporter that finds the best bug related to GCP. The only caveat is that we wanted it to be a public writeup about it. And the bug must be reported in 2019 And when I heard that, I thought, DAMN! 100k. On top of the regular bug reward? I should definitely participate! Well\u2026 so\u2026 let me be honest. I didn\u2019t participate. I was very intimidated by the huge target. Also have no prior Google bug hunting experience, and I thought: \u201cfor 100k, I\u2019m sure every bug hunter is going for it."}
{"prompt": "What is the Google bughunter hall of fame?", "completion": "I have no chance\u201d. This is very typical thinking for me, and I assume a lot of people feel the same way. And now it\u2019s too late anyway. 2019 is over. But Google shared with me the nominations and I thought it would be interesting to analyze what kind of bugs were found. Their impact. And thinking critically if I could have found them myself. This is very useful for learning. Occasionally you should do that too! Now let\u2019s look at the first bug by obmi. I assume this is obmihail currently rank 13 in the google bughunter hall of fame."}
{"prompt": "What type of vulnerability was exploited in the Google Cloud Shell?", "completion": "\u201cFile upload CSRF in Google Cloud Shell\u201d The bug was a CSRF. Cross-site request forgery. Which means if a user is logged into the google cloud shell, and visits a malicious domain, this website then can perform actions across origin on behalf of the user. In this case uploading an arbitrary file. Anyway. As I mentioned at the beginning, Wouter\u2019s bug was also about cloud shell, so I skip an introduction here, if you need one, checkout that video. I link it below. So. apparently an area of cloudshell can be accessed directly by either of those URLs."}
{"prompt": "What is the CSRF protection in the second URL missing?", "completion": "If I launch Cloud Shell. Might take a moment. And then launch the editor, I can observe in the sources tab, that this devshell.appspot URI is used. Opening up that directly opens the editor itself. However there appears to be a second URL, it looks more like an internal URL. But certain functionality is the same on it. It could be that the first domain is a reverse-proxy for that second domain. And it turned out that the second URL was missing the CSRF protection. What does that mean? We have something called the same origin policy."}
{"prompt": "What type of technique is used to protect against Cross Site Request Forgery (CSRF) attacks?", "completion": "This means when you browse to domain 1, that website, cannot generally access data from a different domain 2. For example can\u2019t write javascript to just read the content. But simple form submissions. So a basic HTTP Post request with a form, is possible. That\u2019s why the domain2 needs a CSRF protection, to make sure requests came from a trusted source. typically this is implemented as a secret token. the malicious domain1 doesn\u2019t know that random value, so when it sends that request, domain2 can reject it."}
{"prompt": "What special HTTP header is required for the main URL, according to the video transcript?", "completion": "Another option is via a special HTTP header, because due to the same origin policy, the domain 1 cannot add special headers to that request. And so the main URL required such a header, here called X-XSRF-PROTECTED. But the second URL was missing it. So either they forgot to add it, or this internal URL shouldn\u2019t be reachable directly and be always only accessed through the first. Not sure. So domain 1 could simply create a POST request to upload a file. BUT there were actually two challenges. First."}
{"prompt": "What is the structure of the request sent by obmi to exploit the multipart requests parsing bug?", "completion": "you need a multipart file upload, which you can\u2019t really do without a user selecting a file in the file dialogue. You could probably try to trick the user into that. But, obmi found a \u201cbug in the multipart requests parsing\u201d. Instead of this request structure, obmi sent the following request: Content-Disposition: form-data; name=\"upload; filename=the_filename; x\" Now this looks similar. To the Content-Disposition here. AND look closely at the quotes. Here it starts and here it ends. This was achieved with a regular form input element."}
{"prompt": "What parsing issue did the bug hunter discover?", "completion": "This is the name. Equal. And then comes the value. And for crazy reasons, this was interpreted on the server as a multipart/form-data file upload with content-disposition. WHAT THE HELL. WHO COMES UP WITH THAT? I have never seen this kind of wrong parsing of the request. And I would have never guessed to test for that. What a weird bug. Now the second challenge. How to know the victim's cloudshell hostname. because the domain is unique for each user. Which means you need to somehow leak it to construct the form with the correct action url."}
{"prompt": "What is the technique that obmi noticed that can be used to hijack the result of an authentication redirect?", "completion": "And here they mention another trick, that I wouldn\u2019t have thought about. obmi noticed that during some redirects during authentication, it redirects an authenticated user to their unique URL. And then The result of redirect can be hijacked via CSP reports. More detailed information about this auth redirect is in another report by obmi. But let me reproduce this with a small test to show how it works in principle. So here I have a malicious attacker test website. It contains an iframe embedding the authentication URL."}
{"prompt": "What CSP directive was used to prevent the malicious user domain from embedding the iframe?", "completion": "When accessing it, it will redirect to the unique URL of the user that visits this site. I also set the CSP header to only allow the authentication domain test.liveoverflow.com as a frame source. And any CSP violations I want to get reported to me. And let\u2019s check what happens if this is embedded as an iframe on the malicious user domain. We see the iframe got blocked. Because test.liveoverflow.com was allowed, but it redirected to the unique dev domain not whitelisted in the CSP header. And in the console we see the error Refused to frame 'dev-1234' because it violates the following CSP directive: only \"frame-src test.liveoverflow.com\" is allowed."}
{"prompt": "What type of attack was used to gain access to the user's unique URL?", "completion": "But additionally I set the report-uri, so in the network requests you can see that this CSP violation triggered a request to the attacker domain attacker.liveoverflow.com/leak, including the details of this violation. Specifically the blocked-uri. Which is \"dev-1234\". So now the attacker knows the unique URL of this particular user, can automatically craft a malicious form and trigger a CSRF POST request to upload an arbitrary file. Awesome! So I definitely wouldn\u2019t have figured out the multipart parsing bypass."}
{"prompt": "What techniques could be used to exploit a Cross-Site Request Forgery (CSRF) vulnerability?", "completion": "But I\u2019m not so sure about the CSP leak. Maybe, maybe not. Depends on if I had gotten a creative burst. However the CSRF itself seemed pretty easy to find. An endpoint without proper CSRF protection is easy to identify. Maybe I couldn\u2019t have fully executed a full chain because of the unique URL But those restrictions seem a bit secondary. For example even without the multiparsing bug you could argue that you could trick a user into filling out a form with a file. They think it\u2019s harmless but it\u2019s uploaded to their cloudshell."}
{"prompt": "What tricks did obmi use to identify the lack of CSRF protection in Google Cloud Platform?", "completion": "So I personally would have reported that lack of CSRF protection regardless. Anyway, obmi got 5.000 USD as a reward for this bug. So Kudos. Really cool tricks used, and I definitely learned something! I have to say this chain looks 100% like a web CTF challenge! But I guarantee you, if those tricks were required in a CTF challenge, people would say \u201cthis is unrealistic\u201d. But nope. Weird stuff happens all the time. And this writeup shows it. I love it! Obmi has two more reports here. One of them an oauth token hijacking in Google Cloud Shell Editor."}
{"prompt": "What security vulnerability did Obmi identify in the Google Cloud Platform?", "completion": "Which was rewarded with 5000 USD. This was a pretty typical token leak issue. The state parameter contains a URL the user is intended to be redirected to after authentication, where it adds the token to it. And obmi noticed that the domain is not properly checked and could enter a malicious domain. So when a victim would access this url, the token would be added to a redirect to the malicious attacker domain. So the attacker can grab that auth token and can use it to access cloud shell of the victim."}
{"prompt": "What type of web security issue was found in the Google Cloud Platform?", "completion": "And lastly a XSS in google cloud shell. Very standard reflected XSS. Parameter name is not properly escaped in the error output. And as I said, the XSS report also has a few more details about the domain name leak, because the unique domain has to be known here too. It wasn\u2019t very detailed in the CSRF post. But here obmi showed that this request to ssh.cloud.google.com/devshell/proxy?authuser, will redirect to the unique domain. Like my example redirect. So in principle all three bugs are typical web security issues which I could have also found."}
{"prompt": "How can a multipart file upload be performed using fetch?", "completion": "But the few tricks used to pull off a proper PoC, especially the multiparsing bug, awesome! Really nice work! Ehhh. LiveOverflow from the future checking in. So I had prepared a first version of this video and sent it over to Eduardo at Google. Who then responded, \u201cI think for the multipart upload, you could use fetch\u201d And I was like\u2026. Uhmmmm. How do I explain this that this doesn\u2019t become super embarrassing now. I guess \u2026\u2026. let me just tell you this different solution to perform the multipart file upload."}
{"prompt": "What is an alternative to XMLHttpRequest that can be used to create asynchronous JavaScript requests?", "completion": "Eduardo pointed out, you could simply use fetch(). If you ever tried to create asynchronous JavaScript requests, you might have used XMLHttpRequest. Fetch provides a better alternative. It\u2019s a simple function, with a lot of different options to create requests. Obviously they have to obey the same-origin policy. But like I said, a POST request to another domain is perfectly fine. So you could simply write javascript code like this, to set the content-type, even including the boundary. And then simply use the full expected request body."}
{"prompt": "What is the bug hunter in the video transcript accused of doing?", "completion": "Including the newlines and everything. When this is executed, you can see the request with this content-type and data. So\u2026 Isn\u2019t it fascinating that the bug hunter also apparently failed to just use this simple solution? Clearly obmi is absolutely capable and has the skills of using fetch(). But for whatever reason they didn\u2019t, and instead found a crazy request parser bug. Talking about overcomplicating things. Can't see the forest for the trees. It\u2019s so easy to forget about such simple things, especially when you work with much more complicated systems."}
{"prompt": "What techniques did Wouter WTM use in his Google Cloud Platform bug bounty reports?", "completion": "It just shows, you need to practice and even read up again on more basic stuff all the time. It\u2019s a lot of practice and you forget stuff. This is very very interesting to me. Now back to the video. Let\u2019s move on to the next writeups. These are actually by wouter. Wtm. He is the bug hunter I made that one video with before. And these bugs are closely related to the stuff explained there. So I actually suggest you watch that previous video and checkout the writeup yourself. No need to go over it again."}
{"prompt": "What type of attack vector did Wouter use to find security bugs in Google Cloud Platform?", "completion": "But the conclusion I draw from these writeups are. He did a lot of research trying to understand and map the architecture of the whole cloud shell. And the bugs he found are not a typical web security issues. Impact wise they were similar to CSRF or XSS. But the bugs were not standard web bugs. These are issues where I feel like, I understand them, I could have maybe found them too, but it would have definitely required more time and digging into the cloud shell to identify that. And then also I would have needed the luck for to think about the creative attack vector that wouter used."}
{"prompt": "What is Cross-Site WebSocket Hijacking (CSWSH) and how is it similar to Cross-Site Request Forgery (CSRF)?", "completion": "Because like I said, not typical web bug. It\u2019s something unique to this cloud shell IDE. So let\u2019s move to the third writeup by psi. A CSWSH vulnerability in Google Cloud Shell. - Cross-Site WebSocket Hijacking. You can already guess from the name that it could be similar to CSRF. Cross-Site Request Forgery. But with websockets and not normal HTTP requests. And interestingly the two bugs from obmi and psi are closely related. Psi saw that the editor uses a lot of websockets. And similarly like regular requests from one domain to another, the browser attaches cookies and so websockets also need to have some form of protection or additional authentication to prevent access across origin. and psi wrote:"}
{"prompt": "What header is used to validate the origin of requests sent to the Cloud Shell endpoint?", "completion": "\u201cWhen I looked at the messages passed through the WebSocket I realized that inside the socket no authentication seemed to happen.\u201d \u201cAt that time I suspected that the authentication of Cloud Shell's editor might rely only on that cookie\u201d. Which would mean that a malicious website could simply open a websocket connection to the cloudshell, and like a CSRF, perform actions as the current user. But it turned out that the endpoint does validate the Origin header. And that means when the request is coming from an attacker domain, the websocket connection is rejected."}
{"prompt": "What headers were missing from the unique URI to access the cloud shell that allowed Obmi and Psi to exploit the vulnerability?", "completion": "HOWEVER, and this is where the first writeup by obmi and psi connect, Obmi also noticed that there is this second unique URI to access the cloud shell. Which was missing this origin check. For obmi it was missing the cross-site-request protection header check, and for psi it didn\u2019t perform the origin header check. It\u2019s also interesting to read what psi says about the unique domain, because obmi figured out a way to leak that unique URI using the auth redirect and CSP. And Psi didn\u2019t figure that out."}
{"prompt": "What are the different pieces that Psi identified in the Exploitability section of their bug report?", "completion": "But psi goes into a lot of details in this Exploitability section and argues for why this unique URI is not a proper protection. I really recommend for you to work through that, because in there you can find all the different thoughts and ideas. It\u2019s a great example for a case where you might not have all the puzzle pieces to pull of a full exploit chain, but you have some significant pieces that clearly show it\u2019s a bug regardless, and it has to be fixed. Also I wonder how you think about the following."}
{"prompt": "What is a potential fix for the underlying issue of both the obmi CSRF and the psi CSWSH?", "completion": "Basically, the underlying issue for both the obmi CSRF and the psi CSWSH, was using the direct VM URI. This could be part of a typical application setup where you have a reverse-proxy in front of an internal servers. And the direct URL to this vm server might have been wrongfully exposed? So the fix to both of these issues could be, simply put it behind the reverse-proxy. Block the direct access. That might have been a possible fix. Now. Would that then mean it was not two bugs \u201cCSRF and CSWSH\u201d."}
{"prompt": "What techniques were used to protect the internal servers exposed by the bug?", "completion": "But it could be seen as a single bug and be be called \u201cInternal servers exposed\u201d? This is a difficult question when it comes to bug bounties, due to the reward structure per bug. But as far as I can tell, blocking access to this URL was not the fix here. Both those protections were added to the direct vm domain as well. So these are the three contenders for the 100.000 prize. Who do you think should win it? please write your thoughts into the comments, I\u2019m really curious, because I actually don\u2019t know yet."}
{"prompt": "What rules must be met in order to qualify for the GCP Prize in 2020?", "completion": "But when this video goes live, you should be able to find more information about this prize and the winners over at the official security.googleblog.com But before you leave. They said that this is a new yearly prize. this was the first round and it will happen again in 2020. I don\u2019t know the rules for this year, but if it\u2019s similar to last year, any GCP bug in 2020 might qualify for the new prize. So you could use the public writeups as a learning resource to understand how the google cloud platform works and go hunt for bugs right now."}
{"prompt": "What is the goal of the challenge?", "completion": "in the previous videos of this series we have setup everything. We flashed the challenge \u201cSecure Filesystem\u201d on to the board and figured out how to interact with it over a serial connection. We also learned about using pyserial to speak with the embedded device via a python script. This means we are ready to solve some challenges So when you connect the board with this challenge loaded on it, you can see the following output on the serial console. It shows a list of files. And our goal is probably to read the passwd file."}
{"prompt": "What microcontroller is the Secure Filesystem running on?", "completion": "But let\u2019s first read the challenge description. Secure File System - We don't remember why, but we wanted a file system on an AVR328p (that\u2019s the microcontroller on the arduino board). After the system was completed we discovered that it lacked basic security. A couple of beers later we came up with what we think is a revolutionary way to do file system permissions. It is now your task to fill in our shoes and test its security. The filesystem allows you to request the contents of one or more available files by using the following Format:"}
{"prompt": "What is the format of a request to read a file?", "completion": "A token, followed by a hash and then at least one filename, followed by multiple optional filenames colon separated. And there are multiple example requests to read different files. For example this one here would return the content of cat.txt and finances.csv. We already successfully did that in the previous video. So, while I\u2019m pretty certain what the solution will be, let\u2019s have a look at the other examples and approach it with an open mind. Because maybe it\u2019s not what I think it is. The first thing we should notice is, that the tokens look pretty random."}
{"prompt": "What type of hash is used in the Secure Filesystem?", "completion": "Especially when you compare different tokens that all request cat.txt, but in combination with another file, it will completly change. This means it\u2019s unlikely that data is encoded in there. Or that it follows a predictable pattern that we could analyze statistically. It\u2019s very likely that it is a hash. Like a password hash. Easy to compute and verify, but really hard to reverse. From the length i suspect it to be a sha1 hash. I didn\u2019t record this, but at this moment we could check if the filename, or the combination of multiple filenames are simply hashed and that becomes the token, but it turns out it\u2019s not."}
{"prompt": "What type of weakness can be exploited to generate a valid token to request the passwd file?", "completion": "And at this point I wanted to try out what I suspected to be the solution. Because if you see a token, that presumably protects or authenticates some data, it might be some kind of MAC, Message authentication code. A mac, or how it\u2019s here called, a token, can be used to prevent somebody else from changing data. And we don\u2019t know how to generate a valid token to request the passwd file. But, a message authentication code can be implemented in a weak way, and then you can mess with it. And I actually introduced this weakness in a previous CTF video."}
{"prompt": "What Python module is used to establish a serial connection with a USB to serial device?", "completion": "So let me play that clip.  In that video it was about an md5 hash, but sha1 has the same issue. If we assume that the embedded device has a secret key, which is prepended to the requested filenames, and then a hash calculated around it, we should be able to attack this with a length extension attack. So let\u2019s start to write our attack script and use hashpump, the tool that I introduced in the other video already to do that. We import pyserial, setup the serial connection with the USB to serial device."}
{"prompt": "What is the purpose of the read_until function?", "completion": "Then we can attempt to read from it, write one of the example tokens which should allow us to read cat.txt. And then read again to get that content. But when we run it, it doesn\u2019t work. We read nothing. I assume that we read data too fast and the board is just too slow with sending. So I write a little helper function called read_until, which always reads data from the serial connection, until the read data contains the string we expect. So now we can read until the prompt appears. When we now test it, it will take a second until the board sends us something, but we are eventually able to read the content."}
{"prompt": "What is the python module needed to access the hashpump utility?", "completion": "Then I install hashpump and the python module, hashpumpy. THis allows easy access to the hashpump utility from a python script. One problem with this is, that a hash length extension attack has to know how long the secret key is. And we don\u2019t know that. But we can simply write a for loop, that just tries out all different lengths. And then we simply call the hashpump function. We give it the hash we have, the data we know, the data we want to append, in this case we want to append the passwd file with colons."}
{"prompt": "What is the purpose of the Hashpump tool?", "completion": "Also we don\u2019t know what is in pepper, so we get that file as well. At at last we need the key length. Hashpump will return the updated hash and the new message which contains the padding and so forth. We can also print the tested key lentgh with that data so we can later see how long the secret key was. Then we send the new calculated updated token, with the hash symbol, and the colon seperated file request via serial to the board. Then we should read until the next prompt after each attempt, so we know the board is ready to get our next request."}
{"prompt": "What game is used to illustrate how a CPU works in the video?", "completion": "Now I want to introduce how a CPU works. I hope I can take away any fear of assembler you might have, because it\u2019s actually pretty simple. And in the next video you will be able to use this crack your first small program. First I had a long script where I basically tried to develop the concepts of a CPU step by step. But I realised it\u2019s just too long and I think I didn\u2019t get the point across. But then I came accross this hacking game by starfighters.io - at the time of creating this video, starfighters.io was not available yet."}
{"prompt": "What is the fictional report about that is mentioned in the video?", "completion": "But when you see this here it should be up and running. So go check that out. And the creators of that site have uploaded an article as a preview of the game. That preview is a fictional report of reversing a hand-held device used for financial trading. And even though it\u2019s fictional, it\u2019s not far away from how it would look like in reality. That\u2019s why I strongly recommend you to read it. But I will now take just the part where they introduce programming assembly and talk a little bit more around it."}
{"prompt": "What is the address of line 5 on a sheet of paper in memory?", "completion": "And then I hope you will start to understand how a CPU works. A CPU has amazingly simple concepts that can be used to solve very complex tasks. It\u2019s pretty crazy. I hope you realise that by the end of this video. So Imagine just a sheet of paper, where you write instructions from the top to the bottom. This is your memory like the RAM in your computer. And each line on that paper has a number assigned, just like a location in memory has an address. So instead of line 5 on a paper, in memory it would be something like address in hex 0x4005db."}
{"prompt": "What is the number of registers available on a 64-bit Intel CPU?", "completion": "So that paper, or you know, your memory contains the assembly code. But what can assembly code do? So first of all, you're given 8-32 global variables of fixed size to work with, and they are called \u2018registers\u2019. So your CPU, depending on your architecture has a number of those registers. So for example the 64bit intel CPU has like 16, 17, maybe more? Depends a little bit on how you count. But generally that\u2019s the amount of registers that you mostly see or use. Anyway. They call those registers \u2018global variables\u2019,"}
{"prompt": "What is the maximum size of a register in a 32-bit machine?", "completion": "and that is what they are. Just like in your C or python programming you can use them like variables. Store a value in them and perform some arithmetics on them like adding or multiplying. The next keyword here is the fixed size. In a 32bit machine, they are 32bit wide. And in a 64bit machine, they have 64bits. So this is the biggest number you can store in one of those registers. And when you want to have bigger numbers, you obviously have to write code to split up the number over multiple registers."}
{"prompt": "What is the register that tells the CPU which instruction to execute next called on an Intel x86 architecture?", "completion": "And some of those registers are special registers. The most important is the \"Program Counter\", which tells the CPU which instruction we're executing next. Every time we execute an instruction, we advance the program counter. This register is often called PC, meaning Program Counter, but on our intel x86 architecture it\u2019s referred to as the Instruction Pointer. IP. Or EIP, or RIP - depending on 16bit, 32bit or 64bit mode. So when you look at your paper with instructions in each line, the instruction pointer register will have the number of the line that will be executed next."}
{"prompt": "What is the syntax for setting a register to a value in x86 assembler?", "completion": "We often also refer to this as pointing to. So the instruction pointer points to line 5. And when it has executed that instruction it will be increased by one, to move it to the next line. Virtually all computation is expressed in terms of simple operations on registers. Let\u2019s do an example. In x86 assembler you can move a number into a register. Like \u2018mov eax, 5\u2019. This means that eax will now have the value 5. And then you can add a number like 3 to it. \u2018add eax, 3\u2019. Now let\u2019s set another register to value 8."}
{"prompt": "What is the difference between the 32 1-byte variables and the more than 16 registers with 64bit in x86 architecture?", "completion": "So \u2018mov ebx, 8\u2019. And then you can subtract those to with \u2018sub eax, ebx\u2019. This means that ebx is subtracted from eax and the result is stored in eax. But Real programs need many more than 32 1-byte variables to work with. And what doesn't fit in registers lives in memory. In our case of x86 architecture that would be more than 16 registers with 64bit, which is 8-byte. Imagine to write a game like Super Mario in assembly. You would have to store marios x-/y-position, the lives, the enemies, the coins."}
{"prompt": "What is the x86 assembler instruction for loading and storing memory?", "completion": "You just need more than 16 variables. And when you want to collect more than 32bit worth of coins, you need more space. Next point is, what doesn't fit in registers lives in memory. You can just use other parts of the paper where there is no assembly code to store more values. Makes sense, right? Memory is accessed either with loads and stores at addresses, as if it were a big array, or through PUSH and POP operations on a stack. So the load and store instructions are called move in x86 assembler."}
{"prompt": "What is the syntax for accessing a value in a list or array in the Intel Assembler language?", "completion": "So we can move values from a memory address into a register, and we can move values from a register into memory. For example \u2018mov eax, [0x4005db]\u2019. There are different syntax how you can write assembler. I like intel assembler syntax the most. So in this case the brackets are like brackets from an array or list. So for example in python to access a certain value in a list you would write \u2018my_list[5]\u2019 to get the element at index 5. So we just do basically the same, just with a very big number 0x4005db, because our RAM is very big."}
{"prompt": "What is the function of the stack pointer register?", "completion": "Also they talk about push and pop operations on a stack. The stack is nothing else than just an area at the bottom of the memory. So like at the bottom of our paper. And then you have a special register that always points at the top of the stack. The stack pointer SP. Or ESP. Or RSP. It\u2019s special like the instruction pointer. And when you push a new value on top of the stack, for example `push 5`, the stack pointer will be incremented, pointing to the next address and the value will be placed there."}
{"prompt": "How does the stack pointer behave when executing instructions such as 'push' and 'pop'?", "completion": "And when you do `pop eax`, the value at the address of the stack pointer will be saved in the eax register, and the stack pointer will be decremented. This is used in programs all the time. Eh\u2026 I have to correct myself. The stack is ususally upside down. so the stack grows downwards. Meaning it starts from the highest address and when we push a value we don\u2019t increment the stack pointer, we decrement it. and with pop vice-versa. But doesn\u2019t really matter. Just imagine literally a stack, where you put something on top, or take something away."}
{"prompt": "What is the most efficient way to optimize assembly programs?", "completion": "Memory is to an assembly program what the disk is to a Ruby or Python program: you pull things out of memory into variables, do things with them, and eventually put them back into memory. Now when we talk about efficiency and speed. Then calculations on registers are super super fast. And ideally your whole program should only use registers. But because that\u2019s unlikely you have to put values sometimes into memory because you need the registers for more complex stuff. But if you would optimize your code, you would always want to make sure to access memory as little as possible."}
{"prompt": "What is the purpose of caches near a CPU?", "completion": "Well. This is also only half true, because you have something like caches near your CPU. Actually multiple levels of caches. So if you repeatedly use a certain memory address, it will be cached in a special super super fast memory near the CPU and not in RAM. Which is not too bad. But you get the idea. Control flow is done via GOTOs --- jumps, branches, or calls. The effect of these instructions is to alter the program counter directly. Control flow means that a CPU would be less useful if it would just execute your program line by line, without being able to jump to somewhere else."}
{"prompt": "What is an instruction pointer and how is it used in assembler?", "completion": "For example to repeat a task, you want to constantly jump back. In assembler you have different instructions to do that. They are referred to as jumps, branches or calls. And they all basically change the instruction pointer to a different value. So when you read a \u2018jump 2\u2019, you would simply set the instruction pointer to 2, and continue with that line. Kind of like \u2018mov eip, 2\u2019 A jump is just an unconditional GOTO. So when you encounter a jump, you will always follow it. But much more interesting for complex tasks is to make decisions what to calculate next."}
{"prompt": "What is the effect of performing operations on registers, such as addition and subtraction, on the status flags?", "completion": "And Most operations on registers, like addition and subtraction, have the side effect of altering status flags, like \"the last value computed resulted in zero\". There are just a few status flags, and they usually live in a special register. So for example when we earlier added 3 to the 5 with the \u2018add eax, 3\u2019 the result was bigger than zero, so the zero flag would have been not set. or simply 0. But when we subtract 8 from that with \u2018sub eax, 8\u2019, the result will be 0 and thus enabling the zero flag, setting it to 1."}
{"prompt": "How can two values be tested for equality in x86 assembly?", "completion": "And branches are just GOTOs that are predicated on a status flag, like, \"GOTO this address only if the last arithmetic operation resulted in zero\". In x86 assembly that would be the \u2018je\u2019 instruction. Sounds weird, but how would you test if two values are equal? You can simply subtract them and when their result is 0, they were equal and thus set the zero flag. So it makes sense to call the \u2018branch if zero flag is set\u2019 simply \u2018jump if equal\u2019. A CALL is just an unconditional GOTO that pushes the next address on the stack, so a RET instruction can later pop it off and keep going where the CALL left off."}
{"prompt": "What is the difference between the 'call' and 'jmp' instructions in assembly language?", "completion": "So earlier I explained how the push and pop instruction works. So a very clever usage of the stack is this call instruction. Let\u2019s say in C you want to call a function. How would you do that in assembler? Especially because a function might be used in multiple places, so you always want to jump back where you came from. If you would just use the \u2018jmp\u2019 instruction, you would have to specify the exact address. So what you can do is use the \u2018call\u2019 instruction instead. This will push the instruction pointer of the next instruction on to the stack."}
{"prompt": "What does the instruction 'ret' do?", "completion": "And when the function you jumped to finishes, it will execute the \u2018ret\u2019 instruction. And ret will pop the current value on top of the stack into the instruction pointer again. So like a `pop eip`. So we can continue executing where we originally came from. And before we finish this video,I just want to make clear, that the assembler instructions are actually just numbers. As you know a computer can only store 0 and 1s, and we generally represent those as numbers. So assembler code doesn\u2019t actually say \u2018mov eax, 5\u2019."}
{"prompt": "What is the instruction for moving a number into the EAX register in x86?", "completion": "It will actually \u2018B8 05 00 00 00\u2019. And hex B8 refers to `mov eax`, and the remaining numbers are available for the number you want to move into eax. So when the hardware reads this number, it knows that it has to move the following number in it\u2019s eax register. And a disassembler is a software that takes this number B8 and makes readable text out of it for us to easier read assembler. If you want to try this out in practice, you can go to microcorruption.com. It\u2019s a hacking game where you are given a fictional architecture and CPU."}
{"prompt": "What is the program called that executes the binary file in the video?", "completion": "Okay, So last video I showed you this programming language I made, ugly but works. And we compiled this into this weird binary format. And then you pass this binary file to this program called invoice, and it executes our program. In the last video I also showed you, that the beginning of this binary format actually triggers a buffer overflow and overwrites the return pointer on the stack. And at that point you might have thought that our programs are simply shellcode, so assembler code, that we inject and then jump to, with the buffer overflow."}
{"prompt": "How is it possible to execute a program when the stack is not executable?", "completion": "But that is not even possible, because the stack is not executable. So even though we cannot inject actual assembler instructions to execute, we somehow were still able to execute my programs. And at this point it\u2019s pretty clear, that this is possible thanks to return-oriented-programming. So let\u2019s examine how this works. But I warn you. You really need to get your brain into an abstract philosophical thinking mode. This will get weird. And maybe you have to rewatch it some time in the future, maybe checkout some more \u201cnormal\u201d Return Oriented Programming tutorials and then come back to this."}
{"prompt": "How does the x86 assembler instruction \"call\" work?", "completion": "But if you get this video, I think it will add to a much greater and deeper understanding for you. So just try... Anyway. Let\u2019s head in. So in x86 assembler there is an instuction called \u201ccall\u201d. And call actually does two things. First it pushes the return address (which is the address immediately after the CALL instruction) on the stack. And then it changes EIP, the current instruction pointer, to the call destination. So the CPU continues execution there. Now when we in C call a function, this will be compiled to an assembler call instruction."}
{"prompt": "What instruction sets the instruction pointer to the target address after a call instruction?", "completion": "But to understand return-oriented-programming, you have to forget this. Ignore the concept of calling functions. Simply remember that this instruction pushes the address immediately after the call instruction onto the stack, and then set instruction pointer to the target address. And the return instruction behaves in the same way. YES ret is compiled from a return in C. But forget this connection. A RET simply pops an address, we call it the return address, off the stack and sets the instruction pointer back to that."}
{"prompt": "What does the instruction 'ret' do in the context of return-oriented programming?", "completion": "And \u201cpooping a value\u201d from the stack is also already again an abstract interpretation. What it literally means is, it looks at the stack pointer register, follows that address, takes that value. And then it increments the stack pointer register. It increments because the stack grows downwards. So if we shrink it, when we POP a value, we increase it. So it gets closer to the highest address again. Anyway. This is what ret does. It\u2019s taking this value where the stack register points to, increments the stack pointer address,"}
{"prompt": "What does the \"ret\" (return) instruction do?", "completion": "and then uses the value it got, to set the instruction pointer.That\u2019s how we \u201creturn\u201d (in quotation marks). So this was lesson one. Ignore the name of the instruction or it\u2019s typical meaning and typical usage, just understand what the instruction itself does. So again, remember what the \u201cret\u201d (the return) instruction does. First look at the stack register, follow this address and take that value. Increment the stack pointer. Set the instruction pointer to that value. Done. Now let\u2019s think about something else."}
{"prompt": "What is the function of the instruction pointer register in a CPU?", "completion": "What does it mean for a machine to execute instructions? A CPU is a piece of hardware that executes instructions. Those instructions are machine code or assembler code, right? How does that in an abstract sense work? Well there is memory, where instructions are stored, and this memory has addresses. Then the CPU has an instruction pointer register, that contains an address that points to memory with the next instruction to execute. So if it\u2019s 0, it will execute this. And then it does whatever this instruction is defined to do."}
{"prompt": "How does the instruction pointer get updated after each instruction is executed?", "completion": "Not that important what this instruction exactly does. But by executing any instruction, the instruction pointer is simply incremented and moved forward to point to the next instruction. ANd then that gets executed and the instruction pointer will be updated to point to the next one. And so forth. Of course that changes with instructions like jumps, or calls, or returns, where the instruction pointer is directly updated. But you get it. A computer, really in the abstract sense, is a machine that given instructions computes or executes those instructions."}
{"prompt": "What is the role of the program counter (pc) in a virtual machine?", "completion": "So the CPU is a machine implemented in hardware. But of course there are also virtual machines. So machines implemented on top of our CPU machines. And for example the JVM, the Java Virtual Machine behaves in the same way. It is a machine. So there is bytecode somewhere in memory, and the software, the JVM has an instruction pointer, or there called programm counter pc, that points to the next instuction, or there called opcode. And when the JVM executes one opcode it also has to update the program counter and move it to the next one."}
{"prompt": "What macro is used in OpenJDK source code to update the program counter and allow the machine to move forward to the next instruction?", "completion": "Here I looked up the source code for that. So here is the OpenJDK source code And there you see an UPDATE_PC_AND_CONTINUE macro, where it literally adds the size (or length) of the current opcode onto the program counter, so this moves it forward. Like the CPU would increment the instruction pointer. So this is lesson two. A machine in an abstract sense is simple. There is memory that holds code or instructions. And the machine points to that code, takes an instruction, executes it, and then updates the program counter to point to the next one."}
{"prompt": "How does return-oriented programming allow for the manipulation of a weird machine?", "completion": "So what the f\u2019 does this have to do with return oriented programming? Well last video I also introduced the concept of a weird machine. Somehow this invoice program implemented a weird machine. And I know, that concept was super confusing but bear with me, it will make sense in a moment. If this invoice program implements a weird machine, and you program that weird machine with a technique called return-oriented-programming, then you should ask yourself now. where is the memory that contains our instructions,"}
{"prompt": "What is the function responsible for the buffer overflow in the add_invoice function?", "completion": "where is the instruction pointer that points to those instructions, and where is the logic that executes whatever an instruction is defined to do? Well, luckily we have some example programs, and we can debug this weird machine with GDB. Let\u2019s load the invoice program into GDB and let\u2019s learn how it executes. I don\u2019t want to explain buffer overflows again, please checkout my binary exploitation playlist for that. But when you are familiar with it, you know that we overwrote stuff on the stack. If you look at the add_invoice function you can find the dangerous functions gets() which cause the buffer overflow."}
{"prompt": "What values appear on the stack after the buffer overflow is triggered?", "completion": "So we can set a breakpoint here, and we set one at the return. Then let\u2019s run the binary and as an input we pass in the helloworld.binary. And we know now that input triggers the buffer overflow. So here we hit the breakpoint at the gets. If we execute the gets and examine th stack, we can find all of our input here. Here are all the As that fill up the buffer. And then we have these randomly looking, but actually carefully chosen values after it. But let\u2019s go forward to the return instruction. So now we are about to execute the return,"}
{"prompt": "What is the effect of the return instruction on the stack pointer register?", "completion": "and please remember what return means. It looks at the address in the stack register, so here this address points to this memory, so this is the stack and that\u2019s the top element. And the return instruction now takes that value as an address, and sets the instruction pointer to it. And at the same time increments the stack pointer. So let\u2019s do that. Single step forward. ANd now let\u2019s compare before and after the return. It did exactly what we expected. The stack pointer register was incremented from 0x18 to 0x20, so move 8 bytes forward."}
{"prompt": "What is the effect of the \"ret\" instruction on the instruction pointer?", "completion": "And the instruction pointer got set to the value previously on top of the stack. Btw... when we execute a \u201cret\u201d we also often use the phrase \u201cwe return into \u201d. It doesn\u2019t matter if we say \u201cwe returned to\u201d, say \u201cwe returned into\u201d or say \u201cwe continued execution here\u201d. It\u2019s all the same. Don\u2019t get confused by the term \u201creturn\u201d. You know what the ret instruction really does. It simply takes a value from the stack and sets the instruction pointer to it. Anyway. So what happens now? Where is our instruction pointer pointing to?"}
{"prompt": "What does the assembler code \"pop rdx\" and \"pop rbx\" do?", "completion": "It points here... To this assembler code. A pop rdx and a pop rbx. Followed by another return? So this means it takes one value from the stack and puts it into rdx. Increments rsp again. Then takes the next value on the stack and moves it into rbx. Increments rsp and then we are at the return again. And now return takes the next value on the stack and sets the instruction pointer to it. So where does it now continue executing? Okay. So now we are here? Here we have a pop rdi. So it takes the next value on the stack, moves it into rdi."}
{"prompt": "What is the instruction that moves the value of EDX into the address pointed to by RDI?", "completion": "And then comes ret, which takes the next value and sets the instruction pointer to it. So where are we now? Now we execute a move. We move edx, into the address pointed to by rdi. And remember when we set EDX? The pop RDX at the beginning, set the value of EDX to a value we had on the stack. And RDI, the address where we now write to, we also had on the stack and got it into RDI with a pop RDI. Think about what this code now did! I know it looked weird, but all it did was it moved a value we wanted into an address we specified."}
{"prompt": "What is the purpose of the compiler program in the video?", "completion": "We moved a value into RDX, then an address into RDI, and then we wrote that EDX value to the address RDI points to. Now look at the source code of the hello world program. Here the code said we move the string, \u201chell\u201d which is of course 4 bytes, into the variable 4. And then store variable:4 in memory location 1. And that is just another way of saying, we move the string, or the 4 bytes, \u201chell\u201d into rdx. And then we move rdx to a memory location we specify in RDI. Which memory location, and converting the string \u201chell\u201d to the four bytes is what my compiler program does."}
{"prompt": "What gadgets are commonly used when performing a memory write using return-oriented programming?", "completion": "I know, maybe that is a bit too confusing, maybe better just ignore my compiler shenanigans. But if think about what we did. We executed these few instructions that move a value into some memory location. And we did that by using super weird instructions, which we usually refer to as \u201cgadgets\u201d. To perform this memory write, we used three gadgets. First we used a \u201cpop rdx, pop rbx\u201d gadget, then a \u201cpop rdi\u201d gadget and then a \u201cmov gadget\u201d. And see what all these gadgets have in common? They all end with a return instruction."}
{"prompt": "What is the purpose of the return opcode in the weird machine?", "completion": "Now bend you mind. take what we just witnessed and try to fit it into the concept of a machine executing instructions. First, we have memory, that is our stack. On there we had all these addresses and values. And in a weird fuckedup way the stack pointer was our instruction pointer, right? Our weird machine basically started with a return opcode, which took the first address on the stack and continued CPU execution there. Then the stack pointer pointed to the next value, we popped it and moved it to the next."}
{"prompt": "How does a \"call\" instruction work in x86 assembler?", "completion": "Pooped another value moved it to the next. And then came another return which took the value and let the CPU execute code there. Moving the stack again to the next value. So In a way those addresses on the stack, when we have a return, define instruction handlers, right? You could say this address here is actually the opcode, the instruction to perform a pop rdx and then a pop rbx. And this other gadget, this address here, is the opcode for the move of edx into the address of rdi. Isn\u2019t this basically the same thing how a x86 assembler \u201ccall\u201d instruction actually means we push an address on the stack and set the instruction pointer to the given destination."}
{"prompt": "What is the difference between the x86 \"call\" instruction and a gadget from a weird machine?", "completion": "How is that \u201ccall\u201d x86 instruction different from our weird machine gadget? It isn\u2019t! Both define some action, what it does, and then the machine moves to the next instruction. The CPU does this by incrementing the instruction pointer, the Java Virtual Machine does this by simply incrementing the program counter, and our weird machine does this by incrementing the stack pointer. I know, these gadgets are super weird instructions. And each program, depending on how much code it contains and what kind of functions were written there, and where in the memory the compiler places the code, changes what kind of gadgets are available."}
{"prompt": "What assembler snippets can be identified by the tool ropgadgets?", "completion": "With the small tool ropgadgets we can actually list all gadgets, so assembler snippets that have this pattern of a few instructions followed by a \u201cret\u201d. Basically these are all the weird instructions that we can use to implement whatever we want on this weird machine. I know it\u2019s crappy. Nobody said that it has to be a well thought out machine like the CPU or the Java Virtual Machine. But it\u2019s enough to basically perform any kind of computation. It was enough for me to collect gadgets that seemed useful and built a compiler that translates this text representation to actual addresses that point to those gadgets."}
{"prompt": "What is the purpose of Return-Oriented Programming (ROP)?", "completion": "And that\u2019s why each program with such a vulnerability, accidentally crafts its own weird machine. Each vulnerable program will have it\u2019s own instruction set, it\u2019s own collection of gadgets. And it\u2019s own initialisation code that setups that weird machine. Basically the code that triggered our vulnerability in the first place. So writing such an exploit. Is in essence the setting up and instantiation of a weird machine by triggering the buffer overflow. And then we program that weird machine with a rop-chain, a collection of gadgets chained together that will be executed by our weird machine, thanks to how the x86 \u201cret\u201d instruction together with the stack works."}
{"prompt": "What techniques can be used to create a remote shell or other program using Return-Oriented Programming?", "completion": "And what we can program is just bound by our creativity and availability of useful gadgets. But if you have a large amount of gadgets you can understand that you could implement ANYTHING you want. You just chain these small assembler snippets together to build anything. In an attack you usually try to create a remote shell or something, but it could literally be just a regular program. Like I have created these rop-chains that for example take two numbers as an input, adds them together, and prints the result."}
{"prompt": "What kind of approach to teaching ROP did the author of this video take?", "completion": "And that\u2019s it. That is return oriented programming explained in a super confused way. I know, this is maybe not the best ROP tutorial. But there are so many \u201cnormal\u201d tutorials, that I just wanted to try something different and I hope there are some of you where this kind of different angle on the topic is mind opening. At least for me this was so mindblowing and beautiful that, as you know, it became a slogan for my channel. Also I like to remind you to checkout the papers and talks I have listed in the description."}
{"prompt": "What attack ideas did the speaker consider when trying to solve the white box challenge of the RHme3 CTF?", "completion": "so let's talk about another challenge of the RH M III CTF and that is the white box challenge that's the other challenge that I have solved so for this challenge I want to go a little bit of a different route because in the end I am not satisfied with how I solved it I used the tool that I didn't really understand and I still spend many many hours on this challenge and explored it in in great depth but it didn't help me really with the solution I had several attack ideas but in the end they all didn't work out and so instead of giving you like a sequential write-up of what you can do to solve this challenge or show you the tool that I've used I try to revisit what I thought at different stages when I approached this challenge [Music]"}
{"prompt": "How does a normal buffer overflow and jumping to shellcode work?", "completion": "In the last episode we have created our first full stack buffer overflow exploit, by overwriting the return pointer on the stack and jumping to shellcode that we have placed on the stack as well. In this episode we will look at stack level 6 which looks at what happens when you have restrictions on the return address. To understand this video you must have understood how a normal buffer overflow and jumping to shellcode works. I hope I explained it well enough in the past videos. But if there are still open questions, please post them on reddit."}
{"prompt": "What techniques can be used to solve the stack6 challenge from exploit-exercises.com?", "completion": "I really need you to have understood that stuff. As a hint this level tells us that, This level can be done in a couple of ways, such as finding the duplicate of the payload (objdump -s), or ret2libc, or even return orientated programming. In this video we will not be able to explore return oriented programming. But I will show you a couple of other tricks that will eventually lead to return oriented programming. So let\u2019s have a look at the source code. And again, it\u2019s very similar to the previous levels, just some small changes."}
{"prompt": "What function can be used to read the current return address from the stack?", "completion": "Instead of everything being in main, main calls this function get_path. Get path allocates a string buffer for 64 characters. Then reads a string with gets. And we all know by now that with gets we can read arbitrarily many characters, which we can use to overwrite the return pointer on the stack. But the next line is interesting. __builtin_return_address is a function from the compiler, which you can use to read the current return address from the stack. And this return address is checked if it starts with hex 0xbf."}
{"prompt": "What protection does the exit function provide in the stack6 exploit?", "completion": "The ampersand performs a bitwise AND with the address. After that only the part where they were same survives. basically setting the remaining bits to 0. And checking if the front is still hex bf. If the return address starts with 0xbf, it prints this return address and exits. When we use our exploit from last time. And adjust the padding to account for the new unsigned int in this function, we see that it doesn\u2019t work. It fails with bzzzt. Ok. So we cannot use addresses that start with hex bf. The exit protects this function from being exploited that way."}
{"prompt": "How can we execute code if the return pointer is restricted and we cannot return to a stack address?", "completion": "Because the exit is a syscall that simply quits the program. So even though we have smashed the return pointer, this function will never return. So you can see, that even having a buffer overflow doesn\u2019t necessarily mean you can exploit it. When we open this level now in gdb, break at getpath, run it and then look at the mapped memory with `info proc map`. We can see that the only addresses that start with bf are on the stack. So basically we cannot return to a stack address. This is crazy, then how can we run our code,"}
{"prompt": "What happens when the return pointer is overwritten with hex 0x080?", "completion": "if we cannot return to the stack where we place our shellcode? So first of all, we can still control the return pointer. As long as it doesn\u2019t start with bf. And now comes this sick idea, of returning into known code. Let\u2019s think about this. The return instruction just looks at the current address on top of the stack, removes it, and just jumps there. \u2026 What would happen if you return to the address 0x080484f9. Which is the return instruction itself. Think about this. We overwrite the return pointer with hex 0x080."}
{"prompt": "What is the purpose of overwriting the original return address with an address that starts with 0x080?", "completion": "We reach the return instruction, it will pop this address from the stack and jump to it. Basically just jump to itself. And now it will read the next address on the stack and jump there. Now you could repeat that. Make the next address on the stack again 0x080. Or place the address of the stack here. And we can return into the stack again. And in theory that should work. Because the original return address got overwritten with an address that starts with 0x080. Ok let\u2019s try that. let\u2019s modify our exploit code."}
{"prompt": "What is the address of the return instruction on the stack?", "completion": "Instead of the shellcode let\u2019s use int 3, CC instruction again. For a trap. We all know now that when we hit them, we have code execution and we just have to find suitable shellcode. So let\u2019s focus on the interesting part. Set a breakpoint at the return of getpath, and then run it with our exploit input. We hit the breakpoint. And we got past the return pointer check. So let\u2019s look at the stack ourselves. We can see that the address on top of the stack is now the 0x080. Which is the return instruction."}
{"prompt": "What is a gadget in the context of return oriented programming?", "completion": "So now single step forward. This should pop this address from the stack and jump there. And indeed. We hit the breakpoint again, because we jumped to itself. When you now look at the stack, the next address on the stack is the stack address. And we will return into this address now. So when we just continue, we will return into the stack, like in the previous exploit, where we hit our traps. Boom! Arbitrary code execution! By the way. This address where we jumped to, the 0x080 is a gadget. When you read about return oriented programming,"}
{"prompt": "What is the difference between \"return into\" and \"jump to\" when executing return instructions?", "completion": "you are looking for gadgets. And that was a simple no operation gadget. It was just a return, doing nothing. And for full return oriented programming, you look for gadgets that do some more stuff, before returning to the next address. Now when we do this kind of stuff, you hear me saying \u201creturn into\u201d, or \u201cjump to\u201d. Those become equivalent in this case. Because yes, we execute a return instruction, but we are not returning to the original function anymore. We are returning into something else. Effectively just jumping somewhere else."}
{"prompt": "What is the name of the library that contains the system function that can be used to execute a shell command?", "completion": "So I hope that doesn\u2019t confuse you. Let\u2019s have a look at another trick. It\u2019s very similar to what we did in stack level 4. So where else could we jump to. One of  the hints said we could look into ret2libc. Now that you are almost a pro in exploitation, you understand what that means. Return into libc. Like we just returned into some code, we could also return into the huge library libc. There must be something interesting that we could abuse. One interesting function from libc is system. Which executes a shell command."}
{"prompt": "How is the command we want to execute pushed to the stack before a call to system()?", "completion": "With print system, we can find the address of it. But simply returning into it will probably not work. We need to make sure to control a couple of things. Let\u2019s create a simple C program that calls the libc system for us. In the end we want to somehow execute system with /bin/sh. Because then we get a shell. If we try that here, that works well. Now let\u2019s look at this in gdb. We can see that before the call to system, the address of the command we want to execute is put on top of the stack. And as we know, a call to a function will push the return address on to the stack as well."}
{"prompt": "What address does system expect to be on the stack when re2libc is used?", "completion": "So if we draw this, this is how the stack will look like once we are at the start of system. First the address of the command is placed on the stack. And then the address we want to return to. Now imagine if we use our buffer overflow to return into system. Firstof all we didn\u2019t execute a call instruction. Thus there was no return address pushed. But we fully control the stack. So system expects the stack to look like this. And we can build this by hand! So first we have to put the return address for system on the stack."}
{"prompt": "What technique can be used to chain multiple function calls together?", "completion": "But actually we don\u2019t care about this right now. But that is still cool and important, and remember that. Because you can chain those things together. Like we chained two returns after each other before, we could chain multiple function calls or other gadgets after each other, by always controlling the return pointer of the next step. So in our case, when system finishes, we will run into a segfault, because it will return into 0x41414141. the next address on the stack has to be a string we want to execute."}
{"prompt": "How can we get a reference to the string \"/bin/sh\" in order to exploit a buffer overflow vulnerability?", "completion": "Preferably \u201c/bin/sh\u201d. There are many options how to get a reference to such a string. one option would be to use a stack address. Because there are strings we control. Or environment variables. Because they are at the bottom of the stack and a bit easier to predict. But as you remember, the stack is a bit unreliable and shifting around. A more reliable technique is this here. We can use find to search in the mapped memory of libc for a string. Cool, apparently at this address we can find /bin/sh."}
{"prompt": "What is the command line argument used to find the offset of a string in a libc file?", "completion": "Let\u2019s check if that is true. Examine memory as string at this address. Awesome! What the frak! gdb. What the hell are you doing. Why do you say you found bin/sh there, if it\u2019s not there? I have no idea why this happens. Couldn\u2019t find anything online. Anyway. Ignore this. Here is another technique. We can use strings to find all strings in libc. And with -t we can print the offset inside this file as hex. And then we can simply add this offset to the address libc is loaded to. And that is the real address of /bin/sh."}
{"prompt": "What is the memory policy that exists today to prevent the stack from being executable?", "completion": "Ok so let\u2019s copy this address into our exploit. And then let\u2019s try it. Remember to use the trick from the previous video with the parenthesis and cat. Because the exploit script will close the input again. And cool! It works. What we just did was the technique called ret2libc. And we never executed any code on the stack! Maybe you ask yourself why the hell the stack was executable in the first place. There is no valid reason why the stack should be executable. That\u2019s why there exists a general memory policy nowadays."}
{"prompt": "What is the purpose of setting the NX bit in memory pages?", "completion": "Write xor Execute. Basically it means, never have a memory page that is writeable AND executable. Because then an attacker cannot execute any shellcode that he was able to write in the process memory. So we would hope that today every modern system uses DEP, data execution prevention and sets the NX bit, the non executable bit for memory pages like the stack. But reality is not so simple. Embedded devices are on the rise with the Internet of Things, and often they don\u2019t support features like that."}
{"prompt": "What is being used to analyze the heap layout of sudo?", "completion": "We are currently analyzing the heap\u00a0 layout of sudo. We do this because we try to find a suitable exploit\u00a0 strategy for the heap overflow. Last video we wrote a gdb gef extension to trace\u00a0 MALLOC and FREES, in order to learn more about the objects actually being allocated. And then\u00a0 we integrated it into our fuzzer. Our fuzzer always runs until we find a crash, and then\u00a0 we check the heap information with our plugin. Anyway, we have ran the script now for a\u00a0 while and it\u2019s time to look at our findings."}
{"prompt": "What is the gdb extension used for in this video?", "completion": "Just to recap what the gdb extension does. And\u00a0 what the resulting filenames from our fuzzer mean. The plugin traces each malloc and free and\u00a0 uses the function backtrace to remember which function called the malloc. And then,\u00a0 when we reach our heap overflow in set_cmd, we look at the allocations we remembered coming\u00a0 right AFTER our buffer we can overflow. So the function names somewhat tell us what kind of\u00a0 objects we can overflow. And the filename with the results is made up of these function names.\u00a0 So the filenames tell us that we had a segfault,"}
{"prompt": "What function is mentioned as being potentially relevant to the heap layout?", "completion": "and the objects after our buffer\u00a0 are related to these functions. And the First thing you might notice is that,\u00a0 some object allocations were much more common than others. Either they appear more ihn the\u00a0 list, or the filesize is bigger, and had more cases. Which might be something\u00a0 we want to consider regarding how reliablke it is to get the heap layout we want. But let\u2019s look a bit closer. A few of these functions I already know pretty well from\u00a0 all the code I read. But there are a few that really caught my eye. For example\u00a0 this one. dlopen and sudo_load_plugin?"}
{"prompt": "What is the purpose of the __attribute__((constructor)) function in dynamic libraries?", "completion": "\u201cThe function dlopen() loads the dynamic library\u00a0 file named by the null-terminated string filename\u201d And why this sounds awesome is, that -\u00a0 \u201cshared objects may export functions using the __attribute__((constructor)). Constructor\u00a0 functions are executed before dlopen() returns\u201d So if we can control the path to dlopen, we would\u00a0 have code execution. BUT be careful! don\u2019t get too excited, this trace only tells us that the\u00a0 buffer allocated after our overflowing buffer was allocated in this function. So this dlopen\u00a0 probably happened BEFORE we had our overflow,"}
{"prompt": "What is the backtrace of the segfault related to?", "completion": "and there are just some objects\u00a0 left from it on the heap. You can confirm this when you click on\u00a0 the file. In there you can see more of the objects that come after our buffer. And the\u00a0 backtrace of the segfault. Comparing those two, the objects seem unrelated to the backtrace.\u00a0 The backtrace of the crash shows that the crash was related to some nss, check_user, passwd\u00a0 stuff. But the objects were about plugin loading. Which tells me that the objects right after\u00a0 our buffer were not the interesting ones."}
{"prompt": "What is the purpose of the Python script mentioned in the video transcript?", "completion": "There should be other buffers much further away,\u00a0 that then lead to this crash. So this testcase, or rather the information about\u00a0 the objects is not useful for us. By the way, besides the text log of the\u00a0 identified buffers and backtrace, I also log every set of arguments and environment variables\u00a0 in a .json file. This can be used to reproduce a particular crash. To do that I wrote a small\u00a0 python script that takes such a json file, and you specify which testcase you want. Because\u00a0 the .json file contains all the testcases."}
{"prompt": "What function is being looked up when the code crashes inside of the nss_lookup_function?", "completion": "So could be the first, second or whatever. And\u00a0 then the script calls gdb and runs sudoedit with those parameters. This is very helpful to quickly\u00a0 get a debugging setup to investigate a testcase. So let\u2019s look at a first crash, by letting the\u00a0 code run. You can see it stops at the moment where we had our heap overflow in set_cmd. And then we\u00a0 can continue and we run into the actual crash. And this is how I investigated some crashes\u00a0 just to better understand what happens. For example in this case we crash in tsearch.\u00a0 And looking at the callstack, it\u2019s actually quite interesting. Here is a function called\u00a0 nss_lookup_function. And Lookup_function sounds really interesting. I don\u2019t know what kind of\u00a0 function it looks up, but if we crash inside of this, then maybe we can influence what function is\u00a0 getting looked up. And maybe we can do something with that! Really really interesting\u00a0 crash. Definetly keep that one in mind."}
{"prompt": "What could be the reason for a buffer overflow crash happening at a location that does not have anything to do with the objects coming right after the vulnerable buffer?", "completion": "I spent some more time going through the different\u00a0 crashes. But after a bit I noticed, maybe the data is not that useful. Right now I sorted them based\u00a0 on what object came after the vulnerable buffer. I thought that that is interesting, but\u00a0 looking at where it actually crashes it often has NOTHING to do with the objects coming\u00a0 right after our buffer. Like I showed you earlier with the dlopen example. we crash somewhere else. As mentioned earlier, this probably happened because the object that leads to the\u00a0 crash comes much further away on the heap,"}
{"prompt": "What information does the script collect from the backtrace of the crashing function?", "completion": "but we only log the first few objects\u00a0 coming after our buffer in the filename. And so at this stage I thought it\u00a0 would be better to take a step back and look again at the different crashing\u00a0 functions and sort the testcases that way. This might seem like backtracking to an\u00a0 earlier version of this heap analysis script. But we still have the heap object information\u00a0 from our gdb script, which we didn\u2019t have before. so I changed the script just a little bit, to\u00a0 create a filename based on the backtrace of the crashing function. And let\u2019s run this for a while\u2026 I mean, this doesn\u2019t give us any different results. Just differently sorted. And I was\u00a0 just wondering if we can learn more from that."}
{"prompt": "What is the purpose of the fuzzing script running in the background of the video?", "completion": "Now watch this beautiful dog run in slow\u00a0 motion while the fuzzing script runs. Ok it ran for a bit and we have collected a few\u00a0 more crashes. It\u2019s time to get a quick overview. These crashes in set_cmd are weird, because\u00a0 this is the function where we have our overflow. So it crashes super early. I\u2019m not sure what\u00a0 to make of it, maybe this is something cool, but I don\u2019t think so. Another crash we see is in\u00a0 the Exit handler. I quickly peak into the crash condition, but I don\u2019t see anything useful either."}
{"prompt": "What types of exploit primitives are enabled when controlling the address of a free call?", "completion": "This Gettext crash is also weird. We crash in a string compare. Also probably not interesting. Though a really cool crash seems to be those errors related to free. Here we control the\u00a0 address to a free call! In a more \u201ccomplex\u201d program where there is more interaction going\u00a0 on, this would be a good exploit primitive. It would allow us to free any object on the heap.\u00a0 Which means we can turn some other part of the program into a use-after-free condition, which\u00a0 can be quite powerful. though in the sudo case probably not very useful. Remember,\u00a0 we have one-shot and need to succeed."}
{"prompt": "What is a good website for looking into the source code of glibc?", "completion": "But\u2026 now we come to the ones\u00a0 that are most interesting. These nss_lookup_function crashes. We\u00a0 have quite a few variations of them. And \u201clookup function\u201d just sounds soo good, we\u00a0 should really look into what\u2019s up with that! However this code is not part of sudo. It\u2019s part\u00a0 of libc, which initially turned me off. It\u2019s always a bit dreadful to look into a huge library\u00a0 like libc. But I guess we have no other choice. Because it would be too much for\u00a0 this video, let\u2019s do that next time. But for those of you who are motivated,\u00a0 here is again the callstack. feel free to look into the sudo source code yourself and\u00a0 see what the code does. And then head into the libc code as well. It\u2019s really good practice.\u00a0 https://elixir.bootlin.com/glibc is a good site to do that. And next video we will do this together,\u00a0 so you can compare your thoughts with mine."}
{"prompt": "What benefits do patreons and YouTube members receive by supporting LiveOverflow?", "completion": "Also because this video is a bit shorter, and I\u00a0 didn\u2019t have anything useful to add before diving into libc, I thought I use this opportunity\u00a0 to thank my patreons and YouTube members. A video series like this is obviously not\u00a0 very popular. Only huge nerds like you watch this. I am not super motivated by the\u00a0 numbers, obviously, otherwise you would see me only do casual news videos. I make the videos\u00a0 I wish I had when I started out. I hope you agree that this series is quite a unique learning\u00a0 resources. And so I really appreciate the patreons and youtube members who pay it forward,\u00a0 without really getting anything special in return."}
{"prompt": "What is the name of the side channel challenge from the riscure embedded hardware CTF?", "completion": "In this video we are going to recover a private crypto key inside the arduino just by observing it\u2019s power consumption. We are going to perform a differential power analysis attack on an AES implementation. In the previous video we have introduced what power analysis is, and how you can prepare the arduino board to do those measurements. And now we are going to actually solve the first side channel challenge of the riscure embedded hardware CTF. Piece of scake. S-C-A. Side channel analysis. 100 points."}
{"prompt": "What method did Colin O'Flynn use to break a terrible RSA implementation?", "completion": "So this is really a low amount of points and I do have a lot of \u2026 ehm\u2026 opinions about that. You will see. This is an easy SCA challenge using a cipher implementation without any SCA, so side channel analysis, countermeasures. Find the key used to encrypt and decrypt messages. attacks. To encrypt a message, send the letter \u2018e\u2019 followed by 16 bytes. To decrypt a message send the letter \u2018d\u2019 followed by 16 bytes. This sounds really easy. Should be a straightforward thing. Remember from last video how you can break a terrible RSA implementation by identifying the square and, square and multiply operations in a power trace and simply read the bits of the private key?"}
{"prompt": "What equipment is typically required for side channel analysis?", "completion": "That\u2019s like the simple go-to example when introducing side channel analysis, because its so simple. so from the beginning I set my mind to RSA. This is gonna be RSA. I just send a decrypt command via serial to the board, trigger the oscilloscope at the right moment, basically trigger power consumption data collection after I sent the data to decrypt, and then the board will use the private key for the decryption and I can just read the bits from the trace. After the multiple days of fighting with the setup, soldering, knowing about groundloops and capacitors you should remove and requiring all this fancy equipment, I was sure this is what I gotta do."}
{"prompt": "How can one tell the difference between an RSA power trace and an AES power trace?", "completion": "I will be rewarded for learning all this with a simple challenge. It\u2019s the introductory side-channel challenge anyway. Gosh was I wrong. So I\u2019m sitting there, staring at the oscilloscope. Zooming around trying different methods to acquire the data. Like averaging traces or different resistors. I just didn\u2019t see what I would expect in an RSA power trace. This killed already multiple evenings for me. Until I was more or less told, this is not RSA\u2026 this is AES. Fuck my life. Also makes sense with the 16 bytes of data to encrypt or decrypt."}
{"prompt": "What is the recommended equipment needed to perform a Differential Power Analysis attack?", "completion": "That\u2019s the AES blocksize. A rollercoaster of emotions. Happiness of learning something new, followed by pure rage and frustration. So here is the thing. I knew the FAQ introduced differential power analysis. DPA. I also larned about this in a hardware security class at university. So I knew that it\u2019s a thing. And I knew what kind of equipment I need to do this. But I did not expect this to be the case for the first 100 point challenge. In a few minutes you will see why they gave it 100 points, from a certain point of view it makes sense."}
{"prompt": "What year was differential power analysis introduced to the open crypto community?", "completion": "But I completely disagree with it. So what is DPA. Differential power analysis is a more advanced form of power analysis which can allow an attacker to compute the intermediate values within crypto computations by statistically analysing data collected from multiple crypto operations. These were introduced in the open crypto community in 1998 by a company called Cryptography Research. And they are filthy rich now for discovering this and creating a consultancy research company around it. I mean they deserve it I guess."}
{"prompt": "What is power analysis and how is it different from differential power analysis?", "completion": "It\u2019s a pretty crazy attack. With simple power analysis we assumed that the implemented algorithm will perform different operations depending on the private key and thus show a different power footprint. But in case of the shitty RSA implementation you could just multiply and square in EVERY iteration and just keep the result of whatever the current bit was. Thus no difference anymore. BUT there is a deeper layer than that. The power consumption directly comes from the single bits, the transistors."}
{"prompt": "What statistical analysis is performed in order to detect small differences in power consumption during AES encryption?", "completion": "So even if the algorithm performs the same operations independent from the private key bits, those bits would still cause a very very tiny different power consumption. This sounds even more crazy than the simple RSA example. Because these bit changes are soooo small. That\u2019s why you do a smart statistical analysis on a lot of collected traces. I actually don\u2019t wanna explain this method in detail, because it\u2019s fairly complicated and there is a good video by Colin O\u2019Flynn doing exactly the AES example."}
{"prompt": "What is the process of differential power analysis (DPA) used for breaking cryptographic keys?", "completion": "But the gist is, that you collect a lot of power traces from random input you encrypt. Then you make a guess on what the first byte of the private key could be. And then you perform part of the encryption algorithm as if that was the correct key, and given the random input valuesand that key guess, it would lead to different intermediate values. Then you take the traces where this intermediate value is the same for further analysis. If the key guess is correct, the power traces should all have correlation of power usage in that point in time."}
{"prompt": "What tools are available for automatically collecting traces from an oscilloscope?", "completion": "If the key guess was wrong, the traces you selected based on that would have completely different intermediate values, thus random power consumption and nothing would correlate. It would cancel out. So you do this for each possible key and for each possible byte. And in the end you should find the correct key. But how do you actually do this now. I knew I did not want to implement this math myself. Also I would have to write my own tools to automatically collect these traces from my oscilloscope, and the USB or networking API seemed horrible."}
{"prompt": "What are the advantages of using a ChipWhisperer for hardware attacks?", "completion": "I wasted some time with that but then gave up. I knew what I needed. It was a ChipWhisperer. It\u2019s a piece of hardware that is specifically designed for doing this. And it comes with a software that has all these attacks already implemented. I thought about buying one initially, but I assumed an oscilloscope would be more flexible and I could learn more with it. I know some players bought a ChipWhisperer because it was recommended to use it for these hardware attacks. And it costs a bit money. But I think without additional equipment like an extra oscilloscope it\u2019s hard to debug issues."}
{"prompt": "What university does the speaker attend for his masters degree?", "completion": "Anyway, I\u2019m happy with my purchase choice. But I still wanted that ChipWhisperer for this challenge and I knew where to get one from. Some of you know that I\u2019m still a student at the Technical University of Berlin. I\u2019m still working on my masters degree and we do have a small group at the university that does hardware security research. That\u2019s where most of my theoretical knowledge about these attacks comes from and I have a fairly good relationship with them. And they obviously have a ChipWhisperer in their lab."}
{"prompt": "What equipment did Colin O'Flynn use to conduct a DPA attack?", "completion": "So I wrote one of the PhD students and asked if I can come over and play with it. And that\u2019s the awesome thing about a university, you can get access to awesome equipment as well as help and advice. So I encourage every student to take advantage of these things. That\u2019s one of the reasons why university can be really awesome. So when I used it the first time, I just followed the example. Which is a DPA attack on the test board that comes with the Chip Whisperer. Everything is already set up for you."}
{"prompt": "What type of connector is used to connect the probe to the test board?", "completion": "The test board has a connector for the probe. This is the measurement probe. And another broad connector which carries the power as well as the RX and TX lines for serial communication. Then you use the example script, which implements the serial protocol to talk to the test board. Basically it also sends 16 bytes that should be encrypted. And with a click on start, it starts collecting power traces. The trigger for the power measurement and all the other parameters are already set to the correct values."}
{"prompt": "What is an example of an action required to break AES using DPA?", "completion": "Then you let the attack script run, it does the DPA and after a minute or so it finds the key where the power spikes correlated. And you can look at all these fancy graphs and you can feel really cool that you just broke AES with DPA, without knowing shit. And this is why this challenge only gives 100 points. Because in the end it\u2019s just putting in the correct parameters and clicking GO. and then the secret key falls out. Well, there is a bit more to that challenge. But essentially that\u2019s all it is."}
{"prompt": "How did Colin O'Flynn use ChipWhisperer to solve the side channel analysis challenge \"piece of scake\" from the rhme2 CTF?", "completion": "So I took the ChipWhisperer home and spend the next few days trying to do this on the CTF board. There were so many fails. I will tell them now in sequential order, but you have to imagine that they were all intertwined and only slowly I found all these mistakes. It was not a clear progression of \u201cfind error\u201d, \u201cfix it\u201d, \u201cfind next error\u201d, \u201cfix it\u201d. I tried a lot of things and spend hours over hours until I discovered the issues. So while I make it sound straightforward, it was absolutely not. It was hell."}
{"prompt": "How can the ChipWhisperer communicate with the Arduino Nano board when the voltage levels are different?", "completion": "Ok first of all I had to learn how this ChipWhisperer framework works. I realized that the test board is just a little bit different from the CTF board. So I only have to change things like how to trigger encryption or decryption. But before the Chipwhisperer could communicate via serial with the baord, I had to solve the issue of different voltage levels. The Arduino Nano board runs with 5V, while the ChipWhisperer uses 3 volt. So I had to build a unidirectional level converter to convert the 3 v signal to 5v, and the 5v signal to 3 volt."}
{"prompt": "How can one measure the voltage after the resistor?", "completion": "But that worked surprisingly quickly. So this is the setup. Serial connection via the level converter. And then using a RIGOL probe to measure the voltage after the resistor. I was so happy and felt really smart for using the Rigol probe because it fit onto the plug. Then I copied the code for the example script and spend some hours modifying that and I was able to collect traces and run analysis. I thought the difficult part was now to find the correct moment in time where the crypto is happening."}
{"prompt": "What type of level converter is recommended to be used with the ChipWhisperer?", "completion": "At some point I realized that one of the LEDs flashes just before the crypto starts, so you could use that as a trigger for the Chipwhisperer. Again, don\u2019t forget the unidirectional level converter. But after a few days of not being able to find correlations in my captures I was so frustrated and I finally decided to look into the serial communication. And I realized that I did not send the raw data I wanted to encrypt, but I sent it as a hex string. This was obviously completely fucking wrong. No wonder no analysis worked, because the data was just wrong."}
{"prompt": "What components are found in a Rigol probe?", "completion": "So at some point I had fixed that, but stuff was still not working. And it\u2019s really hard to figure out whats going on. The traces I took on the oscilloscope looked really good. I was able to easily see where the crypto is happening. AES has 10 rounds of crypto, and you can clearly see them. They are right there. So my trigger was at the right moment. But when I took traces with the chipwhisperer, I didn\u2019t see that. After many many more hours and days I realized the RIGOL probe is the issue. You know these probes are not just plain metal wires, they have some components in there."}
{"prompt": "What type of probe is typically used in conjunction with the ChipWhisperer?", "completion": "In fact this probe is a 10:1 probe. So on the oscilloscope you actually have to set a 10x multiplier for it. And the ChipWhisperer was not compatible with that. Once I realised that I was about to jump off the next building. What the hell. Then I replaced the nice professional probes with a simple wire. And suddenly the measurements were great. Another challenge I had was to set the sampling rate high enough, because you want to sample a lot faster than the clock of the microcontroller. But setting that is super janky for the chipwhsiperer."}
{"prompt": "What issues did the speaker encounter when trying to break AES with ChipWhisperer?", "completion": "And a looot of other small issues. The software constantly stopped working, I think it\u2019s a memory issue. I had to guess what certain parameters are for. And you can imagine with all the issues I just told you about and not really knowing what\u2019s causing it, it was overall a damn frustrating experience. Is it the capacitors, is something broken, is it interference, is the script wrong, are the aprameters wrong, am I collecting not enough traces, am I at the wrong point in time, is the trigger working, is the data even random, I don\u2019t know."}
{"prompt": "How can traces be aligned for side channel analysis?", "completion": "Oh. And I also lifted a second pin of the atmega up, because there are two VCC connections and I didn\u2019t know if that was maybe an issue. It was hell. RERECORD HERE Anyway. Once the whole setup was correct and working, and I clicked start to collect the traces it started to look really good. Once you have a nice set of traces you have to allign them, because the trigger is not perfect in time. But there are modules for that. Like pattern matching. And then you can run the analysis, and the key magically poppes out."}
{"prompt": "How did the speaker solve the side channel analysis challenge \"piece of scake\" from the rhme2 CTF?", "completion": "There it is. I transcribe the key, and hand it in. 100 points. 100 points for hundredes of euros I spent on equipment and days of work. 100 points. I\u2019m so so so depressed. I also have to give credits to Andres Moreno from riscure who despite my constant ranting and cursing still listned and helped me a lot. Thank you so much! Also thanks to my friend at the TU Berlin and others from the riscure IRC channel. I needed a lot of help for this challenge. But regardless of my hate for this challenge, I\u2019m also really proud for having done it."}
{"prompt": "What is the technique used to automatically test input to some software?", "completion": "Fuzzing is a technique to automatically test input to some software to see what happens. This could be a crash or just general errors or interesting behaviour. Whatever you are looking for. Now fuzzing is not easy. There are a lot of different challenges like speed, scalability, detecting errors or whatever you look for, but also how do you even generate these interesting input test cases in the first place? that\u2019s basically the whole art of fuzzing. For example if a software wants an integer as input."}
{"prompt": "What types of inputs can be used for fuzzing with radamsa?", "completion": "What kind of fuzzy tests would you like to do. Other numbers, leading spaces, small numbers, large numbers, larger numbers, leading zeroes, negative numbers, floats, text, long text, arbitrary bytes? There are so many options. Now if you need a simple but fairly powerful general-purpose fuzzer, then check out radamsa. Radamsa is a test case generator for robustness testing, a.k.a. a fuzzer. It is typically used to test how well a program can withstand malformed and potentially malicious inputs. It works by reading sample files of valid data and generating interestringly different outputs from them."}
{"prompt": "What is an example of a fuzzing test case generated by radamsa?", "completion": "The main selling points of radamsa are that it has already found a slew of bugs in programs that actually matter, it is easily scriptable and easy to get up and running. Let\u2019s revisit our example about this fictional program that wants an integer. And then we use radamsa by giving it one example number, by piping it into the standard input of radamsa. And radamsa then prints a potential fuzzing test case. Now here it returned a huuuuge number. Next it actually returned nothing. So you would test an empty input Then it returned a small number 2."}
{"prompt": "How does Radamsa use unprintable characters to generate meaningful input?", "completion": "Then 256. Now echo also adds a newline after the number we pass in, so for this testcase radamsa simply decided to remove this newline. A few test cases later radamsa even introduced some unprintable characters. You see radamsa is pretty smart in generating good fuzzing input. It tries really hard to create useful input that is not just random bytes but actually has hopefully some meaning for the targeted. Let\u2019s even try it with a simple HTML string. An svg tag with an onload javascript alert attribute."}
{"prompt": "What kind of tests can Radamsa generate to stress the hierarchical structure of XML or HTML?", "completion": "You can for example see here a testcase where radamsa seems to be aware that that\u2019s a number and changed it, and here added some arbitrary bytes before the equal sign, it also constructs invalid HTML by repeating opening or closing tags. Now see we never gave it an empty opening tag, but for some reason it still used one. If you have an XML parsers this is really good test input that stresses the hierarchical structure of XML or HTML. Radamsa is pretty smart and powerful but it\u2019s also so easy to use that you can rapidly prototype a fuzzer for some software you want to test."}
{"prompt": "What challenges arise when using computers to generate random numbers for cryptography?", "completion": "So as you know, each YouTube video has an ID in the URL. It identifies the video. It\u2019s unique for each video and it\u2019s determined randomly when you upload the video. So\u2026 how is it possible, that I know, that this video has the ID ? I hope you are intrigued now!  Randomness is interesting, especially for computers because there is not necessarily anything random about them. We tend to think about them as being deterministic machines. So in terms of security, for example in cryptography it\u2019s a huge challenge to get a good random source."}
{"prompt": "What is the YouTube upload code example that uses the Google API to upload a video?", "completion": "If somebody could predict a random output, then that often breaks cryptography. Now the YouTube ID is not cryptographically important but it\u2019s a nice proof of concept. So did I predict the ID? Actually no, I abused something else. So one day I noticed that the ID is actually known during your upload. You see it right there and you see it in your videos overview. So the files are not yet all uploaded, but you already know the ID it is assigned. And this allows us to perform a small switcheroo. I have basically taken a youtube upload code example that uses the google API to upload a video."}
{"prompt": "How can videos be concatenated without running a special algorithm?", "completion": "And I modified the source code of that in order to switch out the file whenever I want. This means I can start out with the intro of this video, let that upload very very very slowly, and in the meantime I look up the ID it got assigned, and quickly record and edit this ID into a short clip. I render that, and I specifically use the mpg video container because it\u2019s not a very complicated file format and it allows you to concatenate videos simply by concatenating the raw bytes of the file. You don\u2019t need to run a special algorithm that merges the video files."}
{"prompt": "What is the Calypso Chip used for in Motorola phones?", "completion": "Remember the Network Monitor built into the old Nokia phones from last video? It allowed us to get some insight into the GSM traffic between the phone and the basestation and even log messages between the phone processor and the SIM card. But at the end of that video vadim said that it\u2019s not as powerful as the Calypso Chip inside the Motorola phones. So, what is so special about this? On my channel I always try to encourage you to go to the source of information. So this often means to seek out specifications,"}
{"prompt": "What is the process of turning a single frame from the upper layers into a modulated signal at the physical layer?", "completion": "documentations and even the source code, rather than trying to search for the direct solutions or even asking on stackoverflow. But studying and learning about GSM that way, is pretty tough. The specifications of GSM are available in public access for a long time, so one can easily find thousands of *.pdf documents, and get some theoretical knowledge of, for example, how a single frame from the upper layers turns into the modulated signal at the physical layer. The problem is that specifications themself can only give you a theoretical knowledge, but not the practical experience."}
{"prompt": "What is the chipset used in some old Motorola phones?", "completion": "Fortunately, experimenting with such ancient phones, ONE CAN easily get hands dirty with practice! And so this Motorola phone really helps to get some practical experience. Unlike NetMonitor-enabled Nokia devices, some old Motorola phones can give you much more capabilities to play with GSM on practice. I am talking about the phones based on Calypso chipset. Some time ago the private (NDAd) documentation for the Calypso baseband, including both register and hardware definition, was leaked onto a public forum by some unknown persons."}
{"prompt": "How does the difference between the baseband and regular processor of a phone make sense?", "completion": "This leak has made it easier to reverse engineer the firmware of Calypso based phones like Motorola C123. So what is this calypso chipset. Why did you have to reverse engineer the firmware. I mean nowadays you have open source android, right? Why would still be using this old phone with a reverse engineered firmware? How does this make sense. I know a lot of you will already know that there is a difference between the baseband and the regular processor of the phone. But I want to make sure everybody understands this, so let me quickly explain."}
{"prompt": "What is the main CPU used to handle the phone menus, games, and displaying stuff on the screen?", "completion": "In the first video I asked the question, how many computers are in your phone. And we learned that the SIM card is actual it\u2019s own chip running software. and The regular processor in phones is sometimes referred to as application processor. This is what you would consider the main CPU that is handling the phone menu, the games, showing stuff on the screen and so forth. On modern smartphones, you can see it as the CPU that is handling the android operating system, or the iOS and so forth. But even though you view this as the phone,"}
{"prompt": "What type of operating system is usually used to control the baseband chip in a mobile phone?", "completion": "this processor doesn\u2019t actually do much phone stuff. It does not run all the GSM network parts. The android operating system does not contain the source code for speaking GSM, UMTS or LTE. This is implemented in another chip inside the phone. And that is called the baseband. This chip is running it\u2019s own operating system, usually a RTOS, a real time operating system and it has it\u2019s own memory and so forth. This chip is actually controlling the radio part. It is implementing all these complex mobile protocols."}
{"prompt": "What project has been used to reverse engineer the interface to modern Qualcomm basebands?", "completion": "And the android operating system contains proprietary drivers to communicate with the baseband chip. Now depending on the baseband chip used, there is maybe a debug interface available. You have seen one last video, the nokia network monitor. But for example the interface to some more modern Qualcomm basebands has also been reverse engineered and there is a project called SnoopSnitch which we might check out another time. It can also be used to analyse GSM packets. And all of that is great, you get the baseband to dump GSM packets out for further analysis."}
{"prompt": "What is the Calypso Baseband chipset used for in Motorola phones?", "completion": "But really understand GSM and really learn about the protocol, you actually want to have more control over the baseband. And that\u2019s why people tried to reverse engineer not only the interface to those chips, but to reverse engineer the actual firmware. But this kind of firmware is extremely complex because of all the signal processing, timings, and what not. I can\u2019t imagine reverse engineering that. So insight is very limited and ssooo time intensive. But vadim already mentioned what makes the Calypso Baseband chipset in the motorola phone so special."}
{"prompt": "What chip is used for the digital base-band processes of a GSM/GPRS mobile phone?", "completion": "The register-level manuals seem to have leaked at some point. This document is confidential. It was shared under a non disclosure agreement in the year 2000. With something like this you can easily get into legal trouble and I feel a bit hesitant to show it. But in this case these documents have been on the internet for so many years that I guess it\u2019s fine now. Let\u2019s have a look at the general description: CALYPSO is a chip implementing the digital base-band processes of a GSM/GPRS mobile phone."}
{"prompt": "What processor cores does the CALYPSO architecture include?", "completion": "The application of this circuit is the management of the GSM/GPRS base-band processes through the GSM layer 1, 2 and 3 protocols. CALYPSO architecture is based on two processor cores ARM7 and LEAD2. So the chip actually includes two processors. I think the Motorola didn\u2019t have a separate application processor. These old feature phones often had these things combined in a single chip. So the processor that implements some GSM protocol layers is also handling the keyboard input and the display and so forth."}
{"prompt": "What processor is used to communicate with the SIM card?", "completion": "I think the ARM processor is doing that. And then we also have the LEAD2 which is a DSP, a digital signal processing chip. That one is doing the real crazy radio stuff. Here in the document you can also see the features of them. For example the arm chip can talk to the SIM card, which it has to, for example to get the IMSI or doing crypto stuff. But you see it\u2019s a pretty complicated chip with a lot of features. So this documentation is worth gold for anybody who wants to reverse engineer the firmware."}
{"prompt": "What are the memory ranges associated with the Calypso chip?", "completion": "When you reverse engineer firmware of embedded devices you often need to know what certain addresses and registers are for and what the different memory ranges mean. So this document tells you about things like the Memory maps. And I just picked a register that sounded interesting, here is the SIM card related registers. So when you reverse engineer the firmware, and something is reading or writing to this address, fffe:0000, you wouldn\u2019t know what that means. But because in the documentation you can see that this address is defined readable and writeable and it has this name, you know that the code wants to for example initiate the sim card start procedure I guess."}
{"prompt": "What is the purpose of writing a single bit to one of the bits in the Motorola Calypso Chip?", "completion": "Writing the single bit 1 to one of these bits will cause an event, so I guess with that you can start up the sim card? No clue, I don\u2019t know how this works. But you see why you really need documentation like this to understand the firmware that you reverse engineer. And now Imagine you could reverse engineer the whole firmware so far, that you can reimplement it, so that you would have a full open source baseband software. Wouldn\u2019t that be crazy and super useful? Welcome to the OsmocomBB project."}
{"prompt": "What GSM protocol stack layers does OsmocomBB implement?", "completion": "OsmocomBB is an Free Software / Open Source GSM Baseband software implementation. It intends to completely replace the need for a proprietary GSM baseband software, such as: drivers for the GSM analog and digital baseband. And if you click on the digital baseband, it will lead to: Calypso Digital Base Band chip is a popular DBB (digital baseband) implementation for inexpensive feature phones. The wikipedia article of osmocombb also says. OsmocomBB implements the GSM protocol stack's three lowest OSI Layers of the client side GSM protocol and device drivers."}
{"prompt": "What is the motivation behind the development of the OsmocomBB project?", "completion": "And it also mentions the motivation for this. After developing OpenBSC, a Base Station Controller, the authors wanted to create a free client-side implementation of the GSM protocol in January 2010. GSM has been in use since 1991, but OsmocomBB is still the only free implementation, excluding failed projects like TSM30 from THC and MadOS. We slowly make our way to the basestation side, patience, but what is said here is really important. Osmocom, or OsmocomBB is not just a research project that hacked together a proof of concept partial GSM implementation to checkout some stuff."}
{"prompt": "What is the address for the SIM command register in OsmocomBB?", "completion": "When you hear about more modern LTE security research this is generally the state. OsmocomBB is an actual full open source GSM implementation and the intention was not security research, but to serve as a full client-side implementation of the GSM protocol... because the authors developed their own base station software OpenBSC. And just to provide a bit more context now, remember the SIM command register from earlier? We can checkout the osmocombb source code now. Here they define the register address for the sim command register."}
{"prompt": "What is the value of the SIM_CMD register that is written to in order to initiate the SIM card start procedure?", "completion": "Including the exact bit for the SIM card start procedure. And in the sim.c file we can see here a debug output that checks the SIM start command register value and either prints that the SIM card starting procedure is active or not. And we can also see where this event, to start up the SIM card is initiated. In the same file we can find a calypso_sim_powerup function. The comment says it will apply power to the simcard. So this will start up the sim card. And here we see a write to the SIM_CMD register,"}
{"prompt": "What is the ultimate goal of obtaining an exploit primitive in saelo's phrack paper?", "completion": "Let\u2019s have a quick look into the table of contents of saelo\u2019s phrack paper \u201cAttacking JavaScript Engines\u201d. Section 4 is about \u201cConstructing exploit primitives\u201d. And the first exploit stage was to build the primitives addrof and fakeobj. You have seen this extensively covered in the previous videos, so please check them out if you haven\u2019t seen them yet, or refresh your mind before moving on\u2026 But the question is, how do they fit into the larger context? What is our \u201cplan of exploitation\u201d? From here on our goal will be to obtain an arbitrary memory read/write primitive through a fake JavaScript object."}
{"prompt": "What does Linus do in his WebKit exploit to build up memory?", "completion": "And We are faced with the following Questions: I guess for us, most important right now, is the first general question: What kind of object do we want to fake? Now in this video we won\u2019t quite achieve an arbitrary read/write primitive, but we will create some beautiful f\u2019ed up memory, that serves as a strong foundation. After we learned about the fakeobj() primitive we had a quick look at what Linus does in his WebKit exploit. And he was building up these wasmBuffer and wasmInternalMemory objects."}
{"prompt": "What is the underlying principle behind Linus' use of WebAssembly for crafting an arbitrary read and write primitive?", "completion": "Wasm is, web assembly, which is a fancy JavaScript or browser feature, and Linus is using it to craft an arbitrary read and write primitive. But don\u2019t get confused with \u201cWebAssembly\u201d now, it doesn\u2019t really have much to do with WebAssembly itself. The underlying principle, or idea, is different, and more important\u2026. I think we can kinda see what he wants to achieve, with the wasmInternalMemory object. Let\u2019s have a quick peek into the mozilla developer documentation to learn what a normal JavaScript WebAssembly.Memory object is."}
{"prompt": "What is the WebAssembly.Memory() constructor used for?", "completion": "The WebAssembly.Memory() constructor creates a new Memory object which is a resizable ArrayBuffer that holds the raw bytes of memory accessed by a WebAssembly Instance. Anyway\u2026 I really tried to wrap my head around what exactly he is building here, but it\u2019s really mind bending. Here are some of my notes trying to walk through the code and understand the objects. It\u2019s so crazy because these objects are of course, overlapping, even at some point they are pointing to themself and then you have the whole WASM thing."}
{"prompt": "What is the relation between the fakeWasmBuffer and the wasmInternalMemory object?", "completion": "It\u2019s pretty crazy and I didn\u2019t fully get it. Maybe I revisit it at a later point or maybe you can explore it on your own. But just to get a feeling for it, here is the wat, WASM text format code, that he uses. It just implements load and store instructions on the WASM memory. And the memory object is passed to the WebAssembly instance via this importObject, which uses the fakeWasmBuffer. And that one has some relation to the wasmInternalMemory object, which is used to craft an object with apparently huge size values?"}
{"prompt": "How can we use lldb to interact with JavaScript code in jsc?", "completion": "I imagine this internal wasm memory will just span the whole memory now and you can just freely read and write around? But I\u2019m honestly not sure. And because that was too crazy for me, I decided to look into a different proof of concept exploit, from niklas, who of course also builds an arbitrary read/write primitive. but a bit more clear? At least to me. So I removed the proof of concept parts we had in our exploit, kept the little gadget to convert between float and integers, started jsc with lldb, ran our script and kept an interactive javascript console, and now we go step by step through the technique niklas used."}
{"prompt": "What process is used to determine the addresses of objects in memory?", "completion": "Like in our proof of concept where we had a loop to spray objects for new StuctureIDs, we also have here a loop. This loop always creates an ArrayWithDouble, sets one property .a. And then a unique property, so we force to allocate new structureIDs. We do that a thousand times and always add the new array to the stucture_spray array. Then we pick one in the middle, which one isn\u2019t really of significance, we just need a victim object. So let\u2019s take notes of how our objects in memory look like. we can do that, by first describing our objects to get the addresses, and then we interrupt the process with CTRL+C, to examine the memory."}
{"prompt": "How can we access the non-inlined properties of an ArrayWithContiguous object in memory?", "completion": "We want to look at the object itself, as well as the butterfly pointer. So structure_spray looks simple in memory. This is the CellHeader which we know contains some flags and the structureID that says \u201cthis is an ArrayWithContiguous\u201d. and this is the butterfly. Following the butterfly we can look at the array content. As we know to the left of the butterfly pointer we have the size, or length, of the array, and non-inlined properties of this object. To the right of the pointer we have the actual elements of the array."}
{"prompt": "What is the size of the array object in the butterfly address?", "completion": "So here I subtracted 16 bytes from the butterfly. the butterfly address points here. And here we can see the size of 0x3e8 which is 1000 in decimal. So this array has 1000 elements. And starting here we have the array elements. Which of course are pointers to the array objects we have created. So you see the values in memory, but let me also try to visualize the relationship of the objects, because it will get a little bit crazy. So currently we only have the structure_spray object, which is an array has a butterfly with the elements."}
{"prompt": "What is the structure of the CellHeader in memory for an ArrayWithDoubles?", "completion": "And remember we picked one of these elements and called it a victim? So an entry here points to an ArrayWithDoubles which we call victim. And this array of course also has a butterfly. So let\u2019s look at that in memory. Here is the CellHeader which has flags to describe that this is a ArrayWithDoubles. And here is the butterfly. But remember it also had two properties set to 13.37? They are of course stored on the left side of the butterfly, so when examining the memory I subtract a bit more of the address - so the butterfly points here."}
{"prompt": "What flags are used for the two CellHeader values in the video?", "completion": "This array has the size or length of 1. We only had one element in the array, and the element is here. This is the hex representation of the float 13.37. And on the left we have the two properties. .a and the other one. Both have the value. 13.37. Eazy. So this is how our objects structure_spray and victim in memory currently look like. Next we are preparing two CellHeader values. But the flags for one will be ArrayWithDoubles and the other one for an ArrayWithContigous. See here the difference."}
{"prompt": "What value is set for the structure ID when crafting an arbitrary JavaScript object?", "completion": "7 and 9. You could of course just get that from creating such an object and looking at the memory with lldb. The structureID is set to 200. This should be a structureID that was allocated earlier in our array spraying loop. Which means there should be a property .a attached to this structure. Then we use our addrof() and fakeobj() primitives again to craft an arbitrary Javascript Object. First we define an outer object, where we will set two properties. The first property we will call cell_header,"}
{"prompt": "What is the structure of the malicious object created by the exploit primitive in the video?", "completion": "which will be the value that we just set for ArrayWithContigous. And the second property will be the butterfly pointer, and that we set to the victim array. So this is how this object looks like in memory. This is the CellHeader of our outer object, it is not an array and only has two properties, so there is no butterfly pointer. In this case the two properties we set are inlined here, this is the .cell_header and this is the .butterfly. And then we do our magic again. We get the address of outer."}
{"prompt": "How do we use the fakeobj() and addrof() primitives to craft malicious objects?", "completion": "We move the address by 16 bytes up. And then return a JavaScript Object from that address. Boom. we crafted an evil object. So hax is now the object we crafted. It has this cellheader, which makes it an ArrayWithContiguous. And its butterfly is set to victim. So here is how this looks like drawn. We have this outer object. And then we used our memory corruption with fakeobj() to get a hax object, that is just 16bytes shifted forward. So the properties of outer became the hax object metadata. The outer object can be ignored now, and we only consider our hax object."}
{"prompt": "What does accessing an element of the hax object mean?", "completion": "And like already said, the butterfly points to victim. Buuuut pay attention here. make sure you get this. Hax is an ArrayWithContiguous LIKE our victim object. But a normal ArrayWithDoubles, like victim, has the actual array elements inside of the butterfly. This is how a normal Array looks like. And our hax object looks very different. The vicitm\u2019s object metadata are the butterfly of the hax object. Think about what that means. The hax object is an ArrayWithDoubles. So accessing an element, like hax[0], means,"}
{"prompt": "What does niklasb do with the fakeobj() and addrof() primitives to craft malicious objects?", "completion": "you will have to follow the butterfly, to get to the array elements. Which means you actually access the victim object\u2019s metadata. So for example hax[0] is the victim\u2019s cell header, and hax[1] is the victims butterfly. Now if you are just trying to just read that value and trying to print it in the console will cause an immediate crash. I mean these objects are so screwed up now, right?! But looking at what niklas does with this - this is pretty interesting. We start by creating two new arrays. First another generic ArrayWithDoubles, called unboxed."}
{"prompt": "What is the difference between unboxed and boxed values in memory?", "completion": "By the way if you would create this in a script it would actually be a CopyOnWriteArrayWithDouble. Only in this interpreter console it will be an ArrayWithDoubles straight away. So to make sure it also will be an ArrayWithDoubles when executed from a script, you can just assign a new value, and it will have to copy the array\u2026 on write\u2026 anyway. This solves that. The second array we ceearte is called boxed. Quick refresher from last video. Unboxed means you have raw double values in memory. Boxed meanes you have JSValues."}
{"prompt": "What is the fixed value that is added to doubles to create pointers in the WebKit exploit?", "completion": "And there you can have pointers, doubles or integers, depending on the highest bits. Doubles in that case also have this fixed value 0x1000...000 added to it. Anyway. We have now two new arrays. Unboxed and boxed. Both have a cell header and a butterfly that points to the actual array data. Here we can add them to our image of the objects. Just two boring arrays. But now wait for it. like I said. hax[1] is actually referencing the butterfly value of the victim object. And what we do now is, we assign unboxed to it."}
{"prompt": "What steps are taken to overwrite the butterfly of victim?", "completion": "So we overwrite the butterfly of victim. But like with the hax object, victim now doesn\u2019t point to an actual real butterfly with array elements anymore, now the butterfly of victim points into the metadata of unboxed. Now accessing the second element of victim, with victim[1], gets us the butterfly of unboxed. And we remember that butterfly address in a temporary variable. And now it gets crazier. We overwrite the butterfly of victim again, by setting the first element of hax, and we set it to the boxed object."}
{"prompt": "How can we use the fakeobj() and addrof() primitives to craft malicious objects that enable arbitrary memory read and write?", "completion": "So now victim[1] is the butterfly of the boxed array object. And then we overwrite now that butterfly address, with the butterfly we temporarily stored. Which means, unboxed and boxed now point to the same butterfly in memory. So here is the mental model again. We use hax[1] to access the butterfly of victim. Point it to unboxed. Then we extract the butterfly address of unboxed and remember it. Then we set the victim butterfly to boxed, and then use it to SET the butterfly address of boxed to the previously remembered butterfly."}
{"prompt": "What is the difference between unboxed and boxed arrays in JavaScript?", "completion": "So unboxed and boxed point to the same butterfly. And why is that so cool?! Well unboxed is an array that deals with raw double values. No encoding just raw binary double values. But boxed deals with JSValues. It can hold integers, doubles or objects in the form of pointers. It does that by encoding them as JSValues. This is in principle the exact same thing that we achieved with the original bug. There we were able to abuse a bug in the JIT Compiler to confuse the type of an array. It thought it had a ArrayWithDoubles, but we sneakly had converted it to an arraywithcontiguous and shoved in an object."}
{"prompt": "What is the purpose of the unboxed and boxed objects?", "completion": "That object would be stored as a JSValue pointer, so reading that pointer as a double gave us the raw address of said object. To achieve that our original addrof and fakeobj primitives had to always abuse this JIT compiler bug to achieve this confusion between raw doubles and JS Values. But now we have our unboxed and boxed objects, which point to the same memory, and we can use them. If we write a double into the unboxed array. It will just get stored there. Now if that double happens to reprensent a POINTER in memory, then accessing this value from the boxed array, it will be returned as an object."}
{"prompt": "What does stage2_addrof() return?", "completion": "And of course this also works the other way around. Writing into the boxed array some object, we can extract that pointer now as a double via the unboxed array. Let\u2019s use that to reimplement a stage 2 version of addrof and fakeobj. addrof() takes an object and puts it into the boxed array. And we return that element again, but accessing it from the unboxed array. Let\u2019s verify that it works by using a test object. Here is the address from the old addrof(). And here is the stage2_addrof(). Same result."}
{"prompt": "What are the two primitives used to craft malicious objects to implement arbitrary memory read and write?", "completion": "this new method here is so much cleaner, faster and more straight forward. Let\u2019s actually overwrite the old addrof with our new stage2_addrof. We don\u2019t need the original anymore. And of course fakeobj works the same way, just in reverse. Given an arbitrary address, as a double, we write it into the unboxed array. But then we return the first element interpreted as JSValue from the boxed array. Cool\u2026 so much cleaner already. Except if we look into our memory. Our objects in memory look really f\u2019ed up now\u2026 or it looks beautiful?"}
{"prompt": "What is the importance of understanding the memory layout crafted by addrof and fakeobj primitives?", "completion": "I guess that depends on who you ask. TO me this is just mindblowing. But now you may say: \u201cWTF? We just reimplemented addrof and fakeobj. We didn\u2019t actually get arbitrary memory read and write. what\u2018s up with that?\u201d Well having new and more stable addrof and fakeobj primitives is cool, and we will use them, but more important is the memory layout that we have crafted. This f\u2019ed up memory will become very important to implement reading and writing from arbitrary memory. Thus it was so important to dedicate time to understand it."}
{"prompt": "How does the reach hack work in Minecraft?", "completion": "The last Minecraft hacked\u00a0 episode was not well received, because apparently I talked about three\u00a0 different hacks that already existed. Pretty lame. Well\u2026 let\u2019s talk about it. In\u00a0 german we would say: \u201cIch mach mal ne Ansage\u201d So here is part 1. About the reach hack.  I teased the existence of a reach hack without\u00a0 revealing how it works. Because I thought it\u2019s somethin new. Well.. Apparently the reach hack is\u00a0 already known and called TP Aura or Infinite aura. And several people in the comments were exactly\u00a0 right about how it works. The reach is basically a neat trick and it simply involves teleporting\u00a0 to the target, hitting it and teleporting back."}
{"prompt": "What is the maximum \u201cteleport distance\u201d the server allows when sending a PlayerMove packet?", "completion": "This is what took me 14h hours to figure out\u00a0 myself. I know I\u2019m an idiot that it took me this long. Anyway. Let me walk you through\u00a0 what happens when I hit the sheep here. When I click my button to attack this\u00a0 sheep, I first send a PlayerMove packet, which contains the coordinates I want to be\u00a0 at. And I place myself close to the sheep. But you have to be careful. This distance from my old\u00a0 position to the new one, is the maximum \u201cteleport distance\u201d the server allows. Anything further and\u00a0 the PlayerMove packet would be rejected and the server sends back a Synchronize Player Position\u00a0 packet to basically reset the position back."}
{"prompt": "What function does the ClientConnection invoker mixin use to access the sendImmediately packet function in order to execute the reach hack?", "completion": "Alright, we teleport forward. We can increase\u00a0 the reach to hit the sheep even further, if we calculate how far we can be away\u00a0 from the sheep to still hit it. And then factor that in. So after I send\u00a0 the position update to this position, I can send a Player Interact Entity Packet, which\u00a0 says I want to attack this entity, this sheep. And right after the attack I send another PlayerMove\u00a0 packet to put myself back to where I came from. And because I send these packets directly\u00a0 using a ClientConnection invoker mixin to access the sendImmediately packet\u00a0 function, you don\u2019t see anything."}
{"prompt": "How does the reach hack work in Minecraft?", "completion": "I send the packets in the background, so in\u00a0 the game it just looks normal. Pretty neat. ALSO other players don\u2019t see\u00a0 you teleporting either. That\u2019s because of the tick rate of the server. While we might send a lot of movement packets per tick, the server only updates\u00a0 the position to the other players once per tick or so. So while we send, teleport\u00a0 forward, attack and teleport back, all the players will see is, the player\u00a0 is here, and oh this sheep got attacked. Yeah\u2026 it\u2019s really that simple. But it took\u00a0 me a while to figure it out. And even worse,"}
{"prompt": "What is the solution to attacking from further away in Minecraft?", "completion": "I was only able to attack a sheep from this\u00a0 distance. actually It took an embarrassingly additional amount of time, to figure out\u00a0 how to attack mobs from even further away. The solutions is so obvious that I really don\u2019t\u00a0 know why it took me this long. Take a guess. What do need to do to attack from even further away? Simply send more movement packets in between. I think it took me so long because I completely\u00a0 overcomplicated the issue. I was looking for logic bugs and other issues, while I just\u00a0 had to use the packets and movement as it is."}
{"prompt": "How many blocks of distance can be sent in one playermove packet?", "completion": "Anyway. To get larger reach distance you can send playermove, playermove,\u00a0 playermove , always with the max amount of distance that the server allows. You need to\u00a0 research in the code how far that is again, I think it\u2019s like something between 8-10\u00a0 blocks per movement packet or so. Anyway. Then we hit the mob. And teleport backwards\u00a0 with playermove, playermove and playermove. Done. You can basically do this in ONE\u00a0 TICK. so again, other players probably don\u2019t see you teleporting at all. And it just\u00a0 looks like you hit somebody from far away."}
{"prompt": "What techniques should be taken into consideration when implementing a reach hack in Minecraft?", "completion": "Now implementation of this is a bit tricky. The\u00a0 code can get pretty ugly. Your game constantly sends these playermove packets, and when you\u00a0 send your teleports for the reach attack, and in the middle comes a normal player move\u00a0 packet, the teleport distances are messed up and the server resets your position. Also\u00a0 anti-fly kicks are something you need to think about. When you execute reach upwards, you might\u00a0 miss your anti-fly bypass packet and get kicked. So it takes a lot of programming effort\u00a0 and thinking of all the different cases in order to implement something robust. My\u00a0 implementation is not that good and fails a lot. But here is in general the code. So when\u00a0 I have a target Entity that I want to attack,"}
{"prompt": "What is the function used to implement the reach hack in Minecraft?", "completion": "I call teleportFromTo, which calculates\u00a0 how many packets we need to get there, and then sends the position update\u00a0 packets. After that we do the attack, followed by another teleportFromTo\u00a0 backwards to the original player position. Anyway\u2026 all of that took me a lot of time.\u00a0 I\u2019m really not the smartest hacker. I can be very slow when it comes to this stuff.\u00a0 BUT I still figured it out myself. And that is what really matters to me. So I\u2019m\u00a0 actually glad I didn\u2019t know that this is already a technique implemented by hacked\u00a0 clients. And that is what is fun to me,"}
{"prompt": "How does a reach hack work in Minecraft?", "completion": "and that\u2019s how I learn new stuff.\u00a0 I want to figure it out myself. So let me show you the sheep challenge I\u00a0 built.Here for example is 7h3 with a Club Mate in their hand. And I\u2018m very disappointed that\u00a0 they do not use my amazing resource pack. Anyway\u2026 They sacrifice the mate to the enchantment table,\u00a0 a sheep appears far away, hits it with reach. And Completed it. Cool. But can we talk about something else for a\u00a0 moment. WHY THE F\u2019 IS THIS CALLED TP AURA or INFINITE AURA? AND NOT REACH HACK, REMOTE ATTACK\u00a0 OR TELEPORT ATTACK? TP AURA? INFINITE AURA?"}
{"prompt": "What methods can be used to bypass obstacles in a reach hack?", "completion": "Who comes up with dumb names like that? What\u2019s\u00a0 wrong with all you hacked client script kiddies? Anyway\u2026 speaking of reach. Maybe what you don\u2019t\u00a0 know is. There is an even more advanced teleport reach hack out there. Because the basic method\u00a0 we just talked about, where we teleport in steps to the target, breaks when there is an obstacle\u00a0 in the way. When our line of sight for example contains a tree, and we try to teleport\u00a0 into that tree, we get our position reset. So how is it possible that some player on\u00a0 the server can sit inside a house far away,"}
{"prompt": "How can a player attempt to teleport into a vault surrounded by bedrock?", "completion": "and attack players in the spawn\u00a0 hole? Surrounded by lots of blocks? Well\u2026 I can tell you this much,\u00a0 it is a variation of the tp based reach. But\u2026 it uses a few more tricks. So for this I created another challenge. Come with me. I show you\u2026 just behind the trees\u00a0 here. There it\u2019s hidden. This is - The vault. This is a BIG cube of bedrock and it contains a\u00a0 small room storing something valuable. There is no way to enter it. Any teleport attempts into\u00a0 it will fail. Here I try to change my teleport distance attempting to teleport inside. It doesn\u2019t\u00a0 work. You cannot send a position update this far into the cube. It\u2019s too far. Or is it?"}
{"prompt": "How can players press the button on the outside and then moments later press the button on the inside?", "completion": "Well.. if it\u2019s impossible, how can it be that some players can press the button on the\u00a0 outside, and then moments later press the button on the inside? Stealing my valuable secrets? Well\u2026 actually\u2026 I don\u2019t know myself. I have no clue. Really. I stared at the code for\u00a0 many hours and tried to figure it out. And I don\u2019t know. I have no clue. But at the vault I told them: \u201cIf you try to steal my secrets, I will steal and\u00a0 expose yours. I'm serious, you have been warned!\u201d So what\u2019s the conclusion. Yes, the reach hack was already known."}
{"prompt": "What is the most mined material on a Minecraft server according to enderkill98?", "completion": "You were right. But that doesn\u2019t matter! Who of\u00a0 you actually looked into the code and implemented it yourself? This is exactly like downloading a\u00a0 minecraft build, instead of designing something yourself. So I ask you. Do you want to do\u00a0 minecraft hacking? Or just minecraft cheating? Anyway. Let\u2019s come to the community showcase.\u00a0 Today we have enderkill98. Fun fact, He is the player with the most mined\u00a0 cobblestone on the server by far, because he was very busy clearing lava\u00a0 casts from some kiddies. So Take it away."}
{"prompt": "What command can be used to identify the type of file?", "completion": "In this video we will revisit the license check program from last time. You can get the same compiled 64bit binary from github and you can also watch the last video where I went into more detail how to crack this simple program. I will show now different simple tools and techniques that exist to analyse a program like that to circumvent the license check. This should show you that there are a variety of different ways how to solve this challenge. The file command is very useful to check what kind of files you have."}
{"prompt": "What is the range of numbers that do not have a printable character assigned?", "completion": "So \u2018file\u2019 on our binary says it\u2019s a ELF 64-bit executable for Linux. You can also do \u2018file *\u2019 to get the information on all files in the directory. And it then also finds the C source code here. So that\u2019s very useful. Let\u2019s open the program in a text editor like vim. As you can see it looks very weird. I have introduced ASCII before, so you know that every character has assigned a number. But there are numbers that don\u2019t have a printable character assigned. If you look at the man page of ascii, you see that for example value 0 to hex 1f are not a normal characters."}
{"prompt": "What is the range of numbers that a computer can work with?", "completion": "And ascii is also only defined up to hex 7F or 127. But because our computer works with bytes, so 8 bit, this number can range from 0 to 255, And ascii only uses half of them. So all those weird blue values in vim are such numbers that don\u2019t have a printable character assigned. You can also do a hexdump of the file, to get the actual values. \u2018hexdump -C license_1\u2019 and you can see that there are many many 0s in the file. hexdump displays them as dots, but in vim they are the blue stuff. But when you look closely there are quite a few meaningful strings in there."}
{"prompt": "What string is used to compare the license key entered by the user?", "completion": "For example right at the beginning \u201cELF\u201d, which is a magic value, hinting that this file is an executables. You also can find some strings to libraries such as libc, which defines functions such as printf and strcmp. And here we also see strings we know, the \u201cChecking License\u201d, \u201cAccess Granted\u201d, \u201cWRONG!\u201d and \u201cUsage\u201d message. And also this weird looking \u201cAAAA-ZION-42-OK\u201d string. hmmhmh\u2026 Remember from last video that there was a string compare in it? Might get the license key we enter compared to this string?"}
{"prompt": "What command can be used to display the disassembly of a binary file?", "completion": "Let\u2019s try it! Access Granted. Indeed! The license key of this program was in there all along. There is a great tool called \u2018strings\u2019 that is doing what we just did, just nicer. It will scan a file and prints out all printable character sequences with at least a certain length. So let\u2019s try it with \u2018strings license_1\u2019. And there are our strings. Last time we used gdb to read the disassembly and also debug the program. This time let\u2019s just use objdump for the disassembly. \u2018objdump -d license_1\u2019. You notice that this file has a lot of more code than just the \u2018main\u2019 function."}
{"prompt": "What type of architecture is the binary compiled for?", "completion": "That is because the compiler puts a bit more stuff into the actual binary. You know, computers are a little bit more complex than they seem at first. But all of this is just standard stuff you basically find in any gcc compiled binary. And usually only the user created functions like main are interesting to us. Objdump can be used to get a looot of more information about this program. Let\u2019s print everything with \u2018objdump -c license_1\u2019 and pipe it into less for easier navigation. So first it says the file is a elf binary for the x86-64 architecture."}
{"prompt": "What is the size of the .text section in memory?", "completion": "The stack is not executable, indicated by the missing \u2018x\u2019, which is interesting once we will look at classic buffer overflows. And maybe the last interesting info are the sections. We can see here where certain data will later end up in memory. Interesting for us are the .text section. This section holds our code and it starts at address 4004d0 and is hex 1e2 big. And if you check the address where the main function was, you will notice that it\u2019s in there. The other interesting section is .rodata,"}
{"prompt": "What is the command to print a string in the .rodata section using gdb?", "completion": "which is the read only data section. So our strings can be found in there. If you open up gdb and break at the strcmp, you can check the registers. And one of the registers will have an address in from this .rodata section. You can print this address with x/s, and voila, there is our key again. Let\u2019s have a look at another active tool. It\u2019s called strace and it can trace system calls and signals. When I introduced programming in C, we used printf to print text. That was a nice function that we added to our program from the libc library."}
{"prompt": "How does the Linux kernel execute a program?", "completion": "But printf is just a wrapper around a function that the linux system itself provides us. Linux itself offers many different kind of functions called syscalls. You can read more about them in the man page to syscalls. One of those functions is \u2018write\u2019. And write can be used to write text to the standard output, which we can read on the console. So let\u2019s execute the license program with strace. The first line is execve, which is the function that tells the linux kernel to now execute this program license_1."}
{"prompt": "What is ltrace and how does it differ from strace?", "completion": "And then a lot of magic happens that we ignore from now. And somewhere all the way at the bottom here, the code that I have written starts. And you can here see the write syscalls that were executed with the text that we know. Interesting, huh? There is another cool tool called ltrace. Similar to strace it traces certain functions. But this time it traces library functions. Functions like printf or strcmp come from the libc library. So ltrace can show us their occurrence. So first you can see the printf."}
{"prompt": "What is the entry point of the program analyzed in the video?", "completion": "And then comes the strcmp. And it shows us the actual strings it compares. So that also tells us how the license check works in a cool way. Let\u2019s thow this file into a graphical user interface. I will use hopper on mac. As you may know IDAPro is very expensive. But hopper is a great alternative which is actually affordable. Hopper sees that it is a ELF executable and it can automatically analyse it for us. It places our curser at a function called start. And not main. Like we have seen with objdump before, there are a few more functions created by the compiler and this here is the real entry point of the program."}
{"prompt": "What feature does Hopper offer that makes it stand out from other reverse engineering tools?", "completion": "But what those functions are doing is not important right now. We are only interested in the main functionality. So we can look for the main function in the list of labels. So here is our main function, like in gdb. Just a bit more colorful and hopper can also show us with those arrows where branches are going to. At the end of the last video I have already showed the control flow graph which you can access at the top right. And a very cool feauter from hopper is the decompiler. Decompiling sounds like it would reverse assembler code back to C code."}
{"prompt": "How does Hopper help with reversing binaries?", "completion": "But that is not easy. The compiler changes and optimises stuff and you just cannot simply reverse it. But hopper can guess how it might have looked like. Sometimes it makes mistakes, but often it looks pretty good. So it shows us here how it checks if we have supplied a license key, and then it does the strcmp and prints either \u2018Access Granted\u2019 or \u2018WRONG!\u2019. So that\u2019s pretty cool. To the left you can also find a button to display all strings. And as you can see it also found the key. When you click on it it will jump to the address where the key is located."}
{"prompt": "What command do you need to type in order to install Radare2?", "completion": "And XREF stands for cross reference, that means this address is referenced somewhere. We can follow that xref, and we can see that this is the assembler code where the address of the key is moved into the esi register. This prepares the function parameters for the strcmp. Some kids may have the opinion that mac users suck. To please them we will install now radare2 by cloning the radare2 repository with git. You might have to install git with sudo apt-get install git. To install radare run sys/install.sh and wait."}
{"prompt": "What characters can be used to analyse functions in radare?", "completion": "Once it\u2019s installed you can go to the license_1 program and open it in radare with \u2018r2 license_1\u2019. You may remember this address from objdump earlier, this is the start of the text segment that contains our code. first run \u2018aaa\u2019, to automatically analyse an autoname functions. Then use \u2018afl\u2019 to print all functions that radare found. Each character in radare means something. And with ? you always get information about what characters you can use. So \u2018a\u2019 performs analysis of code. \u2018a?\u2019 shows us that we can append \u2018f\u2019 to analyse functions."}
{"prompt": "What command can be used to print the disassembly of the current function in radare2?", "completion": "And \u2018afl\u2019 lists those functions. Makes sense, right? ok so afl shows us that it found a main function. Let\u2019s change our current location with \u2018s\u2019 to seek to the location of the function main. You can also use tab-completion here. Now the location in those brackets changed. With \u2018pdf\u2019 we can print the disassembly of the current function. Like hopper it shows us the disassembly with nice arrows where branches go to. And it created comments for us with strings that are referenced in there. You can also type capital VV to enter visual mode."}
{"prompt": "How can we cycle through different representations of a function in Radare2?", "completion": "This shows you a control-graph view of this function. You can move it around with arrow keys. The blue border indicates that we currently select this box. With Tab and Shift Tab you can select other blocks. When you have a block selected you can move the block with Shift + hjkl. With \u2018p\u2019 you can cycle through different representations. For example with our without the address in the beginning. Or this minimalistic view, which is useful if you have a damn huge function. And with ? you can display a help."}
{"prompt": "How can I set a breakpoint in radare2?", "completion": "This help tells you that capital R is the most important shortcut you will ever learn for radare\u2026 So press Shift+R and be happy. You can also use radare2 like gdb to debug this program. To do that start radare with -d flag. Seek to the main function, analyse all with \u2018aaa\u2019 and display the disassembly with pdf. Now place a breakpoint at the start with \u2018db\u2019. Now go into Visual View with \u201cVV\u201d again. Like with vim you can enter command mode with \u2018:\u2019, where you type \u2018:dc\u2019 to run the program. Now we hit breakpoint 1."}
{"prompt": "How can you step further in radare2?", "completion": "And if you look closely you notice rip in the first box. This shows us where the instruction pointer currently points to. With s you can step instructions. But we should use capital S, otherwise we follow functions which we don\u2019t want to. So Shift+S to step further. Ah damn. We didn\u2019t supply a license key. But you get the idea. I hope this helps you to explore more tools and techniques. And remember that no tool is better than the other. They all have different features and representations of information."}
{"prompt": "What is the syntax for the 1.4.7 sandbox bypass?", "completion": "In the last video we used the very simple sandbox bypass from version 1.0.8 and checked why it doesn\u2019t work anymore for 1.4.7. After that we started to look at the sandbox bypass from gareth heyes for this new version. In this video we will continue where we left off last time and debug the AngularJS code, evaluating the evil expression that will lead to an alert. So as a quick reminder, the sandboy bypass looks like this. It has two parts. The first part attempts to overwrite the charAt function with another function."}
{"prompt": "What is the concept behind the new sandbox bypass for version 1.4.7 by Gareth Heyes?", "completion": "Which hopefully screws up angular internally. And the second part is dollar eval, which is the angular eval to evaluate an expression. So this is basically a new expression inside of the other expression. Also remember that a lot of stuff has changed internally from the old version. The concept is the same - angularjs parses an expression, evaluates it and somehow executes it. Just how it\u2019s done has changed. We will see what it does by stepping through the code. Ok. Let\u2019s start for real. Here we are at the first breakpoint that we hit after we load the page."}
{"prompt": "What is the first step in a compiler?", "completion": "I placed this breakpoint into a function called lex. This is the Lexer. Wikipedia tells us that lexical analysis is the process of converting a sequence of characters into a sequence of tokens. The lexical analysis is basically the first step in a compiler. So if you are a computer science student and always wondered why the heck you ever need to know compiler construction, here is a real life example. Also if you look at the call stack you can see that the lexer is called from somewhere with the name AST compiler, which stands for \u201cAbstract Syntax Tree\u201d compiler."}
{"prompt": "What does the lexer function in AngularJS do?", "completion": "It sounds weird but that is literally what this is. AngularJS implements a compiler that takes an agnularjs expression, which looks like javascript and compiles it to real javascript. There is a damn compiler inside of angularjs. A compiler that compiles something like javascript to javascript. Anyhow\u2026 still freaks me out. Back to the lexer\u2026. So. This function has one parameter called text. And text contains the current angularjs expression. According to wikipedia this lex function should parse a string and extract tokens from it."}
{"prompt": "What is the purpose of the while loop in the video transcript?", "completion": "And after our breakpoint we can see a while loop that does exactly that. This while loop iterates over the full length of text. And in each iteration it will use text.charAt to get the next character of the string. So the first character would be the single quote from the string a. When we step one step further we get to an if that checks if the character is a single or double quote. Which is obviously the case. So we will follow this and call the helper function - readString. Because this single quote is an indication that a string starts."}
{"prompt": "How does the AngularJS parser break down an expression into individual tokens?", "completion": "And this whole while loop is full of ifs and helper functions like that. But in the end we will get an array of tokens. So lets continue until this next breakpoint. Now we should have all tokens extracted from the expression. This.tokens is now an array of Objects. The first object, or token, is the string \u201ca\u201d. Because it\u2019s a fixed string this is also considered a \u201cconstant\u201d. The next token is the dot between the string and the constructor. And the third token is the constructor. Which is considered an identifier."}
{"prompt": "What is the 8th token in the lexical analysis?", "completion": "All variable names and function names etc. are identifiers. Also for example the 8th token is the equal. Which is an operator. And before that we have the charAt function name, which is also an identifier. Now when I press continue until we hit the next breakpoint a loooot of stuff will happen. And we all skip that. Basically this lexical analysis to extract the tokens was the start of compilation and now we will have a look at the result of the compilation. So we skip the whole complicated compiling part."}
{"prompt": "What is the result of compiling an Angular expression to JavaScript?", "completion": "So continue. And now we are here. At the end of AST Compile. Just before our breakpoint we have here this variable called fnString. Stands for function string. And I printed that string to the console log down here. And this. is . the compiled javascript code. That is the result of compiling our angular expression to javascript. This looks a bit awful to read, so let\u2019s copy it over into javascript beautifier to indent it properly and have a look at it. Sweet. That looks more readable. It might look crazy and complicated at first,"}
{"prompt": "What is the purpose of the ensureSafeObject function in AngularJS?", "completion": "but it\u2019s actually pretty simple. So first of all, this code starts like our expression with the string a. And stores it in the variable 4. Then it attempts to get the constructor from variable 4. So the constructor of the string. After that angularjs added a function ensureSafeObject to check if the constructor of variable 4 is safe. And because that is just the String constructor, it\u2019s considered safe. Remember that this function was responsible for the exception when we tried to access the function constructor with the old bypass."}
{"prompt": "What is the first step in the right side of the assignment?", "completion": "After that the constructor is moved into variable 3 and checked if it has the property prototype. If that\u2019s the case, the reference to prototype is saved in variable 1. And as a last step we check if the string prototype stored in variable 1 has a charAt property. Now we are done with the left side of the assignment Up next is the right side. Here we start also with a string. String b is moved into variable 5 and follows it up with referencing concat of it and moving it into variable 0. Then angularjs checks if charAt of variable 1 is a safe object."}
{"prompt": "What is the crucial part of the exploit?", "completion": "But that is obviously just the normal charAt function and that\u2019s considered safe. Afterwards variable 1 itself is checked, because we are about to assign something to the string prototype in variable1 and angularjs want\u2019s to be sure it\u2019s safe to assign something to that object. Man. If angularjs would just know what is about to happen. Now the crucial part. We assign the concat function in variabvle 0, to the charAt function of the String prototype in variable 1. Now the first part of the exploit is done."}
{"prompt": "How does the exploit initiate another parsing, compilation, and execution of the string parameter?", "completion": "At this point charAt should have laid an alien egg inside of angular\u2019s body, which is about to hatch and break out of angular\u2019s chest. The following few lines are then the second part of the exploit, which is fairly short. It basically gets dolalr eval now from the scope object, does some checks on those variables, including the string parameter we pass to dollar eval, but it\u2019s just a string. So all is safe. And eval is called, which initiates another parsing, compilation and execution of this string."}
{"prompt": "How is the compiled code used in the sandbox bypass for version 1.4.7?", "completion": "Now that we understand the compiled code. So let\u2019s see what happens with that. After our old breakpoint fnString is used in a call to the good old Function constructor, which will create an actual function that can then later be called. At the end it will return this function fn. I\u2019m about to hit continue again so we will jump to our next breakpoint. The next breakpoint is inside if ensureSafeObject. That is one of the function called from the compiled code. So that means we are actually inside of our executing expression."}
{"prompt": "What is the name of the compiled function that is referenced in the call stack?", "completion": "Go! Boom. ok. Ensure SafeObject. In the call stack we can see that we are coming from fn. And fn is this compiled function. You can pretty print this code by clicking on the curley braces in the bottom left of the source window. Yep, this looks familiar. Just what we looked at before. Here is our string a. And getting the constructor of it. Etc. When I now continue we are again in ensureSafeObject. This time further down in the code. Actually right before we assign and overwrite charAt. Just one more check before, the ensureSafeAssignContext."}
{"prompt": "How does AngularJS extract single tokens from a character sequence?", "completion": "Ok let\u2019s continue a bit more, until we are back inside of the lexer. Why are we here again? Well as you can see in the call stack we are coming from fn. And fn called dollar eval. And dollar eval is just now triggering evaluation and execution of this new expression string. As expected, text is simply what we passed to dollar eval. But let\u2019s step further. We are again heading into the while loop that is supposed to extract single tokens from this character sequence. The index starts again at 0. So now angularjs tries to get the first character from the string with charAt."}
{"prompt": "How does the validation function isIdent recognize strings as identifiers?", "completion": "But charAt is not charAt anymore. The alien hatches and feeds on angular\u2019s intestines. Charat zero appends now zero to the string, instead of returning a single character. So ch is super long and thus not the start of a string. It\u2019s also obviously not a number. BUT! The validation function isIdent thinks that this is now an identifier. Remember that usually variables and function names etc. are identifier. That means that usually identifiers do not contain special characters, such as the equal or curly braces we have in this string."}
{"prompt": "How is the exploit embedded in the resulting JavaScript code?", "completion": "And if we continue now to the end of the loop, and look at the tokens, we can see that there is only one token. And It\u2019s an identifier with our whole string. That is just wrong. An identifier should not have those weird characters inside. If we continue now, we hit the next breakpoint at the end of compilation. And we can have a look at the resulting javascript code. Let\u2019s again copy it over to js beautifier to see what happenned. Ah. You can already see here the part2 of our exploit embedded in the javascript code."}
{"prompt": "What characters are used in the identifier that cause it to be placed in the compiled code?", "completion": "You can also see that it\u2019s S. Dot. exploit blah blah. Remember that all expressions are evaluated against the scope object? Well because angularjs thought we had an identifier in our expression, it placed that identifier in the compiled code by checking if the scope object has such a proeprty. In this case this totally blows up because the identifier had non valid identifier characters. When you ident it properly it becomes more clear. You can see now the start of our expression with exploit equals 1 and the three closing curley braces."}
{"prompt": "How does the AngularJS sandbox bypass for version 1.4.7 work?", "completion": "Then the breakpoint and then the alert one. So when we continue now, we should hit that breakpoint. Boom. Indeed. We are inside of the compiled code at the breakpoint. Pretty print it again. And let\u2019s enjoy this beauty for a second. Then hit continue, which will execute alert. Awesomeee! And this is how the angularjs sandbox bypass for version 1.4.7 works. We overwrite the charAt function that is shared for all strings. Which breaks how angularjs parses expressions allowing us to inject bad characters as an identifier in the compiled code which we can abuse to break out and write arbitrary javascript code."}
{"prompt": "What hardware platform is used for the riscure embedded hardware CTF?", "completion": "Welcome to another video covering the riscure embedded hardware ctf. Basically it\u2019s about hacking an embedded device as part of a competition, and if you want more details about it, checkout the introduction video and the playlist. Also at the time of releasing this video, the competition is over and the sources should be available and you can setup your own arduino nano board to follow along. You find some links in the description. But now let\u2019s checkout the challenge. So now that we solved the first two easy challenges,"}
{"prompt": "What is the first step to take when solving Photo Manager from the riscure embedded hardware CTF?", "completion": "and Jumpy was already pretty hard for me, I decided to write a little program that crawls the current scoreboard and counts which challenges have the most solves. This way I can see which challenges I should be capable of solving. And it looks like Photo Manager will be our next target. It\u2019s another exploitation challenge. The story here doesn\u2019t really tell us any technical information, so let\u2019s head right into it, download the .hex file, flash it onto the board and start a screen session to interact with it."}
{"prompt": "What is the challenge in the riscure embedded hardware CTF that the video is about?", "completion": "So\u2026 the first time I approached this challenge I didn\u2019t really follow a structured path and basically just played around with it. I found the bug quickly, but when I tried to actually solve it with the bug I found, I didn\u2019t really have a good mental picture on how to move forward. Basically all my information was jumbled up. It\u2019s difficult to explain what I mean, because my solving attempt itself, was so messy that it\u2019s not possible to explain my thought process - because there was none. Sometimes that approach is ok, because it can be very quick if you get lucky or know what you do, but here I failed."}
{"prompt": "What is the scientific method for solving the Photo Manager challenge from the riscure embedded hardware CTF?", "completion": "I wasted actually like 2 hours on that until I decided, scrap all that, I start over again. Which was the right decision. I kept turning in a circle. For the second attempt I didn\u2019t try to rush the solution but properly structure the attack. Basically we follow the scientific method. First we observe behaviour, then build a mental model of the system, on which we can create certain assumptions that we can try to proof or get them disproven and adjust the mental image. This means, we go step by step."}
{"prompt": "What is the only input option available to the user?", "completion": "First, what can we can we actually do? We see a menu with 2 options. Login and Memory manager. With login we can apparently enter some token, of the length 8, that contain these letters. If we do that we get a welcome message and those 8 characters back. There is also a memory management option, that displays the total memory space and the currently used space. So in our mental model we can take note, that the login name seems to be our only input we have, so whatever our attack will be, it is very likely that it will at least start with some, login input."}
{"prompt": "What happens when more than 8 characters are entered into the Photo Manager program?", "completion": "The memory management seems odd for now, but probably might be important information, why else would it be there. We can also enter some more characters, this time less than 8, and notice that the previous As are still there and were simply overwritten. Interesting. Maybe useful, maybe not. It also didn\u2019t change our memory usage. We can also try what happens when we enter more than 8 characters, in this case I tested 16, it did overwrite the As, but still only 8 characters are printed. And again, memory usage is not affected by this."}
{"prompt": "What is a stack cookie and how is it used as a buffer overflow mitigation?", "completion": "Ok, so we can assume some kind of fixed global buffer for the input, because we always overwrite and work on the previous entered data. So if this is some limited memory space, let\u2019s see what happens when you enter a lot of data. I keep the letter a pressed to send a lot of letters, and suddenly we get a stack cookie corrupted message. Awesome, so the buffer we operate on seems to be on the stack and has a cookie at the end. A stack cookie is a simple buffer overflow mitigation, which means you place a random value after your data, which is checked before,"}
{"prompt": "How long does the input have to be to overwrite the stack cookie?", "completion": "for example, the current function returns. And if the value is still the same, the cookie was not overwritten right? SO no buffer overflow took place. But in this case, the application doesn\u2019t quit or reset, and thus maybe not regenerate the cookie. This means we can slowly bruteforce the correct value. Even if the cookie were always random, it might only be one or two bytes long, which can be simply guessed correct by chance, because we can automate it and let it run for a while. So to explore the stack cookie further, we first need to know how long the input has to be to overwrite it."}
{"prompt": "What technique is used to bypass a buffer overflow mitigation in the \"Photo Manager\" challenge from the riscure embedded hardware CTF?", "completion": "Let\u2019s write a script. We can copy some code we have written before to interact with the board. Because we still don\u2019t know what the memory usage is for, we better not ignore it completely, but keep that information with us. So we select menu option two and read that data. Then we select option 1 to login, and simulate the keeping a key pressed by always only sending one character. After each character we check if the board sent us the corrupted cookie alert, and if that is the case, we break. We leave the loop."}
{"prompt": "How does the memory usage and the length required for the buffer overflow correlate?", "completion": "Otherwise we increment the counter, which counts how many characters we have sent. At the end we can print the used memory and the length we need to overwrite the cookie. When we now run it, and you paid attention, you might notice that the used memory number changed. Actually it changes every time when we make a new connection with the board. And not only that, now we see that the length that is required to hit the stack cookie also varies. Doing some simple math reveals that the memory usage and the length required for the overflow is correlated."}
{"prompt": "How can we bypass a buffer overflow mitigation through bruteforcing a stack cookie?", "completion": "This means by knowing the used memory we can calculate now how long the input has to be to overflow the cookie. Cool. So let\u2019s write a loop that bruteforces the cookie value. We don\u2019t know yet how many bytes the cookie will be, so let\u2019s start by bruteforcing the first byte, and then go from there. Basically we loop over every possible byte value and then wait for the menu to be written, select option 1 to login, and send enough As to fill the buffer plus the character that will overwrite the cookie."}
{"prompt": "What characters should not be included in the loop when bruteforcing the stack cookie?", "completion": "Actually had that calculation here wrong, because it never found a correct value. I sent one A too much. Anyhow, once we would find a character that did return a corrupt message, we can stop the loop and use that to explore the next byte. Also the loop should not start at 0, and also not include newline or carriage return, which is 0xa and 0xd, because they probably end our output prematurely, and we don\u2019t want that. So once we find a valid cookie, we can then basically use the same loop again, and bruteforce the next byte after the cookie."}
{"prompt": "What is the effect of overwriting the byte with a value of 1 or 8?", "completion": "Obviously we don\u2019t know yet what the next byte means, maybe the stack cookie is two bytes long, or maybe something else. So let\u2019s remove the break here and let us see the response for ALL possible bytes. When we run this now, we will find the valid cookie quickly, and then go on to overwrite the byte afterwards. And that byte seems to control the length of the input. See how overwriting it with a 1 only outputs 1 A. Or overwriting it with 8 will have 8 As. And you see that after 8, it will start to complain and say that the input is now too long, and it is exactly the byte value again."}
{"prompt": "How did the flag output in the challenge get triggered?", "completion": "So this byte controls the length. Interesting. No idea yet what that could be used for, but we can update our mental model of how the memory layout looks like. Maybe we have to explore a couple of more bytes and find something that could be used for an attack. Eh\u2026 wat? The flag? Our loop finished, and it looks like the highest value for that byte, hex ff, or 255 in decimal triggered the flag output. That was unexpected, but I take it. This challenge was really a good reminder for myself, that I should not approach a challenge without a plan, but follow a structure, make notes, and really think about what I\u2019m doing."}
{"prompt": "How can someone transition from another job into the field of hacking?", "completion": "\u201cWhere should I start? Can you guide me? What resources can you recommend me?\u201d I get this asked a lot. TLDR: I don\u2019t know. I genuinely don\u2019t know. Before I tell you my thoughts I have to mention that I\u2019m young. I have very limited exposure to the industry, I have not had different jobs in this field. And so I really don\u2019t know how to transition from another job into it. What certifications to get, how to balance a full time job and a family. Anything country specific. I really can\u2019t help you with that because I have 0 experience."}
{"prompt": "What are some misconceptions about how to get into the security field?", "completion": "All I can look at is my life and tell you my thoughts about it. If you disagree with what I will say, or it doesn\u2019t help you, then you need to ask somebody else. I don\u2019t have the answer. But I think there are a lot of misconceptions about how to get into the security field. And I try to explain now why. Maybe you think there is some kind of shortcut. Or at least a very efficient path. You hope a professional or experienced person can easily tell you about a clear path to success. I certainly had exactly those thoughts several years ago."}
{"prompt": "What advice would you give your younger self when it comes to learning hacking?", "completion": "I got frustrated why nobody would write down a clear guide. I felt somewhat entitled that I have good experience already, I just need some guidance or mentoring. But the truth is: there is no efficient path Truth is: it just takes years of experience So if you think that somehow it would be easier with a study plan, it\u2019s not. So forget it. I\u2019m sure you know this interview question: \u201cwhat advice would you give your younger self?\u201d And for me, I don\u2019t know. While certainly thinking differently at the time, in retrospect, I don\u2019t think there was anything bad or inefficient about the path I took."}
{"prompt": "What are some of the obstacles to learning hacking?", "completion": "Of course I could help my younger self understand certain concepts better and faster, and that\u2019s what I try to do with the videos, the videos cover exactly what I would tell my past self, but I couldn\u2019t lay out a path of do X, Y, Z. There is no secret step by step guide! It\u2019s not a straight path, but a web of interconnected topics, layers and dependencies and you are free to walk and jump between stuff however you want. Truth is: anything you do. Any tutorial you follow. Any project you start and never finish."}
{"prompt": "What is the main point that the speaker is making about hacking?", "completion": "Any dead-end you head down. It\u2019s not wasted. It\u2019s all experience that is accumulating over time. If I learned anything about Hacking. What it means, what it is, then at least to me, it\u2019s not really something I can get a hold on. It\u2019s an abstract artistic and broad term for many different things. Truth is: Hacking is just learning IT stuff, but kinda in an artistic weird creative way. Maybe now you say, well tell us about your path then? Clearly it got me somewhere right, maybe that\u2019s the ultimate guide."}
{"prompt": "What programming language is similar to Visual Basic Script?", "completion": "While there are a few things I can mention, my path is also full of just luck. Opportunities I have never planned for. So it\u2019s also somewhat not applicable to anybody else. Nevertheless, here a few checkpoints that maybe give you some idea. As a kid I started with some HTML Then I got a book about Visual Basic Script. And I wanted to write an operating system in it. If you have ever written Visual Basic Script, it\u2019s a bit like Javascript, so you know how ridiculous that idea was. But that didn\u2019t hold me back, I asked this question in a forum and was called a dumb TROLL."}
{"prompt": "What programming languages did the speaker learn to create browser games and Android apps?", "completion": "I was really sad that day, because I was just a kid trying to learn something and I had no idea what it means to have an OS. Anyway, at some point I got into web programming with php. So I had to learn actual HTML, CSS, javascript, php and mysql. I started and abandoned several browsergames projects. Then I heard about sql injection and did a school project on it. Here, I wrote a test application and explained how injections work. I started to learn java and got into android app programming Did some C++ and a bit of game programming."}
{"prompt": "What was the first CTF that the speaker discovered?", "completion": "Made a shitty monopoly clone. Then I did some Google Wave gadgets, does anybody remember that. I was just a dumb kid and my code was ugly but my poll gadget got some attention from professionals. That was cool. I learned more computer science fundamentals in university. Data structures and algorithms. Learned about linux because I started to use it at work Joined a hackerspace and learned about arduinos and soldering And then I guess the major turning point, I discovered my first CTF, the stripe ctf,"}
{"prompt": "What steps did the speaker take to become a freelancer in the field of security?", "completion": "got hooked on wargames and other challenge sites. And essentially here I am now. And now I\u2019m a freelancer doing security code audits, pentesting, application security and that kind of stuff. And please don\u2019t ask me how to get into freelancing.I have no clue how to do it. I met a guy, who knew a guy, who recommended me and here I am. So that was not planned at all. And looking at my history, imagine that these are just large checkpoints. It\u2019s not on a straight path. It\u2019s traversing through a jungle of different topics."}
{"prompt": "What is the coastline paradox?", "completion": "it\u2019s kind of like a fractal or the coastline paradox, if you zoom in you uncover even more complex lines. There is a lot of stuff I did not mentioned in this highlevel view. Like making RPG Maker games, where I was first exposed to if-else logic blocks. Or modding my calculator with a window and LEDs. one of my first exposures to electronics. If you ask me where to start, where should I point you to? Is the start the first HTML line wote as a young kid? Or is the start when I had already years of programming experience and discovered CTFs."}
{"prompt": "How can understanding how computers work help a hacker think about how something could break?", "completion": "I have no answer for you, you have to figure that out yourself. But one truth is, I didn\u2019t discover any secrets. There is no anonymous secret hacker organization with forbidden knowledge. I simply apply the knowledge that I gained about computers over the years. You know, Programmers use the same knowledge but just think differently. they think: \u201chow can I make it work\u201d And a hacker thinks: \u201chow should you implement it, so that it\u2019s secure, and what could a lazy programmer do wrong?\u201d Truth is: the more you understand how something is built, you can also think about how it could break So I\u2019d say 95% of what I\u2019m doing is just learning about how computers work."}
{"prompt": "What are some of the topics covered by the broad basic understanding of hacking that the speaker has gained?", "completion": "And by that I mean learning a ton of different programming languages, frameworks, concepts, and so forth. Over the years I gained a very good broad basic understanding from low level logic gates, over simple circuits, to PCBs and chips, microcontrollers, low-level programming, assembler, c, firmware, operating systems, higher level languages, language and programming concepts, data structures, file structures, 3D programming, networking, cryptography, servers, server administration, websites, frameworks, databases, web apps,"}
{"prompt": "How can a hacker manipulate the output of a system?", "completion": "mobile apps, math, machine learning, the list is endless. And you see, nothing on this list screams \u201chacking\u201d or \u201csecurity\u201d. Because this knowledge is just the base requirement, the tool that I use to do my job as a \u201cprofessional hacker\u201d. Like I said, it\u2019s not secret knowledge. It\u2019s everything a programmer, sysadmin or whoever would learn, just applied a bit differently. So I\u2019m thinking: \u201cwhat could go wrong. How can files be exposed. How could I gain access without a password. How could I modify sth that shouldn\u2019t be modifiable, how can I manipulate the output\u201d and so forth."}
{"prompt": "What technologies do programmers and IT architects use to build applications?", "completion": "And maybe it\u2019s surprising to you, but that\u2019s not different from what a programmer or IT architect would do. They use the exact same technology just have different thinking patterns. Different problems they try to solve: So they think \u201chow could I use these things to build a social network, how could I build a time-laps camera, how could I make a fun game\u201d. Different problems, different goals, but based on the same knowledge. And the security focused stuff, like conference talks, CTF writeups, trainings, academic papers,"}
{"prompt": "How can hacking be related to other areas of computer science?", "completion": "blog posts, are essentially just sharing cool ideas how to apply this knowledge in a security focused way. And that is not different to a programmer sharing techniques on how to handle huge dataset efficiently, or how to implement a game AI. Don\u2019t think of hacking as anything crazy or special. It is based on exactly the same thing just with a bit different angle. Breaking not building. So to summarise: hacking requires a lot of knowledge about computers. And I say generic computers, because it could literally mean anything IT related."}
{"prompt": "What advice does the speaker give for those learning about computers, programming, and following tutorials?", "completion": "And learning a wide variety of technologies and gaining experience and knowledge to draw from, just takes time. It takes years. So any game you develop, any minecraft redstone circuits you build, any boring sorting algorithm, any math class any mobile app you start and abandon, anything you do is knowledge you accumulate and eventually can use. So one general advice I give is, it takes a lot of time, so make sure you have fun! Enjoy learning about computers. Enjoy programming. Enjoy following tutorials."}
{"prompt": "How can one learn about Android security while writing an Android app?", "completion": "Enjoy learning a new language. Whatever it is that you have fun with, it will keep you motivated over the years. Don\u2019t get me wrong. You don\u2019t have to first program for years and then get into security. You can do it in parallel. When you write a android app, look into the official android security tips. Think about what could go wrong. What happens if you don\u2019t follow it. Play around with that. Maybe at some point you want to build a web api to be used by the app, and suddenly you learn web development and server administration."}
{"prompt": "What techniques are necessary for debugging a connection?", "completion": "Then you have to debug your connection, you look into web proxys and how that can be used to analyse and test stuff. This is essentially the process you will be doing for the next few years. And that\u2019s what I do all the time. You know the thought of being able to hack an iphone, a gaming console or banking terminal is motivating, but good chance is that you are just very very far away from that. I\u2019m at least not there yet. I failed with my nintendo switch hack attempt. I barely understood the surface."}
{"prompt": "How can one break up a large goal into more achievable steps?", "completion": "But that\u2019s fine, I keep learning. And I have a ton of fun with learning basics and learning a new programming language and learning new technologies. And in a few years, in two more console generations, maybe I know enough to join one of those teams. I know you might still feel frustrated, where to start. But if you feel frustrated, then that\u2019s probably because you picked a target way too large for you. If you don\u2019t know the steps you need to take, it\u2019s too far away to see how to get there. So try to break that goal up."}
{"prompt": "What are some programming languages commonly used to build websites?", "completion": "For example if you want to get into bug bounties and you have no clue how to do that. Analyse it. Sit down and try to uncover the underlying topics. For example bug bounties are usually web security. Web security means hacking websites. Websites can be written in a ton of different languages. So start with one, learn php, learn what can go wrong with php. Learn about different php frameworks. Learn about different databases. And with \u201clearn about\u201d I mean, write your own test websites, use the frameworks, just play around with it and gain experience."}
{"prompt": "How are the typical web security issues for Ruby, Python and PHP different?", "completion": "When you get bored with php, look into python. Learn about python flask and django. What can go wrong with python websites? What can go wrong with ruby websites. Do you see how the typical ruby, python and php web security issues are super different, because they are different languages? Learn about javascript, learn about html and then try to understand what XSS means. You see how that single topic just immediately exploded in so many sub categories, and here you have a list of stuff you can spend years on."}
{"prompt": "What research activities should be completed when learning about how to hack?", "completion": "Ad it\u2019s not a step by step path. It\u2019s a collection of topics and you basically jump around between them, and slowly understand them deeper and better. Over the years I have revisited the security of php websites and I always learn a bit more. And you can even go so deep to look into the actual php C source code. So this is what you have to do. Break it up, try to understand the layers that build up whatever you want to do, and learn these layers. It\u2019s a bit of research, but that\u2019s part of it. And another thing I want to make clear, you won\u2019t find these things when searching for \u201chacking tutorials\u201d."}
{"prompt": "How can I reference official avr assembler reference for hacking tutorials?", "completion": "That\u2019s something I had to learn. Truth is: most resources hackers use are regular documentation and programming resources. Hacking tutorials, like what I show you in videos, is just showing you how to apply that stuff to security. You don\u2019t need to rely on me or any other person to write it up for you, you can do it yourself. In many many videos I\u2019m not referencing any secret hacking book, I just simply open the official avr assembler reference, or look into the php function documentation or look at the official linux manual pages."}
{"prompt": "What strategies does LiveOverflow suggest for learning hacking?", "completion": "So let me summarize: No! There is no clear easy path to learn this stuff and I can\u2019t help you. There is no secret book or website to learn it. The more you understand computers, the more ideas and understanding you have what can go wrong. Programming, abstract theory and so forth is important to understand computers And just have fun. If making games sounds fun, make games. It takes years to accumulate this knowledge, so make sure you enjoy the ride And one last thing I want to say. I make the videos in a way, I would have loved to watch them some years ago."}
{"prompt": "How can someone with prior programming experience use the videos on the channel to gain further knowledge?", "completion": "Which means I already had experience with programming. So I guess my channel is not intended for complete programming beginners, but I still hope that what I just described helps you to get somehow started. And if you have some experience, just keep watching my videos and take them as inspiration to look deeper or into different topics. You absolutely don\u2019t have to understand everything, but catching one thought, or seeing one tool I use can be all the difference. And I hope the videos at least give you a rough idea how stuff works and you can research it once you actually need it."}
{"prompt": "What websites can I visit to find challenges and resources to help me learn hacking?", "completion": "If you want some more guidance you can also checkout my playlists. I have fairly long binary exploitation playlist, mostly based on exploit-exercises.com. But I also have some websecurity videos. Or just my CTF writeups. Like I said it\u2019s not a clear path so just keep jumping between topics and just have fun. Look into stuff, get frustrated, and then look into other stuff. And otherwise, maybe look at overthewire, picoctf, ctftime.org, try out some bug bounties or just look at other programming youtube channels and learn about something new."}
{"prompt": "What is the reward for reaching 1000 credits in the casino challenge from rhme2?", "completion": "Now that we solved the photomanager challenge in the United Exploitation area, I thought about checking out casino. Should also not be too hard with 150 points. Welcome to our casino, Riscure Roiyale! Please enjoy your stay by playing a game, or drink something at our bar. Reach 1000 credits and you will be rewarded with a special prize. We have seen loads of cheaters lately, so we have extra guards walking around. Do not feel threatened by them, they will only kick out the people that cheat. Of course, once you earn a lot of money, they will start investigating the matter."}
{"prompt": "What evidence is provided in the video transcript that suggests it is not possible to earn 1000 credits in the rhme2 Casino challenge simply by playing and getting lucky?", "completion": "Better spend some money at our bar if this happens. PS. we all know casinos are scams. As you know I\u2019m hanging out on the rhme2 IRC channel and I wittnessed a conversation some time ago by somebody who worked on the challenge and asked if it\u2019s possible to just reach the 1000 credits through playing and just getting lucky. But this person also said they tried running it for days(?), I think. And didn\u2019t work. So while it\u2019s not a real spoiler, it does safe us some time to not explore that path. You could have also come to that conlcusion reading the PS, but it\u2019s not that clear."}
{"prompt": "How much currency does the casino give the player at the start of the challenge?", "completion": "Anyway, lets flash the challenge on to the board with avrdude and connect to it over serial with screen. Welcome to the caison! Get a currecny of 1000 and we give you the secret key. That\u2019s what we want. Occasionally we give away coupons for free drinks. We have guards walking around, looking for cheaters. Don\u2019t get caught cheating. Or we will take our curreny back. Currently we got 50 credits. And no coupons. And the menu offers to play, to cheat, go for a drink at the bar, request some free money or restart."}
{"prompt": "What happens when the player chooses 'Cheat' in the rhme2 Casino challenge?", "completion": "When we pick Play, we can choose between roulette or spin the wheel. If we pick roulette we can enter a number and in this case I entered the wrong one, the ball landed on 28, and we lost. And we are down one credit. If we spin the wheel, it seems like we have a chance to win the secret key, and I guess that\u2019s what the person on IRC just tried to do over and over again for hours. But, casions are a scam, right?. But we did win a coupon. Awesome. Let\u2019s try roulette again. Nothing. And obviously if we pick cheat, we get kicked out."}
{"prompt": "What type of vulnerability is the speaker exploiting in the video?", "completion": "So let\u2019s start over. Spin the wheel. And oops, we lost all credit. But when we ask for free money, we get another 50. Maybe we can just get up to 1000 this way ;) Let\u2019s request more money. Ah. only lets us go up to 550. But that\u2019 already pretty awesome. So let\u2019s go playiiin\u2026 spin the wheel. Won 10. If we keep goign like this we get to 1000 for sure! Another coupon. Maybe lets go for a drink at the bar. We can type in our drink now. Club Mate of course!. We hand in the coupon and get that drink. So here we have some string input, that\u2019s definetly something to consider exploring further."}
{"prompt": "What type of exploit is used to gain access to the Casino challenge in rhme2?", "completion": "Without a coupon it seems to only offer us milk or beer. So let\u2019s pick the only viable option. Beer. didn\u2019t do much. So mhmh\u2026 if we cant get 1000 by just playing and getting lucky, the only interesting input so far seems to be going to the bar if we have a coupon. So let\u2019s write a script to explore that input further. So this is the menu structure. To choose a drink we need to get a coupon. So upon starting it up, we read the menu until its done with printing it, then we select play, and we read until the menu is finished with printing."}
{"prompt": "What is the exploit used to gain coupons in the rhme2 Casino challenge?", "completion": "Then we spin the wheel, and with a bit of luck we get a coupon. when we try that now it seems to work fairly well, but we can have bad luck and loose all credit. We could also see what happens if we succeed with the roulette. So let\u2019s change the menu selection to roulette and pick a number and try that over and over again until we hit it. Maybe that can give us a coupon, by only consuming 1 credit for each spin and we don\u2019t loose everything like with the wheel. So we make a loop to try it over and over again, until we read that we have now one coupon."}
{"prompt": "What type of vulnerability can be exploited when a program prints out user input?", "completion": "Let\u2019s let it run, aaand yes! That works. So we can now add user input, so we can then play with the drinks at the bar. Ohh that works. Cool. so let\u2019s see what happens if we enter a lot of AAAAs. It looks like there is limited space, as you can see the echoed back As are way less than what we entered, also we don\u2019t get an error. So let\u2019s do that again, but this time enter a different payload. Always when a program prints out user input, you should try out format strings. So let\u2019s enter some percantage x."}
{"prompt": "What is the benefit of using a format string exploit to leak data?", "completion": "And what a surprise! We print some numbers. This worked! And if you decodde those hex values you will see, that it\u2019s the input string we entered. The %x itself. To leak data with format strings it would be cool to place an address into our input, and then use %s to use that address as a string location. This way we could dump the whole memory. So let\u2019s enter some recognisable characters and see where they are. And it\u2019s easy, the start of our string is already where the format parameters will be."}
{"prompt": "How can you exploit a format string vulnerability on an Arduino?", "completion": "So the first x printed AB, and the second x printed CD. If we now use %s instead, it will use hex 4142 as an address and print the string at that location. AHAH! AB and CD are already valid string locations. And by sheer luck we already hit a string in memory. The guards are keeping an eye on you. That\u2019s awesome, so this definetly works, now all we gotta do is create a loop that simply tries to print as many strings as possible, but tryiong different addresses. So let\u2019s create a loop, that simply counts up all the addresses."}
{"prompt": "What is a method for extracting the leaked string from a format string exploit?", "completion": "And just leak strings from everything. I guess it\u2019s best if we do it this way. We open a new connection, than we first try to get a coupon. So we spin the roulett multiple times. If we succeed we continue to try out an address, and then repeat. Also I add some code to really extract the leaked string, and then we can move the address forward based on the length we leaked, so we don\u2019t like read the same string at different offsets all the time. It\u2019s faster this way. Oh and we also know that AB and CD were valid addresses that leaked strings, so let\u2019s use that as a start address."}
{"prompt": "What address did the user set the start address to in order to avoid having nullbytes in the string?", "completion": "And in case we run out of credits and didnt get a coupon, we just reset the game again. So let\u2019s run it. This looks really good. We leak all those strings awesome. But In let it run for a bit and never saw a flag. And decided to maybe it\u2019s betetr to start from the beginning. So I et the start address to 0101, because I didn\u2019t want to have nullbytes in the string, so that\u2019s the first valid address, and suprisingly there it is. We found it almost immedaitly! Awesome. So let\u2019s hand in the flag! Casino solved!"}
{"prompt": "What is the challenge the person is trying to complete?", "completion": "Sometimes people write to me because they are\u00a0 stuck in a CTF challenge and they hope I can help them. In this case it\u2019s a person who is apparently\u00a0 trying to exploit a format string vulnerability. There is always a bit of a conflict for me because\u00a0 I want to help people, but it takes A LOT OF TIME to do so. You will see how much time it costs,\u00a0 even with a simple challenge like here. And to be honest, I rather invest this time into making\u00a0 videos for thousands of people, than helping one individual person. But when this person wrote\u00a0 me, I just happened to stand at the platform,"}
{"prompt": "What CTF challenge is the person attempting to exploit?", "completion": "waiting for my train, and had nothing better\u00a0 to do. And actually, in the end helping, this person exploiting this vulnerability, but turning\u00a0 that into a video to showcase their mistakes and sharing my thought-processes, it becomes a very\u00a0 valuable learning resource for a wider audience. So let\u2019s head into the DMs. BTW, voice\u00a0 actor helping me for this episode is non other than John hammond! \u201cI'm trying a ctf and I need your help it's\u00a0 about print string vulnerables and stack bleeding. I have managed to leak everything but\u00a0 the flag. Here is the server and port to connect with netcat\u201d."}
{"prompt": "What is a format string vulnerability?", "completion": "c They also share a screenshot. They called it\u00a0 a \u201cprint string vulnerability\u201d, but given the description and the screenshot, I think it\u2019s more\u00a0 commonly known as a format string vulnerability. If you don\u2019t know what a format string\u00a0 vulnerability is, please watch my old binary exploitation episode about it. Anyway. As I\u00a0 said I was outside on my phone, so I couldn\u2019t check the challenge with netcat myself. So my\u00a0 first response was, \u201cwhat\u2019s the question?\u201d, because I\u2019m already annoyed that this\u00a0 person didn\u2019t share important details."}
{"prompt": "What is the challenge that the person was trying to solve?", "completion": "Please watch my videos raging about that, BEFORE\u00a0 you send me questions. Because, this text and screenshot contains SO LITTLE INFORMATION, that\u00a0 I have to guess a lot. And my guesses could be wrong, that would help nobody and would be very\u00a0 frustrating for all sides. Though this person got lucky, it is such a simple challenge that I was\u00a0 pretty confident that I knew what was going on. But just to make sure, and teach\u00a0 people to ask proper questions, I\u2019d rather poke back. And I\u00a0 ask \u201cwhat\u2019s the question?\u201d,"}
{"prompt": "What two possibilities exist for outputting the flag from the format string vulnerability?", "completion": "I mean there was no question. The person just\u00a0 stated they they leaked everything but the flag. I know it\u2019s a format string vulnerability.\u00a0 Apparently we have to leak the stack to get the flag, and in between the task description,\u00a0 I see leaked environment variables. HOME, PATH, PWD and some more. This makes sense,\u00a0 because environment variables are stored on the stack - at the beginning of the stack. So apparently this person already was successfully exploiting the format string vulnerability and\u00a0 leaked stack variables. But they didn\u2019t leak the flag. The question for me now is, how was this\u00a0 output generated. There are two possibilities."}
{"prompt": "What is the person trying to do with the Python code they sent?", "completion": "This could be a script decoding output and\u00a0 make it printable text, or the person used %s, in the format string exploit, to leak strings.\u00a0 That\u2019s why I asked about more details. I don\u2019t want to guess what you did. Show me what you did. And so they sent me their script. \u201cHere is my python code. What am I doing\u00a0 wrong? I connect to the challenge server. Then iterate over a few offsets, and send\u00a0 a format string input with %s to it.\u201d Based on this code and the screenshot I was\u00a0 actually 100% sure about what was going on."}
{"prompt": "What is the difference between the printf modifier %s and modifiers such as %x or %d?", "completion": "So let me explain what I was thinking. Let\u2019s start with a recap how the format modifier %s works, compared to for example %d or\u00a0 %x. When you write code like printf(\u201c%x\u201d, value); Then the compiled assembly code, will place the\u00a0 value on the stack as a literal value. There is some 32bit and 64bit differences. 64bit calling\u00a0 convention passes early parameters via registers. But doesn\u2019t matter, later values are taken from\u00a0 the stack. Thus %x, or %d literally print the value found on the stack (or a register). But\u00a0 %s is different. printf(\u201c%s\u201d, string); expects a POINTER to an array of characters. And so printf\u00a0 takes the value on the stack as an address, goes to that address, and prints the characters there."}
{"prompt": "What is the third parameter of the main() function in a C program?", "completion": "Which totally makes sense seeing this screenshot, because there are pointers to those environment\u00a0 variables on the stack. The reason why is not surprising. The third parameter of main()\u00a0 in a c program, is a pointer to an array of environment variables. So the code\u00a0 that setups your program and calls main, will place pointers to those strings on the stack. So going back to the script, if you now use %s to print different strings from the stack, this\u00a0 is done here with the dollar $ iterating over different stack offsets,, eventually you\u00a0 might reach such an environment pointer,"}
{"prompt": "What format specifier should be used to leak values from the stack?", "completion": "so printf follows it and prints the string. Which explains the evidence I am seeing. But keep in mind, I\u2019m only this confident in my\u00a0 guesses, because this is a very simple challenge that I have done many times. A little bit\u00a0 more complex challenge, and I would have no clue what is going on. Anyway. If you have a bit of experience with format string exploits, you might\u00a0 even already identify their mistake. Instead of using %s to leak strings, you should\u00a0 use something like %x to literally leak the values on the stack. You will leak them as hex\u00a0 values, and so you have to decode them first,"}
{"prompt": "What is the Exploit Education challenge that the speaker is referring to?", "completion": "but you leak the actual values on the stack. Anyway. Now that I know the most likely solution, I could just tell them, but\u00a0 I don\u2019t like to do that. Especially when I don\u2019t know if this is some kind\u00a0 of active CTF. I\u2019m not your CTF cheat code. I want people to learn, so I like to have a back\u00a0 and forth conversation. And that\u2019s why helping people costs time. So I ask, where is the flag? Because even though my solution idea might work, maybe the task of the challenge is completly\u00a0 different. Maybe you need to get remote code execution. Again, not enough information given."}
{"prompt": "\"What is the program used to exploit the vulnerability?\"", "completion": "But they respond with: \u201cFLAG curly braces\u201d. To which I respond: \u201cNot what is the flag. WHERE is the flag? What\u2019s the goal? Do you have the binary or\u00a0 is it blind exploitation? Is the flag in memory somewhere? Or\u00a0 do you need remote code execution?\u201d \u201cHere is the post. It\u2019s the\u00a0 only info i\u2019ve been given\u201d Stack bleeding - this program will echo\u00a0 anything you write. Can you exploit this? \u201cMmhh okay. \u201estacking bleeding\u201c sounds\u00a0 like the flag should be on the stack\u201d. Now we can actually go into the technical\u00a0 details. I respond that \u201cI have an idea to try\u201d, because now I think I know their\u00a0 problem, but first I have another question."}
{"prompt": "What is the purpose of the format string \"%2$s\" and how does it print a string?", "completion": "\u201cWhat exactly does %s do?\u201d. I ask this, because I\u00a0 want them to carefully think about what they do, so they can figure out their own mistake.\u00a0 Basically I look for an answer what I just explained, that %s takes a pointer from the stack\u00a0 and prints the string at the target location. It doesn\u2019t print the actual value on the stack. But I get the response \u201cjust halts it\u00a0 if I remember correctly. Doesn\u2019t echo\u201d. \u201cI mean. Your exploit uses %s So what do you try to do with that? What does that format string do?\u201d \u201cSo if I go up the stack using\u00a0 smth like %2$s if it has a string it echos. it if not seems to halt / doesn't echo\u201d \u201cOkay. Can you describe to\u00a0 me how %2$s prints a string?"}
{"prompt": "What is the difference between the %s and %x format specifiers when used with the printf function?", "completion": "I know the question might be a bit confusing I try to get to a specific detail and\u00a0 difference between %s and for example %x Why does %s not work sometime? Why does it break? And why does %2$s not break\u201d. You can see me here hinting again at what I\u00a0 want. I directly ask what the difference is. I want them to tell me, that %s follows a\u00a0 pointer on the stack, so if a value on the stack is not a valid address, then printf will\u00a0 fail. It will break. But %x would not fail, because it literally prints that value."}
{"prompt": "What is the meaning of \"bleeding the stack\" in the context of a format string exploit?", "completion": "But it didn\u2019t work yet. \u201cSo basically %i$s tells it where on the stack\u00a0 to try to print a string from , the author told me bleed the \"stack\" so I think it's a play on\u00a0 words. Why %s breaks it sometime I have no idea\u201d \u201cDid you watch my videos about format strings?\u201d I know it\u2019s a bit unfair to say\u00a0 that, nobody watches all my videos, but those are all topics that I have covered. At\u00a0 least I think so. And so sometimes it makes me a bit sad when I get questions that\u00a0 would be answered if they would remember EVERYTHING I said in videos. I know\u00a0 it\u2019s a bit unfair. But\u2026 urgh\u2026 Anyway."}
{"prompt": "Does %s print strings from anywhere in memory, or just from the stack?", "completion": "Next, I try to ask the same thing in a slightly\u00a0 different way, because I\u2019m trying to figure out how to ask, so their brain responds to\u00a0 it properly and realizes their mistake \u201cDoes %s print strings from the stack?\u201d This is a bit of a \u201ctrick question\u201d, because\u00a0 the answer is kinad yes or no. Depending how you interpret it. But I was thinking about it\u00a0 this way: %s follows pointers on the stack and prints strings where they point to. So those\u00a0 strings could be ANYWHERE in memory. They don\u2019t have to be on the stack. If you realize\u00a0 this, you would figure out your mistake."}
{"prompt": "What character is commonly used to identify a format string vulnerability?", "completion": "\u2018I did but there's a few\u201d. So I\u00a0 guess they did watch my videos. Also I just checked my scripts, in\u00a0 episode 0x1e I briefly mentioned it there. \u201cAlso because we already know it will\u00a0 be about a format string vulnerability, we can try to inject some characters\u00a0 such as %x, but again, nothing happens. We could also try %s, because if you remember,\u00a0 it will take values on the stack as the address location of a string, thus if values on\u00a0 the stack do not point into valid memory, the program should crash, which would be another\u00a0 indication of a format string vulnerability."}
{"prompt": "What does the \"%s\" symbol do in a format string exploit?", "completion": "But nope. Also doesn\u2019t do anything.\u201d But I understand, there is so much information\u00a0 in so many videos, you might not remember that. And I guess I wasn\u2019t super clear either. So.\u00a0 alright. BUT there are also TONS of other format string exploit tutorials online too. And literally the first result when I search for \u201cformat string exploit\u00a0 what does %s do\u201d writes this. \u201cThe printf in the second line will interpret\u00a0 the %s%s%s%s%s%s in the input string as a reference to string pointers, so it will try\u00a0 to interpret every %s as a pointer to a string,"}
{"prompt": "What can cause a program to crash when attempting to access an invalid address?", "completion": "starting from the location of the buffer\u00a0 (probably on the Stack). At some point, it will get to an invalid address, and attempting\u00a0 to access it will cause the program to crash.\u201d You can see, you can help yourself a lot if\u00a0 you google around. And so I was hoping this person would explore my questions further, even\u00a0 if it means they need to research more. Anyway. \u201cI know it prints the string at\u00a0 %i$s if there's one there it seems\u201d And this screenshot shows that %s seems\u00a0 to crash the process. Which makes sense."}
{"prompt": "What is the difference between %s and %2$s when used in printf()?", "completion": "Probably the first address on the stack (or\u00a0 in the first register) is an invalid address. Okay. clearly the person doesn\u2019t\u00a0 catch what I try to get at. So let me try to ask differently again, and\u00a0 this time start even earlier with basics. A: \u201cOk let me ask differently. What\u00a0 are strings? What is a string in C? B: \u201cA char array\u2019 A: Cool okay! Do let\u2019s say you have the char array\u00a0 \u201eAAAABBBBCCCCDDDD\u201c on the stack. And you print 1) %s 2) %2$s What do you think it will print? Just try to have an educated guess\u201d Again this is a bit of a tricky question.\u00a0 Because both answers are, it will crash. But I deliberately ask it this way, because I figured\u00a0 they would say the first one prints maybe AAAA and the second one BBBB. Which would show\u00a0 me they have a wrong understanding of %s."}
{"prompt": "What is the difference between %s and %x when used in a format string vulnerability?", "completion": "But their answer surprised me: B: \u201c\u201c1. Would do nothing 2. Would print that string because\u00a0 2nd offset is it's address?\u201d A: \u201cAha! Okay!!!! I mean, That was COMPLETLY wrong! but\u00a0 you said something important! 1 and 2 would break. BECAUSE\u00a0 %s looks for an address. %s Takes the address and prints\u00a0 the string at that location %s would try to interpret \u201cAAAA\u201d as an address. And %2$s would interpret \u201cBBBB\u201d as address (On 32bit at least)\u201d B: \u201cInteresting\u201d A: \u201cSo. How would you print the actual value on the stack? And not interpret that\u00a0 value as an address to a char array\u201d B: \u201cSo what do we can do if it thinks\u00a0 they are addresses if they are strings I can get the address %x\u201d Oh we are getting there slowly!\u00a0 I think they almost got it."}
{"prompt": "What does the '2$' in the format string \"%2$x\" refer to?", "completion": "Now I wanted to try to check their\u00a0 understanding, with another question. A: \u201cLet\u2019s do the same example. AAAABBBBCCCCDDDD\u00a0 is on the stack. What would it print: 1) %x 2) %2$x?\u201d B: \u201c1. Prints the address 2. Prints that addresses contents?\u201d Ah crap. That is completely wrong. \u201cI\u00a0 think you misunderstand what 2$ does\u201d B: \u201cI thought that meant where on the stack\u201d A: YES! Exactly! So why do you say\u00a0 that 2) prints the address content? Why does 1) and 2) do something different? I mean you just said it says WHERE on\u00a0 the stack it prints the value. So it sounds to me like that 1) and 2) do\u00a0 the same. Except they differ WHERE on they stack. They don\u2019t differ with\u00a0 WHAT they will print. Print a value."}
{"prompt": "What is the expected output of the printf statement with %x and dollar offset notation?", "completion": "B: \u201cBecause 1 is just the first thing\u00a0 on the stack printf gets and 2 is where\u201d A: \u201cNo that\u2019s wrong. And that\u2019s\u00a0 not what you said yourself\u201d But then I stare at it again and I realized\u00a0 that there is a miscommunication happening. \u201cAhh no yes it\u2019s correct\u201d what you say. \u201cI\u00a0 see the confusion about the word \u201cwhere\u201d. They thought I focus on: `here it\u2019s\u00a0 only %x`, and `here is the dollar offset notation`. So they thought I was\u00a0 asking about the meaning of the dollar. But no, I just wanted to know what the\u00a0 expected printf with these conditions is."}
{"prompt": "How can we use the %x format specifier to access values on the stack?", "completion": "So I clarify. \u201c%x prints the first value on the stack. And $\u00a0 decides where. So %2$x is the SECOND value on the stack.\u201d Maybe it\u2019s the third. I don\u2019t know how\u00a0 to count. But that\u2019s not important right now.\u201d B: \u201cYes but it's %x hex and we need a string\u201d. Uhmmmm\u2026. mh! I think they understood now the\u00a0 problem. But, they still have some confusion left. They think their goal is to leak the flag, the\u00a0 flag is a string, so it must be %s. Because %x would be hex values. So now I try to show them,\u00a0 that it doesn\u2019t matter how it\u2019s represented."}
{"prompt": "What is the purpose of using the %x format specifier in printf() in the context of a format string exploit?", "completion": "A: \u201cWhat is 0x41414141 as a string?\u201d B: \u201cAAAA\u201d A: \u201cSo\u2026\u2026? If you can easily convert hex to string?\u00a0 Why do you care that it\u2019s hex and not a string?\u201d B: \u201cIt should tell us the string in hex\u201d A: \u201cWhy? Why do you care - if PRINTF\u00a0 converts the bytes to readable text for you, or if YOU take the hex and convert it yourself? It\u2019s all about leaking values from\u00a0 memory. And that seems the goal here\u201d B: \u201cBecause %x is hex so we\u00a0 convert to string from hex\u201d At this moment I thought, why are you\u00a0 repeating the same thing. Didn\u2019t we just realize that it doesn\u2019t matter if you leak\u00a0 hex values or strings? So I got a bit grumPy."}
{"prompt": "What is the solution to leaking a string from the stack with the printf format string vulnerability?", "completion": "A: \u201cWhy do you care??? Look. When \u201cAAAABBBBCCCC\u201d is a STRING on the stack. Then you cant leak it\u00a0 with %s. I explained why. But you can use %x!!!\u201d As you can see, I basically\u00a0 just stated the solution now. \u201cThe output will be in hex.\u00a0 But if you do that, the leaked hex bytes are still part of that string? So why do you care that the leak is in hex. The values you leaked are from a string.\u00a0 Now you just have to convert them back\u201d B: \u201cI don't care if it's hex, you said so above, and I was replying to that\u00a0 and it went down from there\u201d Urgh oops okay. Miscommunication again.\u00a0 I thought they still don\u2019t want to use %x because they want a string. But\u00a0 they were just stating a fact. My bad."}
{"prompt": "What hexadecimal values should be looked for when searching for the flag in a hex editor?", "completion": "That\u2019s the issue with messages, sometimes\u00a0 context is lost. And so I got a bit impatient. Whatever. It\u2019s forgotten. Let\u2019s move\u00a0 on. \u201cOki. So what\u2019s the problem now?\u201d B: \u201cI have to test it\u201d A: \u201cI\u2019m waiting\u201d 5 minutes later I get this screenshot.\u00a0 \u201cKinda seems like just addresses\u201d. I think around this time I was also back\u00a0 at home. So I didn\u2019t immediately respond. 15 minutes later they added. B: \u201cye so far as i keep going up I'm\u00a0 not seeing anything that looks like text when i put it into hex editor\u201d Mh. it\u2019s sometimes not easy to recognize a\u00a0 flag in hex output. So I thought I suggest them to convert the expected solution string\u00a0 \u201cFLAG\u201d to hex, because then they have the hex values they need to look out for. And might be\u00a0 able to quickly identify it. Thus I ask them:"}
{"prompt": "What method did the video speaker use to determine that certain bytes were text and not binary data?", "completion": "A: \u201cCan you convert FLAG to hex?\u201d But in the meantime, I was also back at the\u00a0 PC, and I could now ch eck those bytes myself. Of course I have to type them and can\u2019t\u00a0 copy them, because it\u2019s a screenshot. And I immediately saw some bytes that looked like\u00a0 text. Checkout my \u201cey! Look for patterns\u201d video if you want to know how I knew that. Anyway.\u00a0 Those first bytes translate to \u201c ehTssap\u201d. And that is printable text! And maybe it could\u00a0 be the string \u201cThe pass\u201d. The byte order, so the endianess is f\u2019ed up, so when we fix\u00a0 the 4 byte endianess, you can see it too!"}
{"prompt": "What tool is the speaker using to help with the format string exploit?", "completion": "By the way, I\u2019m using this cyberchef tool for\u00a0 this. In an exploit you would of course write that stuff in python code, but it\u2019s great\u00a0 for playing a cround with data like here. Mh\u2026 but it looks like FLAG does not\u00a0 appear in it. \u201cThe password ...\u201d. So maybe that was their issue. Maybe they saw this, but\u00a0 not the flag. And at this point I also thought maybe it\u2019s not the whole leak. Sometimes in\u00a0 format string vulnerabilities when they appear in a combination with a buffer overflow, you might\u00a0 leak the string itself, because you your format input overwrites the whole stack, rather than the\u00a0 leaking the original bytes you want. And I noticed here those bytes at the end are basically %x. So\u00a0 I thought this is what might have happened here."}
{"prompt": "What technique did John Hammond suggest to the person he was helping in order to leak individual values?", "completion": "maybe it\u2019s not the complete leak yet. The solution\u00a0 to that is to not have a ling %x string like here, but have short format strings, and use the dollar\u00a0 offset to l eak individual values. And so I said: A: \u201cAhh I see your problem. What do\u00a0 you get when you convert those hex values? What kind of string snippets do you see?\u201d At this moment I wanted them to recognize\u00a0 that they did leak some actual text, but also there is this issue with the buffer. But look at the screenshot they sent \u201cwent from\u00a0 %1$x - %100$x and didnt see anything hex that looks like a string\u201d. But that output makes no\u00a0 sense. You saw me just converting some values."}
{"prompt": "What is the difference between the script output and the screenshot that was initially sent?", "completion": "BUT, the difference between this and that\u00a0 is that, they said they ran the script again to iterate through offsets. So\u00a0 these bytes are not the ones from here, but from them running their script. So OF\u00a0 COURSE, I wanted to see that actual script output. A: \u201cCan you show me that output?\u00a0 The screenshot only shows %x\u201d B: \u201csure\u201d. And now this screenshot\u00a0 shows all offsets by hand in one input. Goddamit. That\u2019s not what I meant.\u00a0 If there is really that issue with the buffer overflow destroying the stuff on\u00a0 the stack, then this doesn\u2019t help. We need the output from the script that does it in a\u00a0 loop with short format strings. So I respond:"}
{"prompt": "What kind of changes did A suggest to B when troubleshooting the format string exploit?", "completion": "A: \u201ca few mistakes you make there. Why don\u2019t you use the program you\u00a0 showed me? Change the s to a x?\u201d And now they deliver the output of that script. B: \u201cok, the issue with it seems to skip numbers. beside the hex number\u00a0 is the i number in the for loop\u201d And that screenshot is indeed\u00a0 weird. Why are there only a few outputs. I\u2019m getting confused\u00a0 too. So now I need more info. A: \u201ccan you show me more? maybe copy it to pastebin or\u00a0 secret github gist or something\u201d I get this pastebin with the output.\u00a0 And indeed some outputs are missing,"}
{"prompt": "What is the suggested solution for the format string exploit as mentioned in the video?", "completion": "which is really weird. But some hex snippets\u00a0 still look like printable strings. So I ask: A: \u201cand have you looked at\u00a0 some of the output there? any printable string snippets?\u201d To which they respond with this screenshot, and YEAH, this looks kinda good. At least\u00a0 the initial \u201cThe\u201d in wrong endian is there. A: \u201cdoesn't this sound interesting?\u201d B: \u201csound interesting i guess\u2026\u201d COMEON! YOU ARE BASICALLY THERE.\u00a0 PLEASE WALK THE LAST STEPS NOW. A: \u201cThe ... is: ... 0v3_\u201d i mean... sounds to me like\u00a0 it's part of the solution. I could imagine that the complete\u00a0 string would be something like:"}
{"prompt": "What are the first steps to troubleshoot the potential issue with the format string exploit?", "completion": "The flag is: FLAG{...\u201d So as you can see I was still expecting to\u00a0 see the FLAG string to appear in the output, and it wasn\u2019t there, which\u00a0 meant we have some other bugs. Maybe the reason for that is that the\u00a0 script itself is buggy. So I wrote: A: \u201cnow we need to just figure\u00a0 out why some outputs are buggy\u201d\u201d B: \u201cit is, need to fix the python\u00a0 script first make it a bit easier\u201d So I kept thinking about this bug, and\u00a0 I needed a bit more experiments to drill down onto the potential issue.\u00a0 First of all I wanted to know if the issue only happens when the script\u00a0 executes, or if it also happens by hand."}
{"prompt": "What techniques can be used to troubleshoot a format string exploit issue?", "completion": "A: \u201cdoes it ALWAYS fail to print those?\u201d Apparently offset 8 didn\u2019t work, so now I\u2019m specifically asking: \u201ccan you do by hand: %8$x\u201d B: \u201csomething like that i think the issue is the\u00a0 remote server expects inpute to give broken pipe i mean 2nd input like a space like you have to put in what you want it to echo then hit enter then enter again\u00a0 to exit and I think that's why my script fails\u201d Because they didn\u2019t do the test and send me the\u00a0 results, I though, \u201cgoddamit. I do it myself then\u201d. So in the meantime I just tried it by\u00a0 hand to print the 8th offset. And it worked!"}
{"prompt": "What might be the issue if the script is failing to give the server an enter?", "completion": "A: \u201cI can print it no problem. so something\u00a0 might be broken with your script or so\u201d B: \u201ci think the 2nd part is the server is waiting\u00a0 for another enter and the script isn't giving it\u201d A: \u201cyeah dunno.\u201d those explanations sound a\u00a0 bit weird to me. But I also thought that it doesn\u2019t matter, because \u201cyou can also now\u00a0 solve it by hand\u201d. If the script fails, just do the %x by hand! Please just solve it now, so we are done with this! But I couldn\u2019t help myself, so I did look at the script again, and thought about\u00a0 it. And then I realized what an issue might be."}
{"prompt": "What can be done to fix the endianness of the data received from a server?", "completion": "\u201cmaybe you try to recv() too fast.\u00a0 server is not fast enough with responding. try to add a time.sleep(0.5)\u201d. 20 minutes later no response. \u201cso. any result?\u201d B: \u201coffset 6-20 I get this. If I\u00a0 clean it I get this. Which is that\u201d. And they even sent a screenshot along!\u00a0 And look at that! This is readable text! You just have to fix the byte order,\u00a0 the endianess. So I give some hints: A: \u201cwell... you are getting close can you fix the endianess? \" ehT\" should obivously be \"The \" B: \u201cI thought it was endianess when\u00a0 I saw it because it was backwards\u201d Very good! You know about endianess, glad\u00a0 I don\u2019t need to explain that. \u201cso fix that\u201d And then they sent this."}
{"prompt": "What code is used to swap endianess in the video transcript?", "completion": "\u201c%15$u6s4t_bf0rm0v3_ I_l is:wordpassThe\u201d \u201cill try again\u201d.... Uhm yes please. \u201cyea, i don\u2019t know, but the flag has\u00a0 always been FLAG{} so I don't think its it\u201d Sure, but it doesn\u2019t matter. You are clearly\u00a0 leaking something that seems important for the challenge. So I ignored this and mentioned\u00a0 again \u201cYou are dealing with the endianess wrong\u201d And now they fixed it: \u201cThe password is: I_l0v3_f0rm4t_bu6s\ufffd%15$\u201d Some code they probably used\u00a0 to swap endianess. Very good. And then they write thanks for the help. But I\u00a0 wasn\u2019t sure if they solved it now, so I asked \u201cis the flag FLAG{I_l0v3_f0rm4t_bu6s}?"}
{"prompt": "What is the challenge that the student was trying to solve?", "completion": "did that work?\u201d After spending so much time on this, I need\u00a0 the satisfaction of having it solved now! \u201cIt did but everyone iv done before had\u00a0 FLAG{...} idk where it was in that one\u201d Urgh okay. Well. It\u2019s solved! \u201cmaybe not the best challenge design ;)\u201d, when the FLAG{}\u00a0 always appeared before, but whatever. They solved. Congratulations. Clap clap. Btw, maybe you noticed this, I only\u00a0 noticed it when making this video, they actually had the solution already at\u00a0 this output. Which was about 50 minutes after we started writing. I was just too lazy\u00a0 to type the bytes, and apparently they were too."}
{"prompt": "How long did it take to solve the format string exploit?", "completion": "So as you can see, really trying to help people\u00a0 takes time. We started talking around 12, and it was solved around 3pm. I plotted\u00a0 all the messages on this timeline here, just so you can visualize how much back\u00a0 and forth this is. It\u2019s just messages, but you can\u2019t do anything productive in parallel.\u00a0 Constantly you get distracted from those messages. So this was me spending like 2 hours or more on\u00a0 this, and in the end I only helped one person. I hope you understand why I don\u2019t have the time\u00a0 for everybody and why I generally prefer to spend those two hours working on videos for all instead."}
{"prompt": "What is the most effective way to learn about binary exploitation?", "completion": "But then there was this idea to turn this conversation into a video and now\u00a0 hopefully you learned something too. Which leads me to the following question.\u00a0 In my imagination a video like this here is a really good learning resource, because\u00a0 troubleshooting and working through issues, is the best way to learn. Much better than\u00a0 just me telling you how something works. So please let me know if this kind\u00a0 of video style is actually engaging, or if it\u2019s boring, and if you want to\u00a0 see more videos like this, or rather not."}
{"prompt": "What characters does the first loop in the verification process ignore?", "completion": "Let\u2019s continue with our work on the keygen for the last Pwn Adventure 3 challenge. Pirate\u2019s treasure. Last video we found the key verification implementation in the shared libGameLogic library and started to reverseengineer it. We were able to understand the first two loops. Just as a quick reminder, the first loop ignore spaces and dashes, as well as counts the amount of valid characters. And valid characters were defined by this alphabet. It also creates a new array mapping each input character to a number, basically the index in the alphabet."}
{"prompt": "What is the purpose of the loop that follows the encoding of the string input \"123ABC\"?", "completion": "So the string input \u201c123ABC\u201d would be encoded as the raw numbers 1, 2, 3, 10, 11, 12. We also looked at that with gdb and printed that array, so we know it\u2019s stored as a local variable on the stack at `rbp-0x30`. I call this new array now `key24`. key After that a checksum is calculated by simply summing up the values of the first 24 characters and compare it to the 25th character. Which means we can ignore the last character from now on, and work with the actual important remaining 24 values. So let\u2019s look at the next loop."}
{"prompt": "What is the difference between the parameters for a 64bit program on Linux compared to a 32bit program?", "completion": "Before we head into the next loop we can see another obfuscated function call. lrKmtLet. It appears to take three parameters. I assume this, because this is a 64bit program and the typical intel 64bit calling convention on linux is, to start using registers for parameters, and only if there are too many parameters, start pushing them on the stack. That\u2019s different to 32bit because there parameters are always pushed onto the stack. So this function takes an address to a buffer on the stack, you can see that because it uses `lea` load effective address of rbp-0x5f."}
{"prompt": "What value is stored in the EDX register?", "completion": "So it basically just puts the result of `rbp-0x5f` into rdi. You could have also moved rbp into rdi, and then subtract 0x5f from it, but using `lea` that is shorter and more expressive. So let\u2019s go into that function and we immediately see that it\u2019s a super simple loop. Here are our parameters coming in via the registres and stored in local variables on the stack. So rdi was our pointer to a buffer, esi was set to 0, but then moved here into al, so al is just a single null byte in this case. And edx was the 0xf."}
{"prompt": "What is the purpose of the for loop in the VerifyKey function?", "completion": "And that is moved into here, which is then used in a comparison down here. And that is obviously the loop condition. If the tested value in eax is greater or equal than that 0xf we exit the loop. And eax is coming from this variable, which was set to 0 initially and incremented down here. So this is clearly a for loop. And our 0xf was obviously a length. So we have for, i=0, loop condition is i < length and increment i. And in each loop iteration we load the single byte, in our case the nullbyte into al, then load the current i iteration value into rcx and the address of our target buffer into rdx."}
{"prompt": "What is the purpose of the for loop from 0 to 0x18 in the VerifyKey function?", "completion": "Then we move the null-byte into our buffer at offset rcx. So basically we have this for loop here. Loop over the whole length and always set the i-th element of the buffer to the single-byte, in our case null. So can you guess the well known function that is implemented here? This is memset. It will write the single value into the buffer with the given length. So it just makes sure that the buffer is completely erased set to 0. Next we have another very obvious for-loop. Here we set i to 0, here we check if i is above or equal to 0x18, that\u2019s 24 in decimal,"}
{"prompt": "What is the size of the buffer mentioned in the video?", "completion": "so this loop will most likely loop over our new key24 array. And a quick peek into the loop, yep there it is referenced. But it also references our new buffer that we just made sure to be empty with memset before. And from the memset parameter we also know the size of this buffer, which is 0xf, so 15. So how does the 24 large key24 array relate to the new 15 byte large buffer? Well, we are about to find out. If we look a bit more careful at the call flow, we can see that we have an outer loop that is using i, but there is a nested for loop as well."}
{"prompt": "What is the purpose of the inner loop in the VerifyKey function?", "completion": "A super clear for-loop again, initialise to 0, the condition is smaller than 5 and down here is the increment. So I call this inner iteration variable j. So i of the outer loop will walk over the 24 entries in the array and the inner loop will always loop 5 times. So what does it do 5 times for every entry in key24? Well\u2026 we have to understand this part now, but assembler instructions are so limited that it\u2019s not super easy to read and understand. At least I\u2019m certainly not looking at this and can read it like I can read a well written python program."}
{"prompt": "What is the value loaded into the EAX register on the first line of the VerifyKey function?", "completion": "So I have to read over this multiple times with different approaches until \u201cI get it\u201d. So let me walk you through how I do it here. When I read this for the first time, I start by reading out loud each line and see what it does. Of course I\u2019m narrating now this video, but I would actually whisper this or just say it in my head. So let\u2019s go. We move a 1 into eax. Then we load the outer loop iterator i into rcx, then we load a byte from the key24 array with the offset of rcx, so it get\u2019s the i-th character of key24."}
{"prompt": "What does the code in the VerifyKey function do to check each bit of the key24 value?", "completion": "Then we load the inner loop iterator j. We move j into esi, then move it back into ecx. No sure yet why it does that, but it means esi AND ecx contain now the iterator j. Then we shift left eax, which is 1 by cl, which is the inner loop j. So for each loop iteration we shift the 1 either by 0, by 1, by 2, by 3 or by 4. And then we do a logical AND with the current key24 value. The result is then compared to 0. What it does here is basically check each bit of the key24 value. For example in the third iteration, eax with the 1 would be bit shifted by 2."}
{"prompt": "What is the result of a logical AND operation between 0000 0100 and 0000 1100?", "completion": "So this byte in raw bits is now 0000 0100. The one got shifted by 2. And then when we do a logical AND with the key24 value, the result is only 1 where both were one. So for example the key24 value 3 wuld be 0000 0011 in binary, thus the result would cancel out all bits and it is 0. But if it was a 12, or in hex 0xC, then its 0000 1100, which means the 3rd bit is now 1 in both. The result will be non zero, in fact it will be 4. So now we know that the outer loop loops over each entry in the key24 array and then for each entry we go through the 5 possible bits."}
{"prompt": "What is the maximum value that can be stored in the key24 array?", "completion": "As you know our alphabet has only 32 symbols, and the key24 array will only contain the index into that alphabet, so we only can have numbers from 0 to 31, and 31 fits into 5 bits. That\u2019s why we only go over 5 bits in this inner loop. Anyway. So this if checks a bit and see if it\u2019s set or not. If it\u2019s not set we just skip this part and go to the next bit. But if the bit was set, then it goes into this part. eax is loaded again with a 1 and then i is multiplied by 5 and the result stored in rcx. And then j is added to it."}
{"prompt": "How is the result of (i*5 + j) used in the VerifyKey function?", "completion": "So (i*5 + j). And then a logical AND is performed with 0x7. 7 in bits is 0000 0111, so it basically erases all the higher bits and just keeps the lower 3. The result is then in rcx and also copied into edx. THEN eax, the 1 is shifted by this result. Because we just did the logical and with 0x7, the result can never be larger than 7. So we basically set one bit in a byte. Then we calculate again (i*5 + j), but this time shift it TO THE RIGHT by 3. This means it will kind of delete the last 3 bits because it pushes them them out to the right."}
{"prompt": "What operation is performed on the result from earlier and the value from the 15 byte buffer?", "completion": "And the result is then used as an offset into the 15 byte buffer to load a value from it into edx. The result from earlier is then combined with this value, through a logical OR. So this means it will make sure the bits for this value are set from the previous result. And then this byte is moved back into the buffer. Done. That maybe sounds very weird. Like, how does this even make sense. But it will make total sense in a minute. Let\u2019s reimplement this in python where we can print it in a pretty way to make it very clear."}
{"prompt": "What is the difference between the outer loop and the inner loop in the code?", "completion": "So here I\u2019m just transcribing the assembler code 1-to-1. You don\u2019t even have to think much to transform this into working python code. But of course it\u2019s not that pretty. But it works. Let\u2019s try it. Oh\u2026 somehow this doesn\u2019t look quite right. Why is it 0 at the end? Shouldn\u2019t the buffer be filled completly? AHHHH the outer loop is only looping for 15. I mixed it up. Of course the outer loop has to loop over all 24 characters of the key input. Now the output looks better. Okay\u2026 This works, but let\u2019s clean up the code and make it more readable."}
{"prompt": "What new programming techniques did the speaker use to streamline the assembly code in the video?", "completion": "Now that we write python we have a bit more freedom than with assembler instructions. For example the index for si we could combine that and call it buf_index. We also don;t have to load, modify and write back the value, we can just write it like that. And we can also condense the ax calculation with the shift. For example use 1 directly instead of via the register. This looks much better already, so let\u2019s continue doing that. When we addressed everything we can run it again to verify that it produces the same output."}
{"prompt": "What type of code is used when working on the bit level?", "completion": "Okay looks like we didn\u2019t make a mistake. So now you would say, this still doesn\u2019t look better. This is still crazy code. Weird caclulations, logical ands and ors. Bit shifts. That\u2019s not easier. Well, sure. If you haven\u2019t seen this kind of code a lot then it looks complicated. But this is very typical code when you work on the bit level. And we can use python now to visualize a bit more the steps that it\u2019s doing. Then it becomes very intuitive. So I have added here a bit of debug output. We print the current key24 index and the key input value of it in decimal, hex and binary."}
{"prompt": "What is the result of the logical AND operation between the key value and the shifted by j 1 value?", "completion": "And then inside the smaller loop we print the logical AND operation. So first the key value as binary, then the shifted by j 1 and then the result. Let\u2019s check it out. So you see here, the first entry in our key was just 0, which is a bit boring but look at the shifted 1. With each loop iteration it just has the 1 in a different place. It just moves the 1. Let\u2019s go to the A, so 10. Here our key input has two bits set. 1010. So now we move again through every bit and perform a logical AND. The first one is 0 and 1 is 0, 1 and 0 is 0, 0 and 0 is 0 and so forth."}
{"prompt": "What is the purpose of the loop that is performed over the bits of the key input array?", "completion": "But in the second iteration the bit is in the second position and now we have two bits set, so the result also has a 1 here. So this time it would enter the if case. So we can already understand what this means. We are looping over each bit of the key input array. And perform a certain action if a bit is set, and do nothing if it was 0. Okay\u2026 So the real magic happens when a bit is set and we enter this if case. I remove part of the output again and print instead the buf_index that indicates which entry in the 15byte array is modified if the input key had the bit set."}
{"prompt": "How does the VerifyKey function iterate over the 15 byte buffer?", "completion": "We ignore that for now, and just want to see how the buf_index is iterating over the 15 byte buffer while the outer loop loops over the 24 long key. Look at this for a second. If you ignore the key24 iteration you see that the buf always increments after 8 steps. Let me make a small modification to our code. The shift right by 3 is equivalent to division by 8. And obviously keeping it an integer and ignore the fractions. Now let\u2019s add the bit_shift to the output as well. We print the binary representation of the bitshift, and the value of how much it was shifted."}
{"prompt": "What effect does an OR operation have on bits in a buffer array?", "completion": "We run it. And see that beautiful line pattern? Eh, I remove the key24 output for a second. Now look. We are looping over all bits of the 15 bytes buffer. Now this logical OR here will set bits. Right? For example if we have the value 0000 and we do OR with 0010, then the result will be 0010. And when we then OR again 1000, the result will be 1010. So OR can be used to set bits. And this loops over all bits in the buffer array, right? So it would set all bits, if it weren\u2019t for the if-case before."}
{"prompt": "What happens if a bit is set in the key24 input?", "completion": "And this if case depends on bits set in key24. While working on a nicer output I realized, \u201cwait, I said we do this if when the bit is set, but I wrote here equal to 0. Oooops!\u201d. That has to be not equal to 0. If you paid attention this much that you saw this error earlier, good job, you are crazy. Anyway, now look at this correct output. The first key input was all 0, so no bit is set. But then the second key input has one bit set. Which means we enter the IF case and set the 6th bit in the first buffer byte."}
{"prompt": "What is the custom encoding used in the VerifyKey function?", "completion": "So you see we iterate over all bits in the buffer, but only set it when the key value bit was also set. You can see that the key value bits exactly match when we set the bit in the buffer. Loooong story short. This is a custom encoding. This is like base64. But not with 64 symbols but with only 32. So it\u2019s like base32. But not like the real base32 because it assembles the bits slightly differently but basically this is how encoding works. The input key we give, the array has only values from 0 to 31."}
{"prompt": "What is the purpose of the logical AND with 7 in the custom Base32 decoding?", "completion": "So it maps this 24 large array with values between 0-31 into tightly packed 15 byte buffer. So we are basically doing here a custom base32 decode. Our input key is 24 characters long and is then decoded into 15 raw bytes. And those 15 raw bytes will be the new buffer we will work with. Oh\u2026 one last thing I just remembered. Here, the logical AND with 7, in binary 111, is actually equivalent to a modulo 8. So maybe that makes it a bit easier for you to understand. The the divide by 8 covers the large increments to the next byte, and the modulo picks up the 8 remainders in each iteration to get to each bit in that byte."}
{"prompt": "What techniques were state-of-the-art in 2001 for exploit-exercises.com?", "completion": "We have already come a long way in trying to understand how we can exploit programs through memory corruption. We have covered a wide variety of examples, including basic buffer overflows, format string exploits and even heap exploits. And a lot of you might already find it quite complex. But if you put it into the context of history we are still like 16 years behind. The last examples we have explored from exploit-exercises.com introduced techniques that were state-of-the-art in like 2001. While it still directly applicable to shitty cheap embedded devices, like some IoT stuff,"}
{"prompt": "What architecture and operating system is the video discussing?", "completion": "it\u2019s very important to lay a foundation. But before we start talking about all these modern exploit mitigations and how we can bypass them, I think it would be a good idea to try putting what we have learned in more abstract terms. And try to get a feeling or an intuition about exploiting binaries. Let\u2019s try to create a mental model of exploitation. But let\u2019s first introduce some constraints, otherwise it will be too abstract. Let\u2019s focus on programs like we have interacted before. this means intel architecture and on linux."}
{"prompt": "What combination of 0s and 1s are interpreted by a CPU as an instruction?", "completion": "Ok. Let\u2019s start at the beginning. We want programs to execute on our CPU. That\u2019s why a program contains assembler code - machine code. And machine code is just like any other data in our computers. It\u2019s basically just bits. 0 and 1s. A lot of times we combine them into bytes. And a CPU can interpret a byte as an instruction. Or multiple bytes can be interpreted as an instruction. And some crazy digital hardware magic in the CPU knows that this particular value stands for \u201cadd the values stored in two registers and put the result in the first register."}
{"prompt": "What is the purpose of the EIP register on Intel architectures?", "completion": "And registers are just like small memory cells in the CPU, which fullfil different purposes. And different architectures might have different registers for different purposes. But on intel we have for example the general purpose registers like eax, and ebx, that a programmer is free to use however he wants to. But there are also special registers, like EIP, the instruction pointer. That one simply contains the address, which points to memory, where the next instruction will be. And there is also this stack pointer ESP,"}
{"prompt": "What is the purpose of the stack pointer and base pointer in binary exploitation?", "completion": "which points to the top of the stack, and the base pointer EBP, which together with the stack pointer define a stack frame. And for beginners this might already feel complicated. There is code, there is data, there is a stack, there is a heap. There are functions you can call. Functions can return. Somehow there is like a return pointer on the stack you can overwrite with a buffer overflow. There are a lot of different terms that we use. But it\u2019s a lot less complex as it may sound. Because essentially there are just two parts that are important we have memory, which is just a huuuuuuge space of bits that can be 1 or 0."}
{"prompt": "What is the starting address for the CPU when it is turned on?", "completion": "Usually we group them in bytes or words. And there is a CPU, which has a well defined deterministic behaviour that operates on this memory. It\u2019s really that simple. Well. The devil is in the practical details, but essentially, when the CPU is turned on, it will start at some defined address. This could be 0, but could also be defined to be something else. It request that memory content from some RAM, looks at the value stored at that address, and performs the action according to whatever that value represents."}
{"prompt": "What is a Linux kernel and how does it abstract away hardware?", "completion": "Now when we want to execute a program, you can\u2019t just write your code directly into RAM, and restart the CPU at address 0. Because if your program would cause an endless loop, the whole system would stop working. But when you program an arduino, a little microcontroller, that\u2019s basically what you do. But that\u2019s why some people developed something like the Linux kernel. Which abstracts away the direct hardware for you and makes sure, that if your program sucks, you don\u2019t kill the whole system. That\u2019s why a program is not just plain assembler code, but it\u2019s a fairly complex file format."}
{"prompt": "What is an ELF file and what does it contain?", "completion": "An ELF file. Which does contain your raw code, but also a lot of other information. And when you execute this program, the linux system will actually open the ELF file, read and interpret all the necessary metadata and setup the execution environment for you, and then jumps to the start of your actual code. So how does the execution environment look like? That\u2019s important to picture, because in that environment, you try to exploit a program, you need to understand it. And in some way it\u2019s actyually very simple."}
{"prompt": "What is virtual memory and how does it work?", "completion": "Again, the devil is in the practical details, but it will make sense. Let\u2019s say the CPU is just about to execute your first instruction. This means the kernel and the hardware magic has already set up everything. And this is how it looks like. You have a big blob of memory. It ranges from 0, to ffffff. In reality you don\u2019t really have that much memory, that\u2019s why we call it virtual memory. It looks like you own all this memory, but hardware magic only makes you think you have it. But in anyway, the CPU now executes your program which is somewhere in that huge memory."}
{"prompt": "What range of memory can be worked with in a program?", "completion": "Let\u2019s have a look at how this memory is divided up in a real program. So for example here, we see that from this starting address, to this end address, your program is mapped. We say mapped, because it\u2019s not really physically at this address, but it\u2019s there if you would read the value from that address, in your assembler code. So ignore the underlaying physical reality, and just acccept that there is this huge range of memory you can work with. And infact the stack is also just here. It\u2019s also just defined as starting from this address and ends at this address."}
{"prompt": "What is the CPU register that points to the stack?", "completion": "So the stack is not really growing or shrinking, that\u2019s just the computer theoretical model of a stack. But how is the stack actually defined? Well the CPU has the stack register, ESP, and it would contain an address pointing into this area here. So could you just point the stack pointer somewhere else. Like into your code? Yeah! You absolutely could. The stack pointer is nothing really special, it\u2019s just a register that contains an address, and it could contain any address. What makes ESP actually special is just that it does some fancy stuff based on instructions."}
{"prompt": "How can attackers abuse the pop eax instruction in an exploit?", "completion": "So for example a pop eax instruction, would look up what value is stored at the location where ESP points to, usually that\u2019s the stack, but doesn\u2019t have to. And then writes the value from that location into the eax register. And you can absolutely abuse that in an exploit. For example if you find a bug that allows you to set the stack pointer to a different value, you could create a fake stack on the heap, and just point ESP there. Often times referred to as a stack pivot. So lose the mental image of a stack that grows and shrinks that you learned in computer science,"}
{"prompt": "How can we control the instruction pointer (EIP) in binary exploitation?", "completion": "and just think of it what it really is. It\u2019s just some memory where the ESP register points to. And instructions cause interesting effects based on that register. And in the same sense the instruction pointer is not special. Usually it points into your code, but it doesn\u2019t have to. If you manage to control EIP somehow, you can just point it to other memory. For example the stack, which we have used in previous exploits. Because we placed data that is actually valid assembler code onto the stack."}
{"prompt": "What does the EIP register do?", "completion": "You know it as shellcode. The CPU doesn\u2019t care. The EIP register points into some memory, and the CPU just happily does what those values say. And well, that is just half true. Because as you may know, on modern systems the stack is not executeable anymore, so the CPU does kinda care, but also not really. It just means that certain areas in this memory can have different permissions. Certain areas have the executable flag which means the CPU allows EIP to point there and is happy to interpret the values as instructions,"}
{"prompt": "What happens when the CPU executes a call instruction?", "completion": "but other areas like the stack don\u2019t have it. And then the CPU refuses to interpret it as instructions. Now when we look a bit closer to what kind of data is included in all those different memory areas, we can try to come up with creative ways of how to abuse the. One example is the typical stack structure. When the CPU executes a call instruction it places the current instruction pointer value at the address where the stack pointer points to. It places it ontop of the stack. And when the function returns it takes the value where the stack pointer points to and sets the instruction pointer to it."}
{"prompt": "What is a global offset table and what is its purpose?", "completion": "So if you somehow manage to modify this value on the stack, you can control to what EIP will be set to when the function returns, and thus you can decide what will be execute next. That\u2019s a classical buffer overflow. Another interesting data structure is the global offset table, which is basically just an area in memory containing pointers to functions, if you overwrite an entry there, you can also control what will be executed if a function is called that references an address from this table. I mean oftentimes you cannot directly overwrite these values, but that just means you have to become creative."}
{"prompt": "What is an example of a potential attack vector that can be used to control a program's instruction pointer?", "completion": "For example think of two objects on the heap. A user object and a name object, and the user object has a pointer to the name object. And when you want to change the name of this user, the code would follow the pointer and write the new name to that location, which means if you can somehow overwrite that pointer, you can control where it would write the name to. So we could overwrite the name pointer with an address on the stack, and when we write the new name for the user, we will actually overwrite the stored instruction pointer on the stack."}
{"prompt": "What does EIP point to?", "completion": "See what I try to get at? There is memory that contains data. Some restrictions apply, like certain memory areas are not writeable, others are not executable. And there is a CPU that is very dumb and just executes whatever EIP points to. And there is a program in the memory, which the CPU executes. And this code uses the memory to do whatever it is supposed to do. And it trusts in a certain integrity of the data in memory. But if there is a bug, that allows you to change a value in memory, which the program did not intend to be modifiable, amazing things could happen."}
{"prompt": "What techniques are used to exploit memory in a program?", "completion": "And what can happen, that\u2019s just limited by your creativity and imagination. One changed byte here in memory, might cause a certain piece of code to write to an unintended location, which overwrites a function pointer of an object, which another part of the code wanted to use, and suddenly executes something very different. And all these techniques we assigned names to, like stack buffer overflow, heap fengshui, ROP, use-after-free, are all just creative ways to screw with data in memory and how the program executed by the CPU reacts to it."}
{"prompt": "What are some of the benefits of thinking about programs and exploits in a certain way?", "completion": "I understand that this episode might not have contained actual useful information to you. But I kinda wanted to get it out there, because maybe somebody didn\u2019t quite picture programs and exploits in this way. But I hope you can see the value in this way of thinking about it. I think it takes some away some of the fear that it all looks so complicated. I\u2019m really interested to hear your critical opinion about this. So comment here on youtube or on the reddit thread linked below. But nevermind if you liked this or not, we will continue soon our path to learn about more advanced memory corruption techniques."}
{"prompt": "What is the magic value that must be set in order for malicious code to be executed on the ledger?", "completion": "Today we will reach a milestone in this series. We will figure out how to send a malicious update, that is not signed by ledger, to the device. And it will persist and run. As you probably remember, early in the boot sequence of the ledger, the ledger checks this address 0x8003000 for the magic value 0xf00dbabe. Only then it will continue execution. otherwise it will just return and continue into the bootloader. So we know this value has to be set, if we want to run our own code. So let\u2019s investigate further."}
{"prompt": "What sequence of APDU commands is used during a valid firmware update?", "completion": "Let\u2019s do again some more roleplaying. We know what the goal and issue here is and we already know some details from the advisory, but let\u2019s pretend we are doing this research for the first time, and only know what we have figured out so far. Then there are two things we would work with now. First we have this sequence of APDU commands that we recorded during a valid update. So we can extract some of the unique commands as a sample sequence how an update would work. The second information we have is the source code of a pretty old version."}
{"prompt": "How does the 0xf00dbabe check during boot affect the firmware update?", "completion": "Together with reverse engineering and comparing this code, we know about the 0xf00dbabe check during boot, but we don\u2019t know yet how that affects the update. We don\u2019t actually know that there is some kind of checks and verification happening. We might even assume there is none. I decided as a first step lets get an overview over the APDU commands. And I don\u2019t need to spend too much time on this, it\u2019s super straight forward. You remember we had this loop with the switch case statements and these defines that tell us what byte means what and so we can quickly extract their meaning."}
{"prompt": "What is the secure instruction that is used to select a memory segment in the firmware update process?", "completion": "This is the instruction \u201cVALIDATE_TARGET_ID\u201d. And I guess this is the particular matching ID. Then came a secure instruction \u201cSELECT_SEGMENT\u201d, and we can already see here the famous 0x8003000 address. So we select a memory segment now. And this is then followed up with multiple secure instruction \u201cLOAD\u201ds. Where we, according to the source code, have an offset that is simply added to the segment set previously, we have a length of data here. Here that byte is stored into the variable rx, and later we see how that length value is checked and even used."}
{"prompt": "What is the secure instruction \"FLUSH\" followed by in the 0x8003000 section of the firmware?", "completion": "And then followed by data, which doesn\u2019t necessarily interest us, however at the start of 0x8003000, we of course find also the magic value 0xf00dbabe. Then we find a secure instruction \u201cFLUSH\u201d, followed up by a secure instruction \u201cBOOT\u201d. So let\u2019s approach this naively. Let\u2019s use our test APDU script and build up a test update. We basically just copy the apdu commands we had above and just slightly adjust them. At this point for example I ignored the first command VALIDATE_TARGET_ID, because I thought it\u2019s not important."}
{"prompt": "What address does the regular firmware code typically start at?", "completion": "Then I did the select segment and then I had to come up with a load. Of course we need the 0xf00dbabe value so I leave that, but I also adjust the size, because I don\u2019t need to write that much. Just to kinda better see what happens I make the bytes I write longer and just add some recognizable bytes. 0x41 0x41 Besides that we also need some code. And from reverse engineering we know that the regular firmware code typically starts at 0x80030c0. Which means I added another select segment and then a LOAD to write some assembler code."}
{"prompt": "What is the command used in rasm2 to set the architecture for assembly or disassembly?", "completion": "But what code do we write there? The easiest thing, which also Thomas originally did, was testing an endless loop. That would be easy for us to see if it works. And so I\u2019m using radare2, or more specifically the rasm2 utility, to get the bytes for an endless loop. Now I have actually never used rasm before, and never assembled ARM, so let me just quickly show you how I figrued out how to use the tool. First I check the help page, I figure out that -a can be used to Set architecture to assemble or disassemble."}
{"prompt": "What type of branch instruction is used with ARM assembly code?", "completion": "And which ones are available can be checked with -L. So did that. And now in here I found the arm.as. So I tried rasm2, -a arm.as followed by the assembly I want to assemble. And an endless loop would just be a branch 0. Branch is the arm equivalent of a JUMP in x86. And even though we often see absolute address in disassemblers we use, actually these branch and jump instructions are typically encoded as offsets. So because this code is theoretically at address 0, and we jump to address 0, it\u2019s also just a relative branch to the offset 0."}
{"prompt": "How does setting the ARM_AS environment variable affect the assembly process?", "completion": "And thus it\u2019s an endless loop. However trying to assemble that will result in an error, because it can\u2019t find the arm -as, assembler, binary. But I remembered that it said it uses the ARM_AS environment variable, so just as a quick check to see how that affects things I set it to asdasd, and then suddenly the error said it can\u2019t find the asdasd program. Which means this environment variable has to be set to the path of the arm assembler, and that one comes with the arm cross compiler utilities we downloaded some time ago."}
{"prompt": "What command is used to set the bit length in the binary?", "completion": "So setting the path to this binary, now it works. Or almost, this is now clearly 4 bytes, so 32bit. But we have thumb code which is 16bit, and from the help we can find out how to set the bit length as well. So adding a -b16. And voila. So 0xfee7 appears to be the machine code for a branch to itself, so an endless loop. And now let\u2019s copy that to our test script. And of course we then complete the script with the remaining APDU commands that are used for whatever. And then let\u2019s try it ! But it doesn\u2019t work."}
{"prompt": "How does the code check the state value when sending an update command to the ledger?", "completion": "However it looks like it already failed in with the first command. The ledger answers with this error code. So let\u2019s look in the code what could cause this, and it appears that it checks this state value. Looking around where this state is changed reveals, that we actually do have to send the instruction VALIDATE_TARGET_ID. So let\u2019s include that as well and try again. And of course this doesn\u2019t work. If you restart the device and attach GDB to it, you will see it didn\u2019t go into our endless loop."}
{"prompt": "What address is the breakpoint set at when attempting to debug the f00dbabe issue?", "completion": "And when we examine now the ledger\u2019s memory, we see that the f00dbabe value is missing. The As are there, but the magic value that is necessary to boot, is not there. So this is an indication that there is some check happening. There are multiple ways how you could figure out what happens, I used a very pragmatic approach. I basically set a breakpoint at 0x080007f2, to break on each new APDU command. And I was not interested in the first ones, but I was interested in the one that would apparently write 0xf00dbabe."}
{"prompt": "Is there a specific check in the code that is used to detect the presence of the f00dbabe command?", "completion": "And I just decided to slowly step through the program to see what happens. How does the f00dbabe dissappear? We also know where our APDU buffer is and we can see, that foodbabe definetly arrived as a command. So what happens? Again I don\u2019t want to bore you with unimportant details, you can imagine yourself it just takes time to step through the code and see what happens. There is no magic to it, it\u2019s just tedious. But at some point you reach here a code path where it actually checks the current address you try to write to."}
{"prompt": "What instruction is used to compare the address selected with APDU to a constant value?", "completion": "So the selected segment and your offset. In our case that would be 0x8003000. And here in particular it actually does a BRANCH NOT EQUAL, so a direct comparison between R7 and R4. With debugging you see that in our case both are 0x8003000. And if you check the code and just traced what happend you see that R7 is just a constant that came here from R3 and is the constant 0x8003000. And R4 is the address we have selected with APDU. So here is just straight up a direct check of this address. And ONLY when it matches it will go into the block here."}
{"prompt": "How does the code in the loop function load and store values from R1 and R4?", "completion": "In any other cases it would skip it. ANd in here we find two functions. Let\u2019s look at the first one. By now you all should be experts in reverse engineering and pretty quickly figure out what it does. At this point here I could also recommend the Pwn Adventure playlist where we reverse engineer code, there you get a bit more of this kind of reversing. Here you see a simple loop, and the major code in that loop seems to load a value from R1 into R4. And then stores R4 into R0. But in both cases with an offset R3 that is incremented."}
{"prompt": "What address does the memcpy function in the firmware update copy data from?", "completion": "And one other hint is that this function has TONS of cross references. So this must be a super normal common function, it\u2019s nothing special. And of course this is just a basic memcpy. Copy from source to destination. We can also with gdb see the address where it does that. And it copies data from one RAM address to another. Basically from our APDU incoming buffer into another buffer. And the function right after the memcpy is similar but different. Has the same kind of traits, it\u2019s a loop and called from many places."}
{"prompt": "What address is the 0xf00dbabe value overwritten to when the firmware update is attempted?", "completion": "But it only has a simple store in a loop. And it writes always R1 at an address. And R1 is set outside of this function to 0. So this is a MEMSET with 0. It is clearing, overwriting memory with 0. And in fact it overwites 4 bytes with 0. And checking with gdb what it actually overwrites, we can see it destroys and overwrites the 0xfoodbabe value. So here is the magical check. If we try to write any value to address 0x8003000, we will get into this block which will overwrite it with 0. We have no chance to write 0xf00dbabe there."}
{"prompt": "How can we bypass the overwrite protection when writing to the f00dbabe address?", "completion": "Now from the checks before you would also see there are no other real special address checks. These just make sure you don\u2019t write to the bootloader area from 0x8000000 to 0x8003000. But this also means you cant start writing a lot of data before 8003000 and include f00dbabe later. So this is the only overwrite protection and seems strong enough. If we try to write to the f00dbabe address it will get overwritten. And we need it to run our own code. One attack idea would be to analyse how a VALID firmware would somehow get the 0xf00dbabe value there."}
{"prompt": "What is the memory map for the chip used in the f00dbabe disclosure?", "completion": "I didn\u2019t do this and you also know it\u2019s not necessary, But one of these other APDU commands would probably trigger a cryptographic check on the loaded new firmware, and if everything is correct, it would set the f00dbabe value. However this is where hardware knowledge and experience with chips and embedded debices comes into play. And now I\u2019m referring back to the original f00dbabe disclosure where we looked into the chip\u2019s documentation. There we learned about the memory map, and that the ROM from 0x8000000 is also mapped to 0x0000000."}
{"prompt": "What address should we write to in order to bypass the f00dbabe issue?", "completion": "And if you know that, and your brain has a spark of creativity, you might come up with the following attack idea. What if we instead of writing f00dbabe to that address we are not allowed to, but instead write to 0x00003000. Let\u2019s do that change and try it again. we can also set a breakpoint at the comparison where it would ensure that we don\u2019t overwrite foodbabe and then look at it. And so here we hit it and we see in the register output, that now the segent we want to write to is obviously NOT EQUAL, thus we skip this block and go directly here."}
{"prompt": "What value is used as the entry address for the firmware update?", "completion": "The f00babe value is not overwritten. Awesome. So let\u2019s restart the ledger and see if we run into our endless loop! We run it\u2026 CTRL+C let\u2019s see where we ended up in!? Oh\u2026 uh\u2026 this is clearly an invalid address. Fffff. Something went really wrong\u2026 let\u2019s do it again and set a breakpoint where it would decide to jump to the firmware code. So all looks good. The f00dbabe check is passed and\u2026 OHHHH! We try to jump to 0x4141414\u2026 I completly forgot that this code here would take the value right after f00dbabe as the entry address for the firmware."}
{"prompt": "What is the address of the code where we have to change the firmware on a Ledger device?", "completion": "So let\u2019s change that address to where we have our code. 0x80030c1. Rmember the 1 is to make sure it\u2019s thumb code. Let\u2019s try it again\u2026 WAIT AGAIN!? Invalid? Urgh\u2026. I see\u2026 endianess. The bytes are all reversed. So let\u2019s fix thaat\u2026 do it again. Aaaannnd not it seems to work. Look we are here in our firmware code at 0x80030c0. And we are trapped in this endless loop! AWESOME! We have successfully updated the Ledger without an officially signed firmware. Now we are basically done. I\u2019d like to remind you that this doesn\u2019t fully compromise the ledger and you can\u2019t extract the secret keys because they are stored on the secure element."}
{"prompt": "What is the time limit for the Packetwars competition at TROOPERS conference?", "completion": "TROOPERS is a security conference in Heidelberg Germany which I attended in 2017. One fun event that happens there every year is Packetwars, it\u2019s kind of like a CTF competitions during one evening, but only for a few teams. And I didn\u2019t have a group to play with. But it was held in this restaurant we were all at and the task was shown on a beamer. This was one. Battle I: Whale Spotting. Identify the email address of @darealtrump and achieve bonus objectives on the way. We have 45minutes to solve it."}
{"prompt": "How did TheVamp and the speaker use their phone to solve the challenges?", "completion": "And we get points for various objectives. some for the email address, for evidence of whistleblower assassination and if we identify a favorite coffee shop to organize a boycott. So my friend TheVamp and I had nothing else than our phone but we were really craving to play. So we tried it. First we looked up the obvious twitter handle and found this account. Oh and this is all going to be screenshots I made from my phone while playing. The latest tweet we can find says that we should ignore the tweet before, because it was not relevant."}
{"prompt": "What technique was used to reveal the text underneath the redacted parts of the PDF?", "completion": "So obviously the first step is to look into for example the web archive, because we hoped it had saved the deleted tweet. And yeah, there was. It was a URL to some kind of report. We clicked on it and downloaded the pdf. Unfortunately certain parts were blacked out, but I assumed they were just overlays, because that\u2019s such a typical pdf redaction fail. So I simply tried to copy the whole page into a notes app. And yeah that worked, it revealed the text underneath. But it turned out that the text was actually an image."}
{"prompt": "What online OCR service was used to extract the text from the image?", "completion": "And it had this cipher text on it, which looked like some kind of simple substitution cipher like caesar or vigenere. So we had to get the text out of the image and we didn\u2019t want to type it on the phone. So we pulled up an online OCR service and uploaded the image . And now we copied the text into an online cipher solver, which bruteforces the key and applying some heuristic if the result sounds like valid english. And we got this text out. It\u2019s not quite perfect because the key is a bit jumbled and maybe OCR was also not perfect,"}
{"prompt": "How did the team use online tools to solve the challenges in PacketWars?", "completion": "but you can guess most of the text: After some further research, blah blah, and eliminate them. So that is evidence of assassination and we solved that task. But there were more tasks, so where is the other stuff? We checked back to the web archive and found another entry of deleted tweets, with the favorite coffee shop starbucks, which was another task. And what looks like login credentials. So we logged into this account, I tweeted that I was here, got the account\u2019s email from the settings and we solved the last part."}
{"prompt": "What methods did the team use to solve the challenge before the other teams?", "completion": "And now comes the not so humble brag. We were faster than the actual teams! I think the reason for that might be, that with a phone you are sooo limited that you can\u2019t try out crazy stuff. Steganography, metadata and so forth is just out of reach, so we only tried what was possible for us and got lucky. I\u2019m sure the other teams over complicated things because they had laptops. I think it\u2019s something to keep in mind but it was really fun to solve something like this on just a phone. Because we solved it first, the organizers even gave us the flag for participating, even though we were not officially part of packetwars."}
{"prompt": "What was the first challenge the spectators solved in the Troopers 17 PacketWars competition?", "completion": "So that was really awesome! And we also got this awesome shout-out at the end of the conference when they were announcing the winners. The actual first people to solve the first challenge were the spectators. So our players actually got off to kind of a rough start. Are those two guys out here? That\u2019s us! We were sitting somewhere ther here in the back. OK! Let\u2019s hear it for those guys, because... And they did a debrief much better than I or mathias could ever do. I think you gave me the debfrief and all the proofs in about 45 seconds."}
{"prompt": "How can students attend the TROOPERS conference?", "completion": "So I think you have a future in this sports! I really appreciate it, that was really fun. So i can only recommend the TROOPERS conference in heidelberg. It\u2019s a solid conference and if you have a chance to go there, you should. Unfortunately it\u2019s a professional conference which means ticket prices are really high and not something you generally buy privately, but the cool thing is they have limited spots available for students and you can write a motivational letter and maybe get a free ticket. So that\u2019s really cool and I encourage you to do that.`"}
{"prompt": "How can we use LD_PRELOAD to enable flying in Pwn Adventure 3?", "completion": "Last video we figured out how to overwrite certain functions with LD_PRELOAD and how to access the internal objects from libGameLogic. With that we were able to increase our walking speed a lot. So let\u2019s see what else we can do. One really cool thing would be flying, right? Flying\u2026 so how could we get flying. There is obviously not an attribute in the Player class to simply enable flying, but we can maybe be creative with what we have. And jumping is definitely close to flying, we just can't fly very high."}
{"prompt": "How can we use LD_PRELOAD to increase the speed of a character's jump?", "completion": "And we will fall back down. So Maybe we can make something out of that. I have noticed there is a jumpHoldTime and jumpSpeed. So let\u2019s set jumpSpeed to a higher values and check what it does. Let\u2019s compile our evil library, then we LD_PRELOAD it into the game and then let\u2019s see what changed. When we now jump, whooooosh\u2026 ok I think the speed was a bit too crazy. But we get a nice view of the map. Including an island? We haven\u2019t found that island during our let\u2019s play in episode 1. I wonder what we can find there."}
{"prompt": "How can we use LD_PRELOAD to enable flying in a game?", "completion": "So let\u2019s tone down the speed a bit. And now also add the jumpHoldTime with a higher value. Then we can try it again. Ok\u2026 So jumping seems fairly normal. Except that I can keep space pressed, or you know hold space for a longer time. And then I keep rising up. That\u2019s pretty cool flying already, but the issue is, that once I release space again we start falling down and we can\u2019t jump anymore until we touch the ground again\u2026. Mhmh This is kind of the challenge with game hacking. We have essentially all power of the world,"}
{"prompt": "What is the name of the function that is overwritten in order to enable flying in the game?", "completion": "we can modify any memory, call any function we want, we just need to be creative with what and how we do it, so we can make it usable and fun. So when I was looking around a bit more I found that the Player class has a function called CanJump(), which returns a boolean, true or false. So let\u2019s try to overwrite that function and always return 1. When we now try this ingame, we can fly up when we press space, decline when we release it, but then we can also press it again to jump again and thus, fly up!"}
{"prompt": "How can a player increase their horizontal movement while flying in the game?", "completion": "While the flying is not perfect, because the player has an awful velocity while in the air, it\u2019s still pretty neat. If anybody finds a way to be able to move horizontally as if you are walking on the ground, let me know! Let\u2019s fly a bit higher to see again which direction the island was. Hehe so cool. The island looks awesome from above. Oh\u2026 there is a dark spot over there. Is that an island? ENHANCE! It could be the island! Let\u2019s fall back to the ground, which takes a little bit, but then thanks to our super speed we just quickly run there!"}
{"prompt": "What type of attack did the Cow King employ to kill the player?", "completion": "We are approaching it. ISLAN HERE WE COME! Entering Cowabungalow! Oh look there is a chest! And the Cow King! Remember the Gold Farm from the Let\u2019s Play in episode 1? Welcome to the gold farm. I farm all day to provide for this island. But it has all gone wrong. What\u2019s wrong? My Cows are missing! One night I heard a massive amount of thunder , then my cows had disappeared. I have no idea where they went. I will let you know if I see them. So sounds like we found the Cows! Ouch! The Cow King just killed us!"}
{"prompt": "What type of attack did the protagonist encounter in the game?", "completion": "Damn\u2026 With the attack Static Link. It\u2019s a 1337 Magic Spell. And dealing a lot of shock damage. Let\u2019s respawn. and checkout that house here. Welcome to my humble bungalow. I was enjoying my private island until those mad cows showed up. Where did the cows come from? One night I heard a thunderous boom, and when I looked outside there were mad cows everywhere. There is one in particular that worries me. That sounds familiar. I think I know who owned these cows. Which one worries you? The one with the crown!"}
{"prompt": "How can the legendary magical cube be used to steal the thunder of the Cow King?", "completion": "Anything that gets close gets struck by a bolt of lightning out of the blue. Do you know any magic? I do. Why do you ask? I have a legendary magical cube here. I read that it posseses. TYPO! THERE IS A TYPO. LITERALLY UNPLAYABLE! I read that it posseses the power of the fable Rubick, and might be able to steal the thunder of the Cow King, leaving it defenseless. Have you tried to use it on the cow? I would, but I\u2019m terrible with magic. My last attempt got me stranded on this island. That fast travel spot right there is such a tease, as whatever magic got me here is preventing me from using it."}
{"prompt": "What skill can be acquired by using the Rubick's Cube?", "completion": "Would you please take the cube and try it? I will take it and try to use it. Here it is, I won\u2019t need it back. No more magic for me. Good luck, now go steal the Cow King\u2019s thunder. Thank you. I will see what I can do. Acquired Rubick\u2019s Cube. I am Legend. AND WHAT THE HECK. Killed by a Mad Cow. Thank you. Ok. Now let\u2019s go to the Cow King again. It\u2019s attacking me, let\u2019s spam using the Rubicks Cube, and I steal the Static Link skill! Now I can use Static Link. There we go. Quest complete. Until the Cows Come home."}
{"prompt": "What was the flag acquired in the video?", "completion": "And a New Achievement. Monster Kill. We also get a weapon, the Cowboy Coder. But let\u2019s check out the chest. Acquired Flag of the Cow! 1337 Flag. The key is: I should\u2019ve used dynamic link. Wuhooo\u2026 Our first flag. And if we would have found this during the CTF, we could now submit this flag to the scoreboard to get points for our team. Awesome! We are slowly making progress. Before we end this, maybe we could also take a quick look at the original list of challenges to get an overview what our goals are."}
{"prompt": "What are the tools used in Kali Linux for Wifi hacking?", "completion": "A lot of hacking videos on youtube are about Wifi hacking. They show how you can use various tools, on Kali linux, like aircrack or some deauther to DoS clients. But I never wanted to do that, I find it quite boring. That doesn\u2019t mean that I\u2019m entirely not interested in wifi hacking, it\u2019s just that if I would make a video about it, it would be about one specific attack in detail, how it works, rather than just how to use a tool. And so with the recent disclosure for KRACK - Key Reinstallation Attacks on WPA2, I figured,"}
{"prompt": "What protocols are vulnerable to the KRACK attack?", "completion": "that\u2019s the perfect moment to do exactly that. \u201cKey Reinstallation Attacks: Forcing Nonce Reuse in WPA2\u201d by Mathy Vanhoef released around October 2017, is a paper detailing a specific protocol flaw. And I encourage you to read this paper, because the news around this attack is obviously going completely insane with sooo much misinformation going around. And so if you are actually interested in what this attack means, how it works, and what are the actual threats read it from the source. I know papers can look intimidating, but it\u2019s often enough to read the \u201cAbstract\u201d and the \u201cConclusion\u201d to get a good intuition for what this is about."}
{"prompt": "What is the 4-way handshake used for in protected Wi-Fi networks?", "completion": "And then you have all the content in between to go more indepth. So let\u2019s start with that. \u201cAll protected Wi-Fi networks use the 4-way handshake to generate a fresh session key. [...] However, we show that the 4-way handshake is vulnerable to a key reinstallation attack. Here, the adversary tricks a victim into reinstalling an already-in-use key. This is achieved by manipulating and replaying handshake messages. When reinstalling the key, associated parameters such as the incremental transmit packet number (nonce) and receive packet number (replay counter) are reset to their initial value."}
{"prompt": "What is the 4-way handshake used for in protected Wi-Fi networks?", "completion": "Our key reinstallation attack also breaks the PeerKey, group key, and Fast BSS Transition handshake. The impact depends on the handshake being attacked, and the data-confidentiality protocol in use. Notably, our attack is exceptionally devastating against Android 6.0: it forces the client into using a predictable all-zero encryption key\u201d So, there is a lot of information here and so let\u2019s try to dissect the meaning of this. \u201cAll protected Wi-Fi networks use the 4-way handshake to generate a fresh session key\u201d."}
{"prompt": "What is the Pairwise Transient Key (PTK) derived from?", "completion": "Figure 2 shows the messages exchanged when a client connects to an access point. And of course those initial messages are not encrypted. You see that after the 4-way handshake \u201cencrypted data frames can now be exchanged\u201d. The fresh session key they were talking about is the the PTK (the Pairwise Transient Key), which is derived here. The PTK is \u201cgenerated by concatenating the Pairwise master key, which itself is derived from basically the password you enter for the Wifi, the Access Point nonce (ANonce),"}
{"prompt": "What is the PTK and how is it generated?", "completion": "you see it here being sent from the access point to the client and the client nonce (SNonce), which is generated by the client and sent to the access point, but that\u2019s not all, also the access point MAC address, and the station MAC address is used in the generation of PTK. So using this pre-shared secret (the wifi password) both the client and the server now know the same Pairwise Transient Key. And you can already see here what that means generally for the security. If anybody else also knows the wifi password,"}
{"prompt": "What encryption algorithm is used in the CCMP protocol?", "completion": "and observes these nonces being exchanged they can derive your Pairwise Transient Key and can decrypt your traffic. So when you connect to a \u201csecure\u201d wifi in a hotel, you might not be as secure as you thought you would be. But that\u2019s a different issues. And then there are different protocols to actually implement the encryption. For example if TKIP is used then the encryption algorithm is RC4 and that is basically the same as WEP, and therefore vulnerable to a number of similar attacks. But another option is \u201cthe CCMP protocol,"}
{"prompt": "What is the cryptographic protocol used by WPA2 to ensure that IVs are not repeated under a particular key?", "completion": "which is AES in CCM mode (counter mode with CBC-MAC). [... it is] secure as long as no Initialization Vector (IV) is repeated under a particular key. And the IV here is the nonce. And the nonce is again constantly incremented to make sure it will never repeat. And basically the same is true for the GCMP protocol, it uses AES-GCM, and is secure as long as no IV is repeated under a particular key. If that sounds weird to you, you could watch my video \u201cBreaking ECDSA (Elliptic Curve Cryptography)\u201d."}
{"prompt": "What is a key reinstallation attack and how does it affect the security of a crypto algorithm?", "completion": "Of course ECDSA is very strong but there can be a flaw if it\u2019s not properly implemented, namely if a fixed value is used for a parameter instead of a random one. So very similar in the sense that the security of a crypto algorithm can be very fragile. And so for these algorithms, if the IV, the nonce, is reused for the same key it can probably be broken. So you can kinda see where this is going. Let\u2019s continue reading, \u201c[...], we show that the 4-way handshake is vulnerable to a key reinstallation attack."}
{"prompt": "What is the analogy used to explain how a key is \"installed\" in code?", "completion": "Here, the adversary tricks a victim into reinstalling an already-in-use key. This is achieved by manipulating and replaying handshake messages.\u201d Just in case it confuses you what \u201creinstalling\u201d or \u201cinstalling\u201d the key, it basically just means that the protocol decided \u201cthis is the key we use\u201d. If we make an analogy how that is implemented in code, it\u2019s basically just assigning the key now to the variable \u201cthe_key_we_use\u201d. Ok. So radio networks, or any other communication has to handle the case when messages get lost."}
{"prompt": "What is the consequence of resetting the key parameters when reinstalling the key?", "completion": "And they have to agree how to handle that. For example retransmitting them. And so, \u201c[...], because messages may be lost or dropped, the Access Point will retransmit message 3 if it did not receive an appropriate response as acknowledgment. As a result, the client may receive message 3 multiple times. Each time it receives this message, it will reinstall the same session key, and thereby reset the incremental transmit packet number (nonce) [...]. We show that an attacker can force these nonce resets by collecting and replaying retransmissions of message 3\u201d \u201cWhen reinstalling the key, associated parameters such as the incremental transmit packet number (nonce) and receive packet number (replay counter) are reset to their initial value.\u201d \u201cDepending on which protocol is used, this allows an adversary to replay, decrypt, and/or forge packets.\u201d And so it\u2019s now pretty easy to imagine that if you can keep resetting the key parameters some crypto stuff will be f\u2019ed up."}
{"prompt": "What protocol flaw does the author describe that opens the door for certain crypto attacks?", "completion": "And this is a protocol flaw because the official specification tells you that message 3 could be resent and you have to reset the parameters. Thus resetting the crypto algorithm parameters. And thus opening the door for certain crypto attackes depending on which crypto algorithm is used. Some are more susceptible than others. The author also checked the behaviour of different implementations and it turns out iOS and Windows both don\u2019t follow the spec and don\u2019t accept the retransmission of message 3."}
{"prompt": "What is the additional implementation bug that linux based systems have which makes it easier to decrypt wifi passwords?", "completion": "And the worst implementation is by some linux based systems because there is an additional implementation bug that resets the key to all zeroes. So you don\u2019t even have to perform this crypto attack, limiting you to maybe \u201conly\u201d decryption, I don\u2019t know. Because with this flaw you actually now know the key because all the values are set to 0. Okay. There are a lot of technical details and challenges and nuances that you can read about in the paper. I presented it more simplified but hopefully it\u2019s more accurate than some other news headlines."}
{"prompt": "What crypto algorithms are vulnerable to the attack presented in the paper?", "completion": "So summarise. WAP2 uses a 4way handshake where nonces are exchanged and used together with the wifi password to generate a key. This key is then used for encrypting packets. How it is used depends on the actual crypto algorithm being used. A lot of crypto algorithms are very fragile when certain values are reused. And the attack presented in this paper is about forcing a reset of these values - specifically the nonce which would be constantly incremented and thus would always be different. And thus opening the door to perform certain crypto attacks."}
{"prompt": "How does the KRACK attack exploit a software bug to bypass the need for a cryptographic attack?", "completion": "And this is a protocol design flaw. But additionally, during this research, a very serious software bug was discovered where on certain implementations the key was not just reset to initial parameters, but was actually set to 0. So you actually know the key and you don\u2019t have to perform a crypto attack. But you know what. Why don\u2019t read the paper. You don\u2019t learn hacking when reading security news headlines or use the tool Mathy Vanhoef wrote. Go read the actual research, or at least parts of it."}
{"prompt": "What kind of components are used to create the prototype lock discussed in the video?", "completion": "So since I started with the riscure embedded hardware CTF competition, I started to do a bit more hardware related videos and some of you struggled to understand the basics of electronics. And instead of making a basic tutorial video, I thought I do a collaboration with another channel - Electronic Idiot. So we built a simple prototype for a door lock, with a pin pad entry. We kept it simple with only four buttons. Three LEDs showing the status and a motor that would actually unlock the door. If you type in the wrong code, then the red LED will start flashing, and the more wrong tries you have, the longer it will do that."}
{"prompt": "What components are used to build the electronic lock prototype?", "completion": "And when you enter the correct pin, the motor will start spinning, to unlock the door. If you are interested in how this prototype is built, and you don\u2019t understand what all those components are for and generally want some introduction to electronics, follow now this link to Electronics Idiot\u2019s video and come back later. It\u2019s also linked in the description below. Now let\u2019s get ready, and attack this lock. First of all, let\u2019s make some assumptions. Let\u2019s assume you don\u2019t have access to the microcontroller and to the motor to unlock the door."}
{"prompt": "What is the most obvious attack method to try and unlock the door?", "completion": "Otherwise you could just directly cut the wires to the motor, hook them up to your own power supply and unlock the door. But obviously the pin pad and the LEDs have to be accessible. But not only that, also the power supply is exposed, because maybe the lock is running from a battery in a cheap safe and you need to be able to change that. Our goal is to unlock the door and the obvious attack would be to try every possible pin as fast as possible. But where do we start. We have these buttons that enter the pin."}
{"prompt": "What is the voltage output of the wire when a button is pressed?", "completion": "And obviously buttons also just modify the voltage on the input wire to the lock. The wire is always low, but when you press it, the wire is pulled to HIGH 5V. And the LEDs are just connected to those wires of the lock, which usually outputs a LOW, which is not enough to turn the LEDs on, but when the output is set to HIGH, the 5V, the LEDs will turn on. So you can just imagine that in these locations are either 0rs or 1s. For the buttons you decide which one it is by pressing the buttons, and for the LEDs the lock decides the state of 0 or 1."}
{"prompt": "What voltage does the lock output to turn the LEDs on?", "completion": "Now we want to interact with the lock. A very simple prototyping platform that everybody knows is arduino so let\u2019s use that. First of all, we have those status LEDs, especially the blue one is interesting, because it tells us, that the pin pad is ready for input. Let\u2019s take off the imaginatory front panel of our lock and hook up three cables to the LEDs. And remember the three I/O pin numbers we use on the arduino because we need it when we write the program. We know that the lock will output here a digital 1 or 0, which is basically 5V or 0V depending on if the LEDs shall be turned on."}
{"prompt": "How can the Arduino board be programmed to read values from the connected pins and send them to the computer?", "completion": "So we can just read this value on the pins that are now connected to the Lock LEDs. We can take one of the example programs that read one input pin and send it to the computer via serial and just modify that. We define which pin numbers correspond to which LED, set those pins into Input mode and then we simply extend the program to read the current value from the wire and write it out to serial. This is happening in a loop many times per second. Now if we program our arduino board and open the serial console."}
{"prompt": "What is the voltage output from the lock when the blue LED is turned on?", "completion": "We can see that the blue LED is turned on, we read a 1, because the lock is putting out 5V on that wire. And the other two LEDs are off. And obviously when you type in a wrong pin and the red LED is blinking, you can see that easily as well. Now we need something to press the buttons for us. Again this is super simple with an arduino. We just hook up 4 cables to the buttons. The microcontroller of the lock reads the status of the buttons exactly how we just implemented the reading of the LEDs. This means we just output a digital 1, 5V from this pin via those cables to indicate pushing the button."}
{"prompt": "What code is used to enter every possible pin combination in an electronic lock?", "completion": "And a digital 0 if we want to release the button again. It\u2019s so simple. So then we write some code to enter every possible pin combination. We define which output pin corresponds to which button, and set their pinMode to OUTPUT and the we write a couple of nested for-loops. One loop per pin digit. To see that in action we can output which buttons we would press via serial. And you can see it quickly loops through all possible combinations. Now we simply have to write the code which presses the buttons in a sequence, like we would by hand."}
{"prompt": "What code can be written to ensure the pin pad is ready for input?", "completion": "And that\u2019s simple. But before we press the buttons we should make sure, that the pin pad is ready for input by checking the status of the blue ready LED. We can write a while loop, which waits for the LED to turn on. After that we know we can enter now the pin. To do that we just set the output pin to High, wait a short amount of time and put it back to low. That\u2019s like pressing the button by hand. And then we do this for each digit. This code now types in all possible pins for us so we don\u2019t have to do that."}
{"prompt": "What happens to the timeout when the board is reset?", "completion": "And that works already pretty well, but the issue is, that with each failed attempt the lock increases the timeout. After a couple of attempts the time is so long, that it starts to become unfeasible. This means we need some kind of vulnerability that allows us to make this bruteforce faster. While playing around with the lock trying to understand all of its behaviour, you might realize that when you reset the board, for example when you cut the power and reconnect it again, that the timeout resets."}
{"prompt": "What is the procedure for simulating cutting the power to the electronic lock?", "completion": "The memory of the number of failed attempts seems to be lost after the power is removed. And this is where we can attack. To simulate cutting the power, I connect another cable to the reset pin of the lock. And in the code, after we entered the pin, we check with a loop for the red failed LED. If that led turns on, we proceed to pull the rest to low and then back to high, which restarts the lock. Then we enter the next loop, wait for the blue LED which indicates the lock is ready and then we enter the next pin."}
{"prompt": "What is an example of an attack that can be used to bypass a lock system?", "completion": "And now we can bruteforce the pin very quickly. Just takes a minute or so, but then it finds the correct pin and the motor spins. Also because our code was waiting for the RED led, it will not continue to try more pins. This theoretical attack is not unrealistic. For example there was this iPhone lockscreen bruteforce, where you would cut the power aggressively after a failed attempt, before the failed attempts counter could be written to memory. This way you could bruteforce all pins, even though it should be locked after 10 failed attempts."}
{"prompt": "What are some considerations a person should make when engineering a secure lock?", "completion": "And that\u2019s kinda the fun stuff with hardware attacks. They really feel like cheating in some way, because as a software person, attacking the software implementation with hardware seems pretty unfair. But these kind of things are very powerful. The person who engineers a lock like this or some other kind of hardware really has to be aware of something like this. If you start thinking about possible hardware attacks, where somebody has physical access, it becomes really really hard. When we started to plan this prototype for this collab I realised that it\u2019s not trivial to create a secure lock."}
{"prompt": "What techniques can be used to prevent attackers from bypassing an electronic lock system?", "completion": "Try it yourself, just think about how you would design a lock, and how elaborate it quickly becomes from a software standpoint to prevent attacks like we just did, but also from a hardware engineering standpoint. You have to be able to exchange the battery and enter a pin, but you must not be able to simply remove the plastic front panel and short the wire to spin the motor. If you are an engineer, software or hardware, I\u2019m really happy that you watched this video. Because once you get into the mindset of always thinking about how stuff can be attacked,"}
{"prompt": "What is the focus of the LiveOverflow channel?", "completion": "Welcome to LiveOverflow. Here you can find videos about computer internals, with a focus on hacking and security concepts. I also record myself solving hacking challenges - it might be a bit boring to watch, but if you always wondered how other people work and think, it might be interesting for you. Now let me tell you a short story about why I am doing this here. I was too young in the 90s and didn\u2019t exist in the 80s to be part of the seemingly golden age of the hacker culture. When I was a teenager I loved taking apart electronics and looking at the green circuit boards wondering with what kind of magic it is imbued with."}
{"prompt": "What programming languages did the speaker learn?", "completion": "Once my dad brought home our first computers and we got access to the internet, I found myself being fascinated with \u201chacking\u201d and wanted to learn more about it. But all I found was crap, people trying to sell old information or fake products. So I never got into hacking until much later. I started programming in Visual Basic and made my first websites with html. Eventually I moved on to php and other programming languages. Some years pass and I moved out to another city to go to university. One day I was sitting in front of my computer coming across this hacking game by stripe."}
{"prompt": "What was the first CTF that LiveOverflow participated in?", "completion": "A CTF where one level was to exploit a buffer overflow. I knew what a stack was. And I was able to read simple assembler code from university classes. But not until I saw the shell popping up, my mind being blown and struck in awe, I realized I was at a position in life where I can pursue a dream I had as a kid. And I still wear the T-Shirt I got from the stripe CTF with pride. At the same time I had the opportunity to join a hackerspace where I met so many intelligent people and I went down a rabbit hole."}
{"prompt": "What underlying concepts are important for someone to understand if they are trying to learn how to hack?", "completion": "Not many years have passed since then. And I still feel I have only explored a tiny fraction of what is out there. The content I am creating here is an attempt to give anybody who want\u2019s to understand the world better, an opportunity to start somewhere. I want to give to others, what I wish I found when I was a teenager sitting in the basement typing into google \u201chow to hack\u201d. At the same time I see more and more people making tutorials on how to use certain hacking tools, rather than explaining the underlying concepts."}
{"prompt": "What is the purpose of this video series?", "completion": "This is the first video of the web security series. Like with the binary exploitation stuff we have to start by establishing some basics. When I started as a teenager with programming and web development I did not quite understand how this whole browser, server, tcp, http, headers, cookies whatever work. So I try to introduce those things slowly and move more and more into the security aspects. I will try and keep this series a little bit more highlevel, but I certainly will dig more into the lower level networking parts in the binary series at some point."}
{"prompt": "What is the first line of an HTML file?", "completion": "Ok let\u2019s get started. For now we will stay on our local machine and won\u2019t make any connections to a server. We start with the displaying or rendering websites in the browser. So. You already know that browsers can render html files. So let\u2019s start by constructing a simple one. The first line is the doctype. In previous html versions this was more important, because it included important render informations for different modes for the browsers in the past. But nowadays mostly irrelevant. Then comes the standard html skeleton. HTML tag. Including a Head and a body. Oh and if it wasn\u2019t really clear, HTML is hirarchical."}
{"prompt": "What HTML tag is used to create a textbox?", "completion": "A html tag always opens and closes again. And inside you can have more tags. So you should read html always in like the pairs of tags. And think of it in a hierarchical order. Indentation helps doing that. Let\u2019s add a heading with h1. And some text in paragraphs with p. Let\u2019s also add an image with the img tag. And while we are on it a link to another site. There are a lot of different html tags that provide different user interface features. Some are for styling text stuff like headers or images. Others provide input elements for formulars. So mh. Let\u2019s maybe add a formular too. A simple textbox and a submit button."}
{"prompt": "What is the syntax for HTML tags?", "completion": "Generally the syntax for tags is like this. Less-than sign, followed by the tag name without a space. After that you can have multiple key and value pairs divided by spaces. These are called the attributes of an html tag. The values should be quoted - but they don\u2019t have to. Another small thing that is helpful for certain kind of attacks. Now we can open this file in the browser. The browser parses now the html code and starts drawing the elements to the screen. When you do a rightclick somewhere you can select \u201cinspect element\u201d. Which opens up the Chrome developer tools. Other modern browser offer similar tools. In the first tab called \u201celements\u201d you can see all the html document elements."}
{"prompt": "What are browsers capable of doing?", "completion": "It has this nice hierarchical display where you can open and collapse tags. You can also go in there and change the html. This is obviously just changing what the browser currently displays, and when you refresh you obviously see the original file again. You are not modifying the actual file on your hard drive. Depending on your humor, that might already be enough to have fun by faking the content of a website, make a screenshot and post it to facebook, claiming that it was real. Browser are also very good at something else."}
{"prompt": "What techniques do browsers use to 'fix' incorrect HTML code?", "completion": "Html is kinda like a programming language. But when you write some weird html code the page doesn\u2019t break like a python or c program would. Browsers are very good at \u201cfixing\u201d the crappy html code we write. Fixing is maybe the wrong word. - let\u2019s say they are very liberal in what they accept. Here you see some examples. We put the form inside of a paragraph p tag which is a violation of the standard. But in the inspect view you can see how the browser fixed that, by making a p tag before and after the form. Or they don\u2019t care if you forget to close your tags."}
{"prompt": "What are some potential security issues that can arise from improper HTML coding?", "completion": "It doesn\u2019t complain if you use weird characters in weird places. It doesn\u2019t complain about IDs that are supposed to be unique being used multiple times. You can imagine that this might aid in exploitation if you are able to modify (or generally inject new html code into the) html of a site. You can use this to get around certain resitrictions. For example if you cannot use slashes for some reason, then simply don\u2019t close the tag. Anyhow, besides HTML there are a few other very common technologies used. One is CSS."}
{"prompt": "What is the syntax for defining styles in CSS?", "completion": "CSS is another type of language that allows you to style the html page. For example changing colors. You have multiple options to do that. You can give each html element a style attribute. You can use a style tag, or you can reference a seperate css file. Css syntax is also super easy. You start with an identifier, called selector. So first you have to decide which html tags you want to style. You can define styles for all tags of a certain kind. Or all tags with a certain class using a dot before the class name. Or only the tag with this ID using a hash symbol."}
{"prompt": "What styling features can be used to customize the look of HTML elements?", "completion": "You can also combine these. Input DOT classname references all input elements that have this classname. Or comma seperate if you want to give different selectors the same style. Or hirarchical, only style this paragraph if inside of a div. Inside of curly braces you define again key and values, this time semicolon seperated. There are many different styling features. Such as text colors, fonts, margins and paddings. And again, you can play with these things in the browser developer tools. Just click on an element and on the right you can make changes. It\u2019s awesome. You can immediately see the results. Really cool for learning\u2026 Now let\u2019s give this an awful background-color."}
{"prompt": "What are two ways to have javascript interact with HTML?", "completion": "The third important technology, is javascript. Again you can write javascript inside of attributes, or us a script tag, or reference an external javascript file. Javascript is a real full blown programming language allowing you to define functions, loops, ifs and all this kind of stuff. A common exmple and proof of javascript execution is to use something like alert() or prompt(), which will trigger a small popup alert box. So we can for example define a useless function that calls alert(). To have javascript interact with html there are two major ways."}
{"prompt": "What is the hierarchical object model that JavaScript uses to access HTML elements?", "completion": "One are events. They can trigger javascript execution. So for example we can add an onclick event handler on an html tag, and if the user clicks on that tag, it will execute the javascript function. The other one is accessing html from javascript. You can access the html elements through an hierarchical object model called the DOM. Javascript knows objects. Like other programming languages. And the DOM is simply an object representation of the html page, so that javascript can access it nicely. You can use the developer tools again to play with javascript on the current site. So for example you can take the document, then its html body and its children."}
{"prompt": "What is the URL scheme for loading a website from the local filesystem?", "completion": "And then access and change some text. Again, all you do here is in the browser. Opening a website in the browser is like opening a picture in photoshop. photoshop renders the image, but also offers you tools to play with that image. And the browser also opens, and renders, a file. And provides tools to play with the displayed paged. Now currently this resource is loaded from the local filesystem, you can see that that it has the URL scheme file, colon, slash,slash. Followed by it\u2019s path. Usually websites are loaded from a remote server via the http protocol. But more about HTTP in the next video."}
{"prompt": "What were the names of the three JavaScript security legends of 1996?", "completion": "I made a video about the history of JavaScript,\u00a0 or rather the history of JavaScript security. And I had planned to continue telling\u00a0 the story about what happened after 1996, but after doing more research, I actually found\u00a0 out a lot more about these super early first JavaScript hacks. And that was so fascinating to\u00a0 me that I felt like I have to share it with you. So here let me present to you, the three\u00a0 JavaScript security legends of 1996. Scott Weston, John Tennyson\u00a0 and John Robert LoVerso."}
{"prompt": "What exploit could be used to steal a list of files from a local folder in the browser?", "completion": "Keep watching if you want to\u00a0 know what makes them legends!  Quick recap, in the previous video I told\u00a0 you about Netscape 2.0 from early 1996. which introduced JavaScript. And I showed you\u00a0 a vulnerability, basically we could create a website that loads two different sites in frames,\u00a0 and the javascript running on the one website, could read out the content and\u00a0 cookies of the other website. Or an alternative exploit could also\u00a0 be that instead of another website, we load a local folder in the browser,\u00a0 and steal the list of files from there."}
{"prompt": "What security issue was fixed in Netcape 2.02?", "completion": "And yes, as many correctly pointed out, there\u00a0 is a small nuanced difference between the term \u201csite\u201d and \u201cdomain\u201d, but for the purpose\u00a0 of exploring these old vulnerabilities, I think it doesn\u2019t matter. I\u2019m also sure\u00a0 this difference didn\u2019t exist yet in 1996. Anyway. This issue was fixed in Netcape 2.02\u00a0 which basically prevented one domain using javascript to access the content of another\u00a0 domain, or site, or whatever they called it. And that\u2019s very cool, but the thing is, I kinda\u00a0 just imagined what the first vulnerabilities looked like by reading between the lines and\u00a0 applying my experience in browser client side security. But after many more hours reading\u00a0 old mailing lists, I found something crazy."}
{"prompt": "What was the earliest known vulnerability discovered in JavaScript?", "completion": "It all started with this email from\u00a0 1997 on the bugtraq mailinglist. John Robert LoVerso, one of the \u201cthree legends\u201d,\u00a0 wrote an email criticizing somebody about an inaccurate javascript vulnerability\u00a0 description and here he says this: \u201cAs history, I *found* a bug with JavaScript and\u00a0 file upload about 16 months ago in Netscape 2.01, just a few days after that\u00a0 release. I did not release details of that bug until 2.02 was released.\u201c This exactly falls into the early timeline. JavaScript was \u201cinvented\u201d and introduced in\u00a0 Netscape 2.0, and 2.02 had the famous fix."}
{"prompt": "How did the bug in Netscape 2.0 beta 3 that allowed JavaScript to directory browse persist in the 2.0 release?", "completion": "So he was one of the people reporting\u00a0 those very early javascript attack ideas to Netscape. And apparently it was\u00a0 related to javascript and fileuploads. Going to his website, (thanks to the webarchive), we can find here a list of JavaScript\u00a0 issues he discovered. And check this out: \u201cThe bug in Netscape 2.0 beta 3 that\u00a0 allowed JavaScript to directory browse lives on in the 2.0 release, even\u00a0 after Netscape told us it was fixed.\u201d This link also still works. So this is one\u00a0 of the actual first javascript exploits ever."}
{"prompt": "What is the code used to \"grab a user's directory\" in the doDir function?", "completion": "So what does \u201cWith 2.0, when you click on List directory a\u00a0 window will popup with the directory contents, which will be read and displayed below\u00a0 in the results box. Clicking Submit to sends the results box off to a remote host,\u00a0 meaning the results have been ``stolen''.\u201d So let\u2019s have a look at the\u00a0 javascript sources of this page. First it references a few forms and\u00a0 elements. That part is not that important, it\u2019s just to display information later. More importantly is the doDir function which \u201cgrabs a user's directory\u201d. So here it\u00a0 first gets the folder name of the list/steal directory input element, creates the file URI and\u00a0 assigns it as the action to the dirsteal form."}
{"prompt": "How does the doDir2 exploit work?", "completion": "So when the form is submitted, it\u00a0 will submit it to the directory URL. But before it submits it, it opens another window. After that window is opened it will submit the form. And then comes doDir2,\u00a0 which goes through the document of this new window and extracts all links. Now on first sight this might look different to what I guesses the first exploit might have\u00a0 looked like, but it\u2019s actually very similar. Let me play a quick clip from\u00a0 from my first video again:  As you can see, first, the\u00a0 extraction stealing part,"}
{"prompt": "What method did LoVerso use to extract and place links into a text box in order to send them to another server?", "completion": "we simply access the document links and take them. Only difference is how we load the victim directory list. I loaded the folder in another\u00a0 frame. And here, we load the files in another window. This code is super weird though, this\u00a0 doesn\u2019t work anymore in modern browsers. This is setting here the form action URL and submits\u00a0 the form, but instead of this form submitting to the main window where this code runs, it will\u00a0 submit it to the new opened window. To be honest this sounds like a \u201cbug\u201d, at least today, but\u00a0 back then it seemed like a neat trick to submit a form into a new window, instead of submitting\u00a0 on the same page. Anyway. Window is loaded, links extracted and placed into this text box. Which\u00a0 could now be sent to another server to steal it."}
{"prompt": "What was the original report by John Tennyson regarding these JavaScript bugs?", "completion": "So this was actually one of the first javascript\u00a0 attacks. And that\u2019s why John Robert LoVerso is one of the three legends. But there is more here. \u201cChronology: Original report by Tennyson,\u00a0 describing these bugs in 2.0b3.\u201d So hgere is the second\u00a0 legend we are going to meet. John Tennyson. While the link here was\u00a0 unfortunately not archived by the web archive, at least now I had a name and could research\u00a0 more. Which led me to this AMAZING article by Keith Dawson in the\u201dTasty bits from the\u00a0 technology front\u201d newsletter or magazin."}
{"prompt": "What was the name of the Netscape bug bounty program that Scott Weston was awarded for demonstrating a way to capture the \"clickstream\" of the browser user?", "completion": "Keith was documenting some of these\u00a0 very early javascript security events, so lets read a paragraph here: \u201cJavaScript, which started out life as\u00a0 \"LiveScript,\" displayed security flaws as early as beta 2 . Scott Weston\u00a0 was among the first to be awarded Netscape's $1000 \"bug bounty\" for\u00a0 his demonstration of a way to capture the \"clickstream\" of the browser\u00a0 user. The bug was fixed in beta 3.\u201d Wowowowo. Was netscape the first company\u00a0 offering a bug bounty program around 1996? Huh!... Seems like this goes even back\u00a0 to 1995 as seen in this news article."}
{"prompt": "What year was Javascript originally known as Livescript?", "completion": "\u201cThe company has also announced a \"Bugs\u00a0 Bounty\" program offering $1,000 to the first person who can identify a major security bug in the new beta version of\u00a0 its Netscape browser software.\u201c Damn! I thought bug bounty is a super modern\u00a0 term. But it is not. Wow. Anyway. We got sidetracked. Back to the article. So Scott\u00a0 Wattson is the third legend we get to meet. And there is actually another TBTF\u00a0 article about this finding here. As you can see. this even related to the first\u00a0 release where javascript was still called livescript. So this might really be the very\u00a0 very first (public) javascript (or livescript)"}
{"prompt": "What privacy bug did Scott Weston discover in Netscape's second beta?", "completion": "exploit. Which would make Scott Wattson the\u00a0 true grandfather of javascript security: \u201cScott Weston discovered a gaping security hole\u00a0 in Netscape's second beta that can result in a chilling loss of privacy. He reported it\u00a0 to Netscape and they have fixed it already; (I hope they pay him the $1000 under their Bugs\u00a0 Bounty program.) The problem is in LiveScripts.\u201c So let\u2019s have a look at this\u00a0 privacy bug. Here Scott says: \u201cThe \"LiveScript\" that I wrote extracts all\u00a0 the history of the current netscape window.\u201d Mh. Unfortunately he didn\u2019t attach example\u00a0 code and other links I found were dead."}
{"prompt": "How did Netscape fix the bug that allowed LoVerso to exploit the history list?", "completion": "But looking at the javascript manual of like\u00a0 1997 we know there is the history list. And maybe his exploit was simply taking the links\u00a0 of that list and sending to another server. Unfortunately \u201cNetscape has fixed this bug in\u00a0 2.0b3\u201d and the Netscape version I have is that beta 3. So I think that\u2019s why I couldn\u2019t read\u00a0 the history here. If anybody has a beta release from before beta 3, where javascript was still\u00a0 called livescript, please send it over to me. Anyway. Let\u2019s read another paragraph of TBTF."}
{"prompt": "What Netscape version did John Tennyson report a $1000 bounty bug against?", "completion": "In early January a cluster of bugs with\u00a0 similar effect was reported by John Tennyson against beta 4; he was awarded a $1000 bounty.\u00a0 Netscape claimed to have worked around these problems in beta 5 and 6; they said that\u00a0 the real fix would come in version 2.1. On February 13 LoVerso notified\u00a0 Netscape that one of these bugs, the \"directory browser\" [5], still\u00a0 exists in the released Navigator 2.0. So as you can see, these three people all\u00a0 reported serious javascript security bugs in the early months of 1996. And that\u2019s why I\u00a0 call them the legends of javascript security:"}
{"prompt": "What security issues were associated with Java applets in early 1996?", "completion": "Scott Weston, John Tennyson\u00a0 and John Robert LoVerso. Now to put this all a bit more into\u00a0 context again. What does this all mean. You have to keep in mind, it\u2019s early 1996,\u00a0 JavaScript was just invented. Netscape was running full force into the future trying to implement\u00a0 new features to make a rich web experience. And at the time Java Applets already\u00a0 existed for dynamic client applications, but at the time there were constantly serious\u00a0 java issues in the browsers, allowing for drive-by downloads you now - serious browser exploits. So\u00a0 Netscape came along and claimed (or hoped) that JavaScript is a lot more secure than Java."}
{"prompt": "What were the claims made about Java's security in comparison to JavaScript's security?", "completion": "But I guess this claim motivated these people to look into it, uncovering lots of\u00a0 issues. Leading to articles like this one: \u201cJavaScript can make no claim to being\u00a0 proveably secure. As LoVerso points out, Sun's Java was designed to be secure in the\u00a0 network environment; its design and implementation have been examined by hundreds, perhaps thousands,\u00a0 of knowledgable and critical people. Netscape's JavaScript is a separate implementation of\u00a0 an interpreted (not precompiled) language syntactically similar to Java; it derives\u00a0 no security from the similar name.\u201d And this is important. Maybe the reason why\u00a0 Netscape wanted to have Java in the name is because Java was familiar and carried some trust.\u00a0 At least in the regular computer user world."}
{"prompt": "What is ECMAScript, and how is it related to JavaScript?", "completion": "But unlike to Java: \u201cThere is no specification for JavaScript available for public scrutiny\u00a0 -- [in contrast] Java is spec'ed, with details of the language, the bytecode, and\u00a0 the virtual machine. Netscape's JavaScript specification [2] is intimately tied to the\u00a0 single existing implementation of the language, in the Navigator browser; the source code has\u00a0 not been examined by anyone outside the company.\u201d Crazy times. Of course\u00a0 nowadays JavaScript has a spec. It grew into a very mature language.\u00a0 And you probably have all heard about it ECMAScript. That\u2019s basically the\u00a0 javascript language specification."}
{"prompt": "What is SWD and how is it similar to JTAG?", "completion": "Last video we learned from the official documentation of ledger about JTAG. that sounds really cool so let\u2019s investigate that more. On the STM32 description page, you can scroll down and find resources about Development Tools, specifically to an ST-Link In-circuit debugger and programmer for STM8 and STM32 MCUs. This device can do JTAG/SWD stuff. SWD stands for Serial Wire Debug. So very similar to JTAG but something ARM specific. It basically has only two wires for data. we also don\u2019t really need to buy that device."}
{"prompt": "How do development boards like the STM32 Nucleo board facilitate debugging of the chip?", "completion": "Because I got a cool tip from Thomas. He told me I should just get a development board for the STM32. A development board is like an arduino, it\u2019s a board with the chip you want to build something with, and all the pins are exposed and you can build a proof of concept, before actually designing your product with a PCB. And this STM32 has to be programmed and possibly debugged as well, so these boards might come with a built in ST-Link. So here I have an official Nucleo board from STMicroelectronics with an STM32."}
{"prompt": "What type of STM32 microcontroller is used on the development board?", "completion": "Now I have a different STM32 on here, the F446RE, but that doesn\u2019t matter because we are interested in this part of the PCB. See this gap here, they are here because you could even just break it off. That part basically is the ST-Link component. And you see here that the ST-Link is connected to the Nucleo with some jumpers. A jumper just connects two pins together. So if you take out those jumpers, then you just have a bare ST-LINK here and the Serial Wire Debug pin headers are exposed here. And on there it also says SWD."}
{"prompt": "What pins does the SWD debug connector have and what are their functions?", "completion": "In the general user manual documentation for the nucleo board you can also find some details about this SWD debug connector. So that CN4 connector has 6 pins, but the sixth one is reserved and not used right now. Usually the first pin is also marked by something like a dot. Next we have to somehow connect this to the ledger. First is VDD, that\u2019s the +5V of the target, the second one is the SWD clock signal, the third just connects to ground, then we have the SWD IO pin, that one is the actual data carrying pin, and we have an exposed reset line that can be used by the st-link to reset the target chip."}
{"prompt": "What pins are used for SWDIO and SWD Clock on the STM32F042 chip?", "completion": "So how do we connect this to the ledger? Let\u2019s assume we haven\u2019t seen this convenient line of pins on the bottom side of the ledger pcb and let\u2019s look at the STM32F042 datasheet. So we are looking for Power, Ground, SWD IO, SWD Clock and reset. In the pinout table we can find them. SWDIO is Pin PA13, and SWD Clock is Pin PA14. And every chip also has a reset pin. In this case it appears to be called NRST. Here is the package pinout how the chip looks from the top. And PA13 and PA14 are over here and reset is here."}
{"prompt": "How can you verify the correct orientation of the chip when connecting the ST-Link board?", "completion": "Now how do you know which way you have to look at the chip. The text is a bit misleading because what you need to look for is a symbol like this dot. This indicates the top left corner. So these two pins that disappear into the PCB should be SWD IO and SWD CLK. And to verify that we have the correct orientation we can also check these two pins. These go directly to the USB and in the pin definitions table we see that PA12 and PA11, so the two pins right below PA13 and PA14 are in fact for USB. So theoretically we could just hook up the ST-Link board to those pins, but luckily,"}
{"prompt": "What is the pinout of the SWD connector?", "completion": "when we follow those two pins on the backside of the PCB, we see that they connect to these two pads. The center is connected to the ground plane, so that is GND and this one seems to connect to the other side of the chip, where reset is located, so that should be RESET and then this must be VDD, the +5V power supply. So this matches exactly our SWD connector pinout. So let me solder some cables to it so we can easily connect it to the board. Here is how I did it. I have some small generic holed perfboards that can be used for prototyping pcbs."}
{"prompt": "What is the pad spacing of the 2.54mm or 0.1inch hole grid?", "completion": "I got them in different formats and there is this long one that could fit nicely. I noticed that the pad spacing matches exactly the 2.54mm or 0.1inch hole grid. So my plan, not sure if that works is just to lay the ledger pcb on it like this, put a lot of solder on this side and hope it flows down onto the pcb and connects the whole thing. Not sure if that\u2019s a good idea, but it seemed reasonable to me at the moment. So I get my soldering iron and all the equipment I might need ready. Probably should use a different solder tip and then let\u2019s make a plan."}
{"prompt": "What technique did the presenter ultimately use to keep their connections to the chip in place?", "completion": "To keep it in place I thought maybe using some electrical tape, but that kinda failed\u2026 my second idea was to apply a bit of solder and make the solder spiking up a bit, so I can just stick those into the holes. You can see here barely the pointy end. And then I tried electrical tape again, but fail\u2026 just always slips off a bit\u2026 then I thought I could use a piece of wire to make kind of like a pin sticking up and then putting it on the pcb, but unfortunately the only wire I had was way too thick."}
{"prompt": "What type of pins did the speaker choose to use to connect the ST-Link to the PCB?", "completion": "So in the end, I just carefully laid it on top and applied solder and crossed my fingers\u2026 and to my surprise, that worked! It seems to hold and has flow down onto the pad\u2026 so I do it on all five holes and here is the result. You can clearly see the solder being on the pcb. Next I would like to add some nice pins to the PCB so I can connect some wires to the ST-Link. let\u2019s quickly check my electronics supply. There are some pins. I think I will take some 90 degree ones so they stick out to the side."}
{"prompt": "What techniques are used to connect solder spots to pins on a development board?", "completion": "And the whole thing stays flat. Something like this would be cool. So now I just have to connect these solder spots with these pins. And that sounds easier than it is because solder is really like sticking to pads and make them cross over the solder protection layer, the green stuff is tricky. As you can see I just splash a bunch of sodler on those three pins and I just can\u2019t get them connected, and thanks to gravity it just accumulates on the other side. So I gotta remove some of the solder with this copper mesh."}
{"prompt": "What type of tool is used to check if two points are electrically connected?", "completion": "That acts like a sponch and just sucks up liquid solder. Then I decided to use some short snippets of the wire from earlier and use that as a simple bridge connection. And that works really well. Cool. Before I connect it I wanna do a small sanity check and make sure that I didn\u2019t accidentally cause a short. So I use a continuity tester to check if two points are electrically connected. And it looks all pretty good, none of them are shorted\u2026 but\u2026 then\u2026 this is the moment I realized something else\u2026 do you see it?"}
{"prompt": "What order should the cables be connected to the Nucleo board?", "completion": "I give you a second to notice it while I\u2019m just looking at it and trying to process how that happened. You see, I scrwed up and soldered the connecter one pin off\u2026 see that dot there, that is the spike of the solder pin we did earlier. That is supposed to be the first pin. And this back there, there is no pin below at all. Godammit!... I\u2019m an idiot\u2026 so that was annoying but I fixed it\u2026 so here we go\u2026 this looks good now. Next let\u2019s get the Nucleo board and hook up the cables. I\u2019m checking again that I got the order of the cables right but looks all good."}
{"prompt": "What type of development board did the speaker use to debug the chip?", "completion": "Moment of truth, plugging in the USB cable, will it still turn on or did I screw up soldering? Ehm\u2026 well\u2026 I didn\u2019t expect that\u2026 So I disconnected the board from the nucleo again and tried it\u2026 and then the screen turned on\u2026 puh.. Ok so it just didn\u2019t work because of the debug connection, but then I reconnected the nucleo again to just to reproduce that and suddenly the screen turned on as well. What is going on? Well\u2026 in any way we can now connect the nucleo via USB and then we can try out the debugging interface."}
{"prompt": "What is the correct way to connect the wires to the laptop in order to use the debugging tools?", "completion": "But immediately when the USB plug touched the usb connector the ledger reset. I\u2019m sure that\u2019s not any reason to be concerned, it\u2019s probably what is supposed to happen? Also let\u2019s take some electrical tape and secure the ledger and the screen on the PCB. Looks pretty neat. I have to say I like how that worked out. So let\u2019s connect everything to the laptop and try the tools. I will show those tools in a second but it didn\u2019t work\u2026 I was staring at the setup and realized\u2026 ooooops\u2026 I had those wires connected wrong\u2026 goosh\u2026 I\u2019m so happy I haven\u2019t destroyed the ledger yet, but if we keep going like that it won\u2019t work for much longer."}
{"prompt": "What is the SWD debugging connection used for?", "completion": "Awesome\u2026 Now let\u2019s try this. I have stlink installed on my mac and then we can for example run st-info to get some chip description. AND IT ANSWERS. IT\u2019S a F04 device. STMf04\u2026 Let\u2019s try the real thing. St-util. It finds a device, also prints the sram and flash size and now the gdb-server is listening on port 4242. WOHOOO... Ok\u2026 now we need a special gdb to debug this arm code. This is pretty simple. just search for arm-none-eabi download, and you will find the official arm embedded toolchain and you can grab the tools for your system."}
{"prompt": "How does ARM assembly language differ from Intel assembly language?", "completion": "In my case Mac OS X. Once you got that you just start the arm-non-eabi-gdb and connect to a remote target. Localhost port 4242. BOOM! It worked. We can no continue and with CTRL+C just break at any point, inspect the registers and even disassemble some instructions. But this disassembly looks wrong. Unlike intel assembler, where instructions can have different byte lengths, arm instructions are always 32bit long. But there are also THUMB instructions and they are 16bit long. And this case this runs Thumb code."}
{"prompt": "What is the convention for telling GDB to disassemble ARM code as Thumb code?", "completion": "And to tell gdb to disassemble this as Thumb instead, we ask it to disassemble at address +1. So an odd address. Because of this instruction alignment you always have instructions at even numbers, right? Instructions are either 2 or 4 bytes long. So you shouldn\u2019t think of this +1 as an odd address, but rather an address that has the last bit set. And this is convention to tell you this is now Thumb code. You might also see this when disassembling arm and there is a jump or branch instruction to an odd address, it\u2019s not an odd address,"}
{"prompt": "What is the command used to read the whole flash and create a backup dump?", "completion": "it\u2019s an address that has the last bit set and that means its switching to thumb instructions from here on out. Anyway, this way gdb will also interpret this as thumb and show us now the real instructions. Now we can use gdb to debug the device, cool, huh? One last thing, we can use st-flash to read the whole flash and create a backup dump of the whole flash. We start to dump the memory from 0x80000000 that\u2019s the start of the flash and then we read 32768 bytes, which is 0x8000, the size of the flash."}
{"prompt": "What resources are available to learn more about the security of VS Code extensions?", "completion": "Recently I had to do a security review of a\u00a0 VS Code extension and language server. But I know nothing about VS Code Extension\u00a0 security. what is the attack surface? What could go wrong? But I need to know\u00a0 this, to properly review the code, right? So the question is, how can I do my\u00a0 work, if I don\u2019t know this stuff. Well, the answer is, first, I obviously\u00a0 need some general experience on how computers and software work, and how that\u00a0 stuff can break, but then I also need specific knowledge about the topic. So how do I learn\u00a0 about it? Well I can start by looking around what others have published on the topic. And\u00a0 you can find a few resources out there about security of VSCode extensions, like a blog\u00a0 post by vasco franco of trailofbits or an article by rail and kirill. But when you\u00a0 want to become a security professional,"}
{"prompt": "What is security research?", "completion": "you cannot always rely on existing material. Even\u00a0 in this case you only have a handful of resources. And think about this, how did those authors\u00a0 come up with their articles in the first place? Well the answer to that is, security\u00a0 research. These articles are basically the result of research. So\u00a0 in order to do good work, I have to do security research on VS Code\u00a0 Extensions myself. And in this video I want to take you along on one particular research area\u00a0 that I investigated with VSCode Language Servers."}
{"prompt": "What is the architecture of a Language Server?", "completion": "So what is a language server? Luckily there is this great guide from the official\u00a0 vscode documentation explaining it: Language Server is a special kind\u00a0 of Visual Studio Code extension that powers the editing experience for many\u00a0 programming languages. With Language Servers, you can implement autocomplete,\u00a0 error-checking (called internally diagnostics), jump-to-definition,\u00a0 and many other language features. And here is generally how the architecture\u00a0 looks like. Let\u2019s say you want to add HTML or PHP language features. Like checking\u00a0 for syntax errors or auto completion,"}
{"prompt": "What is the language server protocol used for in VSCode?", "completion": "then you create a VSCode extension to do\u00a0 that. And part of this extension is the actual VS code extension itself, the Language\u00a0 Client. It\u2019s your code running within VSCode as an extension. But then your extension\u00a0 executes another process, another program, which is the respective language server, and they\u00a0 communicate using the language server protocol. By the way, if you find the term server and\u00a0 protocol confusing, it just happens so I made videos about these terms recently. So check out\u00a0 those videos and then it hopefully makes sense."}
{"prompt": "What is the purpose of the VSCode extension API and how is the language server process started?", "completion": "This article also refers to a language server\u00a0 sample code, which is a minimal example of how to implement that. For security research it\u2019s\u00a0 always important to have examples to look at. Essentially we are looking here at a library or\u00a0 framework - the VSCode extension API and the way how language servers are implemented. So you\u00a0 need to know how the library is actually used. For example from the guide we just learned\u00a0 that the extension executes the language server process. So this library somehow\u00a0 provides code execution, right? But that doesn\u2019t mean the library has a remote code\u00a0 execution vulnerability. It now depends on HOW exactly the language server process is\u00a0 started and how developers use the library,"}
{"prompt": "What is the structure of the code in the lsp-sample?", "completion": "whether it\u2019s easy to make a mistake that\u00a0 leads to RCE, or it\u2019s unlikely to do so. So that\u2019s why it\u2019s important\u00a0 to have realistic example code. And here it is. The lsp-sample. From the\u00a0 README we can learn how to set it up, I don\u2019t need to go into details here,\u00a0 you can follow those steps yourself. Now let\u2019s have a brief look over the structure of\u00a0 this code. Here we have a server, so that\u2019s the language server, and we have the client, that\u00a0 is the actual VSCode extension. This extension code is very minimal. On activate, that\u2019s like\u00a0 the main entry point for the VSCode extension,"}
{"prompt": "What is the process for executing the language server process in the VSCode Extension + Language Server?", "completion": "it will create a serverModule path, configure\u00a0 the serverOptions, configure some clientOptions, passes it to the languageClient and starts it. So this is apparently how executing the server process works. Here we specify the\u00a0 path to the server program and I guess client.start() will then launch the process. So regarding our previous question about remote code execution, is this an issue for\u00a0 this library? Theoretically you could write some weird code where you assemble the server\u00a0 path dynamically based on attacker controlled data and that could lead to arbitrary code\u00a0 execution, but it\u2019s incredibly unlikely. The extension and server go hand in hand, and I can\u00a0 guarantee that, even without actually checking,"}
{"prompt": "What potential security issue could arise if the path is attacker controlled?", "completion": "in every case the path is gonna be hardcoded. So that\u2019s uninteresting and useless for us. WRONG! YOU WRONG! This is not uninteresting.\u00a0 We just did security research. We identified a potential security issue - based on our\u00a0 prior experience we understood that if this path is attacker controlled it would\u00a0 lead to an issue. And remember our job as a professional is to do a security review\u00a0 of some other VSCode extension and language server. Albeit it being unlikely to be an issue,\u00a0 we can still go and check that in other projects."}
{"prompt": "What is the result of the language server when an uppercase word such as \"ANY\" is entered?", "completion": "So all in all, we did good work here, we did what\u00a0 was asked from us, even though it led to nothing. Anyway, let\u2019s move on. There is actually another thing I really wanted to look at. But before we\u00a0 get to that, let\u2019s look at this example code in action. What does it do? The README tells us\u00a0 how to compile and run and debug this project, so let\u2019s go ahead. It will launch a new\u00a0 VSCode instance with our vscode extension, the client, and it will execute the server. We can now create a new document and enter some example text. And look at the\u00a0 squiggly lines appearing. The uppercase ANY is flagged. ANY is all uppercase. And\u00a0 this is the result of the language server."}
{"prompt": "What is the language server's reaction when the content of an open document changes?", "completion": "The language server has a bit more code, but\u00a0 most important is that it reacts on changing content. So when the content of an open document\u00a0 changes it will execute validateTextDocument, and there is a regex where it looks\u00a0 for uppercase words length 2 and more. It then loops over all matched words and creates\u00a0 so called Diagnostics. It creates a warning saying that the word is all uppercase. And then it uses\u00a0 the connection between the client and server to send back the diagnostics about this file,\u00a0 which the vscode client receives and turns it into this warning here. ANY is all uppercase."}
{"prompt": "What protocol does the server and client use to communicate?", "completion": "So you just saw the vscode extension and language server in action. The client setups an\u00a0 external process, a server, and asks it to analyze the opened code. And the server then\u00a0 can send back information, like warnings about the code. It\u2019s just a toy example, flagging\u00a0 uppercase words, but you can see what it does. So what\u2019s next? There is actually one area that\u00a0 I find incredibly important to investigate. And that is \u201cCommunication\u201d. That is\u00a0 the important word. Whenever you have multiple components, especially server and\u00a0 client, that communicate with each other."}
{"prompt": "What types of inter-process communication features does the operating system offer?", "completion": "As a security researcher you should\u00a0 ask yourself a few questions. First question is, how is the communication done?\u00a0 Is it something like an HTTP API, websockets, is it raw TCP sockets, UDP? Does it use pipes\u00a0 and IPC features (inter-process communication) offered by the operating system. Like pipes in\u00a0 windows, or mach ports in mac. there are tons of ways how communication could be implemented.\u00a0 And it\u2019s important to figure out what it uses. And then this leads to the second\u00a0 question. Can an attacker mess with that?"}
{"prompt": "What types of TransportKinds are used in the vscode-languageserver library?", "completion": "So we are basically trying to\u00a0 identify the attack surface. Generally we only need to review code\u00a0 that can be reached by an attacker, but without knowing what we can\u00a0 reach, we don\u2019t know what to review. So discovery of the threat surface is a\u00a0 very important part of security research. That\u2019s why we have to do that now. And in the\u00a0 client code we can actually see here a reference to TransportKind.ipc. Inter-process communication.\u00a0 But what other types of TransportKinds exist? I guess it\u2019s time to look into the code of\u00a0 the vscode-languageserver library itself."}
{"prompt": "What is the underlying message protocol used by the npm module?", "completion": "We can easily find the github repository for\u00a0 the npm module, which includes the client, server, protocol types and JSONRPC (the underlying\u00a0 message protocol). If you have a github account you can hit dot on your keyboard and drop into\u00a0 an in-browser vscode to now explore the sources. In the search I always like to exclude test.\u00a0 Tests are great place to see how developers intend certain functions to be used, but\u00a0 oftentimes I don\u2019t want to get distracted by it, I will seek it out when I specifically want to."}
{"prompt": "What are the different TransportKinds available for a Language Server in VSCode Extensions?", "completion": "This leaves us with the main.ts file containing a lot of if-checks for different TransportKinds.\u00a0 And we can also find the enum defining the different methods. We have stdin/out, ipc,\u00a0 pipe and socket. mhhh. I guess there is no HTTP api. Which means attacks from browsers\u00a0 with HTTP requests are not possible, right? Well each transport kind may or may not have\u00a0 different risks whether an attacker can even reach those endpoints or not. Especially IPC and pipes\u00a0 usually are only interesting for local attackers that already have code running on the machine.\u00a0 So we think more about privilege escalation. But regular TCP sockets are still very interesting.\u00a0 Maybe they are listening on all interfaces,"}
{"prompt": "What is the TransportKind parameter used for in implementing a Language Server in VSCode?", "completion": "meaning that an external attacker on the same\u00a0 network could talk to the TCP server. But also web browsers speak TCP. Well web browsers speak\u00a0 HTTP, but HTTP is built ontop of TCP. And if you have played CTFs before with SSRF challenges,\u00a0 or for example you have watched my GitLab CTF walkthrough, you know that you can sometimes use\u00a0 HTTP or other protocol requests, and target other TCP based protocols and mess with that. So in\u00a0 my brain I start to wonder, what can I do here? So first we need to get a better test\u00a0 setup. Which means I want to change the sample code from using TransportKind.ipc,\u00a0 to TransportKind.socket. Looking around at other examples implementing this we have\u00a0 to specify the transportKind and a port."}
{"prompt": "What protocols are used to establish a TCP connection between the VSCode Extension and the Language Server?", "completion": "And now when we launch our extension, we don\u2019t\u00a0 notice anything different, however using netstat we can see that two different processes have\u00a0 established a TCP connection on that port. And using wireshark listening on the loopback\u00a0 localhost interface, filter for the port, we can even observe the communication between\u00a0 the vscode extension and the language server. So restarting vscode again to trigger the\u00a0 whole message flow, and then we can find it in wireshark and with follow TCP we\u00a0 can look at the complete TCP exchange."}
{"prompt": "What JSONRPC message is sent from the language server to the VSCode extension client?", "completion": "And so here you can actually see\u00a0 the JSONRPC protocol in action. So when in the server code we write\u00a0 connection.sendDiagnostics passing over the uppercase warnings, the library\u00a0 actually sends out this JSONRPC message. It seems to start with a content-length, followed\u00a0 by JSON data. And this contains a method name, textDocument/publishDiagnostics, followed by\u00a0 additional data. Like start and end line along the warning message, \u201cis all uppercase\u201d. As you can see, this is just json data, sent over TCP between the vscode extension client\u00a0 and server. And fun fact, if you look at the sending direction, the vscode extension client\u00a0 actually opened the TCP port, and the language server connected to it. So while this component\u00a0 is called a language server and this the client,"}
{"prompt": "What is the research question posed in the video?", "completion": "if you look at the TCP layer, this started\u00a0 a TCP server and this is actually the TCP client. I thought that\u2019s interesting if you\u00a0 watched my \u201cwhat is a server\u201d video. Anyway. My research question, my security\u00a0 research question is now. Can we send malicious JSON RPC messages from a\u00a0 browser? Send fake diagnostics to VSCode? On first sight, this does not seem so, because\u00a0 these are clearly not HTTP requests, right? Also when you use netstat to look for TCP\u00a0 ports, the port is actually not listening."}
{"prompt": "How can a malicious script be used to attack a VSCode Extension and Language Server?", "completion": "It\u2019s established. Meaning the server stopped\u00a0 listening after a client connected. This is actually a really good design, there\u00a0 is no reason to support multiple TCP clients in this case. Once the language server\u00a0 connected, you don\u2019t need to listen for more. But I did write a quick python script to test\u00a0 whether we can race this. So Basically the script tries to connect to the TCP server and\u00a0 send fake JSON RPC data. And when we relaunch the extension we maybe connect before\u00a0 the server can connect, and then YEAH,"}
{"prompt": "What does the JSON RPC implementation of the language server look for when parsing a message?", "completion": "we sent malicious data. But you have to get very\u00a0 lucky, and in practice you only have one chance, when VSCode is launched. So this really minimizes\u00a0 the threat surface a lot. Which is good. But still, theoretically you\u00a0 can definitely win the race and connect to the port before\u00a0 the real language server does so. So we can finally tackle the big\u00a0 question. Can we send malicious requests from a browser, from a malicious website? To answer this, I had to look into the jsonrpc implementation. Specifically the message parsing.\u00a0 I knew it was looking for the content-length,"}
{"prompt": "What kind of request is used by the VSCode Extension + Language Server?", "completion": "so this is a good starting point. Looking for this\u00a0 in the code it lead to here. A function onData, and it calls here headers.get(\u2018content-lnegth\u2019).\u00a0 looks like, even though no other headers exist here, in principle it supports other headers. And this is great news. Remember, this is how a typical POST request in a browser\u00a0 looks like. You have a bunch of headers, including content-length and the body. This part\u00a0 looks like JSON RPC. But does it accept this other garbage? I tested this with the python script and\u00a0 a notification test. Prepending some fake headers,"}
{"prompt": "How can an attacker send a valid JSONRPC request containing a request line that is not a header?", "completion": "and it works. Which means this whole\u00a0 part is valid JSON RPC. Incredible. But we have a problem. Because the\u00a0 first line of HTTP, the request line, is not a header. And if you would send this,\u00a0 this would fail. This is not valid JSONRPC. But do you have an idea? This requires\u00a0 creativity in hacking. Well.. How is a header defined? Probably key, colon, value.\u00a0 So\u2026 I mean\u2026 why not add a colon here. And this works. By sending a POST request to\u00a0 a path containing a colon, it turns this first line into what looks like a fake header. Key\u00a0 and value. And the jsonrpc code accepts this."}
{"prompt": "What is HTTP pipelining and why is it not used in browsers anymore?", "completion": "Does this mean we can actually attack\u00a0 vscode extensions from the browser? Well\u2026 long story short\u2026 no\u2026. Turns out before you can send a malicious JSONRPC\u00a0 message, you need to respond to the initialize message. Responding with your capabilities. Which\u00a0 means you need to send 2 JSON RPC messages after another. In the same TCP exchange. I actually\u00a0 first thought it would work. I thought the browser maybe uses HTTP pipelining under the hood. So two\u00a0 HTTP requests are appended and sent along the same TCP session. BUT turns out. HTTP Pipelining\u00a0 in browsers is not really a thing anymore."}
{"prompt": "What changes were made to Chrome that prevented the attack on VSCode language server extensions from the browser?", "completion": "\u201cThe option to enable pipelining\u00a0 has been removed from Chrome\u201d. So you can send the JSON RPC response,\u00a0 but you get no chance to send an actual malicious JSONRPC message. Which means in the end\u2026 This idea of attacking vscode language server\u00a0 extensions from the browser does not work. This is failed research.\u00a0 Sorry for wasting your time? Well, with this video I wanted to show you\u00a0 how research can look like. And many times research will be fruitless. This is the essence\u00a0 of the scientific process. And it\u2019s okay to fail."}
{"prompt": "What techniques did the researcher use to audit a VSCode Extension + Language Server?", "completion": "For me it\u2019s definitely not a waste of time. I\u00a0 think in the end I still learned a lot about VSCode extensions and along the way you\u00a0 probably discover other attack ideas as well that you can then test for. So to me\u00a0 this is a very important part of my job doing code reviews. and hopefully I was able\u00a0 to give you a glimpse into this kind of work. Also I did a lot of this research on stream\u00a0 recently. So if you are wondering how long this research actually took, well you can\u00a0 watch it in real-time on my second channel LiveUnderflow. it took us around 3-4h to do\u00a0 this. So If you are interested in more of the technical details or follow along,\u00a0 and try out some other ideas you have,"}
{"prompt": "What is the URL for the shop.liveoverflow.com where viewers can purchase the handwritten font?", "completion": "check it out. And tell me in case\u00a0 you find anything interesting. Speaking of work. Have you ever tried\u00a0 doing code review using a shitty font? I would not recommend it. But if you hate\u00a0 yourself and want to try it checkout my handwritten font. it definitely makes\u00a0 code reviews worse. So check it out on shop.liveoverflow.com. This is like\u00a0 digital merch. You can support this channel with a one-time purchase. And\u00a0 get something somewhat useful out of it. Besides that I also appreciate Patreons and\u00a0 YouTube Memberships. Thanks to everybody who bought the font or is a member.\u00a0 I really appreciate it. Thanks."}
{"prompt": "What are the two strategies for heap exploitation?", "completion": "It\u2019s time. In this video, we will discuss\u00a0 possible exploit strategies for sudo. In the past 8 episodes we have used fuzzing to rediscover\u00a0 the crash in sudoedit, we have analyzed the crash with address sanitizer and found the loop that\u00a0 causes a memory corruption, and then we looked at the root cause in detail. And now it\u2019s time\u00a0 to make a plan for exploitation. How can we turn this memory corruption in sudo, into an actual\u00a0 privilege escalation exploit? Let\u2019s head in. For heap exploitation there\u00a0 are basically two strategies."}
{"prompt": "What are some of the possible strategies for exploiting a heap buffer overflow?", "completion": "First you can exploit the heap implementation\u00a0 itself (so attacking the heap metadata), or you can attack the data stored in the heap.\u00a0 Let\u2019s think about exploiting heap metadata first. If you have watched my exploit education\u00a0 playlist, then you might remember the videos about heap exploitation. The heap is basically a\u00a0 data structure with metadata, you can imagine it as a linked list, and this metadata for example\u00a0 contains the size of the chunk and some flags if the previous chunk is in use or not. Blah blah.\u00a0 Details unimportant right now. And in those old videos we exploited a very old allocation\u00a0 algorithm called dlmalloc. Not gonna lie,"}
{"prompt": "What data structure does the default malloc algorithm use in addition to the \u201cregular\u201d heap?", "completion": "that heap exploitation of dlmalloc was mindbending\u00a0 and is complex, but it also didn\u2019t have any mitigations, thus it was relatively simple.\u00a0 Nowadays, the default malloc algorithm is a bit more advanced. We have for example fastbins, which\u00a0 are a different data structure additionally to the \u201cregular\u201d heap that you might know. And the malloc\u00a0 algorithms have also gotten a bit more hardened. But only in some ways. For example some techniques\u00a0 with fastbins are actually super simple. But generally, in order to exploit the heap\u00a0 implementation directly, you need a specific order of memory allocations and free operations. So in\u00a0 CTF challenges you often have some kind of menu where you can create or delete stuff, and thus\u00a0 you can perform the exact order of mallocs and frees you need. But in our sudo vulnerability,\u00a0 we have a single-shot overflow on the heap."}
{"prompt": "What strategies can be used to exploit a heap buffer overflow?", "completion": "We don\u2019t have any interaction with the program.\u00a0 And on top of that we have to deal with ASLR! And the typical way of dealing with ASLR,\u00a0 is to only deal with relative offsets, or first have a bug to leak addresses, thus defeat\u00a0 ASLR, and then you can go further. But again, we don\u2019t have any interaction with sudo. We\u00a0 can\u2019t perform multiple overflows. We can\u2019t really decide how we want to allocate or free\u00a0 chunks. With our one overflow, we need to win! That\u2019s why I believe, attacking the\u00a0 heap directly, the heap algorithm,"}
{"prompt": "What are some strategies for exploiting heap buffer overflows?", "completion": "the heap metadata, is unrealistic. I don\u2019t\u00a0 want to say it\u2019s impossible. People always find crazy creative ways. But I don\u2019t know\u00a0 any reasonable technique that we could try. So that\u2019s why I want to go for the\u00a0 second strategy. Attacking data on the heap. We have a heap overflow, and we\u00a0 can overwrite arbitrary data in other chunks. And we don\u2019t immediately crash when we overwrite\u00a0 this data. We crash because of the side-effects after we overwrote other data, we call this\u00a0 corrupting memory. So maybe there is some very interesting and useful data stored\u00a0 after our buffer, that we can overwrite."}
{"prompt": "What strategies can be used to exploit a heap buffer overflow?", "completion": "As an example, if we find a function\u00a0 pointer on the heap after our chunk, and it is then used afterwards, we could overwrite\u00a0 it. When the function pointer is then used, at least we would have control over the\u00a0 instruction pointer. ASLR would still be an issue, but we could maybe do partial overwrites.\u00a0 Whatever, future problems. Something like that would get us a huge step forward. But how can we find something like that? How hard is that? What do we need to know to make this work? Let\u2019s look at the heap again with heap chunks in\u00a0 gdb, here is our buffer. Now how could we know what is stored after it. What is the meaning\u00a0 of this data. How could we know if there is a function pointer? That\u2019s not easy. And maybe there\u00a0 is no function pointer here at all right now."}
{"prompt": "What is the consequence of the fact that our buffer is not located at the end of the heap?", "completion": "But that\u2019s not the only question we should\u00a0 investigate. Check out this. The allocation of our buffer happened right before we caused\u00a0 the overflow. So it\u2019s the last chunk that was allocated. BUT our buffer is not at the end of\u00a0 the heap. This means that during execution of this program, memory was allocated and freed many\u00a0 times. And there was a hole in the middle, where our new buffer could fit. This means depending\u00a0 on the size of our buffer, we could end up in different places. To rephrase this, depending\u00a0 on the length of the arguments, so the size we allocate, we might have different heap chunks\u00a0 after the buffer we can overflow. But that\u2019s not all we have to research. We have no clue what\u00a0 influences the sizes of the other heap chunks."}
{"prompt": "What methods can be used to control the location of a buffer when exploiting a heap buffer overflow?", "completion": "If you casually scroll through the allocated\u00a0 chunks, here is a chunk with the folder path. And here are what looks like environment variables.\u00a0 Which means, if you have a different set of environment variables, and probably many more\u00a0 things, these things influence what size of chunks are allocated on the heap. Thus the hole where our\u00a0 buffer will be allocated might be in a different place. The whole heap could be arranged completely\u00a0 differently if you control this other data. What does that mean? Does this make it easier or\u00a0 harder? On one hand this means we might be able to carefully control where we want to place\u00a0 our buffer and overwrite the right thing,"}
{"prompt": "What is heap feng shui and how can it be used to help with heap exploitation?", "completion": "on the other hand, it might not work on\u00a0 another system. Either way, we gotta try. And by the way, this careful planning\u00a0 and arrangement of heap chunks, is called heap feng shui. Feng shui? Feng Shui is\u00a0 a pseudo science where you \u201cuse energy forces to harmonize individuals with their\u00a0 surrounding environment\u201d. Or in other words, the pretty arrangement of objects in a room. And I\u00a0 think there is no better word that could describe this for heap exploitation - harmonize the heap\u00a0 chunks perfectly, so that our exploit can work?!"}
{"prompt": "What specific skills does LiveOverflow have to attempt the sudo exploit?", "completion": "It is kinda \u201cmagical\u201d. Anyway\u2026 I am not a pwn expert. To be honest I rarely solve\u00a0 pwnable CTF challenges. I know many wont believe me, because I made the binary exploitation series.\u00a0 I must be an expert and do that all the time, but that\u2019s not true. This sudo exploit feels a\u00a0 bit out of my league. I think I have the skills to attempt it. I have some ideas I want to try, but\u00a0 maybe I will fail. And that\u2019s totally fine for me, because I know by trying this I will learn a lot.\u00a0 Actually I have already learned sooooo many new things working through this project. And it\u00a0 is already a success for me. Remember other people have done the research and there are many\u00a0 good exploits already, but that\u2019s not the point,"}
{"prompt": "What did the advisory for the sudoedit vulnerability suggest?", "completion": "we use this sudoedit vulnerability to learn.\u00a0 And it\u2019s actually cool that others have written exploits already. Because if I get stuck, I can\u00a0 always look at the other exploits for inspiration. So either way, huge success for me. That being said, what should be our next steps? I have two ideas I want to combine. The first\u00a0 idea is to write a tool that helps us enumerate, or fuzz, different hep configurations by\u00a0 controlling buffer sizes. But to be honest, this idea is not actually from\u00a0 me. When sudoedit was released I obviously read over the advisory\u00a0 and I remember them saying this:"}
{"prompt": "What parameters did the advisory suggest fuzzing to exploit the Sudo vulnerability?", "completion": "\u201cTo implement this initial technique, we wrote\u00a0 a rudimentary brute-forcer that executes Sudo inside gdb, overflows the \"user_args\" buffer,\u00a0 and randomly selects the following parameters:\u201d So this is an example of where I read about an\u00a0 idea, it seemed obvious and I saved it in my head and facing this exploitation challenge, I recalled\u00a0 that you could try to bruteforce different parameters. Now the advisory specifically talks\u00a0 about which parameters they fuzz, because they have an actual exploit technique they are going\u00a0 for. But for my learning attempt, I don\u2019t want to do that. I don\u2019t know this technique, so I\u00a0 want to see if I can figure something out myself,"}
{"prompt": "What alternatives to alert(1) can be used when assessing the impact of an XSS vulnerability?", "completion": "alert(1) is the typical javascript payload to\u00a0 proof that you found a cross-site scripting security vulnerability. And in this video I want\u00a0 to explain why we USE alert() in the first place, but also why you should NOT use alert(1),\u00a0 and instead use alert(document.domain), alert(window.origin), or maybe even console.log(). THIS is very important to understand when you are\u00a0 hunting for XSS issues, especially on very modern web applications. It allows you to assess the\u00a0 IMPACT that your XSS has. And so it\u2019s crucial to determine if you actually found a critical\u00a0 vulnerability, or maybe an invalid issue."}
{"prompt": "What are the advantages of using alert() for XSS hunting?", "completion": "So first of all, why do we use alert(). Actually\u00a0 I don\u2019t know historically why, but it has two huge advantages. First of all, the obvious,\u00a0 it\u2019s very visual. If you randomly try to put XSS payloads in various input fields,\u00a0 and then continue to browse a website, you might just see an alert popup. Which means you\u00a0 don\u2019t need to carefully investigate each input. This is why XSS can be very simple to hunt for. At\u00a0 least the basic XSS cases. It\u2019s as simple as spray the input around, and pray that an alert pops."}
{"prompt": "What is an advantage of using alert() as opposed to other functions in a browser client-side javascript framework?", "completion": "But there is another advantage to alert. There are some browser client-side javascript frameworks\u00a0 with templating features allowing some limited form of javascript. And you can imagine that if\u00a0 you have input where you allow some restricted version of javascript, for example printing some\u00a0 scope variables or doing basic math, then if you can inject this, it doesn\u2019t matter for security.\u00a0 You can\u2019t do anything evil with that. However alert is a function, that is part of the\u00a0 window object. And the window object holds the most critical data an attacker might be\u00a0 interested in. For example the localStorage,"}
{"prompt": "What are the potential consequences of executing an alert() function in an XSS injection?", "completion": "which might contain session tokens. Or the\u00a0 famous window.document.cookies. This means, executing alert() can be an indication\u00a0 that your XSS finding has a high severity. But, as a small sidenote, nowadays we mostly have\u00a0 given up on these restricted javascript templates, as it was a cat-and-mouse game with fixes\u00a0 and bypasses, and we learned it\u2019s too hard. Checkout the history on angularJS sandboxing\u00a0 attempts if you are interested in that. I also have a small playlist about this. anyway. Even though it seems that alert(1) is a great indication for a XSS injection\u00a0 actually being critically exploitable,"}
{"prompt": "What function should be used instead of alert(1) to clearly demonstrate an XSS vulnerability?", "completion": "it\u2019s not a good metric anymore. Even if you see an\u00a0 alert() pop up it might not be a security issue. This might be a bit surprising to you. Why\u00a0 would an alert() popup not be a security issue? I hope I can explain that to you, and\u00a0 this is where alert(document.domain) or alert(window.origin) come into play. With those\u00a0 it\u2019s much clearer for you to understand if you found a critical XSS vulnerability. And\u00a0 so if you use that in a bug bounty report, then it\u2019s also easier for Google\u00a0 to review your finding as well."}
{"prompt": "What is the example of a vulnerable web service that is mentioned in the video?", "completion": "So let\u2019s investigate why this is the case. I\u2019m\u00a0 using Google\u2019s Blogger service as an example. Keep in mind the date of this video, bug bounty\u00a0 scope information might change over time. But right now all subdomains of blogger are in scope.\u00a0 And when you explore the features of blogger, you might come across a feature that allows you to\u00a0 put arbitrary HTML into your own blog. Which means you can inject a script tag with an alert(1).\u00a0 You don\u2019t know yet if or where it executes, so you continue to use the page. Maybe you write a\u00a0 blog post and then you hit the preview button, and suddenly, you see the famous XSS payload trigger."}
{"prompt": "What is the difference between using the alert(1) and alert(document.domain) payloads for cross-site scripting?", "completion": "\u201cLook! the domain is blogger.com and that site is in scope, right?! Give me my bounty please!\u201d Mhh\u2026 did we really just find an easy critical XSS bug on a Google\u2019s service?\u00a0 Well\u2026 actually no. we did not. To explain why, let\u2019s modify the alert(1)\u00a0 to the preferred alert(document.domain), and try it again. We save the new\u00a0 payload and preview the blog post again. The XSS triggers, but it shows the domain\u00a0 \u201cusersubdomain.blogspot.com\u201d. So why does the XSS trigger on this blogspot.com and\u00a0 not blogger.com? The reason is simple."}
{"prompt": "What is the difference between document.domain and window.origin when preventing XSS?", "completion": "Look into the chrome developer tools. This\u00a0 website blogger.com actually has an iframe, where it embeds the usersubdomain.blogspot.com\u00a0 site. And the XSS is located on this domain. NOT on blogger.com. So NO! We did not find a\u00a0 real XSS on the the in-scope url blogger.com. But hopefully you ask yourself now, why does google use two different domains\u00a0 to implement their blogger service. Well XSS is a reason... Google uses a range of sandbox domains to safely host user-generated content.\u00a0 Many of these sandboxes are specifically meant to isolate user-uploaded HTML and JavaScript and\u00a0 make sure that they can't access any user data."}
{"prompt": "What is the same-origin policy and how does it affect a XSS attack?", "completion": "So what exactly does that mean? The goal of\u00a0 an XSS attack, like with any hacking attack, is to access stuff you shouldn\u2019t have access\u00a0 to. For example the cookies of another user. But the cookies are on the blogger.com domain. So\u00a0 a XSS on usersubdomain.blogspot.com can not read those cookies. It\u2019s simply not possible thanks\u00a0 to the same-origin policy. These are considered two different websites. And that\u2019s why we want\u00a0 to look at the document.domain or window.origin in the alert, because it tells us, on which\u00a0 domain this XSS is actually executed. It tells you what data can this XSS access. And it can\u00a0 only access stuff on usersubdomain.blogspot.com."}
{"prompt": "What is a technique which can be used to check if an XSS attack is successful?", "completion": "Google wanted to allow users\u00a0 to customize their own blogs, and allow them to include arbitrary html\u00a0 and thus javascript. But they also want to make sure that this cannot be used\u00a0 to attack other blogger users via an XSS. Thus they put the user data on this\u00a0 other domain and embed it via an iframe. So when you see an alert pop-up, make sure to\u00a0 do it with document.domain or window.origin, so you can check if your XSS\u00a0 triggers on a critical domain, or on an unimportant sandbox domain. This decides\u00a0 if you found an actual security issue, or not."}
{"prompt": "What is the result of executing the JavaScript expression \"1+2\" in the context of the iframe sandbox?", "completion": "Now besides sandboxing via actual different\u00a0 domains (or origins), there exists also the concept of sandboxed iframes. I have introduced\u00a0 this before in a video I made \u201cGoogle Script Gadgets! Google Docs XSS Vulnerability\u00a0 Walkthrough\u201d. Here google implemented a so called json-p sandbox. They basically injected\u00a0 an iframe, with a user controlled XSS payload, but also set the sandbox attribute on the iframe.\u00a0 Let\u2019s do some experiment with iframe sandboxes. I have implemented here a very simple tool that\u00a0 allows users to execute javascript expressions via eval. You can write 1+2, and it prints\u00a0 the result 3. You can also see here a secret session token. And of course it\u2019s no problem to\u00a0 execute alert(document.session), to prove that you can steal the secret session token."}
{"prompt": "What alternative to alert(1) can be used in cross-site scripting to ensure the secret session token is not leaked?", "completion": "But look at this second example. It has essentially the same features, but this time the\u00a0 script being executed is inside of this iframe. Which also has a sandbox attribute. But ignore\u00a0 the implementation details, try to execute alert again. And you see it works! So... is this\u00a0 equally vulnerable as the previous example? No! Try to alert the secret session\u00a0 token. It won\u2019t work. And to see why, simply use the preferred alert(document.domain)\u00a0 or alert(window.origin). And you will see, that it\u2019s empty. This is a bit different from the\u00a0 sandbox subdomain blogger uses. But you can see that this sandboxed iframe ALSO has a different\u00a0 origin. Albeit a weird origin. It is isolated from the website it is embedded into. You cannot\u00a0 steal the secret session. So this achieves the same isolation as the blogspot subdomain did.\u00a0 This alert would not be a valid security issue."}
{"prompt": "What is the recommended approach for XSS payloads when hunting for XSS issues?", "completion": "That\u2019s why you always want to alert\u00a0 the document.domain or window.origin. But before we end this video, I want to give\u00a0 you another tip when hunting for XSS issues. First of all, if you find an injection\u00a0 into a sandboxed iframe, it\u2019s uncommon that the allow-modals option is enabled. For example here on sites.google.com, you can also create your own website and\u00a0 embed raw HTML code. Similar like on blogger. Thus you can also embed a XSS payload.\u00a0 But when you try it, nothing would happen. However, if you are an experienced bug hunter,\u00a0 you might always have a look at the devtools,"}
{"prompt": "How can we confirm the execution of a JavaScript code when dealing with a sandboxed iframe?", "completion": "and then you might notice that alert\u00a0 is blocked due to a sandboxed iframe. So in this case it would be\u00a0 better to use console.log, to actually see where or IF it is executing your\u00a0 XSS payload. But this means you need to pay very close attention to the console output of the dev\u00a0 tools. Maybe use filters to quickly identify them. As you can see, hunting for XSS can be a bit more\u00a0 cumbersome. Anyway, we did execute javascript and confirmed that by executing console.log!!! So did we find an actual XSS on sites.google.com?"}
{"prompt": "What method can be used to verify the execution context of a potential XSS vulnerability?", "completion": "That would be in scope, right? Do\u00a0 I get a bounty now? Well... again, we want to look at the actual execution context\u00a0 by looking at the document.domain output. And when we change our payload to that, and look at\u00a0 the page executing this payload again, you see that we are on another sandbox domain. This time\u00a0 googleusercontent.com. So NO! This apparent XSS is not really a vulnerability. It\u2019s by design\u00a0 put on another domain to make it harmless. So now that you know how to identify when a\u00a0 XSS is invalid, you might ask ask yourself:"}
{"prompt": "How can a malicious actor exploit a message to escape a JSONP sandboxed iframe and gain XSS on the main website?", "completion": "\u201cwhy should I even be interested in further\u00a0 investigating a XSS in a sandboxed iframe or on a sandbox domain, because it doesn\u2019t\u00a0 qualify for a bounty\u201d, right? Well! When you have for example\u00a0 an injection into a JSONP sandboxed iframe, the actual site usually\u00a0 communicates with the iframe via postMessages. And so there could be a way to exploit\u00a0 a message to get XSS on the actual site. Basically doing a sandbox escape. But in this case the vulnerability is NOT this first XSS,\u00a0 the vulnerability is the ESCAPE out of it."}
{"prompt": "What is a valid XSS issue that can be reported to Google VRP?", "completion": "So reporting the sandboxed XSS itself DOES\u00a0 NOT qualify for a bounty. But it means, if you can somehow CHAIN other bugs, escalate\u00a0 it, and execute javascript on the ACTUAL IN-SCOPE domain, then it would be a valid issue you can\u00a0 report. But you see, those are really advanced XSS issues, so make sure you really understood it,\u00a0 and don\u2019t just report invalid XSS findings. So to summarize: Most important for you to remember is\u00a0 that, Google intentionally allows XSS by design on sandboxed subdomains or sandboxed\u00a0 iframes. And a simple alert() is not proof enough that you actually found a serious XSS issue."}
{"prompt": "How can a bug bounty hunter determine if an XSS is a valid security vulnerability?", "completion": "You should always look at the actual domain the XSS is executed on, by using a payload like\u00a0 alert(document.domain) or alert(window.origin). Hopefully now you understand why sandboxed\u00a0 subdomains and sandboxed iframes are cool! At least for defense. But unfortunately\u00a0 that also means, an XSS on there is not actually a security vulnerability that\u00a0 a bug bounty program would pay for. I know it kinda sucks when you see an\u00a0 alert triggered, but it turns out to be on a sandbox domain. But if you find\u00a0 such an invalid XSS, be happy anyway."}
{"prompt": "How can one use a proxy to teleport in Minecraft?", "completion": "Hey. I cannot start this episode with my usual\u00a0 positive excitement. We are in a bedrock jail. These blocks cannot be broken. Somebody imprisoned\u00a0 us here. Oh my god. There he was. How do we get out of here? you know what! In the first episode\u00a0 we figured out that we can teleport through roofs by manipulating the game\u2019s position\u00a0 packets. So let\u2019s use our proxy to escape. Mmhh\u2026 But turns out it doesn\u2019t work.\u00a0 The server world I\u2019m playing on is an online server and with the proxy implementation\u00a0 from quarry we cannot login. Well that\u2019s a bummer."}
{"prompt": "What is the technique used to \"glitch through blocks\" mentioned in the video?", "completion": "But you know what. I have another idea.\u00a0 During our first day we came across a cave and there was an enderman. And I\u00a0 killed him and he dropped an ENDERPEARL. Enderpearls are very cool items, because you can\u00a0 throw them. And wherever the enderpearl lands, you teleport to it. It\u2019s like minecraft has a\u00a0 teleport hack built in. And due to my minecraft addiction I have watched too many minecraft\u00a0 youtube tutorials and there is actually a glitch in the game where when you just have the right\u00a0 angle when throwing an enderpearl, you can glitch through blocks. Let\u2019s try it. Yeah! It worked."}
{"prompt": "What type of blocks did the house have missing walls replaced with?", "completion": "Ohnononoo. Oh nooo\u2026 we are dead again. I guess there was a firewall deployed.  Oh man\u2026 this is bad. now, we don\u2019t\u00a0 have an enderpearl to escape anymore. But I don\u2019t give up. I have an idea. Let\u2019s\u00a0 see. I need a pickaxe and maybe a shove. And Luckily I just had enough iron to make another\u00a0 iron pickaxe. So I was thinking. The house had missing walls. And the walls are now bedrock.\u00a0 So when they added the bedrock, maybe they forgot the floor? Let\u2019s see. Oh, looks like they\u00a0 started to or tried to place some bedrock. But it clearly is not complete. looks like my theory\u00a0 is correct. We can just dig down and escape."}
{"prompt": "What is the metaphor used to describe modding and cheating in Minecraft?", "completion": "I don\u2019t know. I guess there is a sandbox and\u00a0 jailbreak metaphor here. The implementation just forgot one important attack surface, we\u00a0 found it, broke out. Also I wanted to go caving anyway. So let\u2019s look for some iron, coal and\u00a0 diamonds. My mood is already increasing again. After a bit of digging I hit a first cave. Nice! Looks like up there is another entrance for it. But let\u2019s go deeper. And there is a first creeper. Looks like I\u2019m rapping. No problem I\u2019m\u00a0 attacking. Nope nope nope nonono. Let\u2019s stop that."}
{"prompt": "What type of block is found at lower depths in Minecraft?", "completion": "I quickly found coal and started to mine as\u00a0 much as I can. And of course I also found iron. We are still high enough for those ores.\u00a0 As you probably know, in the new update coal only generates higher up, not deep down anymore. And of course we keep running into other mobs. This skeleton even had an enchanted bow.\u00a0 Unfortunately it didn\u2019t drop it for me. Keep mining. Coal. coal coal. Iron. Iron iron. And\u00a0 keep killing mobs. Eventually I reached a depth where the stone changed to deepslate. Which means\u00a0 we are slowly getting into diamond territory."}
{"prompt": "What resource can be used for enchanting tools in Minecraft?", "completion": "BUT UH! Found some gold. And copper. It\u2019s good\u00a0 to have some copper and gold, but it\u2019s not that important. Iron and of course diamonds are\u00a0 a lot more interesting for me right now. Though actually, redstone is also awesome.\u00a0 Redstone is basically the electricity of minecraft and we definitely need more of\u00a0 it to build automatic farms in the future. I also came across some lapis lazuli, which\u00a0 we need for enchanting our tools later. Uh down there is some lava and water. That\u00a0 should be a good depth to find diamonds."}
{"prompt": "What methods can be used to maximize the number of crystals that grow in an amethyst geode?", "completion": "OH OVER THERE! There were diamonds but\u00a0 first I have to take care of the zombie. My diamonds. Go away. This is going\u00a0 well. We found our first diamonds. I continued looking for more and eventually\u00a0 stumbled into this amethyst geode. Nice to bring some of that back up as well. And\u00a0 by the way, the blocks where the crystals grow, they look a bit different. We want to expose\u00a0 all sides of them, because then we increase the amound of crystals growing. Later we\u00a0 can come back and harvest even more. Cool."}
{"prompt": "What kind of hack can be used to teleport through roof blocks in Minecraft?", "completion": "You know, the whole time while I was looking\u00a0 for the ores I kept thinking about cheating, and I\u2019m really curious how you think\u00a0 about it. So let me share some thoughts and then comment blow what you think. So we looked at the protocol and figured out how to manipulate packets, and with that\u00a0 were able to teleport through roof blocks. I guess most people would say, \u201cyeah this was game\u00a0 hacking\u201d. But at the beginning of this episode, we used an in-game item enderpearl, threw it in\u00a0 a specific angle, and glitched through the roof."}
{"prompt": "What is the purpose of using Ender Pearls in Minecraft?", "completion": "Essentially teleporting through the roof as well. Even I called this a glitch, and not a hack. But is it also cheating? Using ender pearls\u00a0 for glitching through bedrock roofs, for example to go on top of the nether\u00a0 roof. It is generally seen as trick to use in the game and I don\u2019t get the feeling that\u00a0 the community sees that as really cheating. Though, still, I don\u2019t think that this behaviour\u00a0 of enderpearls is really intended - it can be seen as a coding mistake that gets exploited. And by the way, I love game glitches. Bending the rules of the system, finding behaviours the\u00a0 original developers did not intend and exploiting them. That\u2019s 100% the spirit of hacking.\u00a0 Glitch speedruns are my favorite category."}
{"prompt": "What potential benefits do graphics optimization mods like Optifine provide?", "completion": "But yeah, there is still something different\u00a0 between using technical solutions like manipulating game packets versus\u00a0 abusing something in-game. I guess most people have an intuitive feeling\u00a0 that one is worse than the other. And I\u2019m sure most people would say packet manipulation is\u00a0 definitely cheating. But with the ender pearl, I expect there to be a much bigger divide. I\u2019m sure\u00a0 some say it\u2019s cheating and others say it\u2019s not. And this depends on what your\u00a0 definition of cheating is. But now let\u2019s think about mods. Client mods. Right\u00a0 now I am playing with Optifine. It\u2019s a graphics optimization mod which makes everything look just\u00a0 a bit nicer. It can be used to get crazy graphics,"}
{"prompt": "What methods can be used to adjust the brightness in the game settings?", "completion": "but I just like to tweak it every so slightly, so\u00a0 that it still feels like original minecraft. BUT, it also enables light from torches held in my\u00a0 hand. Usually these caves around me would be very dark if I don\u2019t place down the torches.\u00a0 But this mod illuminates everything around me. It makes sense, I\u2019m holding the torch in my hand,\u00a0 maybe it fixes a shortcoming of the original game, but the original game doesn\u2019t have it so maybe\u00a0 this goes AGAINST the spirit of the game. And thus it is cheating? I think it totally\u00a0 depends on how strict your definition of cheating is. And of course you can extend this. What about\u00a0 adjusting the brightness in the game settings."}
{"prompt": "What is an example of a mod that helps with building in Minecraft?", "completion": "I guess that\u2019s still technically the game.\u00a0 But what about the brightness of your monitor. That\u2019s a technical outside solution? Though I guess seeing better in the dark is not that bad. But what about building. Minecraft\u00a0 is about building and the game has certain rules about it. So what about mods that help you build.\u00a0 There are mods where you can import a build as a wireframe and it shows you where you have to\u00a0 place the blocks. Or which blocks are wrongly placed. Clearly, it\u2019s modifying the gameplay and\u00a0 displaying information that usually is not there."}
{"prompt": "What technology do x-ray mods use to scan for diamonds?", "completion": "Many big minecraft builder youtubers use\u00a0 that for their builds. Is that cheating? Mh. What about x-ray mods that help you find\u00a0 diamonds easily. I think many regular players don\u2019t like x-ray mods and consider it\u00a0 cheating. But from a technology point of view, it works exactly the same. Building mods read the\u00a0 state of blocks around, to figure out which blocks are placed right or wrong, and xray mods need to\u00a0 know the blocks around, to find the diamond ores. And then the building mod manipulates the game\u00a0 rendering to display that information. Coloring the blocks for the build instructions. While\u00a0 x-ray mods hide stone to only show the diamonds."}
{"prompt": "What are some examples of cheating in Minecraft?", "completion": "I think this example shows you that cheating\u00a0 cannot be defined really with arguments about the technology used. You cannot say, because\u00a0 you manipulated packets or client code, it\u2019s cheating. This means, cheating is more about\u00a0 what you actually do with your manipulations, the actions in the game, that is what matters.\u00a0 And that\u2019s where people draw lines differently. When is it just a nice utility? When\u00a0 is it cheating? And when is it hacking? There is no answer where we all agree. And so there might be servers and gamemodes\u00a0 where blueprints of buildings is cheating."}
{"prompt": "What is the Minecraft console command for giving oneself 100 stacks of diamonds?", "completion": "But I\u2019m sure there are servers where x-ray is\u00a0 not really cheating because it\u2019s just allowed? So whether your actions are bad and\u00a0 malicious, and whether you cheated or not, depend a lot on the context and often\u00a0 is up for debate. What do you think? Also I wanted to mention that I\u00a0 love normal minecraft gameplay. Just because I can cheat, doesn\u2019t mean I\u00a0 want to. I mean I\u2019m the admin of this server, ANYTIME I could use the minecraft console\u00a0 to give myself 100 stacks of diamonds. But I don\u2019t do that, because I want to play the\u00a0 game in a certain way. And cheating in that way,"}
{"prompt": "What methods can be used to cheat in Minecraft?", "completion": "would ruin the game for me. So I\u00a0 intentionally choose to not do that. And I want to remind you of what I said in the\u00a0 first episode. Because I don\u2019t want to ruin my own game, you should respect how others want to play\u00a0 the game as well. Don\u2019t cheat where it negatively influences others. Don\u2019t be an asshole. And as you can see here, you can cheat in your own game to learn and make up your own\u00a0 adventure. Without bothering anybody else. Anyway. Speaking about cheating. We just learned\u00a0 that client mods can be used for cheating."}
{"prompt": "How can I get started with modding in Minecraft using Fabric?", "completion": "I guess we should look into them. Though I have no no clue how to write\u00a0 my own mods, so of course I just went to youtube and looked for some tutorials. I ended\u00a0 up setting up the fabric-example-mod in intellij. Just create a new project from version\u00a0 control with the github URL. and then we have to wait a bit for gradle to do the magic. Here in the folder structure you can find an exampleMod main, and an Example Mixin. This mixin is printing an example line. Let\u2019s test it. In the gradle menu under fabric\u00a0 we have runClient. This will compile our mod and then launch an offline client. You can ignore\u00a0 the authentication error, and go back to the actual log output. And eventually minecraft\u00a0 started, and we see our line is printed."}
{"prompt": "What techniques can be used to analyze existing or fixed vulnerabilities in IT security?", "completion": "So what do we do now. I thought \u201cwe have used a proxy to look at packets\u201d Let\u2019s try to write a mod\u00a0 that can print all the packets. Of course I\u2019m not familiar with writing minecraft mods AT ALL, so I\u00a0 have to find a place to copy and paste code from. And to be honest, maybe I looked at this\u00a0 shulker-dupe mod and stole some code from there. This is an interesting exploit and maybe we\u00a0 look at it closer another time. Or feel free to analyze it yourself. It\u2019s good practice. It\u2019s\u00a0 the same in normal IT security, it always is very educational to understand existing or even fixed\u00a0 vulnerabilities. This way you build a foundation,"}
{"prompt": "What is the ClientConnectionMixin and what is its purpose?", "completion": "so you later can create your own stuff. And\u00a0 this code is actually pretty clean and easy to understand. so for me to learn how minecraft\u00a0 hacking works to be able to write my own code, it was really helpful to look at this project.\u00a0 Anyway. In there I found a ClientConnectionMixin which seems to be related to sending packets? So\u00a0 I took that as a starting point. The red class names have to be imported. Intellij helps us\u00a0 with that. And I rip out the packet code here that I don\u2019t need. Instead I just want to print\u00a0 the name of the packet that is going to be sent."}
{"prompt": "What is the syntax for registering a mixin in the mixins.json file?", "completion": "To add this new mixin to the mod, we have to\u00a0 go into the mixins.json file and register it. And then we can execute run everything.\u00a0 It takes moment for mineracft to start. And then I join my local test server. And\u00a0 see in the console, we are printing a lot of positon and look packets. IT works! This is\u00a0 the same information we also had from our proxy. So when you saw the first episode where we\u00a0 looked at the minecraft traffic with a proxy, was that hacking? If yes, does that mean writing\u00a0 this basic fabric mod ois also hacking? Well?! The lines are blurry. That\u2019s my whole point."}
{"prompt": "What is the purpose of the 'Mixin' component in the Minecraft ClientConnection class?", "completion": "Anyway. When I was looking at this code the first\u00a0 time. I was wondering what does \u201cMixin\u201d mean. And how does it work that apparently this code is\u00a0 somehow injected into the ClientConnection class? Let\u2019s look at that class. So this\u00a0 is a class from the minecraft game. And Intellij decompiled it for us. Here is the\u00a0 send method. Mh. But How does this work? How does our send method get called or apparently\u00a0 \u201cinjeted\u201d into it? I don\u2019t understand? it seems to have to do with\u00a0 this mixin stuff, right?"}
{"prompt": "What is the difference between hooking and mixin in the context of game hacking?", "completion": "So let\u2019s just read the code, that\u2019s how we\u00a0 learn, right? With CTRL and clicking on a class we can go there. Inject. But It\u2019s just like this\u00a0 interface stuff. There is no actual code there. Maybe this At class is more useful? Mh\u2026 It does say here something about opcodes. But still no actual implementation. Maybe it is the mixin class here itself? Also no clue\u2026 mhmh. TELL ME, WHAT ARE YOU DOING? WHERE IS YOUR CODE? So from what I understand just by using it\u00a0 here. This mixin stuff, I would maybe have called hooking. I mean I\u2019m coming from another\u00a0 area of IT security or game hacking, and from my past experiences I would have called this\u00a0 hooking. Somehow we hook this send method. And so when I replace mixin in my head with\u00a0 hooking. This code looks less scary to me."}
{"prompt": "What is the purpose of Mixins in SpongePowered?", "completion": "I understand that mixin has some kind of meaning,\u00a0 why it\u2019s called mixin. But to me it\u2019s hooking. I don\u2019t care. I call it hooking. Anyway. I continue\u00a0 my quest trying to figure out how they do it. Mixins seem to be part of spongepowered, so I\u00a0 joined their discord, and asked questions. And shoutout to Silk and Mumfrey and some others on\u00a0 the discord, they answered lots of my questions and helped me understand it. And it turned\u00a0 out Mumfrey is the magician behind mixins. This person is crazy. And you will\u00a0 understand in just a moment why."}
{"prompt": "What is the purpose of using the Inject keyword in mixins?", "completion": "Anyway, they also pointed me\u00a0 at some resources to read. First of all there is the fabric mixin\u00a0 tutorial, which has some very basic examples what you can do with mixins. If you specify Inject into the method foo at the head of the method, your code will be\u00a0 injected and executed at the start of the method. If you specify tail, it will be\u00a0 executed at the end of the method. And there are lots of other features. Like\u00a0 injecting code at each return. And many more. So this fabric tutorial is very useful to\u00a0 understand what you can do with mixins."}
{"prompt": "What is the term Mumfrey, the developer of Mixins, uses to describe Mixins?", "completion": "But that doesn\u2019t explain the magic. And\u00a0 so they told me to read the mixin wiki. And I really recommend you to read it. It\u2019s\u00a0 very detailed and if you have some general java development experience, I think you will really\u00a0 enjoy it. The key takeaway from these articles is that mixins are basically class overlays. Mumfrey\u00a0 the developer of mixins also said that \u201coverlay\u201d would be a really good term for it. So what the\u00a0 mixin framework does, it takes our mixin class, the the normal existing class, and kinda merges\u00a0 them together, overlays them basically. And that\u2019s not just a good imagination. That\u2019s actually what\u00a0 it does. It merges the code of the original class,"}
{"prompt": "How does Mixin merge code into the Minecraft client?", "completion": "with the code of your overlay class, or\u00a0 mixin class. And so now we need to understand how that is done. How is the code merged. And\u00a0 this is not done on the source code level. Maybe you remember from last episode\u00a0 where we explored minecraft servers, they decompile the server code and apply patches.\u00a0 So actually modify the text source code. But here in the minecraft CLIENT, it\u2019s not like your text\u00a0 is copied into the real class and then compiled. Mixins don\u2019t decompile and recompile the client."}
{"prompt": "What is ASM and how is it used?", "completion": "The magic lies in the ow2 asm dependency. \u201cASM is an all purpose Java bytecode\u00a0 manipulation and analysis framework.\u201d I had a bit of trouble understanding how asm is\u00a0 used. But then I stumbled over this university lecture by Fred Ueberlauf. First of all. AMAZING\u00a0 NAME. Ueberlauf is the German translation for Overflow. And this class recording was very\u00a0 well done. Unfortunately it\u2019s in german, so for many of you not that great. But maybe you\u00a0 can work with the auto translation of YouTube, or just look at the code itself. Also I couldn\u2019t\u00a0 figure out which university this is. But shutout to this one, you seem to have great teachers."}
{"prompt": "What is ASM and how does it work with Mixins to manipulate Java bytecode?", "completion": "Anyway. In the video he was using asm, to basically craft a java class by hand. And of\u00a0 course not the text source code of a class, But the actual compiled bytecode, for the JVM. That\u2019s\u00a0 what ASM can do. You can write code like this and ASM will generate the bytecode for it. And then\u00a0 you can actually use a ClassLoader to load the class from the raw bytecode. And seeing this in a\u00a0 practical example from this lecture, suddenly it all makes sense to me how Mixins are implemented. Simply speaking they take the existing java bytecode of a minecraft class, and thanks to\u00a0 asm they can manipulate this bytecode and merge the code of your mixin into it.\u00a0 At the positions you defined."}
{"prompt": "How do you get Minecraft to use a modified class?", "completion": "THis was very oversimplified, there are\u00a0 lots of challenges to overcome in the actual implementation. For example minecraft\u00a0 classes are obfuscated. Remember that? So when you write your mixin, it also has to\u00a0 use the obfuscation mappings to find the actual obfuscated class to apply your code to. But it makes sense how it works, right? Beautiful design I think. But there is one last missing puzzle piece that I didn\u2019t understand. And that\u00a0 was, okay you have now your modified class. How do you get minecraft to use your modified\u00a0 class? Do you somehow overwrite it in memory?"}
{"prompt": "What is the purpose of the Fabric Loader?", "completion": "turns out it\u2019s not really overwritten.\u00a0 I guess this is my wrong imagination coming from the binary world where\u00a0 you patch code in the games memory. In the java world, that\u2019s not necessary. And so\u00a0 this is where fabric comes into play. The Fabric Loader. Basically they modify the classLoader. And by changing the classLoader of minecraft, they can basically force other classes\u00a0 to be loaded. The modified classes. Classes belonging to [..] Minecraft are\u00a0 loaded with a class loader that applies transformations to classes before they are loaded."}
{"prompt": "What advantages do mixins offer developers in relation to modding Minecraft?", "completion": "And now I feel like everything makes sense. Okay. I wanted to mention, not to confuse\u00a0 everybody, not every mod works through mixins. If I understand it correctly, mixins\u00a0 are a more recent development in the way how mods can be developed. So each minecraft\u00a0 modding framework has different ways to do it. And of course there is also historical baggage and\u00a0 backward compatibility and so forth. But to me, as an outsider, and I hope I don\u2019t step on\u00a0 anybody's toes here. I think mixins are a really beautiful design. I think the code makes total\u00a0 sense. I think it\u2019s very easy to think of just overlaying the classes. So i think for developers\u00a0 it makes sense. It is also very powerful you have a lot of freedom and control over where you\u00a0 want to inject your code into in minecraft."}
{"prompt": "How is the Gadget Inspector tool implemented?", "completion": "And of course the technical implementation\u00a0 through modifying the bytecode is awesome. It\u2019s just mind blowing. I\u00a0 don\u2019t know what else to say. Now maybe you are asking yourself again. What\u00a0 does this have to do with hacking? we just learned how to develop minecraft mods. Well.\u00a0 don\u2019t you think asm is useful for hacking? For example in 2018 Ian Haken, Senior\u00a0 Security Software Engineer at Netflix, presented his work about \u201cAutomated\u00a0 Discovery of Deserialization Gadget Chains\u201d. He developed this tool Gadget Inspector \u201cThis project inspects Java libraries and classpaths for gadget chains. Gadgets\u00a0 chains are used to construct exploits for deserialization vulnerabilities.\u201c And guess what. How is that implemented?"}
{"prompt": "What is the ASM library used for in Gadget Inspector?", "completion": "Gadget Inspector primarily utilizes the\u00a0 ASM library for Java bytecode inspection and builds upon its instruction visitor\u00a0 framework to perform symbolic execution. And to be honest, a lot about java deserialization\u00a0 vulnerabilities are still a bit of a mysterium to me. But thanks to minecraft mods, learning\u00a0 about how they are implemented, they lead me to a university class where they craft java\u00a0 classes with asm so helping me understand how ASM can be used. And now I can connect the dots\u00a0 to research about java deserialization exploits."}
{"prompt": "What materials were found by the speaker in the jungle?", "completion": "That\u2019s how I learn stuff. And\u00a0 that\u2019s why I love doing this. Alright\u2026 Our inventory is full. I really want\u00a0 to get back to bring what we found to safety. And not sure if you noticed. I got\u00a0 lost and didn\u2019t know how to get back. So I just decided to dig to the surface. We were actually really close. But it was night. And so there were still monster around. And holy crap. So this is how the bedrock prison looked like. Okay\u2026 looks evil. Let\u2019s\u00a0 check it out. Intersting design I would say. But HEY! Look over there. Those were materials\u00a0 we found for examole in the jungle but I thought we lost when when we died. Looks\u00a0 like whoever imprisoned us was actually nice,"}
{"prompt": "How can a player hit mobs and players from far away in Minecraft?", "completion": "I successfully executed the biggest\u00a0 heist in minecraft hacking history. And I\u2019m ready to tell the story.\u00a0 This vault contains no treasure. But it allowed me to steal,\u00a0 from those that stole from me. Before I can tell you about the vault and\u00a0 my clever heist, let me tell you about what made me do it. In a previous Minecraft:HACKED\u00a0 episode I told you about the reach hack. It\u2019s a hack to hit players and mobs from very far\u00a0 away. You can basically fly around and just snipe them. And I really wanted to figure out how\u00a0 it works. So I spent a lot of time thinking about it and eventually I figured it out. Kinda."}
{"prompt": "How is it possible to hit someone from a distance with a teleport hack?", "completion": "The idea is a magictrick. The look is a bit deceiving. You are not actually\u00a0 hitting somebody from far away, in reality you send lots of movements packets in\u00a0 a single tick. Basically you move to the target, hit it and move back. And the moves are basically\u00a0 small teleports. It\u2019s the maximum distance per movement packet you are allowed to move. However I also know there is an advanced version of that. Where somebody sat in a house and\u00a0 hit others at spawn. And that made no sense to me, because teleporting through walls does not work."}
{"prompt": "What method is used to enable teleportation through walls in the video?", "completion": "Here is a small test setup. One of my very first hacks in my own mod was the\u00a0 teleport one. It\u2019s super simple, simply move your player position forward\u00a0 a specific amount. And it works well. BUT you cannot teleport through a wall. So how is it\u00a0 possible that the person can hit somebody through all these walls? I stared at the code for a\u00a0 long time but I just couldn\u2019t figure it out. So I decided to put on my mask and build\u00a0 the vault. The vault is a huge bedrock cube with a small room inside. First you\u00a0 have to press a button on the outside,"}
{"prompt": "What steps does the teleport hack involve?", "completion": "and then quickly press the button on the inside.\u00a0 So if you can teleport inside this cube, then the arbitrary reach hack is trivial. teleport through\u00a0 any walls, hit somebody, teleport back out. And it didn\u2019t take long for the first\u00a0 people to arrive. Maybe if we watch them, we can figure out how they did it. They press the button, and moments later they are inside. Ohhhh.\u00a0 did you see what happened here? They did not teleport straight from\u00a0 the button to the inside. If we slow down the footage we can see that they first\u00a0 teleport up, and moments later teleport down!"}
{"prompt": "What is the difference between teleporting in a line and teleporting in the sky when attempting to reach a target?", "completion": "THIS makes so much sense. Because already in\u00a0 the very first episodes of this whole series we figured out that while teleporting through walls\u00a0 doesn't work, teleporting through roofs does work! Here is another test setup. We have increasingly\u00a0 thick ceilings and starting easy with short heights, we have no problem teleporting through\u00a0 those layers. So is this how it was done? Ithink I overcomplicated everything\u00a0 again. Instead of teleporting in a line you basically teleport up into the sky,\u00a0 go towards the target and teleport back down."}
{"prompt": "What is the maximum height at which a teleport up is possible?", "completion": "This way you seem to be able to go anywhere!\u00a0 is this how the arbitrary reach hack works> Well\u2026 turns out\u2026 not quite. When I try\u00a0 to vertically teleport into the vault, it doesn\u2019t work. I mean obviously a\u00a0 part of it is to teleport up and down, but it\u2019s not that simple. There must be more. Going back to our experiments, we can also see when this happens. Starting with a height\u00a0 of 11 we cannot teleport up anymore. And the vault has very thick walls. Around 50 blocks. So there must be another trick. Let\u2019s investigate."}
{"prompt": "What is the error message that the server produces when a player attempts to teleport through a thick ceiling?", "completion": "I have pulled and setup the the paper server\u00a0 code like I have used in the previous videos, so we can browse the minecraft server\u00a0 source and print information we need. So how do we do that? if you want to bypass anything, it\u2019s generally\u00a0 good to start with the condition that fails. In our case it\u2019s the teleport through thick\u00a0 ceilings. When we run our local test server and attempt it, we can see in the logs\u00a0 the error message. The server rejected our movement attempt because, we moved\u00a0 too quickly. With this message we can now find the interesting part in the code. Simply\u00a0 searching for it and here it is. No surprise,"}
{"prompt": "What conditions must be met to bypass the handleMovePlayer function in the ServerGamePacketListener?", "completion": "this is code in the ServerGamePacketListener, in\u00a0 the handleMovePlayer function. So this function is executed when a player sends a movement\u00a0 packet to the server. And we apparently got into this if case, which told us the movement\u00a0 was bad. And the player was teleported back. And this is a good start to find the\u00a0 bypass. Basically we now have to look at all the conditions that lead here, and try\u00a0 to figure out ways how we can avoid them. Basically how can we avoid these\u00a0 if-conditions to become true And if you watched the recent video about\u00a0 the arbitrary velocity exploit, talking about bowbomb, this code will look familiar."}
{"prompt": "How can a player exploit deltaMovement to teleport in Minecraft?", "completion": "d10 is the player deltaMovement, so the current player velocity. And d11 is how far the player\u00a0 moved between the last known position and the new position we sent in the movement packet. The velocity gets subtracted from that and then we go into this if-case, if the\u00a0 result is larger than this value here. Which means if we get large velocities, we\u00a0 can move longer distances. If we could get deltaMovement to a huge number, we could\u00a0 basically teleport anywhere in the world. So to breach the vault, do we need\u00a0 an arbitrary velocity exploit? Mhh\u2026 To be honest with you, I stared at this movement\u00a0 code for a long time already. I cannot figure it out. My brain just doesn\u2019t see it."}
{"prompt": "What type of file is created when the logging is stopped?", "completion": "So\u2026 what did I do\u2026 well\u2026 here is the real reason for the vault. I\u2019m the owner of this server, I can do whatever I want. People think this is anarchy? Well,\u00a0 it\u2019s dictatorship. I control and surveillance everything. So I implemented a packet logger. At the cube, when any of the FILTHY THIEVES hit the button on the outside, we start the logging. And now everytime when we receive a packet from this player, we add it to a list. And when they\u00a0 hit the button on the inside, I stop the logging. Which then creates a new packet log file where it\u00a0 just dumps all packets received in text format."}
{"prompt": "How does a position packet in Minecraft contain data?", "completion": "And here is how such a log looks like.\u00a0 The current timestamp in milliseconds, the packet name, for example a position packet,\u00a0 followed by all the values contained in the packet. in the case of a position packet it\u2019s the\u00a0 player position. But you can also see all sorts of other packets. Like looking around, using\u00a0 an item, or doing an arm animation. anything. Now before you get mad at me for spying on\u00a0 everyone, to be fair, I said I would do it. When you accessed the vault, I told you: \u201cif you\u00a0 try to steal my secrets, I will steal AND EXPOSE yours. I\u2019m serious, you have been warned\u201d."}
{"prompt": "How did the player successfully teleport from Y level 124 to Y level 178?", "completion": "So it\u2019s all your fault that this hack is now getting exposed. You couldn\u2019t resist and broke\u00a0 into my vault. And now I steal your hacks.. So let\u2019s have a look at a successful break\u00a0 in. Let\u2019s see if we can figure this out. Alright. We have some position packets. But their\u00a0 coordinates are not changing. Just fixed position at Y level 124\u2026 And then BOOM! Suddenly at y\u00a0 178. This player successfully teleported 54 blocks upwards?! HOW? So what exactly happened here? How\u00a0 can somebody just teleport upwards from 124 to 178? We tried that, it didn\u2019t work."}
{"prompt": "How does the teleport hack work in Minecraft?", "completion": "Pause the video and have a look at this. Can you notice what is special here? What is the trick? I give you a moment. Do you see it? Last chance. Look here at the timing. These position packets were received within one millisecond.\u00a0 ONE MILLISCOND. This is not a coincidence. When you stand still, minecraft sends like one\u00a0 position packet every second. So one packet every 1000 milliseconds. So sending multiple packets\u00a0 per ONE millisecond, This was done on purpose. I guess let\u2019s just try this. Here is my hack and I extend my teleport code now. I use this packethelper function I\u00a0 implemented for the reach hack, which allows me to send packets immediately. And so apparently\u00a0 we just have to create a loop to send a couple of position packets of the current player position,\u00a0 and then at the end we send the actual teleport packet to the target location. This is of course\u00a0 all done immediately, within a few milliseconds."}
{"prompt": "What is the value that is being printed out to the log along with the distance between the old and new position, and the player velocity?", "completion": "Let\u2019s go back into the game and see if it works. Let\u2019s checkout the ceiling test again. Set the teleport distance. And go. Damn! It worked! Why does this work? If you just try to change your position it fails.\u00a0 But if you first spam your current position a few times and then send the teleport one, it works. What?! Let\u2019s investigate, we have the local server setup. First of all we can see that we do not get the message about moving too quickly. So this is bypassing this movement check. HOW? Let\u2019s add some logging output to see what is\u00a0 happening here. I simply print d11, so the distance between old and new position, d10 which\u00a0 is the player velocity, and this other value here."}
{"prompt": "How is the teleport hack able to achieve a huge movement of the player in Minecraft?", "completion": "When we just stand around now, we don\u2019t move at\u00a0 all. So no difference in movement. But we have a small deltaMovement, that\u2019s the velocity,\u00a0 which makes sense, that\u2019s gravity pulling us down. Subtract those two, and clearly they are\u00a0 NOT over 100, so we don\u2019t go into this if-case. But now lets see what happens if we\u00a0 use the new teleport hack. Select a large distance. Like maybe 40, and teleport. And wow. This is not what I expected. Do\u00a0 you see that? First we are spamming the packet with the non-changing position.\u00a0 Which makes sense, we have no movement here. BUT this other value here is suddenly\u00a0 increasing. Rapidly. 400, 900, 1600 going to 6400 and then we send the packet moving far\u00a0 away, Now we have a HUGE movement. We moved a squared distance of 1600. That\u2019s 40 blocks.\u00a0 And obviously that IS larger than the usual 100,"}
{"prompt": "What is the maximum value between f2 and the calculation of a configured number times i times speed?", "completion": "so under normal circumstances this check would\u00a0 fail. But here somehow this value increased. And now 1600 is not larger than 8100. So the movement\u00a0 is ok. The teleport is allowed. We teleported. So why did this value suddenly increase? How did I never notice this? Let\u2019s see. So we select the maximum value between\u00a0 f2 and this term. And f2 looks constant. It\u2019s either 100 or 300, depending on if the player\u00a0 is falling or not. Alright. So this cannot be it. The other term is a calculation though.\u00a0 It\u2019s squaring, a configured number times i times speed. Obviously we cannot control the\u00a0 spigot config. But maybe we control i or speed."}
{"prompt": "What value is incremented with every movement packet?", "completion": "So let\u2019s add another debug\u00a0 log to print f2, i and speed. We go back into the game and when\u00a0 walking around you can see that f2 is constant 100, i is 1 and speed is also 1. Now let\u2019s do the teleport to see what happens. Pay attention to the log. We teleport and there it is. Look. The i value is incrementing with every movement packet. So here lies\u00a0 the secret. Somehow we control i. So what does i represent? Again error messages can help us. Here i is compared to the allowedPlayerTicks value\u00a0 and if it is too large, we get the error, that the player is sending too many movement packets."}
{"prompt": "How is the 'i' value calculated in the teleport hack?", "completion": "And just above it we can see how i is calculated. It\u2019s receivedMovementPacketCount\u00a0 minus knownMovePacketCount. And MovementPacketCount is incremented\u00a0 everytime when we receive a movement packet. And the other term is set in\u00a0 the tick method, where it is set to the receivedMovementPacketCount. So it seems that i represents the amount of movementPackets received, during the current tick. And this number is then used in this calculation, which causes the term to become large enough to\u00a0 allow for larger distance teleportations. Huh!..."}
{"prompt": "What variable did the speaker overlook which led to his failure to find the teleport hack?", "completion": "I really should have looked at this other term.\u00a0 We looked together at the term here. D10 and d11 and thought about exploiting it. But of course\u00a0 there are more variables part of this equation, and if we had explored the other term, we\u00a0 could have maybe figured it out ourselves. So this is a super important moment for reflection\u00a0 to me. I really like to experience failure like this. I failed to find this teleport hack, even\u00a0 though I looked at this code for many hours. So why did I miss it? This self-reflection, and\u00a0 acceptance of failure, is really important for me. First of all it makes me not complacent\u00a0 with my abilities, always trying to get better,"}
{"prompt": "What is the term that measures the movements of players in Minecraft?", "completion": "and second I can analyse what I did\u00a0 wrong and do it better next time. I think it\u2019s clear that I don\u2019t lack the coding\u00a0 skills. I can read this java code and understand it. So the problem is not a technical skill\u00a0 issue. But then what was it? Well, it\u2019s a bit hard to know for sure what I did wrong, it was a\u00a0 while ago, but clearly there is no objective good reason to not look at this term more in depth.\u00a0 So I think what happened here is that I was lazy. I guess this term just looked annoyingly\u00a0 long. Its counting the movement packets,"}
{"prompt": "What is the most important code line in all of Minecraft?", "completion": "I probably ignored it because I assumed\u00a0 this code would be fine. Whatever it was, I failed to recognize the importance of this line\u00a0 and didn\u2019t give it the attention it deserved. This line of code, this check, is probably one of the\u00a0 MOST IMPORTANT code lines in all of minecraft. It is part of the code that\u00a0 checks whether to allow a player to teleport large distances, or not. Yeah I failed. But that\u2019s fine. Because on the Next problem I tackle I will\u00a0 have more experience and skill! Oh man\u2026 what a journey this whole\u00a0 minecraft series was. To be honest with you, I\u2019m not addicted anymore.Maybe\u00a0 there will be another episode or so,"}
{"prompt": "How did the original base change?", "completion": "but no promises. I want to work on some\u00a0 other stuff again. But I wanted to say, I loved doing this minecraft stuff, and I\u2019m sure\u00a0 once in a while I will check in and see what\u2019s going on. The server will stay for now of course,\u00a0 so no worries. But don\u2019t expect new features. Now speaking of the server, I haven\u2019t really\u00a0 explored spawn in a while. So much has changed here. I remember it looking quite griefed, but\u00a0 it kinda looks cleaned up! Somebody really put in some work here damn. But what is even\u00a0 more funny is my original base. This area is just like. Deleted. It\u2019s like the chunks\u00a0 got reset. Only the herobrine bedrock house remains. Do you remember when I stood here\u00a0 for one episode. Damn so much happened."}
{"prompt": "What type of digital merch is available?", "completion": "Anyway. My deepest thanks to everybody\u00a0 who engaged and was involved in this series. It was an honor to play\u00a0 and hack with you all. It made me very happy. Don\u2019t worry though,\u00a0 this is not quite the end of it, but I just wanted to give you all a heads-up.\u00a0 This project will slowly fade out. Much love. Oh and by the way, I have merch\u00a0 now! DIGITAL MERCH. And it\u2019s even more useful than NFTs. It\u2019s a shitty font\u00a0 based on my handwriting. You can purchase it and create a basic resource pack to add it\u00a0 into your game. It\u2019s super ugly looking but,"}
{"prompt": "What is an optimized way to implement a /vault command in Minecraft?", "completion": "ey\u2026 it\u2019s an elite hacker font. What more do you\u00a0 want? Anyway, checkout shop.liveoverflow.com. And now the community showcase. First is\u00a0 jorian, just showing off their solution of the vault. They have a /vault command.\u00a0 Execute it. Boom they got in. solved. And then we have enderkill solving it. Look here\u00a0 I\u2019m standing next to him. And look at the chat. Just solved it. I didn\u2019t even see him flinch. The\u00a0 implementation is optimized to be done within a single tick. so no other user gets notified\u00a0 of the position change. Looks pretty crazy."}
{"prompt": "How can players exploit the teleport hack to quickly complete the Club Mate Challenge in Minecraft?", "completion": "Like in an anime, moving so fast nobody sees them. Also here at the Club Mate challenge. Solving it SO FAST they are just standing here spewing out\u00a0 mate bottles. It\u2019s crazy. within a tick or so, teleport to the chest, open it, stand here\u00a0 and drop the item, and do it again. Looks like somebody at CCC having had too many\u00a0 Tschunks and is now leaning over a sink. And lastly we have shrecknt with enderkill\u00a0 showing off an unintended solution to the vault challenge. So they will first show that they do\u00a0 it, and then share a few words on how it worked."}
{"prompt": "What command can be used to download the program from the GitHub repository?", "completion": "I have written a small C program. It\u2019s supposed to be a simple license check. So you can execute it and you can supply a key as argument and it will be checked. Our goal is to crack this program so we don\u2019t have to use a valid license key. I have made this program available through a github repository. You can download it from github.com/liveoverflow/liveoverflow_youtube or you can install \u2018git\u2019 with \u2018sudo apt-get install git\u2019 and get the whole repository with \u2018git clone\u2019 and the address you can see on github."}
{"prompt": "What is the program used to look at the binary assembler code?", "completion": "We will probably talk more about what git is later. For now it\u2019s enough to know, that this is a way how developers can program together on a project. And I use it to share some stuff. To have a look at the binary assembler code, we can use a program called gdb. The GNU Debugger. So type \u2018gdb\u2019 and the path to the binary. So every C program has a main function, remember? So let\u2019s type in \u2018disassemble main\u2019 which will display all assembler instructions from the main function. But urgh, do you see how ugly that looks?"}
{"prompt": "What command should be used to switch the disassembly syntax in GDB?", "completion": "That\u2019s the horrible at&t syntax. So type in \u2018set disassembly-flavor intel\u2019. Remember that you can use tab completion here as well. Now \u2018disassemble main\u2019 again, and now it\u2019s much more readable. Ok. So. It looks complicated. But you can ignore most of it. First of all get a high-level view of it. It doesn\u2019t make sense to start going through this instruction by instruction. This main function obviously calls other functions. So just draw a mental picture of the rough control flow. I will actually print out this assembler code and use a pen."}
{"prompt": "What function does the strcmp command perform?", "completion": "That\u2019s how I did it in the beginning and still do it when I encounter more complex code. And remember to just ignore most of the stuff, concentrate on the actual flow. So at the start it arrives at a compare with the number 2. And afterwards a \u2018jump not equal\u2019. So something is checked if it is 2. If that is the case, we proceed to a \u2018printf\u2019. Which we know is a function to display text. Then comes a \u2018strcmp\u2019, if you don\u2019t know that function, read the man page of it. \u2018man 3 strcmp\u2019 - so this compares two strings and returns 0 if both strings were the same."}
{"prompt": "What is the address of the \"jump not equal\" call?", "completion": "After that call we see another \u2018jump not equal\u2019 so if the zero flag is not set, there will be a \u2018puts\u2019 call. Use the man page to figure out what it does, but it just prints text like printf. So if the original compare with the number 2 was not true, then it would jump to this address 0x400623, which is at offset main+102. So in that case it prints some other text with \u2018puts\u2019 and exits. I always add the addresses, or at least part of the address, from important locations, so I know where I am. This will help you later when we step through the program."}
{"prompt": "What command can be used to start the program and hit the breakpoint at the start of main?", "completion": "Now we have one branch missing. If this compare was incorrect, this branch would jump to offset main+90. Which also just prints text. Some jumps are still missing, but you can add them to get a nice control-flow graph. Now let\u2019s actually execute this and step through it. You can then draw which path through the graph you have taken on your paper. To do do this we first set a breakpoint at the start of main with \u2018break *main\u2019. Breakpoint is set, now use \u2018run\u2019 to start the program. Starting program and we hit the breakpoint 1 at this address."}
{"prompt": "What command can be used to step through a main function without following function calls?", "completion": "A breakpoint is a point where execution stops. Now look at the registers with \u2018info registers\u2019. Here you can see that RIP, the instruction pointer, points to the first address in main. Now use \u2018si\u2019 to step one instruction. Now we are at a new address in main. \u2018info registers\u2019 and you see the changed instruction pointer. So now just step through it all and follow the addresses in your control graph. But use \u2018ni\u2019 instead of \u2018si\u2019, because \u2018si\u2019 would step into function calls. But we only want to step through this main function and not follow stuff like \u2018puts\u2019."}
{"prompt": "What is the location of the jump instruction?", "completion": "Ok did you notice when we jumped? The jump was at 5d0, and then the next instruction was at 623. So we followed the jump, which means whatever was compared to 2, was not 2. And then the program printed the Usage information after 628, which was the last \u2018puts\u2019 call. So we can write down, that this \u2018puts\u2019 prints the \u2018Usage\u2019 information. Now it\u2019s pretty clear, that we didn\u2019t pass a key to this program. Which means the check was looking at the arguments if we supplied a license key. So let\u2019s run the program again, but this time with a random license key."}
{"prompt": "What branch was expected to be jumped when running the program again at line 5d0?", "completion": "Yes we want to start the program again. Now do the same. \u2018ni\u2019, \u2018ni\u2019. Now we are at 5d0 again, will we jump this time? No! cool! So the next branch we expect is at 609. Let\u2019s \u2018ni\u2019 and see what happens. AH! Another print text. So that \u2018printf\u2019 is the info that a license key will be checked. \u2018ni\u2019. Now comes the branch. Ok we arrived at 609, let\u2019s see where we are afterwards. At 617. So we did jump, which means that the strcmp failed. And when we continue with \u2018ni\u2019 we see that it\u2019s wrong. Ok. Let\u2019s set a breakpoint just before the last compare and run the program again."}
{"prompt": "What is the value of the EAX register before it is set to 0?", "completion": "Remember that you can easily copy&paste values in the terminal by simply marking something and pressing your mousewheel. Now \u2018run\u2019 again. Breakpoint 1. Now \u2018continue\u2019. This will run the program normally again, until we hit the next breakpoint. Now stopped before we execute the \u2018test eax, eax\u2019. EAX just refers to the first 32bit of the 64bit RAX register. So it\u2019s value is hex 0xE. Let\u2019s set this to 0, which would indicate that the \u2018strcmp\u2019 was correct and returned a 0. \u2018set $eax=0\u2019. \u2018info registers\u2019 and you can see that it\u2019s now 0."}
{"prompt": "What website can be used to find crackme challenges?", "completion": "Now use \u2018ni\u2019 again to step and follow your control path. \u2018Access Granted!\u2019 YAY! We circumvented the license check! It think that\u2019s pretty cool! And you can always write your own little C program trying to make it more secure, and then crack it yourself again. You will notice that it\u2019s impossible to make a program uncrackable. Those kind of challenges are called \u2018crackme\u2019. People create small programs that have to be cracked. Or more often you have to create a valid keygen. If you think something like this is fun, checkout http://crackmes.de/."}
{"prompt": "How can we use different tools to explore a licence check binary?", "completion": "Creating control graphs like we just did is pretty useful. That\u2019s why there are some programs that do that for us. Here are three different examples of this specific control graph. First is HopperApp, second is IDAPro and the last one is from radare2. See you hopefully next time when we use some different tools to explore this licence check binary a bit more. Let\u2019s figure out together the basic concepts of a CPU. Computers have different memory to store stuff - so first we need something to store the machine code in."}
{"prompt": "What is the purpose of the Instruction Pointer?", "completion": "Let\u2019s take a spreadsheet and imagine that this is memory. You can store values in it and each memory cell has an address, which is the number on the left. And I will use the 2nd column to write some comments in there. As you can see there are some hexadecimal numbers stored in this memory. And at first it looks very random, but that is our machine code and soon you will understand this. So the first thing the CPU needs to have is something to keep track where in memory the CPU currently is. Which means we shoud add a little storage for our CPU and call it the \u201cInstruction Pointer\u201d."}
{"prompt": "What does the CPU do when it sees the numbers 48, AA, 14?", "completion": "This little storage area will contain the address of memory the CPU is looking at the moment. So obviously our program starts from the top, so the address will be 1. Now let\u2019s start the CPU, it looks at address 1 and reads 48, AA, 14. But what do those numbers mean? The CPU knows that 48 means it has to MOVE data around. The AA means the destination of that move. and the 14 is the source. So in address 14 we can see the number 42. And the destination is another small storage unit inside the CPU."}
{"prompt": "What is the purpose of using brackets around the address in the instruction to move the content of address 15 into the small storage BB?", "completion": "So the CPU will move the 42 into it\u2019s small storage area called AA. So this instruction is done, and the CPU increases the Instruction pointer by one. And we start over. The CPU reads the current value at the address of it\u2019s instruction pointer. So it reads 48 again which means move, and this time it\u2019s moving the content of address 15 into the small storage BB. Notice how I use brackets around the 15. This indicates that 15 is an address, and we actually reference the content of 15, which is 66."}
{"prompt": "What is the instruction used to compare two numbers in the video?", "completion": "And not the number 15 itself. Instruction done, increase the Instruction pointer. The next address contains 83, AA and BB. The CPU knows that 83 means COMPARE. And it compares the values in AA and BB. Now it has to somehow remember the result of this compare. So let\u2019s add another small storage that stores this result. We call it Zero Flag. You know what an intelligent way is to compare two numbers? If you subtract them from each other and their result is 0, they were the same. If the result is not zero, they were different."}
{"prompt": "What is the instruction at address 4?", "completion": "So this is what the CPU does. 66-42 is 24, so that\u2019s not 0. So we set the zero flag to false. Instruction done, next one is at address 4. The CPU reads a 75 and 07. 75 Stands for JUMP If not equal. And 07 is the address where to jump to. So the CPU checks the state of the Zero Flag. And The Zero flag is set to FALSE, so the previous compare was not equal. Which means it jumps to the destination 07. A jump is easy. The CPU just sets its Instruction Pointer to 07. Ok so the next instruction is at address 7."}
{"prompt": "What is the ASCII value for the characters 'N' and 'O'?", "completion": "And it reads E8 and 17. E8 In this case stands for print a text. And the text can be found at address 17. But 17 doesn\u2019t contain text? Well, for a computer everything is numbers. Like those instructions the CPU executes, they are just numbers. So text is made out of numbers too. Remember how I brushed over ASCII values in a previous video? Now it\u2019s the time to pull up the ascii man page again. So type \u2018man ascii\u2019 In the terminal. Now try to find hex 4E and 4F. Haa.. ok. So they stand for \u2018N\u2019 and \u2018O\u2019."}
{"prompt": "What is the purpose of the code that is being examined in the video?", "completion": "Which means the computer will print \u2018NO\u2019. So looks like this code simply compares two numbers. I will not go over the case when those two numbers are the same, but you should try it yourself. That\u2019s crazy, huh? CPU simply reads the memory sequentially and does whatever it reads. And programmers can build crazy complex stuff with that. Now let me change the text a little bit so it reflects more the reality of how we write assembler. Basically just abbreviation of it. Also don\u2019t get confused with the order of parameters."}
{"prompt": "What type of CPU did the creator use to build their PC?", "completion": "so quite a while ago I started streaming on Twitch I was building this 8-bit computer and then I had to interrupt it I tell you a little bit about what is going on right now in my life throughout the process of this video but during that time I started ordering parts for a dedicated PC so I can finally like separate the live overflow video production and streaming stuff from all my other kind of work I think that would streamline a lot of my work better and yeah separate things that's always helpful I have never built a PC myself ok so here we are I want to be computer expert builds his first PC graphics card mouse and motherboards um and we are e SSDs let's download some RAM the power supply the keyboard and the case holy crap motherboards look fancy nowadays look at that my last PC is probably like eight or ten years old so like this looks so fancy to me I guess I put in the CPU and the cooler first the hidden link a YouTube video this is like the future I like it so the past few months I've been working on my master thesis I'm sure I will make a couple of videos about this in the future when I'm done it's going well but I'm really in the time pressure now slowly so today is a day where I want to relax a little bit and so I decided to build this computer now because the parts have been laying around here for a while let me open that YouTube video because I have no clue what I'm doing [Music]"}
{"prompt": "What is the name of the thesis project that the speaker handed in recently?", "completion": "okay so I know this is weird but let me explain so over the past few months I haven't really uploaded consistently and the main reason for that I already explained in a in the last update video that I might have to refocus and I had to finally finish my master thesis which I just handed in last week and with that big chapter in my life closed wait there we go this is my master thesis yeah I handed in in last week so a big chapter closed for me fritto is the biggest tick collector this heavy so maybe you are wondering will there be changes to the YouTube channel yeah it's a Minecraft channel now [Music]"}
{"prompt": "What experience do security researchers need to have in order to be able to hack an iPhone or browser?", "completion": "\u201cEvery Computer Can Be Hacked!\u201d Is an expression you probably have heard before. But is it true? Should we be scared about that? Or is it false and just fear mongering? In this video I want to explore the 0day industry and state-of-the-art exploitation. For that I talked to several researchers who I believe could actually do it. So I hope you are as excited as I am, to hear what they have to say. As you can see on my channel, I have quite a bit of experience in basically every area of hacking. But I feel VERY VERY far away from being able to hack something like an iPhone or a Browser."}
{"prompt": "Can browser exploitation be used to gain access to devices?", "completion": "So I do believe I have a good intuition about this topic, but I think it\u2019s better to hear from people who actually have done this kind of vulnerability research. So I asked several people I know on twitter, but unfortunately many couldn\u2019t say anything, because they actively work in this area and their partners didn\u2019t like that. But I did get a few responses. Steve or Mr. me, Pwn2Own winner - Hey LiveOverflow, steve seely here. Aka mr.me S1guza, very well known in the iOS jailbreak scene. Itszn, or amy, from ret2, she is very experienced in browser exploitation."}
{"prompt": "What types of exploits do security researchers Amy Burnett and Steven specialize in?", "completion": "Hey my name is amy burnett. I\u2019m the lead on the browser exploitation training at ret2systems. I do research specifically into browser exploits. Xerub. A very experienced researcher, also into iOS. And there was just recently a phrack prophile about him. If you want to check his credentials, read that. And steven, cts. He also did iOS Hey I\u2019m Steven and I\u2019m a security researcher. In the past I worked at an iOS exploit shop. Now I\u2019d be happy to provide some of my opinions or general insights on the so called \u201cexploit industry\u201d Oh and btw you should checkout his YouTube channel."}
{"prompt": "What is the \"law of security\" mentioned in the video transcript?", "completion": "Amazing content. So all of them are extremely skilled and have participated in top competitions such as Pwn2Own, worked in companies developing exploits or just did it for fun. I think their thoughts about this topic are more relevant than mine. And I guess more convincing than what I would have to say too. But before we head into some of their insights. I want to establish a few base facts. First, there is this \u201claw of security\u201d which says, that the more complexity a system has, the more security relevant bugs it contains."}
{"prompt": "What techniques do security researchers use to identify vulnerabilities in browsers and other devices?", "completion": "And when you look at a modern browsers or a whole device like an iPhone or android. They include an incredible amount of very complex software. So based on this chart, there will be bugs. BUT they also invest a lot into fixing those bugs. So they bring that curve down. Though the real issue is, there are always new features implemented, so complexity keeps growing, thus new bugs will also be introduced. As amy says about this: Browsers are definitely one of the scariest remote attack vectors to me."}
{"prompt": "What type of vulnerabilities does Zerodium purchase and resell?", "completion": "But that might be partly because of the amount of research I have done in them. The attack surface is really pretty scary. And probably something that most people don\u2019t consider when they go and click on a link. Now let\u2019s have a look at Zerodium for a moment. They are a company that buys certain vulnerabilities (and re-sell them for even more money). You all know the fake hollywood style hacking, where somebody just pushes a button and remotely hacks into a computer or phone. Well, that\u2019s kinda true for these kind of vulnerabilities, but we talk about those kind of prices as well."}
{"prompt": "What is the typical price paid to security researchers for a zero-click exploit on an iOS or Android device with persistence?", "completion": "And keep in mind, for the actual end-customer it will be even more expensive. This is only what is paid at the end of the chain to the researcher. So for a Windows remote zero click exploit they pay 1 million dollars. For a Chrome exploit + escalating to become admin, where the victim just has to visit a malicious website, they pay 500.000$. But it gets crazy with mobile payments, because an iOS or Android zero click exploit, with persistence, so with installing a trojan. Just by maybe knowing your phone number, BOOM,"}
{"prompt": "What is the range of dollar amounts that security researchers can receive for selling exploits?", "completion": "you got hacked. They pay 2 to 2.5 million dollars for those vulnerabilities But if you don\u2019t need persistence, because who reboots their phone anyway, and you can just hack it again when it got rebooted, they pay around 1 to 1.5 million dollars. Anyway, what\u2019s important to keep in mind. these exploits listed here, are not theoretical. You can absolutely assume, that all of those vulnerabilities exist and they are getting sold and used. But I didn\u2019t show this list to impress you with the dollar amounts."}
{"prompt": "What security vulnerabilities were found in the previous version of iOS?", "completion": "The reason why I show this is because, when I look at my phone, this list reminds me, that I know FOR A FACT, that there are these kinds of vulnerabilities in there. If you are sceptical about that. And you don\u2019t trust my assumptions on this Zerodium list, just go to any phone vendor. They will confirm this fact. just think about the previous phone version, and look at the security advisories from the vendors. Here for example iOS. And just last version: There was an issue in IOMobileFrameBuffer."}
{"prompt": "What competitions exist to demonstrate and exploit vulnerabilities in devices?", "completion": "\u201cAn application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited.\u201d In real life. And oh. I just noticed I haven\u2019t updated my phone yet\u2026.. Let\u2019s do that right now. You should too! And I have more proof that there are vulnerabilities in your device right now. There are competitions such as Pwn2Own or the chinese Tianfu Cup. Where at the day of the competition there will be a completely new and fully patched device."}
{"prompt": "What 0day vulnerabilities were mentioned in the 2021 report?", "completion": "And here are just the results of 2021: Apple Safari, Microsoft Exchange, Ubuntu, Chrome, Zoom. And more. Or here Tianfu Cup, iOS15, Docker, qemu, Adobe PDF. Basically everything gets owned and that every year. Anyway\u2026 it\u2019s absolutely certain that there are people who have access to these kind of unknown exploits. Or 0days. AND there are of course also the people who have the skills and experience to find them. No doubts about that\u2026 So now that we have established that. let\u2019s hear some thoughts from the researchers themselves."}
{"prompt": "How can a team help when it comes to building out different parts of an exploit chain?", "completion": "I hope that gives you some idea of how \u201cspecial\u201d these vulnerabilities are. And maybe a good start is to ask about, is it possible to find and exploit these vulnerabilities alone? I would say I can if I put enough energy into it. In the most humblest way I would say \u201cI probably could\u201d, if I really focus on it. I initially started doing the research mostly on my own. But after starting ret2, I found that a team, even a small team, can be a huge help when it comes to building out different parts of the exploit chain in parallel, or building a fuzzing system, or a system to test your exploit against different versions of your target."}
{"prompt": "What debugging tools are necessary for developing exploits?", "completion": "Eitherway the research is definitely doable by individuals. Although it may take more time or a good amount of luck. As you just heard for developing exploits it makes sense to have a team. There is a huge part that is similar to software development. You need debug or testing tools. And doing that alone is just an insane amount of work. Maybe it\u2019s like a developer who says \u201cyeah I could develop facebook on my own\u201d. In theory that is true, every web developer could do that, but in reality it\u2019s WAYYY too much work."}
{"prompt": "What techniques are used to make full-chain exploits more achievable?", "completion": "Dividing the problem and doing stuff in parallel just makes it much more realistic. Most of the exploits nowadays are part of a full-chain. A full-chain is basically a series of exploits that are necessary to ensure a full compromised of the system. 10 years ago a full chain might have been possible by a single guy. So maybe 10 years ago a full-chain might be doable by a single researcher. But nowadays that requires an immense amount of skill and dedication to make a full-chain by yourself. And these targets get harder every year."}
{"prompt": "How does the 0day industry operate in teams?", "completion": "Nowadays researchers tend to specialize a lot as well. That's why most of the 0day industry operates in teams. So for example you might focus on like \u201coh I do the linux kernel\u201d, oh I do webkit, I do safari, I do v8. As steven said, to compromise a modern iPhone or even a browser, you need several vulnerabilities that you have to combine to break through the individual layers. And these layers are so complex, that researchers often have to specialize. I think nowadays a single researcher, if they are dedicated enough, they can still make a weaponized exploit."}
{"prompt": "How is it possible to create a fully wormable iOS bug in 2021?", "completion": "If you look at ian beers research on bluetooth on iOS. You can see that just a single guy, to be fair he is one of the best in the world, he can still make like a fully wormable iOS bug. Right. And all I have to do is just be near their phone and their phone is compromised. So that type of thing is still possible in 2021. But I\u2019d say that type of thing is extremely difficult. Xerub also said about this: \u201cI work alone most of the time, but I do occasionally chat -- and take input from -- a few select friends."}
{"prompt": "What is the difference between a weaponized exploit and a one-click solution?", "completion": "It is certainly possible to do it alone, but I guess it's somewhat easier in a team. I say somewhat, because even in a team, usually only one or two people bear the brunt of the exploit per se, while the others are working to polish. I am not trying to minimise the importance of the extra work, it just happens that I don't usually need, nor release 'easy-to-use' one-click solutions for any client, less more so for the masses.\u201d And here is an important detail. Xerub used the word \u201cweaponized-exploit\u201d which I think, when talking within our industry it\u2019s kinda clear what it means."}
{"prompt": "What is the difference between a \"real\" weapon and an exploit?", "completion": "But outside of our industry, this term is also very loaded. \u201cWeapon\u201d. Weapons are used in war and directly kill people. Exploits, and the intelligence gathered through implants can of course be reason for a military strike or other violent actions. But I do think there is a big difference between the violence of \u201creal\u201d weapons and exploits. So many in our industry prefer the term \u201cproduction-grade\u201d or \u201coperationalized\u201d exploits. So these terms refer to an exploit that is very easy, usable, and very stable."}
{"prompt": "What additional work is necessary to operationalize a vulnerability exploit and make it usable by the customer?", "completion": "So basically a customer, who has no idea about iOS exploitation, they can just enter a phone number on a graphical interface, press a button and a phone gets hacked. And that requires a lot of additional work put into the exploit. So now we kinda understand the industry. At the start of the chain you have researches who find vulnerabilities and create a very basic proof of concept exploit. Then they maybe sell it to a company specialized in operationalizing it, and this company takes the exploit, doing all the Q&A, maybe improves the exploit so the target doesn\u2019t crash and confirms which phones and versions it really works against."}
{"prompt": "How is a trojan used to gain remote access to a device?", "completion": "And they probably also develop their own trojan, or usually called an \u201cagent\u201d, which makes remote access to the phone and the data very comfortable for a customer. They then package this all together into a software solution, sell access to this tool, to for example intelligence agencies around the world. And the customer then get basically a Hollywood style button to hack any iPhone. So you get a whole value chain. you have a cost and risk for the researcher to find an exploit. You have a demand from customers wanting certain hacking capabilities."}
{"prompt": "What is the likelihood that there are vulnerabilities in the devices we use?", "completion": "And you have companies in the middle that balances the price into both directions, while also having their own cost for operationalizing everything. Which determines their profits. So now that we have established that there is a 99.9% certainty that there are vulnerabilities in the devices you use. And it\u2019s probably still possible for individuals to find and exploit those vulnerabilities. but most likely it will be done by a team. It becomes clear that the original question about whether \u201cevery computer can be hacked\u201d,"}
{"prompt": "How can the risk of being hacked be assessed?", "completion": "is uninteresting. It doesn\u2019t help us in real life. Every human could be killed, doesn\u2019t mean every human gets killed. Is that a bad comparison? Anyway. Complex devices will probably always be hackable, as long as they keep adding features and making them more and more complex. So the real question we should ask ourselves is not whether your device can be hacked. The question must be, how likely is it going to happen to you. Will your device be hacked? This of course is a very complex and very subjective question about risk."}
{"prompt": "What does S1guza say about the likelihood of becoming a target of a 0day attack?", "completion": "Everybody has a different risk feeling. But who else would be better to help us understand this risk, than the people who actually have the ability to find such vulnerabilities. How scared should you be? I would say it doesn\u2019t make sense to live in fear of 0day. Because I would say, you know, using technology is just a very small part of my life, I not gonna let that dominate my life, right. S1guza says about this: I think it\u2019s highly unlikely that I\u2019m becoming a target because there\u2019s just a lot more smarter people out there with a lot more important information on their hands."}
{"prompt": "What are some of the hardware mitigations that Apple is employing to help secure its devices?", "completion": "And I feel like burning a 0day to target me would be kind of a waste. But each of their own. And xerub says about this: \u201cI am certainly worried about using browsers. Both because of my own work, but mostly because I have seen the work of people way more talented than me, and I can tell you it's scary! [...] Besides the browser, the rest of the phone as a whole, I am less worried about. I mean, Apple is doing a decent job, especially with the hardware mitigations. It is a common misconception that 0days are expensive."}
{"prompt": "How can the economics of an attacker be used to assess the risk of being targeted by a 0day exploit?", "completion": "Yes, they are, but it really depends on ROI. [...] Say you catch 50 targets with a 0day you don't care much about. It eventually gets discovered, sure, but in present terms: $500k for 50 targets is $10k per target. which is not that much for a serious actor.\u201d But in the end, I guess, if someone really wanted to target me, like a serious adversary, who are persistent and relentless. Then I likely fall prey. But there is a point in time where you just make peace with that and accept what it is. So I think the best way to approach this type of problem is to think in terms of the economics for the attacker."}
{"prompt": "What are the potential risks associated with using a Chrome 0day vulnerability to gain access to a user's computer?", "completion": "So imagine you are the attacker and you have a business to run. So how much does the attack, and how much would the attack generate in revenue for me. The cost of mounting this attack is very high. So you need a very high return for this investment to make it worthwhile. So for example if I\u2019m some random crime guy, I\u2019m not going to take this chrome 0day and pay a bazillion dollars on it. And then try to use that on random users. For example let\u2019s say I hack your computer. What can I get out of your computer."}
{"prompt": "How much money is it worth for a hacker to harvest a user's cookies and other data from their system?", "completion": "I can use it for I guess cryptomining I could do ransomewhere, I could harvest your cookies or autofill and so on. But how much is that really worth? It\u2019s probably only worth a few bucks per a system. Maybe a bit more in ransomware. But it\u2019s hard to say. And that initial investment is extremely high. And the thing is once you started your campaign it\u2019s a race against the time because all these browsers all auto-update. Assuming that people have the auto-update on. Which is like most people. Because that\u2019s the default."}
{"prompt": "Is Citizenlab a reliable source of information on the risks of state-sponsored hacking?", "completion": "So as you can see, they respect the technology and know that there is a risk, but also they don\u2019t really worry that much. Especially 99% of the people watching this video on YouTube, you really shouldn\u2019t worry too much. But of course there are people who should maybe worry a bit more. There are groups of people we know who get attacked with those exploits. Citizenlab has several great reports about that. Now on the other hand, people of interest should worry about their security. And those would be like journalists, dissidents,"}
{"prompt": "What is a Chrome 0day and how was it used in the recent Twitter and LinkedIn campaigns?", "completion": "government officials, politicians, executives, and so on. Or exploit developers. Yes you heard right. There is also incentive for attackers to target security researchers, as researchers often have access to privileged information, or maybe other vulnerabilities or exploits that they produced themselves. And we have seen this happened earlier this year with the twitter and linkedin campaigns. Which were using a chrome 0day to target security researchers, which they had tricked into going to their blog page."}
{"prompt": "What are some possible methods of protection against state-sponsored 0day attacks?", "completion": "This happened for example to cts some hackers from north korea actually slid into my twitter DMs, and also the DMs of a bunch of other security researchers. And they tried to basically use a chromium 0day on us. So they were like \u201ccome checkout my blog it got my new research on it, what do you think about it.\u201d and then the blogpost had a chromium drive-by zeroday. So that was pretty sketch. So what can you do if you are a journalist or in some other high-risk group? I think there is not much that you can do to completely rule out the possibility of 0day used against you."}
{"prompt": "What are some methods that can help reduce the attack surface of a device?", "completion": "I think a few things can help, but nothing can guarantee your security against 0day. I think that security by isolation also helps, for example you know like, I don\u2019t keep my exploit on my personal device. In terms of reducing attack surface ,a big thing is disabling javascript by default. This has gotten harder with the modern web, which requires a lot of javascript which gives you anything besides a blank white page. There are extensions like umatrix which give you a good amount of control over this, and can make it a bit easier to manage your javascript usage."}
{"prompt": "What are some methods for reducing the attack surface when using a web browser?", "completion": "If you want to go even further, you can usually disable specific web features using either browsing flags or commandline arguments. And this helps cuts down the attack surface even when javascript is enabled for a site. For example one thing I do is disabl;e the just-in-time compiler, and also web assembly as part of chrome. And this will help cut down on attacks targeting the compiler or the webassemply system. Now this is not gonna stop all attacks potentially, but it will cut down on the attack surface."}
{"prompt": "What techniques can be used to mitigate the risk of malicious links on mobile devices?", "completion": "On a device like an iphone it might be a little bit harder to have such granular control. But something that I have done in the past is having two browsers, one of which, lets say is safari which has javascript disabled. And then if I decide I need to run it, we can move it into the other environment. I just try to follow best practices as much as possible, right? So using Universal two-factor auth, password managers, I don\u2019t click stupid links, all that kind of stuff really plays into it a lot."}
{"prompt": "What steps should be taken if a device is suspected to have been infected with a trojan?", "completion": "As long as you can make it harder for the attacker, right? And that is what defens ein depth theory goe sinto. Just making it harder for the attacker. Now if you notice you got exploited and a trojan, or so called agent, is running on your device, I guess the best thing is to immediately disconnect from the internet, and I guess reinstall the device. But if you don\u2019t know if you got infected, there is maybe one very small, but possibly effective, trick. Checkout the recent amnesty international report about the Pegasus malware:"}
{"prompt": "What techniques does the NSO Group's Pegasus spyware use to maintain persistence on iOS devices?", "completion": "\u201cPegasus is no longer maintaining persistence on iOS devices.\u201d And here is what Bill from Citiznelab is saying about that: \u201cThe NSO Group's Pegasus spyware delivered via 0-click exploits is no longer \"persistent\" in the strict sense of the word (it doesn't come back when you reboot). \u201cPersistence\u201d is achieved via firing the 0-click again. the lack of traditional \"persistence\" is a feature. It makes the spyware more nimble, and prevents recovery of the the spyware and exploits from forensic analysis."}
{"prompt": "What techniques can be used to mitigate the impact of a malicious implant on a phone?", "completion": "And steven also said the same: If you have a phone rebooting it every now and then can help mitigate the impact of an implant. Because not all implants have good persistence capabilities So kids remember, always reboot your phone. I hope this gave you a good overview about the threat of 0days. And now let\u2019s come back to the question. Can every device be hacked? We established that for complex devices such as phones and computers that is like 99% true. But at the same time it\u2019s so complex that it requires a huge amount of time and experience to do that."}
{"prompt": "What techniques are used to create a \"production-grade\" or \"operationalized\" exploit?", "completion": "And nowadays to get an actual full-chain \u201cweaponized\u201d or rather \u201cproduction-grade\u201d or \u201coperationalized\u201d exploit ready for use, it\u2019s really only possible to do that with a team of people. Which means it\u2019s very costly to do so and usually only worth it if there is a considerable return for that investment. Which means it\u2019s almost exclusively used today in state-level hacking by intelligence agencies gathering, well, intelligence on various people of interest, regimes to go against journalists and activists, and probably corporate espionage."}
{"prompt": "How can users protect themselves against phishing attacks?", "completion": "So if you are not belonging to such a group, you should not worry about 0days. And I can with high confidence tell you, that your bragging friend or ex partner, does not have this kind of capability. they will use other much much simpler tricks like phishing to get to you. Those are the kinds of attacks you should worry about, and I recently made a video about protecting yourself against phishing, that\u2019s like 1000x more important for your security than thinking about 0days. And lastly, 0days are only expensive because they use unknown vulnerabilities, it\u2019s a premium you pay for that."}
{"prompt": "What is the CVE number associated with the dirtyc0w exploit?", "completion": "So the public disclosure of dirtyc0w or CVE-2016-5195 just happened. This vulnerability is ancient, and allows a regular user on a system to perform a local privilege escalation and become root. I want to show it to you, explore how it works and generally talk about it. Let\u2019s cut right to the chase and start by looking at the provided proof-of-concept exploit. I have here a vulnerable Ubuntu system where I can downloa and compile the exploit. Then I create a file owned by root to that I as a normal user can\u2019t write to."}
{"prompt": "How can the Dirty COW exploit be used to gain root privileges on a Linux system?", "completion": "I can read it, but not write. This is true for many files on the file system like for example the ping binary. ping belongs to root and has the setuid bit set. This means anybody can execute it and it will run as root, but ping doesn\u2019t do much except sending out some networking traffic. So our root file we just created resembles a file or binary like ping. It\u2019s owned by root and we can\u2019t write to it. Now, when we execute dirtyc0w, and pass it the root file and specify a string we want to write, we can observe, that the string got written to the file."}
{"prompt": "What is the purpose of the mmap() function in the dirtyc0w exploit code?", "completion": "We, as a regular user of the system, have written to a root file, that we don\u2019t have write access to. This is insane. Now imagine we would have written a backdoor into the ping binary, we could become root anytime. Without knowing the password of root. Now let\u2019s try to understand the exploit code. Let\u2019s check out main() first where the code starts. So first it opens the file we want to write to as READ_ONLY. Next comes a call to mmap(). Mmap is used to create a new mapped memory segment in the current process."}
{"prompt": "What is the significance of the MAP_PRIVATE flag in the dirtyc0w exploit?", "completion": "One of these parameters can be a file descriptor and in this case it\u2019s the READ_ONLY file owned by root. This means it maps the file into a new memory area. Also the permission flags show, that this new memory area is READ_ONLY. So far so good. The other important flag is the MAP_PRIVATE flag. The comment here is copied from the man page of mmap and it states, that this creates a private copy-on-write mapping. Or short C.O.W, cow. This is where one part of the name for this vulnerability is from."}
{"prompt": "What is the purpose of the COPY_ON_WRITE flag when using mmap?", "completion": "With this flag, mmap doesn\u2019t copy the whole content of the file into memory, mmap maps the file into your memory. This is awesome because you don\u2019t need huge amounts of RAM to load a copy of the file, you just directly read from the file on disk. Or relatively directly, we will learn more about memory in a second And copy-on-write means, that if you were to write to this memory segment, you would then create a copy of it. So eventhough the file was mapped as READ_ONLY, because of the private mapping we can write to a copy of it."}
{"prompt": "What is the purpose of using two threads when exploiting the Dirty COW vulnerability?", "completion": "So the important takeaway here is, that mmap will map the root file directly into your memory, and you can read the content of the file, or write to a COPY of it. The changes to your copy should not be propagated to the real underlaying file. It\u2019s just for you Next we start two threads that will run in parallel. Dirtyc0w is a race condition vulnerability, this means certain events have to occur in a specific order, that are fairly unlikely to happen under normal circumstances. So you try to race against the probability of it not happenign."}
{"prompt": "What is the purpose of the madvise syscall?", "completion": "And you simply try it over and over again. And maybe you get lucky. So let\u2019s see what the two threads are doing. The first thread is the madviseThread. This thread uses the syscall madvise, which probably doesn\u2019t stand for memory advise, but mad advise, I think the marketing department failed here, naming this vulerability not mad cow, am I right? Ok. done with the dad jokes. So this syscall can be used for optimization reasons. You can provide the kernel some information on how you intend to use a memory mapped area,"}
{"prompt": "What is the MADV_DONTNEED flag used for in the context of the dirtyc0w exploit?", "completion": "because there are different techniques how you handle caching, look ahead and so forth. And the one advise we give the kernel is, that the memory area where we mapped the file to, or at least the first 100 byte, is probably not needed anytime soon. We say that with the MADV_DONTNEED flag, which stands for: Do not expect access in the near future. (For the time being, the application is finished with the given range, so the kernel can free resources associated with it.) Subsequent accesses of pages in this range will succeed, but will result in reloading of the memory contents from the underlying mapped file."}
{"prompt": "What is the file that the procselfmemThread opens in the exploit?", "completion": "The last sentence is key to the exploit. Otherwise not much else happening here. The other thread, procselfmemThread, opens the file /proc/self/mem. This is a special file and I try to explain really quick. So /proc is a so called pseudo filesystem. In fact most resources on linux are managed as \u201cfiles\u201d. So you should always see \u201cfiles\u201d in quotation marks when talking about them. Imagine a file just to be something, you can read from, or write to. So this could be printer, and writing to the printer \u201cfile\u201d could result in an actual physical printer printing the string on a piece of paper."}
{"prompt": "What is the purpose of the /proc/self/mem file?", "completion": "So /proc does not really contain \u201cfiles\u201d in the common sense. They refer to something more general, most importantly for our case, something you can read and write to. So in this case /proc/self refers to special \u201cfiles\u201d provided for the current process. So every process will have it\u2019s own /proc/self. And in there is a \u201cfile\u201d called mem, which is a representation of the current process\u2019s memory. So you could theoretically read your own process\u2019s memory by reading from this file. Now in this case, the exploit WRITES to this file in a loop."}
{"prompt": "What is the code used to exploit the race condition vulnerability in the Linux kernel?", "completion": "So first it performs a seek, which moves the current cursors to the start of the file that we mapped into memory. And then it writes the string we pass via the program arguments to it. So this will trigger a copy of the memory, so that we can write to it and see these changes. But remember, we will not write to the real underlaying file. So if you would do these things once, or just isolated from eachother, probably nothing would happen. Because that would be the expected result. But because there is a race condition issue somewhere, trying this over and over again will create a weird edgecase, that usually doesn\u2019t occur, but in this case tricks the kernel into actually writing to the underlaying file."}
{"prompt": "What was the commit that attempted to fix the race condition exploit eleven years ago?", "completion": "Now let\u2019s have a look at the patch, because I think this is very interesting and not very big. So in the commit message the author states that This is an ancient bug that was actually attempted to be fixed once (badly) by me eleven years ago in commit 4ceb5db9757a (\"Fix get_user_pages() race for write access\") but that was then undone due to problems on s390 by commit f33ea7f404e5 (\"fix get_user_pages bug\"). So I\u2019m a little bit disappointed here at my IBM friends, because they almost have a partial guilt here."}
{"prompt": "What does GUP stand for in the linux memory manager?", "completion": "S390 is the architecture used by IBM mainfraimes, system z. Anyhow, let\u2019s have a quick look. The file that is patched belongs to the linux memory manager, hence the mm directory. And the file itself is called GUP, which stands for get_user_pages. Vm stands for virtual memory and pte for page table entry. I think that should help a little bit to understand the code. So when you want to write to this mapped memory, the kernel has to copy it, because you are not allowed to write to the underlying file."}
{"prompt": "What does the madvise flag DONTNEED do in the context of the dirtyc0w exploit?", "completion": "But a copy takes time. Now usually you do the copy once and you are fine, but in this case we call madvise with DONTNEED over and over again. Let\u2019s look this up in the code. So if this flag is used, this function is executed. The kernel source code explains that the: Application no longer needs these pages. If the pages are dirty, it's OK to just throw them away. The app will be more careful about data it wants to keep. Be sure to free swap resources too. I guess I quickly explain dirty. This is also where the other part of the name is from."}
{"prompt": "What is the purpose of caching or buffering read and write operations to disk?", "completion": "When you read and write to disk you never do this directly, that would be wayyy to slow. So you cache, or buffer them. This means you hold this data somewhere and at some point in time you write it to the disk. Ok. So if you read data from disk into memory you can just leave it there in the cache for further reads. BUT, if you want to write to the disk, you write it into this cache/buffer, but now you have to tell the system, that this buffer got touched and is dirty now. It\u2019s not clean fresh memory anymore."}
{"prompt": "What is the function of the madvise() system call when exploiting the Dirty COW privilege escalation exploit?", "completion": "In this case the system has to make sure that the change is properly propagated to the underlaying physical memory. Let it be a file on disk or flash memory. So in this case, if you wrote to the copied mmaped memory, the memory page got flagged dirty. And because you tell the kernel now, that the page is not needed anymore, this means you don\u2019t care that the dirty page has not been written yet. You just toss it. So this madvise call causes the throwing away of this memory. This means it\u2019s not in any of the memory caches anymore."}
{"prompt": "What is the function that was added to the patch to check if the copy-on-write cycle is complete?", "completion": "This is important for this exploit, because this means, everytime when we try to write to it again, the copy of the memory might have been tossed. So we have to re load a new copy from memory so we can write to it. And creating this copy takes time. And this is the race condition, if the copy-on-write cycle is not complete yet. The patch added this function that checks if the copy-on-write is complete yet, and only then allows writing to it. To be honest, I don\u2019t understand this code really to tell you why this snippet makes sure that the copy on write is complete."}
{"prompt": "How can the Dirty COW exploit be used to reliably perform a write to the real file instead of the copied memory?", "completion": "But it added some additional checks, so I assume now it\u2019s fine. So here is the mental picture of our race condition. We constantly use madvise to drop any cached copy of the mapped file. And at the same time we try to write to it, which causes a copy of that memory. Now in some rare condition, that can be hit very reliably by just trying over and over again, we perform the write to the memory, before the page table is updated to point us to our copied version. And we write to the real file instead of the copied memory."}
{"prompt": "What is the unresolved debate surrounding vulnerability disclosure that has been ongoing for decades?", "completion": "So the crazy thing about this vulnerability is, that it has been in the kernel for a very long time. And it was even a known issue, according to the patch author, that had been attempted to be patched before. So over time this apparently theoretical race condition got viable because our systems got faster and faster. And Petr Matousek also states, that this was an 0day exploit used in the wild. So there was a real threat. Now a bit of controversy. And this goes into the unresolved debate that has been going on for decates how to do vulnerability disclosure."}
{"prompt": "What arguments have been made regarding the decision to disclose the Dirty COW exploit?", "completion": "If you were the person who found this exploit in the wild, what would you do? The obvious arguments are: Full disclosure, because it was actively exploited, fully disclosing it right away would have not given advanced attackers anything new. But the knowledge would have allowed system administrators to immediately patch their systems. But on the other hand it is such an easy and widespread vulnerability, that a full disclosure would have allowed armies of less skilled hackers to take advantage of it, until less professional sysadmins or private people could patch it."}
{"prompt": "What are the advantages and disadvantages of responsible disclosure when dealing with a security vulnerability?", "completion": "On the otherside we have the responsible disclosure where you first contact the developers, create a fix, try to roll it out and then tell people afterwards. The obvious arguments here are, you stopped professional sysadmins for hotpatching their system quickly and leave them exposed for the ongoing attacks. Now I don\u2019t know what is the best way. Both ways have advantages and disadvantages. And it entirely depends on your threat model. In general I lean slightly more towards full disclosure, because I like information to be free, though I myself do responsible disclosure because I\u2019m a hypocrite."}
{"prompt": "What measures can be taken to secure a Linux server from vulnerabilities?", "completion": "Maybe you have found a \u201cbug\u201d in a bug\u00a0 bounty program before, and they rejected it and said it\u2019s not a vulnerability. But then\u00a0 you noticed that they still \u201cfixed\u201d it. And now you might be mad and think, \u201cthis must have\u00a0 been a vulnerability,because they fixed it\u201d. So in this video talk about the difference\u00a0 between Security Vulnerability and Security Risk. I think the line can sometimes be blurry,\u00a0 but it\u2019s important to understand, especially when you are into bug bounties. A lot of bug\u00a0 bounty programs only pay for vulnerabilities,"}
{"prompt": "What aspects of IT security can lead to a situation being perceived as \"risky\" rather than \"vulnerable\"?", "completion": "so it\u2019s important to understand the difference.\u00a0 But also in IT security in general, sometimes people say something is \u201cinsecure\u201d but don\u2019t\u00a0 mean it in the \u201cthis is vulnerable\u201d sense, but in the \u201cthis is risky\u201d\u00a0 sense. Let\u2019s talk about it. A while ago I already made a video about \u201cWhat is\u00a0 a security vulnerability\u201d where I explored a few different examples. And if you watched that video,\u00a0 you know that it\u2019s often not easy to identify if an observed behaviour is a vulnerability or not.\u00a0 And I told you that I don\u2019t have a good definition or checklist for it either. But I do think I know\u00a0 intuitively when something is a vulnerability."}
{"prompt": "How can I prevent my server from being hacked via SSH?", "completion": "In another recent video about how to secure a\u00a0 linux server, I went over popular \u201cbest practices\u201d how to prevent your server from getting hacked,\u00a0 applied my intuition, and basically concluded they are all \u201cuseless\u201d. But only useless when\u00a0 it comes to \u201creal\u201d security vulnerabilities. Some of the best practices are maybe not useless\u00a0 at all, but only when it comes to security risks, given a risky environment or context. So let\u2019s start with an example from that video. Specifically the recommendation to\u00a0 not allow password login for ssh."}
{"prompt": "What are the good password policies that should be followed when using SSH?", "completion": "In the linux server video, I argued that for\u00a0 security it doesn\u2019t matter if you use ssh keys or ssh password authentication, even though\u00a0 every article about protecting a server from hackers recommends that. But it\u2019s important to\u00a0 understand what I mean when I say \u201cit doesn\u2019t matter for securtity\u201d. What I really mean is\u00a0 \u201cwill you get hacked?\u201d if you don;t do that. And in that case ssh keys or\u00a0 passwords make no real difference. But I also acknowledged in the video that you\u00a0 still have to follow good password policies,"}
{"prompt": "What is an example of a vulnerability caused by a bad password?", "completion": "meaning you should have a long and unique\u00a0 passwords. But having password authentication in general is not a vulnerability. It\u00a0 doesn\u2019t make you magically hackable. What makes you hackable is a bad password. So I\u00a0 would argue, when you have a [guessable password], that is the vulnerability. THe bad\u00a0 password is. Not the fact your ssh server allows password authentication. Which means when you do use a strong password with ssh password authentication,\u00a0 then there is no vulnerability there. You will not be able to hack into this server."}
{"prompt": "What is the difference between a security vulnerability and a security risk from a security perspective?", "completion": "At least from the ssh angle. That\u2019s why I say, from a security perspective it makes\u00a0 no sense to address and change this. But I acknowledge that I have a very absolutist\u00a0 opinion. For me \u201csecurity\u201d means if you get hacked or not. Because of a vulnerability. But \u201csecurity\u201d in the real world is a bit more fuzzy. Especially when we start to look\u00a0 from the perspective of security risks. Risk analysis can get complicated\u00a0 and is often VERY subjective. In my server video, I was talking about \u201cbest\u00a0 practices\u201d for your personal rented Linux server."}
{"prompt": "What is the risk associated with setting up a regular unprivileged user with a simple password on a Linux server?", "completion": "And in that context I consider\u00a0 the risks introduced from password authentication to be very very low. But does that apply in all contexts? Well, let me paint a different picture\u00a0 and use this server in a not typical way. Let\u2019s say you rent a Linux server, and\u00a0 by default you get a root password, you can ssh into it. And then you follow\u00a0 along my new sudo security research series. For testing you want to create a regular\u00a0 unprivileged user. So you type useradd, you create a user, and give it a simple password \u201cuser\u201d. It\u2019s\u00a0 just for local tests and you are root anyway, so what does it matter if this user password is bad.\u00a0 But suddenly you opened up the door for a hacker."}
{"prompt": "What are some methods of hardening a Linux server against brute force attacks?", "completion": "Now you have an exposed user with a guessable\u00a0 password. And it\u2019s probably just a matter of time that an automated scanner might find this login. ssh \u201cuser\u201d, password \u201cuser\u201d. and they are in. Now you can argue, damn, that\u2019s super insecure,\u00a0 if you had disabled password login and just used ssh keys, then this would have not happened. AND\u00a0 if you also made ssh listen on a different port, those automated scanners might not\u00a0 even find the guessable user password. And yes I agree. I\u2019m not dumb.\u00a0 Of course this would be the case."}
{"prompt": "What are the potential risks of creating a user with a weak password?", "completion": "BUT! First of all this is not a typical linux\u00a0 server usecase. But much more important, I would still argue, the vulnerability you\u00a0 introduced was creating a guessable user password. That is the root of the issue. And\u00a0 fixing this, by changing the password to a very strong one, is fixing the vulnerability. And in the end YOU made a mistake. You introduced a vulnerability in your server setup, by creating\u00a0 that user with a bad password. You can think of it the same way how a programmer might make a coding\u00a0 mistake and introduce a vulnerability in code."}
{"prompt": "What steps can be taken to mitigate the risk of mistakes that introduce vulnerabilities?", "completion": "We know that the best programmers make\u00a0 mistakes and introduce vulnerabilities. So do the best sysadmins, they make\u00a0 mistakes in their server setups. So if mistakes can introduce\u00a0 vulnerabilities, maybe we want to do certain things to mitigate those risks? And yes, disabling password authentication could mitigate the risk of mistakes like this. But it\u2019s extremely important for me to make this difference between risks and\u00a0 actual vulnerabilities. Oftentimes people mix those two and you think something is\u00a0 \u201cinsecure\u201d, you feel like you could get hacked,"}
{"prompt": "What are some of the \"best practices\" for securing Linux servers that might be considered \"dumb\" by someone with a deeper understanding of how computers work?", "completion": "when in fact you could also manage that risk\u00a0 and be aware, and never cause the actual issue. Understanding risks is very important.\u00a0 Understanding risks well, requires a lot of knowledge of how computers work. And I\u00a0 think my video about securing linux server showcased when those \u201cbest practices\u201d are kinda\u00a0 dumb. But of course when you understand how stuff really works, then you can make your very own\u00a0 educated decision, based on your personal risk assessment, and decide if you disable password\u00a0 authentication makes sense for you or not."}
{"prompt": "What are some common examples of open redirects found in bug bounty reports?", "completion": "Now I started this video mentioning bug bounties,\u00a0 and then I drifted away talking about linux servers. sorry. So let\u2019s do a very common bug\u00a0 bounty example. Open redirects. And let me say it right away. I think Open Redirects are NOT\u00a0 a vulnerability. But they are a security risk. When looking for open redirect examples I\u00a0 found this cool blog post by cristian cornea \u201ctop 25 Open Redirect Bug Bounty Reports\u201d.\u00a0 Exactly what I needed. But what is that? Open Redirects paying out thousands of\u00a0 dollars and I am saying they are not a vulnerability?!"}
{"prompt": "What is the vulnerability in the OAuth2 flow discussed in the video?", "completion": "WHUAT?! Open Redirect ALLOWS FOR ACCOUNT\u00a0 TAKEOVER. 8.000 dollars. But let\u2019s see. An error in our OAuth2 flow [..] an\u00a0 attacker could modify the state parameter to have a poisoned central.uber.com path [...]. I don\u2019t want to explain oauth2 flow here. But the actual vulnerability was the fact that\u00a0 you could modify the state parameter, which resulted in a redirect to an attacker\u00a0 controlled path on central.uber.com, which also includes the oauth access token.\u00a0 And now you COMBINE IT with an open redirect on this domain, to forward this token to you."}
{"prompt": "What type of security issues have been reported in bug bounty programs?", "completion": "So the vulnerability here was in the oauth implementation specifically how the\u00a0 state parameter was handled. And the open redirect issue was only an additional\u00a0 puzzle piece to make the whole attack work. Next report is just a comment on\u00a0 an rfc, not really a bug bounty. Then we have here 3k open redirect. BUT\u00a0 IT\u2019S ACTUALLY A XSS. not an open redirect. Next one, also an XSS. XSS. Stealing local files and javascript injection. XSS. XSS. As you can see, not really open\u00a0 redirect issues. They are XSS issues."}
{"prompt": "What is the typical payout for a report of an open redirect bug bounty?", "completion": "But as soon as we drop lower, we\u00a0 start to get the reports that are purely open-redirects. And a typical payout\u00a0 seems to be 500$. But also plenty of 0$. So as you can see, XSS and account takeovers\u00a0 are pretty clear vulnerabilities, as they really allow you to really hack an account. And the root cause for open redirect sometimes can be used to trigger an XSS as\u00a0 well. For example when it\u2019s implemented with a window.location redirect. When you set\u00a0 it to a javascript URI, you have a XSS. But there are many ways how the\u00a0 open redirect could be implemented."}
{"prompt": "What is an example of how an open redirect could be used in combination with an oauth flow issue to steal an access token?", "completion": "And so many times XSS is not possible. So why should a bug bounty program\u00a0 reward a pure open redirect report? You could argue that it\u2019s risky. Because if\u00a0 you have some kind of oauth flow issue, an open redirect could be combined, to steal the access\u00a0 token. But first of all, the web app in question must even use oauth, and if it\u2019s not vulnerable\u00a0 right now, it\u2019s unlikely they will change it so drastically that it suddenly is vulnerable. Server side request forgeries where the URL is validated to have a certain hostname, could\u00a0 also be bypassed with an open redirect. But again the actual vulnerability is the SSRF\u00a0 that allowed to connect to an untrusted host."}
{"prompt": "What risks may be associated with an open redirect?", "completion": "And the last argument, and the weakest, but often\u00a0 used, an open redirect could be used for phishing, because the URL looks trustworthy. But that is\u00a0 so weak, because in HTML emails you can also fake links all the time. And in general we\u00a0 want to train users to look at the domain in the browser to determine if a site is safe.\u00a0 And the redirect will redirect to a bad domain. So as you can see, there is sometimes a\u00a0 little bit of a risk having an open redirect, but this risk is dependent on the context,\u00a0 dependent on the actual functionality of the app."}
{"prompt": "What is an example of a domain with oauth and webhook functionality that might be more risky?", "completion": "So on one side you have a domain with oauth and\u00a0 webhook functionality, maybe it\u2019s more risky, and maybe could be fixed there. But then\u00a0 you also have the complete other side, like a link shortener, where the open\u00a0 redirect is by design the apps functionality. But either way, I hope you agree that open\u00a0 redirect in itself is not a vulnerability. But it might be a security risk, because it\u00a0 could make other bugs actually exploitable. So for a bug bounty program, such a report is\u00a0 difficult to handle. On one hand they might think,"}
{"prompt": "What types of vulnerabilities are typically easy to prove?", "completion": "we don\u2019t really care about it, it\u2019s not an actual\u00a0 vulnerability, but then they might still put it into their issue tracker and eventually fix ist,\u00a0 because often fixes for that are super short. And now we come into this awkward\u00a0 place where it's not a vulnerability, but it also got fixed. So should the program\u00a0 pay for it? I don\u2019t care, I\u2019m luckily not into bug bounties. But I can totally understand why\u00a0 the payout would be 0 for just an open redirect. So to summarize, For me a vulnerability is really something that breaks a security boundary. It\u2019s an access control\u00a0 issue, where the user can do something that only an admin can do. Or a XSS where you can perform\u00a0 actions on behalf of another user. Or a SQL injection where you can dump the database. And the\u00a0 cool thing about vulnerabilities, most of the time it\u2019s easy to proof. You can write an exploit, or\u00a0 describe reproduction steps, that give you access to something you should not have access to."}
{"prompt": "What techniques can be used to minimize security risks?", "completion": "And so in contrast to that, there are also risky things. They are not as clear. Like open\u00a0 redirects, ssh password authentication, compiling binaries without ASLR, or even writing something\u00a0 in an insecure language in the first place. They do NOT result in your system\u00a0 getting hacked (that\u2019s why I don\u2019t call them security vulnerabilities). But they\u00a0 might increase the likelihood of mistakes that could lead to actual vulnerabilities. And of course, as security conscious people we want to minimize risks as well. We have\u00a0 a vested interest in that. But at the same time security risks are often talked about as if\u00a0 they are vulnerabilities, people can get really heated in debates about them, but in the end they\u00a0 are just risks. And risks depend on the context and environment. So for one person a certain\u00a0 risk-minimization best practice can make sense,"}
{"prompt": "What are some examples of risks associated with following best practices in IT security?", "completion": "for others they don\u2019t make sense. And not\u00a0 to mention that a certain risk mitigation, could introduce new risks somewhere else. So if you follow certain best practices, but others don\u2019t, don\u2019t preach about it, maybe you\u00a0 just don\u2019t understand their unique risk context. Anyway, I hope that you keep thinking about\u00a0 security risks and security vulnerabilities in the context of IT security. And when you have\u00a0 findings, I hope you can classify them properly. Try to be clear about if you think something\u00a0 is just risky or actually breaking something."}
{"prompt": "What steps are required to create a private Pwn Adventure 3 server?", "completion": "In this episode we want to setup a private Pwn Adventure 3 server so we don\u2019t have to use the public server that can only handle a couple concurrent users. The game itself also has an offline mode, so you can check out the game a little bit without any server, but to really experience the MMO game hacking part, you really want it to talking to a server. In the description of the video you will find a couple of links. One of them is a github repository that I have created listing a few options how to run it yourself."}
{"prompt": "What are the technical requirements for running Pwn Adventure 3?", "completion": "But let\u2019s talk first about the system requirements. From the official README it is recommended to at least have 2 GB of RAM and spawn only about 2-3 instances per CPU core. What that means we will see later. And you will also need a couple of GB free disk space for the large client files. So\u2026 if you are interested in more details about the server architecture, it\u2019s probably most fun and interesting to follow the official README or follow the guide by Antonin Beaujeant. He has an easy to follow step-by step guide on how to install and configure the server on Ubuntu 14.04 or Ubuntu 16.04."}
{"prompt": "What steps are involved in setting up a private server for Pwn Adventure 3?", "completion": "You will do each step by hand and you have various options to customize things. Or maybe just learn more about linux and setting up a server in general. It\u2019s a very detailed guide so if you install a fresh Ubuntu in a VM, you should have no problems! The other option is to use the docker files from my repository. I wanted to learn more about docker, so I used this as an opportunity to learn more about it and created this Dockerfile and the docker-compose file together with a friend. I\u2019m not saying it\u2019s a better option."}
{"prompt": "How can I set up a private server with Docker?", "completion": "But for some it might be a more easy option. If you already have a server with docker and docker-compose, you would only have to type `docker-compose build` and `docker-compose up` to get it running. But also the steps to install those are just simple copy and paste. I have tested this on a Ubuntu 14 and Ubuntu 16 that I installed in a VM, running on VM Ware on my Windows host. But my actual personal server that I\u2019m now playing with is running on this little Intel NUC that another friend helped me to setup with CentOS and KVM, so I have a docker VM with Fedora running on there where I have deployed my dockerfiles."}
{"prompt": "What network settings should be used to ensure the private server is reachable from the game machine?", "completion": "And that\u2019s running smoot. And I also tried it on Digital Ocean. And essentially all these options are the same. You just somehow need a shell, have to get docker properly installed, check the versions in case your docker throws errors, you need enough resources and make sure the machine is reachable from your game machine. So for example in your VM network settings you might want to set it to bridged or whatever you need. But then you are good to go. And then you can simply follow the guide. In this example I\u2019m using Digital Ocean,"}
{"prompt": "What payment options does Digital Ocean offer?", "completion": "where I select one of the cheaper plans. In case you don\u2019t know, Digital Ocean is like Google or Amazon Cloud, you can just click yourself a server for however long you want, and only pay the time you used it. The reason why i\u2019m a Digital Ocean customer is because Amazon requires a Credit Card, which I didn\u2019t have for a long time, and Digital Ocean works with paypal - that\u2019s the only reason. Anyway. After selecting a server, enabling monitoring and giving it a name, I have to wait a few seconds until it\u2019s set up and then I get an IP that I can connect to with ssh."}
{"prompt": "What versions of Docker and Docker-Compose were used in the video?", "completion": "And then I clone the github repository, and start the download of the client and server files contained in the pwn3.tar.gz archive. It\u2019s around 1.8GB. While this is running you can open a second shell and make sure docker and docker-compose is properly setup. Which is just essentially following the docker community edition installation guide and copy and paste commands. For future reference, here are the versions that were working for me. Once the download is done you can quickly verify the hashes of the file, to make sure it\u2019s complete."}
{"prompt": "How can we keep the Docker container running for a longer period of time?", "completion": "Then unpack it with tar xvf and after that you are ready to build the docker images with docker-compose build. This will definitely take a little bit and then run it with docker-compose up. then the server should be running. Keep in mind, that when you now CTRL+C here, you tear down the docker container again and everything is lost. It\u2019s great for testing everything, but when you want it longer running, use the -d flag to run it in detached mode. You can then verify with docker ps and netstat if everything looks good."}
{"prompt": "How do I edit the /etc/hosts file in order to connect to the server?", "completion": "This means, there are two docker container, the master and game container. And that you have docker proxy processes listening on port 3333, 3000 and maybe more. Next you can try to connect with your client to it. For that you have to do two things. First is to edit your /etc/hosts file. That file exists on Windows, Mac and Linux. For Mac and Linux it\u2019s simply in /etc/hosts, for Windows it\u2019s in this path shown here. Make sure to edit the file with root or administrator privileges. Here we enter the IP of our server and assign it the name master.pwn3 and game.pwn3."}
{"prompt": "How do I modify the server.ini config file to replace the official host with my own host?", "completion": "Those are the two hostnames of my default server configuration. The second thing you need to do is to modify the server.ini config file located somewhere in the client folder. You have to replace the official host with master.pwn3. WARNING, don\u2019t use an IP here, it took me half a day to debug why my client wouldn\u2019t properly connect and once I used a hostname it worked. That\u2019s why we have to set the /etc/hosts file. After that we can launch our client and wait for all of the files to be downloaded."}
{"prompt": "What is displayed when the Pwn Adventure 3 Launcher is started?", "completion": "This takes quite a while. But after that we can press Play. This will close the Launcher and start the actual game. Here we can select \u201cPlay Game\u201d and if it displays the LiveOverflow message, it worked! You are connected to the master server now. You can then register an account and after that create a character. When you press join the master server will assign you a game server and drop you into the game. Just so you have a better understanding of how the server and client works. When you start the Pwn Adventure 3 Launcher,"}
{"prompt": "What is the typical process for the launcher before starting the game?", "completion": "then the launcher connects to the official server to check for updates to the client and download the files. After that it kills itself and starts the actual game. That\u2019s very typical for games. Then the actual game will read the server.ini config file, tht we modified earlier. When you now want to play, the client will connect to the master server specified in the server.ini file, so master.pwn3 and you can register an account, login and create a character. This all still happens while connected to the master."}
{"prompt": "What happens when a user clicks the \"join\" button in Pwn Adventure 3?", "completion": "Then when you press \u201cjoin\u201d, the master server selects a game server and port for you. The game server runs several instances on different ports. In this case the game server is located on game.pwn3, so the master server will tell the client, \u201chey, I found a free server for you, checkout game.pwn3 on port 3000\u201d. If there is no game server or just it\u2019s very busy, you will see a message \u201cwaiting in queue\u201d, or something like that. And now that you have the game server you connect to it and get dropped into the actual game."}
{"prompt": "What steps can be taken to customize the server settings?", "completion": "Anyway, the setup is essentially the same on any of the hosts hosts. So here is my MacBook, my Linux Laptop and my PC connected to the same server. Say hello! Of course the technical details on how you hack them is different on each operating system. In case you want to customize the server settings a bit, checkout the setup scripts in the git repository. There you can change the welcome message, and also the hostname the server will use. As well as the amount of instances. This is what I briefly mentioned in the beginning."}
{"prompt": "What methods can be used to get out of the cave in the game?", "completion": "This spawns 5 game server instances. And it worked ok on the Digital Ocean server. However when you look at the monitoring stats, it\u2019s really at the limit. Anyway\u2026 now that we finally have everything setup, we will dive into the hacking parts next video. If you watched a little bit of the let\u2019s play in the last video, or played the beginning yourself, you know we need a fireball to get out of this cave. But soon we will be able to do what this guy does. Just flying out of the hole in the cave. It looks a bit laggy from this perspective,"}
{"prompt": "How does the game implement logical gates?", "completion": "If we look at the list of challenges, then we see that we made good progress. We only miss Overachiever, Blocky\u2019s Revenge and Pirate\u2019s Treasure. Blocky\u2019s Revenge was one of the first things I stumbled over when I was just exploring the island in the let\u2019s play. So just a quick recap. We walked into this cave that quickly turned into some kind of underground bunker. And we arrived at the very first closed door where we simply have to toggle the button. After progressing through this portal-esque test facility we realized that essentially the game implements logical gates."}
{"prompt": "What type of logic gates are used to solve the puzzles in Pwn Adventure 3?", "completion": "The buttons you can toggle are inputs and through a combination of logic gates such as NOT or XOR gates you have to get the desired output, to open the door. So for example the very first door was an input line, a NOT gate and and output. The second door introduced the AND gate. Which means both inputs have to be a toggled ON, or has an input as 1, or high, or whatever you wanna call it. So it starts out to be a fairly easy logic puzzle that seems to increase a bit in complexity and introducing more gates."}
{"prompt": "What is the number of inputs required to open the final block in the final room?", "completion": "However at some point we walk around a corner and reach the final room. Where we see this monster. So during the let\u2019s play I already said that it\u2019s pretty clear that these are logical gates and we somehow have to find the correct input to toggle the final block to open the door. But the amount of inputs is just crazy. Actually it\u2019s 32 inputs. Or 32 bits. If you could find a very efficiently implemented algorithm of this logic check, then it could maybe be brute-forced.But if you have a well implemented algorithm, you could also just map out the logical combination and solve it yourself."}
{"prompt": "What kind of tools can be used to solve a logic gate problem manually?", "completion": "Maybe, if you have it properly drawn on a piece of paper rather than a cluttered room like this, it\u2019s even pretty easy to solve it by hand. Or at least use something like z3, which I have shown on this channel before. Either way we somehow have to figure out how the inputs are combined with logical gates to produce the output. And a very clear path to get to that, would be just grab a club mate, put on some hacker sounding music and just write everything down. It\u2019s just laborious work. And you have to make sure to not make a mistake."}
{"prompt": "What techniques could be used to locate the logic implementation in the libGameLogic library?", "completion": "So I was kinda dreading that idea. Now, if I would have played the CTF I would have to make a decision based on the time constraint of the competition. And maybe then I would have just done it, or ask others in the team to do it, because once it\u2019s all mapped out, you can just throw z3 at it to solve it. But I had no pressure and I was kinda dreading doing that. Similarly to how we found the the location of the golden eggs by static analysis, I was actually hoping I could find the logic implementation in the libGameLogic library."}
{"prompt": "What functions are related to the challenge in BinaryNinja?", "completion": "Then I could either efficiently brute-force the input over a few days, or extract the the logical operations to solve it with z3. So I sat there in BinaryNinja looking for any functions that could be related to this challenge. Of course first search term would be \u201cBlocky\u201d or \u201cBlock\u201d. And we see some things like the FlagOfTheBlock and the BlockyChest, but nothing directly connected to the logical gates. Nothing about input or output. But when looking around more, especially in other classes I saw functions related to \u201cCircuit\u201d."}
{"prompt": "What parameters does the function \"SetCircuitInputs\" require?", "completion": "And that totally makes sense. It\u2019s basically an electronic circuit, with Logic gates, inputs and outputs. And the player has a function \u201cSetCircuitInputs\u201d and \u201cPerformSetCircuitInputs\u201d which requirs a string and an integer as parameter. And from looking at the \u201cInitCircuitStates\u201d function we learn that each stage has a name. Stage1, Stage2, Stage3, Stage4 and FinalStage. So it totally would make sense if the function SetCircuitInputs is called with the stage name and the state of the inputs as an integer."}
{"prompt": "What is the size of the parameter passed to the function used to verify if the input is correct in the final stage of the challenge?", "completion": "And the final stage for example is exactly 32 inputs, 32bits, so exactly one unsigned integer, like the parameter. And you could also easily verify that, by using the LD_PRELOAD method introduced at the very beginning of this series, where you can simply overwrite this function and print the value of the parameters when it\u2019s called. And then when you try to toggle the first input you see the output here. However because we hijacked this function entirely, the original function is not called anymore, thus it doesn\u2019t do anything besides printing this here."}
{"prompt": "What type of functions are included in the ClientHandler class?", "completion": "But now we verified the parameters. I looked into the input functions, but none really looked like implementing this kind of logic. ClientWorld:SetCircuitInputs just does some networking stuff. ClientHandler is very linear and short, so no real logic in here. You can also already see a lot of other weird functions here, and they are originating from standard templates I think. Like vectors, function pointers and stuff like that. But I had my highest hopes for the CircuitOutput functions. I was hoping they would kinda go over the input and update the logical gates."}
{"prompt": "What algorithm is used in the Player::GetCircuitOutputs function to set single bits and test values?", "completion": "I mean, the client displays the logical outputs with glowing red connections, so I thought this information, which line to turn on or off should be somewhere in here, right? And the Player::GetCircuitOutputs looked kinda promising. It\u2019s looping over maybe some vectors, and setting single bits, and testing some values, so it looked good. And at this point I was also trying to think about how would I implement this. Would I have some kind of tree or network with inputs and gates and some kind of loop is walking that tree and evaluating each logical gate?"}
{"prompt": "What methods would be used to implement a logic gate in a vector-based system?", "completion": "But I don\u2019t know? How do you implement something like this. If you have different ideas how this could be implemented, you would know better what to look for. But for example I would create classes or structs implementing each gate and just hook them all up. But that\u2019s not the case here. And so I couldn\u2019t find a satisfying answer for myself. It seemed non-trivial, or rather non-basic? It\u2019s not like everybody would implement it the same way, there are very different options how to do it. And so I kind of imagined these vectors with elements would somehow implement that."}
{"prompt": "What approach did the speaker take to debug the Blocky Dungeon prior to using a network proxy?", "completion": "I tried to debug this, and other parts with gdb, but couldn\u2019t find anything and gave up. And I\u2019m still not 100% sure. I\u2019m like 75% sure that our client doesn\u2019t actually have this logic gate information, and the loops we are seeing here are simply handling just part of it. Like looping over the final result. What I have just described I did in parallel to other challenges, much earlier, and at that time I didn\u2019t have the network proxy yet. But now I do have the proxy so I decided to look at the packets being sent and received related to the Blocky Dungeon."}
{"prompt": "What is the packet ID for the position packet?", "completion": "And it\u2019s super easy to see the packets being sent when buttons are toggled. It\u2019s a very simple packet, it starts with the packet ID 0x3031. which is actually in ascii the digit 0 and 1, so binary, bits, 0 and 1, kinda fitting. Now that I come think of it, I think the 2 byte packet identifiers all have some meaning. Health is a ++, mana is \u201cma\u201d. Jumping is \u201cjp\u201d. The position packet is \u201cmv\u201d, maybe for move. Ooohhh man\u2026 that makes all so much more sense now. Anyway, in the circuit packet we can see some ascii data included again, and the length of that data, so we unpack that."}
{"prompt": "What is the data type of the CircuitInput variable?", "completion": "And then we have an integer. And when toggling these buttons we see the value change. And actually if you look at the bits of it, instead of hex, it becomes much clearer. So here we have the CircuitInput unsigned integer. But also with the server response packet we get some additional data. So I had to modify my parser to pass the origin to the individual functions as well, because this part we only look at when the server is sending it. And that turns out to be the the state of the whole circuit."}
{"prompt": "What is the number of output bits in the FinalStage of the puzzle?", "completion": "It took me quite a bit until I figured that out, but basically I went back to the start and started simple. And the first stage seems to have 3 output bits. Which I thought was weird at first, but then I realized each bit represents one important output line. And in another puzzle we have 6 output lines. This also made me realize the first byte, or actually two bytes, are the number of bits that will follow. So here we have 6 output bits. And in the FinalStage we have 0xae, so like 174 bits or so."}
{"prompt": "How many bytes are needed to hold 174 bits of information?", "completion": "And 174 divided by 8 is 21.x, so we need 22 bytes to hold the 174 bits, and that is exactly what we see here. Awesome, right! So this packet is coming from the server when we set a particular input. Which is another indication that actually the client does not know how to set the output lines. It simply sets it to whatever the server says it is. That might be the case, however later I remembered the offline mode, and then there is no server involved. And also in offline mode the Blocky puzzles work."}
{"prompt": "How can we use our proxy to inject a packet to send to the server to set input to our desired value?", "completion": "So the client somehow has to know! So if anybody reverse engineers the client and is able to find exactly where that is implemented, please let me know! But now we can also use our proxy to inject the packet to send to the server, so we can set input to whatever we want very comfortably without having to walk to each button. See I didn't press the button, I just faked the packet, the server calculated which bits has to be set, returns that information and the client turns those particular lines on and off."}
{"prompt": "How can machine learning be applied to solve the challenge presented in the video?", "completion": "At this point I was wondering how to proceed. Like I said I didn\u2019t want to transcribe the whole circuit by hand on a piece of paper, which seemed super tedious. I wanted to be more clever. And I had another idea. I don\u2019t know if it\u2019s going to be feasible, and it\u2019s not something I would have attempted during the CTF, but I was wondering, could I approach this challenge with machine learning? I always wanted to have a reason to try out some machine learning and maybe that\u2019s it. We have input bits, some unknown function doing something with it and essentially a bunch out output bits."}
{"prompt": "How can we use machine learning to crack the circuit input in Pwn Adventure 3?", "completion": "Isn\u2019t that something where machine learning can be really good at? But in order to do some machine learning, we need a lot of training data. So I modified the proxy to inject random SetCircuitInput packets in a loop and in the response parser I look at what the server sends us, extract the input state along with the output bits, and write it to a file. Now I just have to trigger sending those packets and we can see how essentially the circuit input is brute-forced. These are all random input attempts and it looks super cool."}
{"prompt": "What is a function pointer and how can it be used in an exploit strategy?", "completion": "In this video we are going to write a simple tool\u00a0 in python, to assist us coming up with an exploit strategy for the sudo heap corruption. Our problem\u00a0 is that we have a simple overflow into other data of the heap, and we need to figure out if there\u00a0 is any interesting data that we can overwrite. And very useful and powerful would be\u00a0 a function pointer. A function pointer is just an address, that some other code uses\u00a0 for a function call. So if we overwrite that, we would be able to redirect code execution.\u00a0 So how can we figure out if that is the case for sudo, and would it be a feasible\u00a0 exploit strategy too? Let\u2019s find out."}
{"prompt": "What is a potential weakness of the plan to identify function pointers on the heap?", "completion": "So my idea how to do that is very basic. It\u2019s\u00a0 actually not perfect it has a major weakness, but more on that later. For\u00a0 now, here is the rough plan. From the virtual memory map we\u00a0 know what area contains code. All the areas that have the executable flag set.\u00a0 So we can search the heap for addresses in that range. if we find such an address, it could be a\u00a0 function pointer. Once we identified such a case, we could check if this address comes after the\u00a0 buffer we can overflow, so we can overflow this address. And we can combine this with the first\u00a0 idea from last video, we could write a tool that brute forces different heap layouts, hoping\u00a0 that function pointers end up after our buffer."}
{"prompt": "What command can be used to create a binary data dump from the start to the end of the heap?", "completion": "Here I\u2019m back in gdb with the gef gdb extensions.\u00a0 First I go to where the overflow happens and I execute a few loop rounds. So now we have written\u00a0 some data into our buffer. Looking at the virtual memory map with vmmap, we can see where the heap\u00a0 is. And then we can create a binary data dump from the start to the end of the heap. I write this\u00a0 dump into this heap file so we can write some code to find function pointers in it. But to\u00a0 find possible function pointers, first we need to know all address ranges with executable code.\u00a0 So I also copy the complete virtual memory map,"}
{"prompt": "How does the script loop through the memory map to find function pointers?", "completion": "put it into a new python script and I\u00a0 write a first loop going over each line. If we have readable and executable memory, this\u00a0 memory area probably is code. So we split this line into the individual parts and we get start,\u00a0 end, size, and other stuff we don\u2019t really care. These values are in hex, so I convert them to\u00a0 an integer and add them to this memory map list. Next we can open the binary heap dump and\u00a0 read it all Into the heap variable. Next we can create a loop that goes over that data,\u00a0 by using a counter variable that starts at 0,"}
{"prompt": "What is the purpose of counting in 8 bytes and extracting 8 bytes in the script?", "completion": "up to the length of the whole data, and counts\u00a0 up in bytes of 8. The file obviously starts at offset 0, but the real heap address starts at\u00a0 55555f0000. So we can also calculate here the current real heap address by adding the\u00a0 start address. And then for each offset, we are extracting a range of 8 bytes. Why counting\u00a0 in 8 bytes and extracting 8 bytes? Well we have here a 64bit binary and system, so addresses would\u00a0 be 8 byte. And they should be 8 byte aligned. We then convert these 8 bytes to an integer.\u00a0 And then for each integer we extracted from the memory we can loop over the memory list\u00a0 of executable memory and we can check if that integer is in the range of this particular\u00a0 memory range. If that is the case this address points into executable memory! And we can\u00a0 print it. This is likely a function pointer."}
{"prompt": "What is the address of the buffer that can be overflowed?", "completion": "Also we know where our buffer that we overflow\u00a0 starts. It was at 6131e0. So if we reach that heap address, we also print that information.\u00a0 Now we can run our script, and look at that! We get a collection of addresses that point into\u00a0 executable memory. And also where our buffer we can overflow is. Unfortunately it is at the end.\u00a0 So right now we couldn\u2019t overflow data into any of these addresses. But maybe by playing with the\u00a0 argument lengths and other data that can influence the heap, we can find a configuration where our\u00a0 buffer is placed before some of these addresses."}
{"prompt": "What is a method to determine which address caused a crash when overwriting multiple possible function addresses?", "completion": "But before we explore that further, I\u00a0 want to check if any of those addresses are actually being used and called! Just\u00a0 to see if that idea would be feasible. And to do that I simply overwrite them with\u00a0 an invalida address, and let the program run and see if it crashes. I use the script to quickly\u00a0 generate the commands to overwrite each possible function address with a unique value. This way if\u00a0 we get a crash, we know which one caused a crash. Now, I create a minimal test case that doesn\u2019t\u00a0 cause any overflows, because I don\u2019t want to crash from a side effect of the overflow before we get a\u00a0 chance to execute one of these function pointers."}
{"prompt": "How is the function pointer 4f4f4f4 called after the overflow?", "completion": "I set a breakpoint in the overflow loop,\u00a0 run the binary with the minimal testcase. Overwrite the potential function pointers.\u00a0 Let\u2019s assume our overflow overwrote them. Delete the breakpoint, and continue. BOOM! We crashed. And look at rip. So this function pointer with 4f4f4f4 is called\u00a0 AFTER our overflow. So if we would manage to get our buffer right before this address we could\u00a0 overwrite it and redirect code execution! Just for curiosity, what is this function pointer? If we type bt, we can see the backtrace, so all\u00a0 the function calls that lead here. And we came from rbfind. If we type \u201cup\u201d, we go up the call\u00a0 stack into rbfind, and our debug build shows us the line. So apparently we are executing\u00a0 the compar function on a tree structure."}
{"prompt": "What is the name of the function pointer that can be overwritten with a heap overflow?", "completion": "Print tree shows that this memory on the heap\u00a0 is a rbtree struct. rb probably means red black tree. HEY WOW, COMPUTER SCIENCE CLASS! RED BLACK\u00a0 TREES IN THE WILD! WHO SAID THEORETICAL COMPUTER SCIENCE IS USELESS???! Anyway. With p *tree we\u00a0 can also dereference that pointer and print the tree struct. And we can see that this tree struct\u00a0 contains a compar variable, that is a function. So if we find a way to put our buffer before this\u00a0 buffer, we could overwrite this pointer. Awesome! This function pointer is cool, but it might not\u00a0 be the only useful function pointer. we can do the whole thing again, but DO NOT overwrite the one\u00a0 we know. Then we might crash in a new place. Set breakpiint in overflow loop, restart the binary.\u00a0 Overwrite the function pointers except the one we know works. Delete breakpoints and continue. BOOM!\u00a0 We crash again! This time its 43434343. Again with bt we can look at the call graph, and apparently\u00a0 we came from display_lecture. Up again to see the causing code line, it\u2019s this call sudo_conv.\u00a0 So this also contains a function pointer."}
{"prompt": "What code is used to check if an unused function pointer is null before calling it?", "completion": "This is awesome we have a potential second\u00a0 function pointer we could overwrite. We can repeat this whole process again, but\u00a0 it seems like we don\u2019t crash anywhere else. More candidates would of course\u00a0 be better, but I\u2019m also satisfied, we could try to move forward\u00a0 with the two we found. That is already very helpful for us. BUT\u00a0 the attentive viewer might immediately have noticed that this is not a perfect\u00a0 method to find potential function pointers. Actually the program might have a lot more\u00a0 function pointers that might be even better for us. But when they are not set by default, we will\u00a0 miss them. Oftentimes unused function poitners are null by default, and then there is code that\u00a0 checks that, before calling it. So there might be more or even better options to overwrite, but the\u00a0 method of finding function pointers that we used,"}
{"prompt": "What strategies could be used to find function pointers on the heap?", "completion": "would of course not detect those. But ultimately\u00a0 it\u2019s an engineering problem. For example we could write more automation to bruteforce ALL values\u00a0 on the heap to find those. Might run for a while, but what it could find could be very useful. There\u00a0 are probably also other strategies, for example we could try to find any function pointer in the\u00a0 C code and add logging information about where it\u2019s located on the heap, or maybe even some kind\u00a0 of compiler instrumentation to find all function pointers. So obviously what we have is not a\u00a0 perfect method. But I thought it\u2019s a clever and very easy one. It might be enough! Though I have\u00a0 never tried this before, and this might not help us at all. But I give it a shot. So next video\u00a0 we will tackle the second problem. Our function pointers are currently not placed after our\u00a0 buffer. So we cannot overflow them. Which means we need to develop a tool that takes some input\u00a0 we know influence the heap, and let it bruteforce values. Hopefully we find a heap layout where\u00a0 those function pointers can be used. I\u2019m excited."}
{"prompt": "What is Intel's Project Circuit Breaker and how does it relate to CPU vulnerabilities?", "completion": "In today's video we will learn how to research\u00a0 vulnerabilities in CPUs. Specifically side-channel vulnerabilities. You might have read about them\u00a0 in the news as they keep popping up in any and all CPUs. But I haven\u2019t really looked at the\u00a0 technical details of these issues before, because they always seemed so complex. BUT then Intel\u00a0 contacted me and asked if I could showcase some Intel CPU hacks. So hats off to Intel and their\u00a0 project circuit breaker for sponsoring this video, they belong now to one of the very few\u00a0 companies who sponsor a video talking about vulnerabilities in their own products. That\u2019s\u00a0 still crazy to me, times really are changing."}
{"prompt": "How can we measure memory access time in CPU cycles?", "completion": "Anyway, let me share with you how you could\u00a0 find vulnerabilities in CPUs yourself. Sorry, before we can get to the hacking part, we\u00a0 have to understand two concepts first. Caching, and speculative execution. So let\u2019s start with caching. You probably know that inside of the CPU\u00a0 we have caches, they are used to cache memory access to make reads and writes super fast.\u00a0 But I have never really played around with caches, so I wrote this code. This program is written in C\u00a0 and it measures memory access time in CPU cycles."}
{"prompt": "What is the purpose of the rdtscp() function?", "completion": "So here you can see a list of memory accesses,\u00a0 but this particular access was super fast. Every memory access took hundreds of\u00a0 cycles, but this one took less than 100. The reason for that is because this\u00a0 particular memory was already in the cache, while the other data was not. You can see here why\u00a0 it can be important to optimize your code around cache access, because if you don\u2019t, your\u00a0 code could be, like here, 3-4 times slower. Anyway. Let\u2019s have a bit closer look into the code\u00a0 of my test program. First of all, this function here. rdtscp(). As you can see, there is actually\u00a0 some inline assembly. But it\u2019s short. It executes the instruction rdtscp. So what does that do?"}
{"prompt": "What is the page size for Intel CPUs?", "completion": "Here is an Intel technical paper called \u201cHow to Benchmark Code Execution Times\u00a0 on Intel Instruction Set Architectures\u201d, and in there Intel explains how you can use the\u00a0 rdtscp instruction to benchmark your code. So to measure how fast or slow your code is. And so the\u00a0 CPU is actually counting up a timer each cycle, and this instruction simply gets the\u00a0 current amount of CPU cycles into the eax and edx registers. So this function simply\u00a0 returns that current value. Basically a timer. But now to the main code. First we allocate\u00a0 a big chunk of memory. 256 times 4096 bytes. And overwrite everything with null. In\u00a0 case you wonder, no, these values here are not random, they have a reason. 4096 bytes is actually\u00a0 the page size for Intel CPUs. A page is like the smallest amount of memory you can deal with. If\u00a0 you want to read just 4 bytes from some address,"}
{"prompt": "What specific Intel assembly instructions are used to flush loaded memory out of the cache?", "completion": "the CPU will actually load the complete 4096\u00a0 bytes page where this address belongs to. So we basically have a big memory array with 256 pages. Ok. After that we have a bit more magic code, these are intel specific C functions, but\u00a0 they are basically also just wrappers around specific intel assembly instructions. Here on\u00a0 this site you can also look at the documentation and description of these functions in more\u00a0 detail, if you want. But basically they just help us to make sure that we flush all loaded\u00a0 memory out of the cache. So after this loop,"}
{"prompt": "What is the difference between the time measurement taken before and after accessing a memory page?", "completion": "the memory we allocated only exists in RAM, it\u2019s\u00a0 not inside of any internal CPU cache anymore. But now look what we do afterwards. Here we\u00a0 write 0xff into some memory. Now you know 4096 is the page size, so essentially\u00a0 we write 0xff into the 42th page. And now comes our access measurement code. We loop over all 256 pages, and for each page we take the current time, then we access\u00a0 the memory by incrementing it. And right afterwards we take another time measurement. The\u00a0 difference, so how long, how many cycles it took to access this memory page, is now compared to a\u00a0 previous value. If access was faster than before we remember the newest lowest time and the\u00a0 current page number. In the end we want to find the page with the shortest access time."}
{"prompt": "What are the effects of loading a page into the CPU cache?", "completion": "And then at the end of this loop we simply print the page that was accessed the\u00a0 fastest. And there is no surprise, the 42th page access was super fast! Because,\u00a0 before we took the measurement, we loaded this page into the CPU cache, by writing to it. Awesome, we just saw the impact CPU caches can have and how we can measure it. And\u00a0 that will become super important soon. But let\u2019s quickly go back to the \u201cHow to Benchmark\u00a0 Code Execution Times\u201d whitepaper from Intel, because I just noticed something interesting\u00a0 in there. They quote here a sentence from the big Intel instruction manual, which is\u00a0 a perfect segway into the second topic."}
{"prompt": "What is the recommended technique for avoiding out-of-order execution of instructions when using the RDTSCP instruction?", "completion": "\u201cThe RDTSCP instruction waits until all\u00a0 previous instructions have been executed before reading the counter. However, subsequent instructions may begin execution before the read operation is performed\u201d Huh?! Instructions coming AFTER the\u00a0 rdtscp instruction, might actually be executed by the CPU BEFORE the\u00a0 rdtscp instruction is finished? This could mess with the accurate time\u00a0 measurement, that\u2019s why intel mentions it here. The instruction waits until previous instructions\u00a0 have been executed, so they recommend to basically call it twice. this \u201cimplements a barrier to\u00a0 avoid out-of-order execution of the instructions\u201d."}
{"prompt": "What is out-of-order execution, and how does it impact the performance of Intel CPUs?", "completion": "Out of order execution. This is where CPUs do\u00a0 some really crazy stuff to run faster and faster. Maybe you have heard of CPU pipelining before.\u00a0 Basically every instruction requires multiple CPU cycles to execute. I found this a bit\u00a0 older graphics from 2008 about the Intel processor pipeline. So first an instruction is\u00a0 fetched/loaded from memory, then the instruction is decoded in the silicon, and then there is\u00a0 more. It also depends on what the instruction does. But the point is, instead of doing these\u00a0 steps for each instruction after another,"}
{"prompt": "How does out-of-order execution differ from the basic pipelining concept in modern CPUs?", "completion": "you can pipeline them. Meaning the part of the CPU\u00a0 that is responsible for fetching the instruction can already work on the next one, even though the\u00a0 previous instruction isn\u2019t fully completed yet. Sounds like a simple optimization, but actually\u00a0 there are lots of challenges. For example when you have a conditional jump (an if-case). Do\u00a0 you execute these or these instructions in the pipeline? So the CPU might mispredict\u00a0 what to pipeline and it has to throw away the instructions when it realizes it. And here is\u00a0 where it gets more complicated. The intel graphics I showed you is so old, because this basic\u00a0 pipelining concept is kinda outdated. Today's state-of-the-art CPU optimizations go a huge step\u00a0 forward and it\u2019s called Out-of-order execution."}
{"prompt": "What is the assembly code used to increment a loop variable, as seen in the video transcript?", "completion": "The basic idea is, not every instruction depends\u00a0 on the previous one. For example this loop. We have a for-loop incrementing i, and it also\u00a0 increments the global variable a. In the assembly code you can see it loads a into eax, adds 1 and\u00a0 writes it back. And for the i loop variable it just executes memory add directly on the address. As you can see, the assembly code is sequential, first it increments a and then increments i. But\u00a0 they are independent, the order doesn\u2019t matter. Incrementing i first, and then a,\u00a0 would have exactly the same result."}
{"prompt": "What is the concept of \u201cspeculative execution\u201d and how does it work?", "completion": "And now think, what if the i variable was already\u00a0 in the cache, but the global variable a was not. Now we would have to wait ages here, until this\u00a0 code loaded the memory from RAM, even though the following code doesn\u2019t really depend on it. So\u2026 why not execute the increment of i, as well as the compare and the conditional jump, while we\u00a0 wait for the memory load from RAM. Stuff could go wrong when we do that. Maybe that code has a bug\u00a0 or tries to access something it cannot access. OR, in this case we have a conditional jump. The\u00a0 CPU might guess if it continues execution here or here. And that\u2019s why it is called \u201cspeculative\u00a0 execution\u201d. The CPU just speculates a bit of the code that might run next, and start executing it\u00a0 in parallel. And if that code had a bug and caused an error, or it predicted the jump wrong, it would\u00a0 throw away anything it speculatively executed."}
{"prompt": "How does Intel CPUs achieve high speeds?", "completion": "And the program would run normal slow. But in\u00a0 our example, everything was fine with that code, and so when that first instruction is finally done\u00a0 loading the memory, we can bring the speculative results from the \u201cshadow world\u201d over into the real\u00a0 world, and overall the code completed very fast. So by executing instructions out of order,\u00a0 we could get a really really fast CPU. And this is exactly what modern Intel\u00a0 CPUs do to achieve the speeds we want. So to summarize, we just learned about\u00a0 two concepts. The first one was caching,"}
{"prompt": "What is speculative execution and how can it be measured?", "completion": "so memory pages are loaded from RAM into CPU\u00a0 caches when we access them in our code. And we can measure that. We can measure if a page\u00a0 was loaded into the cache or not. By looking at how much time it takes to access these pages. And the second puzzle piece we need, is the idea of speculative execution, the fact that the CPU\u00a0 might execute instructions in a different order. We can measure if a page was loaded into a cache. And the CPU might execute\u00a0 instructions out of order. We can check if a page is loaded in the cache."}
{"prompt": "What is the concept of side-channel attacks, and how can they be exploited?", "completion": "And the CPU might speculate on some instructions. We can check if a page is present in the cache, And the CPU might have speculatively executed some bad code. Huh. What if we get the CPU to speculatively access\u00a0 some data it shouldn\u2019t be allowed to access. Of course it will throw away any execution\u00a0 result, because you cannot access it, but by that time it might have loaded\u00a0 something into the cache already. And we could measure? Is this a side-effect,\u00a0 a side-channel, we could measure and exploit?"}
{"prompt": "What is the difference in latency between loading data from the L1 cache and from main memory?", "completion": "Of course I\u2019m not the first one with this\u00a0 idea. Check this out. Anders Fogh wrote this blog post in july 2017. \u201cNegative Result:\u00a0 Reading Kernel Memory From User Mode\u201d You are probably aware of the various CPU issues.\u00a0 There were tons of news about them. But keep in mind, this is a blog post from BEFORE the\u00a0 world learned about this new class of CPU vulnerabilities. It\u2019s incredibly fascinating to\u00a0 look back at this now. In this article Anders first introduces the different layers of CPU\u00a0 caches, down to the RAM. And explains that \u201cThe latency of a data load in\u00a0 the L1 cache is around 5 clock cycles whereas a load from main memory\u00a0 is typically around 200 clock cycles.\u201d After that he introduces\u00a0 speculative execution. And even references a talk he gave at the\u00a0 Ruhr University in Bochum in 2017,"}
{"prompt": "What is Anders Fogh's attack idea?", "completion": "explaining a lot of details about the intel CPU.\u00a0 The people sitting here probably didn\u2019t realize that this is cutting-edge research that is\u00a0 about to \u201cexplode\u201d roughly a year later. And now we come to Anders attack\u00a0 idea: \u201cAbusing speculative execution\u201d. Let\u2019s say we have two moves, one tries to move\u00a0 a kernel address and the other move tries to move a normal address. This one doesn\u2019t work,\u00a0 you cannot access kernel memory and this would throw an exception. But here is how Anders thinks\u00a0 about it in terms of the out-of-order execution:"}
{"prompt": "What is the purpose of the masking instruction in the example code?", "completion": "\u201cIf there are no dependencies, both will execute\u00a0 simultaneous. And while the second will never get it\u2019s result committed to the registers\u00a0 because it\u2019ll be discarded when the firsts mov instruction causes an interrupt to be thrown.\u00a0 However, the second instruction will still execute speculatively and it may change the [internal]\u00a0 state of the CPU in a way that we can detect it. So he constructs this example here. Three\u00a0 lines of assembly. You move, or load, a value from a kernel address, mask it\u00a0 to only get one bit. And then access a memory page. To understand what is special\u00a0 about this example, you have to imagine the two worlds, the real world and the shadow\u00a0 world (or speculative world). In the real world you cannot access the kernel address. This code\u00a0 will segfault. But before we know this sefaults,"}
{"prompt": "What are the potential effects of transient execution on the CPU's cache?", "completion": "the CPU might execute that code in parallel\u00a0 in the shadow world. It maybe loads that kernel value and uses that value to access some\u00a0 memory. And this could maybe affect the cache? \u201cIf the last two instructions are\u00a0 executed speculatively the address loaded differs depending on the\u00a0 value loaded from the kerneladdress and thus the address loaded into the cache\u00a0 may cause different cache lines to be loaded.\u201d So even if this code segfaults in the real world, it might already be to late. And in the\u00a0 speculative world this code was executed,"}
{"prompt": "What experiments did Anders Fogh conduct to measure illegal reading of kernel mode memory?", "completion": "loaded a value in the cache, and we can measure\u00a0 it. And that was a really crazy idea Anders had, so he started experimenting with\u00a0 that idea but ultimately it failed. \u201cit seems likely [...] the illegal reading of\u00a0 kernel mode memory, but do not copy the result into the reorder buffer. So at this point my\u00a0 experiment is failed and thus the negative result. While I did set out to read kernel mode without\u00a0 privileges and that produced a negative result, I do feel like I opened a Pandora\u2019s box.\u201d And ohh yes he did. He was so close! But since\u00a0 then a lot has happened. Today we know about this new class of CPU vulnerabilities.\u00a0 And in this video I want to highlight one particular research in more detail. And\u00a0 that is RIDL. \u201cRIDL: Rogue In-Flight Data Load\u201d."}
{"prompt": "What is Sebastian \u00d6sterlund's background in system security?", "completion": "So let me introduce you to Sebastian \u00d6sterlund, Co-author of the RIDL paper who will tell\u00a0 us the story of how RIDL was discovered. \u201cI\u2019m Sebastian \u00d6sterlund, a phd student\u00a0 at vusec in Amsterdam. And one of the co-author of the RIDL paper. My background\u00a0 is operating system security, side channels, fuzzing, whatever. System security in essence.\u201c Most of the time when people explain\u00a0 vulnerabilities, and that is often the case with research papers, it only covers and explains\u00a0 that particular vulnerability. And those are complex topics. So for an outsider like me, it\u00a0 is really helpful to understand what was the path that lead to a discovery like this. What\u00a0 were the building blocks to build this."}
{"prompt": "What paper by Giorgi was one of the co-authors on RIDL?", "completion": "And so I wanted to go back to the\u00a0 beginning, how did all of this happen. \u201cSo I think this blog post by\u00a0 anders voigt was one of the starting points really. It had negative results blog posts about speculative execution things.\u00a0 And then other people started looking into it.\u201d \u201cAnd then there was another\u00a0 paper by Giorgi. Is one of the co-authors on ridl. So he had like this negative\u00a0 results paper called speculose. I think he was missing one small step why it\u00a0 wasn\u2019t working basically. \u201c As you can see, the world was about\u00a0 to discover this new class of issues."}
{"prompt": "What methods did researchers use to discover MDS?", "completion": "Thanks to people like Anders and Giorgi who shared\u00a0 their research ideas and results, even though they \u201cfailed\u201d. They had a feeling, there must\u00a0 be more. And so sharing the negative results, the failed attempts, allowed other researchers\u00a0 to build on top of that and ultimately discover MDS. This is textbook science. Collaboratively\u00a0 the world started to figure this out. In the moment, not so amazing for intel\u00a0 though. Oops. But it\u2019s tough, how could hardware engineers predict something like this\u00a0 years ago when they designed these CPUs. When it took this much scientific collaborations\u00a0 of security researchers to figure this out."}
{"prompt": "What weaknesses in Intel CPU microarchitecture were known before the discovery of RIDL?", "completion": "Anyway. Lots of challenges and new\u00a0 developments ahead for intel now. But RIDL was not the first issue that was\u00a0 published. if we look at the timeline, then at the point of the RIDL discovery,\u00a0 there were already other known MDS issues. So the researchers like Sebastian had\u00a0 already a much better understanding of the Intel CPU microarchitecture and were able to dig\u00a0 deeper. For example one of the known weaknesses at the time was Foreshadow and Foreshadow NG. And\u00a0 a colleague of Sebastian played around with that."}
{"prompt": "What is the race condition that Stephan was looking at to see if he could leak information across processes?", "completion": "\u201cOne of my colleagues stephan was actually\u00a0 working on something. It was looking at foreshadow NG stuff and see how it interacts with like\u00a0 this tagged TLB entries that are tagged by process identifiers. And see if you can\u00a0 somehow circumvent that and leak stuff across processes. Because you have\u00a0 these checks that go on in parallel while it is resolving virtual addresses\u00a0 and there is like a race condition. No worries. I didn\u2019t understand a\u00a0 word either. But it doesn\u2019t matter, because the only thing you should\u00a0 take away from this is that,"}
{"prompt": "What techniques do Sebastian and his colleagues use to test their ideas for CPU attacks?", "completion": "clearly Sebastian and his colleagues\u00a0 know a lot more about CPUs now, and they had many new ideas to mess around\u00a0 with. ideas for attacks they wanted to try out. And Stephan wrote a test program. It\u2019s one out\u00a0 of many they have written, you have to imagine, they always come up with weird ideas to test. And\u00a0 this is the story of one of those weird ideas. \u201cHe had this program written to do it. And in the\u00a0 end it had a bug. So it was creating two threads and they were going to have a shared page. So\u00a0 they have the same virtual and physical address."}
{"prompt": "What is the code in the main function of the program doing?", "completion": "But he mapped in the page after creating the\u00a0 threads. So one process had like a null-pointer. And the other had valid memory. So we were leaking\u00a0 this secret value that was only one thread. And we looked into that. Wait it is not even\u00a0 using a valid virtual address. It is just deferencing a nullpointer.\u00a0 How can this happen? It\u2019s insane.\u201d Sebastian is saying threads here, but I think\u00a0 he speaks \u201cIntel language\u201d. He means processes. And you see that when you have a look at this\u00a0 code. In the main function it calls fork(), so it creates a child process and a parent process.\u00a0 So let\u2019s see what the two processes do. The child,"}
{"prompt": "What value is written to the secret memory by the victim process?", "completion": "or victim process, is very simple. It simply\u00a0 has a while loop that writes a secret value 0x42 into this secret memory. And now we look at the parent. I hope this code looks familiar. Compare this to the\u00a0 cache testing code from the start of the video. First we create a big buffer with 256\u00a0 pages. We clear the buffer and then we flush the pages out of the cache. At the end we can see a loop going over the 256 pages measuring the\u00a0 access time. Like in our cache test. The only difference is the magical part\u00a0 in between. This is the RIDL attack! But they didn\u2019t know it yet. They tried to\u00a0 test something else but had a bug here."}
{"prompt": "How can we measure the byte loaded from the secret variable in the code?", "completion": "So the code here is loading a byte from the\u00a0 secret variable, and uses the byte as an offset into the big buffer. So this will load one of\u00a0 the 256 pages. So to figure out what the byte was we loaded, we can measure the access times.\u00a0 The page with the shortest access time tells us what byte was loaded here. Here is the bug. Sebastian said they wanted to map the same\u00a0 memory in the child and parent process. That\u2019s why both processes access the secret.\u00a0 The child writes to the secret, and the parent reads a byte from secret. BUT the memory is\u00a0 only allocated in the child. In the parent,"}
{"prompt": "What happens when a program receives a SEGFAULT and the SEGFAULT handler is set up?", "completion": "secret is still a null pointer. If we run this program in a debugger like GDB, we will get a SEGFAULT. we can see the register is 0,\u00a0 so it tried to load a value from a null-pointer. But stephan didn\u2019t notice that. BECAUSE of\u00a0 this code at the start of the parent code. Here they setup a SEGFAULT handler. So\u00a0 when the process receives a segfault, this handler code is executed, and this will\u00a0 simply update the RIP, the instruction pointer. Basically this is skipping the exception.\u00a0 Little \u201coops\u201d, but continues the program."}
{"prompt": "What does the code in the video do?", "completion": "That\u2019s why when you really run this program, the\u00a0 parent process doesn\u2019t crash. There are constantly segfaults happening here, but the handler\u00a0 ignores them. So they didn\u2019t notice their bug. So what is happening now? This code executes\u00a0 100.000 loops. In each loop it flushes the buffer, and then tries to read a byte from a\u00a0 null-pointer. This of course causes a segfault. In the REAL WORLD. But remember the shadow world,\u00a0 the speculative execution world. The idea is that here the CPU executed this code speculatively.\u00a0 And used some byte, loading some page into the cache. Of course eventually the CPU realizes it\u00a0 cannot access the null-pointer, it will segfault,"}
{"prompt": "How was the victim child process used to detect transient execution vulnerabilities?", "completion": "the segfault handler ignores that error and\u00a0 recovers execution, but then we come here. We measure the cache access times of the pages.\u00a0 And if access to a page took less than 80 cycles, it must have been in the cache. So we increment\u00a0 a counter for that page and remember that. If we let it run for a while, and keep in\u00a0 mind, in parallel the victim child process always keeps writing 0x42. This is the\u00a0 result. Here we are printing how often certain pages appear to be in the cache. why the f\u2019 was 42 loaded in the cache."}
{"prompt": "What is RIDL and how did it come to be discovered?", "completion": "They just discovered an unexpected\u00a0 behavior, what they would soon call \u201cRIDL\u201d. So because of a coding bug, doing something\u00a0 weird that shouldn\u2019t be possible, reading a byte from a null-pointer, they leaked a value\u00a0 from another process. They didn\u2019t know why. It\u2019s kind of a weird process with things like\u00a0 this. You start with something that works, and then try to work back.\u00a0 How does it actually work. Which I guess is very like\u00a0 experimental science, I guess. I love it. It\u2019s almost like physics in the\u00a0 1700s. Where you make some weird observations and experiments at home and work your\u00a0 way backwards to figure out the science."}
{"prompt": "What is the purpose of the Line Fill Buffer in Intel Skylake microarchitecture?", "completion": "Then you can start reading these CPU architecture\u00a0 manuals. And all of the sudden we saw the intel manual mentioning \u201cline fill buffer\u201d. It was just\u00a0 mentioned one-off somewhere. And then you start looking in patents, to basically reverse engineer,\u00a0 because this is not public information. Then stephan spent insane amount of time to create this\u00a0 whole diagram for the skylake microarchitecture. So yeah, this graphics here, which looks so\u00a0 \u201cofficial\u201d, is something they reverse engineered. They learned about line fill\u00a0 buffers from the intel manual,"}
{"prompt": "How can non-existing addresses be accessed to cause a value from the line-fill-buffer to be used during speculative execution?", "completion": "but how this all works they had to piece\u00a0 together the puzzle from reading Intel patents. So these line fill buffers are internal CPU\u00a0 buffers. Like caches, they temporarily hold some data, and it\u2019s used to improve memory performance.\u00a0 And they realized that, accessing a non-existing address, caused a value from the line-fill-buffer\u00a0 to be used during speculative execution. While code was executed out of order, it used this value\u00a0 from the buffer, to load a page into the cache, and this is a side-effect that can be\u00a0 meassured. To figure out what the byte was."}
{"prompt": "What is the general pattern followed by CPU vulnerabilities like RIDL and Foreshadow?", "completion": "This is the story of RIDL. Of course this is complex stuff and there\u00a0 are a lot of details I brushed over. But I feel like I finally cracked the\u00a0 secret of finding these CPU vulnerabilities. If you look at all of them, they\u00a0 all kinda follow the same pattern. For example, let's compare RIDL and Foreshadow. 1. Prepare a buffer with some pages\u00a0 and flush them out of the cache. 2. do something weird that is executed in the\u00a0 shadow world, the speculative execution world, that might have the side-effect of loading\u00a0 a specific page into the cache. And then 3. measure the cache access times,\u00a0 to figure out what value you leaked."}
{"prompt": "What techniques can be used to adapt vulnerabilities in Intel CPUs to other CPUs and architectures?", "completion": "Absolutely fascinating. You can really\u00a0 see how this initial idea from the failed research blog post and paper\u00a0 grew into really clever techniques. And of course this goes beyond intel CPUs.\u00a0 The technical details might be different, but the same underlying ideas and techniques can be adapted to other CPUs and even\u00a0 entirely different architectures! Thanks so much Sebastian and your colleagues\u00a0 for sharing this story. I hope I was able to do it justice. And thanks again Intel for being\u00a0 brave in sponsoring a video like this. It still blows my mind - Intel wants more people to\u00a0 learn about vulnerabilities they had in their products. That is truly a forward-thinking\u00a0 security strategy and shows confidence."}
{"prompt": "How many characters can be read into the buffer by vuln?", "completion": "Two episodes ago we did our first format string exploit and in the last video we had a look at how dynamically linking libraries to a binary works - basically how can a program call functions from libc. And we also had an idea how to abuse this, when we want to redirect code execution. In this video we will use this technique to exploit format level 4 from exploit exercises protostar. First let\u2019s have a look at the code. The main function calls vuln. Vuln reads up to 512 characters from standard input into the buffer."}
{"prompt": "What technique did the speaker use to exploit the function vuln?", "completion": "And then uses printf to print the buffer. We also see immediatly that the buffer is places as the first parameter of printf - and that is the format parameter. After the printf there is a call to exit(). This means that this function vuln will never return. It will perform the syscall exit to the kernel, which will quit this process. So if we would overwrite the return pointer of this function, we would never return and we could not exploit it. So we use the technique from the last video to overwrite the GOT entry for exit, with the address for hello."}
{"prompt": "What is the process for verifying if there is a format string vulnerability present?", "completion": "That instead of exit we execute hello at the end. Let\u2019s get everything ready. I use again vmware to run the protostar image and connect to it via ssh with putty. Open one window for the binary. And another window where we can write the exploit. We also might want to import the struct module right away, because we need that to convert integers to binary strings. Let\u2019s start by first verifying that we have a format string vulnerability. We can just specify some format characters and see if they are turned into numbers."}
{"prompt": "How do you copy an address from one window to the other?", "completion": "Yup! That works. So to make this exploit work we have to figure out a few addresses. Let\u2019s get the address of the hello function with \u201cx\u201d examine hello. Here it is. Let\u2019s copy that into our exploit script. You can do that easily by simply highlighting the area you want to copy and then perform a mouse right click in the other window. Next let\u2019s try to find the global offset table where we want to write this HELLO address to. Disassemble main. Ok. Right. I forgot. We call vuln. So disassemble vuln."}
{"prompt": "How can we simulate the overwriting of the global offset table entry in the vuln program?", "completion": "And at the bottom you can see the call to exit at the procedure linkage table ptl. Disassemble that address and we can now see the address that is referenced in this first instruction with the jump. That tries to reference the address of exit from glibc from there. So examine that address. And yup. That\u2019s the global offset table. Now we also store that table address in our script. Now let\u2019s set two breakpoints in vuln. One before the printf. And one after the printf. Next let\u2019s simulate by hand overwriting the got entry."}
{"prompt": "What value is used to overwrite the GOT entry?", "completion": "So we run the code. At the printf we then change the entry of exit in the global offset table to hello and continue to execute the exit at the end of vuln. Run. we enter some random input. First breakpoint. Now we are befoire the printf. Now let\u2019s overwrite the GOT entry. Let\u2019s check GOTagain. Now write set, in curly braces int, the address we want to write to and then the value we want to write. And now the entry for exit in the got has changed. Continue once. Now we are after the porintf. Just one instruction away from the call to exit."}
{"prompt": "How can we write a function to pad our string to 512 bytes?", "completion": "Next instruction. And disassemble and info registers. Yup, we are at the exit. So let\u2019s continue and see if we execute exit, or hello. Whoop. Ok. we executed hello. That worked. Now we just have to achieve this write with a format string and percentage n. Ok. Step one. Let\u2019s exit the debugger and let\u2019s find the string we enter on the stack by playing around with the format specifiers. We use our script to do those tests. So first we know the buffer is 512 bytes long. So let\u2019s write a function that pads our string to that length."}
{"prompt": "How can we print the first 4 values from the stack in the format4 exploit?", "completion": "So we simply append a certain number of characters to our string, where that number is 512 minus the length of the current string. Then we create a variable exploit and print that variable padded. And when we execute it we can see our exploit string and that it\u2019s padded to those 512 characters. So this will print the first 4 values from the stack. Yup seems to work. Now let\u2019s prepend some recognizable characters to the string and then try to see how far away our string is on the stack. Ha! Cool."}
{"prompt": "What can be used to write the number of printed characters to an address on the stack?", "completion": "Ok. Our string already starts with the 4th value. Now we can use the number dollar notation in the format string to specifically reference that offset. So 4 dollar after the percentage sign. That would attempt to reference the 4th parameter of printf instead of going through the parameters one after another. See, now all values are 41414141. I hope you remember that percentage n can be used to write the number of printed characters to an address on the stack. So we could replace our a characters with the address of the global offset table address to write to that value."}
{"prompt": "What is the purpose of using the struct.pack function in this exploit?", "completion": "Let\u2019s try it. We use struct to convert the integer address to a binary string. Struct. Pack. I. exit_plt. Yup, we seem to hit that address. Let\u2019s replace the percentage x with percentage n and see what that does in gdb. But first write the output of this script to a file so we can use it in gdb as input. Don\u2019t forget to set the breakpoints again. Run and pipe in the exploit string. And we hit the breakpoint. So now we are about to execute the printf. Let\u2019s check the GOT entry. Now let\u2019s execute the printf and let\u2019s check again."}
{"prompt": "How many characters do we need to print in order to reach the address of hello (hex 0x80484b4)?", "completion": "HA! We have overwritten GOT. with a fairly small number. If we now continue we will segfault in exit, because at this address is no function. So percentage n has sucessfully written the number of characters printed into the GOT table. Now all we gotta do is print enpugh characters so that we reach the number that is the address of hello. Mhmh\u2026 hex 0x80484b4. Damn\u2026 that\u2019s a big number. We have to print like over 134 MILLIOPn characters. Each character is a byte so we have to print like 128 megabyte of text?"}
{"prompt": "What is the maximum number of characters that can be written to the buffer?", "completion": "Will that work? Well, first of all we only have space for 512 characters in the buffer. So we can\u2019t simply write them all. But we can abuse printf format strings again to pad an output string to any size. Which allows us to write way more characters. Let\u2019s try that. Let\u2019s also change the number of ns down to only one. Ah. infact let\u2019s change it back to x, so we don\u2019t smash the table all the time and we can make sure we always hit the address. So let\u2019s pad this to to like 30 characters, to see if that works."}
{"prompt": "How many characters is the text padded to when the exploit is run?", "completion": "Oh and we must not forget to add another %x afterwards, which we will later replace with percentage n. Run it against the format4 binary. And yes. See all those spaces. Text got padded to 30 characters. Now le\u2019ts try that with 134 million. Okay. seems to work. It\u2019s printing and printing and printing. All those millions of spaces. This taks aaaages. And we arrived at the end. Let\u2019s try that in gdb again with percentage n. Urgh man. This takes so long\u2026 :( Printing those hundret megabytes is just crazy."}
{"prompt": "How can we write the four bytes needed to overwrite the global offset table in two smaller writes?", "completion": "But it did change the global offset table pretty close to hello. We just would have to fiddle around a bit and adjust it exactly. But you know what? This sucks to print so many characters. Let\u2019s use a little trick. Let\u2019s use TWO shorter writes to achieve the same. The idea is that we could first write the lower two bytes with a much smaller value, and then perform another write at address +2 to write another small value to the higher bytes. Thus constructing the whole 4 byte through two writes. So let\u2019s try to write the lower two bytes first."}
{"prompt": "What value needs to be used as a padding to write the two lower bytes of 33972 into the GOT entry?", "completion": "Let\u2019s start with a padding like 30. Write the output again into the file. And run gdb with it as input. Ok, so with the padding of 30 we were able to write hex 2e, which is 46. Our goal is to write the two lower bytes so we want 84b4, which is 33972. Because we had a padding of 30, but we ended up at 46 we have to compensate for those 16 characters. So we substract 16 from it, so we want to put 33960 as a padding. And when we run it and look at the GOT entry, we can confirm that the two lower bytes are now 84b4."}
{"prompt": "How can we get a lower number when we can only increase the amount of characters?", "completion": "Now to address the two higher bytes we move our address by two forward. And perform another write. So let\u2019s add this address as well. So EXIT_PLT plus 2. This means that for the second write we want to address the fith element on the stack. And now we just have to figure out how many we need to write here. Let\u2019s try with 30 again. Ok. The lower two bytes now stay 84b4. Perfect. And the higher bytes are 84d2. But we want to get 0804. So how do we get a lower number if we can only increase the amount of characters?"}
{"prompt": "What is the value of the GOT entry that we want to write to?", "completion": "Well, in reality we don\u2019t only write two bytes, we always write 4 bytes, this means that also currently we screw up data that is stored behind our exit GOT entry. Now guess what happens if we write enough to increase the number such that the 3rd byte is 1 and the rest becomes 0 again. It doesn\u2019t matter for the GOT, because it will only see the other 4 bytes. So basically we overflow those two upper bytes so we can get there a lower value in. Now currently we have 84d2. And we want 0804. I mean. We actually want 10804."}
{"prompt": "How much padding did we need to add to the value we wrote at the address in order to get to 10804?", "completion": "And if we substract now the 84d2 from this we know how much we should write the get to 10804. So 8332. But that\u2019s hex, so that is 33586. And it already included the 30 padding. So we must not forget that. Now we might be done. Let\u2019s check. We write the output file. We run gdb. We break before the printf. This is how the table entry looks before. Now continue and examine the address again. Wh00p. We changed it. And that\u2019s the address of hello. So now continue and let the program run. BOOM. code execution redirected."}
{"prompt": "What is the purpose of the pwn.js JavaScript file included in the exploit?", "completion": "Now that we have a good basic understanding of webkit internals, let\u2019s improve on our knowledge by looking at the actual exploit from Linus. We already saw it executing perfectly on Safari in an earlier video, so this time let\u2019s just focus on the implementation. So the index.html simply has a link to pwn.html, and there we see a few javascript files being included. Ready, logging, utils, int64 and finally pwn.js. We will eventually learn about all their purposes, but I\u2019d say let\u2019s start with the pwn.js This is quite a long script, it has over 530 lines of code, and it does all the fancy stuff to get to arbitrary code execution."}
{"prompt": "What is the purpose of the addrofInternal and addrof functions in the script test.js?", "completion": "So it will take some work to understand the different steps. But let\u2019s start at the top and look for the actual vulnerability that is being exploited. [ad] This series on browser exploitation is supported by SSD Secure disclosure. Checkout the description for more information [/ad] I want to start by looking at the first two functions, addrofInternal and addrof and I copy them into a new script test.js. The comment here says addrof primitive, and what that means is super important, but I will get to that another time."}
{"prompt": "What steps are necessary to fix the error \"symbol not found\" when running the test.js file with JSC on a Mac?", "completion": "For now just accept that this function addrof is supposed to return the actual memory address of a javascript object. So we should be able to call addrof() with an object and that should give us the address in memory of it. We can quickly test it. Instead of running JSC as a javascript interpreter we can also pass the test.js file to it. Also if you run into this error, symbol not found, then in case of mac you need to set the Dynamic Loader framework path to the debug build directory. And then it works."}
{"prompt": "What Python library can be used to decode a float number into a 64 bit integer?", "completion": "here we get the output. A super weird float number. It looks weird but let\u2019s quickly decode it with python. We can use struct again, first we pack it back into a raw byte string and then instead of decoding it as a double we decode it as a 64bit integer, and then we display it as hex, there we go. That is the real address. We could even print describe() of this object before we call addrof, which is this debug function inside of JSC to let us get some memory info, and when we then execute that, we see that the address is correct."}
{"prompt": "What is the purpose of the AddrGetter() function in the addrofInternal function?", "completion": "So these two functions somehow were able to leak the memory address of this object. But how? The addrof function calls the addrofInternal function multiple times until the result of it is not an object and also not the double 13.37. Apparently linus had to wrap the addrofInternal because it sometimes fails. Don\u2019t know why, but this works. Well okay then. Anyway, this means the magic should happen in addrofInternal. It starts by creating an array with a single double 13.37. If we peak ahead at the return, we see that it calls AddrGetter(), which should return the first element of the array."}
{"prompt": "What is the special option for regular expressions that is relevant to the WebKit exploit?", "completion": "And so now the check in the wrapper makes sense. If it\u2019s still 13.37, then we try again. So somehow this first element of array should change into the address of the object. Anyway\u2026 we also have a regular expression object, reg, with the option y. The y option stands for \u201csticky\u201d which is a special option for how the regex should behave. Now if you remember, the bug description for this webkit exploit, you know that the bug happens because of an optimization error in the way RegEx matching is handled."}
{"prompt": "What is the purpose of the getarray() function in the exploit code?", "completion": "so this regex is obviously crucial. Next we see a function getarray, which just returns the array... and actually this seems like redundant code for me. Not sure why linus assigns the array to array like that, because the array never changes, so I remove that. In the same way, this comparison in here seems weird too. It takes the val and checks if it\u2019s null. But we always pass in something for val, so it should always be false\u2026 And actually from just testing it I notice that it\u2019s not even needed at all."}
{"prompt": "What purpose does the for loop in the addrgetter function serve?", "completion": "Can be empty. Maybe just left over from during testing and development. Anyway\u2026 this addrgetter function is actually called in this for-loop below, 100.000 times. And the comments says \u201cforce optimization\u201d and from my video about the JIT compiler, we know that this way we can force that this function is JIT optimized. The for loop in this function here is actually not doing anything, but serves a special purpose. From a commented exploit by saelo, about a similar issue, and an exploit linus got a lot of inspiration from, saelo does the same and has this comment: \u201c// Some code to avoid inlining\u2026\u201d."}
{"prompt": "What is the purpose of the Symbol.match function in the exploit code?", "completion": "The JIT compiler could also inline some functions for optimization, but if they are more complex like that, it can be avoided. I guess. However I also removed this loop as a test and it looks like the exploit still works. So that\u2019s probably just one of these pattern that you do it just to be 100% sure, but in this case also not needed. So this leaves us with this. It simply calls the match function on the regular expression and then returns the first element of the array. So the first thing I was really confused about was this weird Symbol.match thing."}
{"prompt": "What is the syntax for calling the match() function on a string using a regular expression?", "completion": "I have read a lot of javascript in my life but I have never seen that construct. But it turns out that this is actually just a standard thing for regular expressions. The mozilla developer docs writes: The symbol.match well-known symbol (\u201cwell-known\u2026 aha\u201d) specifies the matching of a regular expression against a string. This function is called by the String.prototype.match() method. Okay, so this is just fancy people javascript for calling match(). And I figured that you can also just write it the typical way of taking some string \u201cabc\u201d and then calling match() with the regular expression reg."}
{"prompt": "What optimizations does the JIT compiler make when returning the first element of a double array?", "completion": "So what this means is, this function simply calls a regular expression match and returns the first element of the array. And that code is jitted. So this is now compiled to machine code. And because we know the JIT compiler optimizes, we also can understand that because the JIT knows that the array is a double array, that it just returns a double, without checking if this is still really a double array. However this should not be a problem, because as soon as something would have side effects inside of that jitted code, it would be discarded,"}
{"prompt": "What type of elements are stored in the array when we add the 13.37 double to it?", "completion": "right? Well.. let\u2019s continue. Next we create a new javascript object, regexLastIndex and assign a function to the toString method. And here we then set the first element of the array to an object. Now this of course changes the array once executed. Remember the Javascriptcore internals video, when we played around with adding different types to an array? So when we use our debug environment again to check the type of the array with the 13.37 double, we see that it\u2019s an array with doubles. And in memory we can also find that element here."}
{"prompt": "What is the purpose of assigning an object with a toString function to the regex property lastIndex?", "completion": "This is the 13.37. Now if we modify the first element of the array and set it to an object, and describe the array again, it changed to an arrayWithContiguous. And if we look at the butterfly address now, we see that now the first element is a pointer to that object, somewhere else in memory. I guess you can slowly see where this is going. Now back to the exploit code. We then assign this object with our toString function to the regex property lastIndex. So at this point we just prepare this function that will set the first element of an array to our val, but it\u2019s not executed yet."}
{"prompt": "What is the purpose of the lastIndex property of regular expression instances?", "completion": "However if lastIndex would be accessed, maybe this toString is executed. The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match. So internally regex might read from this property to know where to start the next match. And well, javascript (or weakly typed programming languages) are fun, so instead if it being an integer now, it\u2019s now this object which has a tostring method that will do this array assignment. And now we trigger the bug."}
{"prompt": "How does the 'y' flag in a regular expression influence the search process?", "completion": "Now we just DO IT! We call AddrGetter again. And we know that addrGetter is now jitted optimized code. This machine code will now execute a regular expression match with our regular expression. BUT Something is different. Before when we were jitting that function, we hadn\u2019t modified the lastIndex property yet. But now we have. And remember the \u201cy\u201d for sticky in our regex? The sticky property reflects whether or not the search is sticky which means it (searches in strings only from the index indicated by the lastIndex property of this regular expression)"}
{"prompt": "What happens if the JavaScript engine does not bail out of the jitted code when assigning an object to the array?", "completion": "So the internal regex code now has to look at the lastIndex property, but it notices \u201coh that\u2019s not a number, that\u2019s an object, so let\u2019s try to convert this somehow, and let\u2019s execute toString() on it to see if we can get anything that looks like a number and this now triggered this assignment. The array now got updated and the first element set to our object val. And the bug happened. The javascript engine does not bail out of the jitted code. It thinks that the array didn\u2019t change and returns the first element of the array as if it were a double."}
{"prompt": "How many attempts does it take to trigger the bug when the environment variable JSC_reportDFGCompileTimes is set to true?", "completion": "But in fact it\u2019s a pointer to an object now. And when we return that, and print it, we leak the address of the object. Amazing, right? But let\u2019s go one layer deeper into the rabbit hole and have a closer look. From the webkit blog about the debugging stuff we learned about different environment variables for debugging and I decided to checkout \u201cJSC_reportDFGCompileTimes=true\u201d So this should tell us when something is optimized by DFG or FTL. I also add a print to the wrapper loop that keeps attempting to trigger the bug, to see how many attempts it takes."}
{"prompt": "What is the JSC_dumpSourceAtDFGTime function used for?", "completion": "And this is when I noticed that in the first attempt that failed, the addrgetter function is optimized twice. Once with DFG and then FTL. But in the next iteration where it worked, it only did DFG. So I was thinking, maybe we ran that loop too much! And actually going down from 100.000 to 10.000 iterations to hopefully stay only at DFG JIT level, yes, the bug works right away! So we can actually remove the wrapper that retries and just call this directly! Even more clean now. The next thing I did, was using the JSC_dumpSourceAtDFGTime."}
{"prompt": "What does JavaScriptCore use to implement builtin functions?", "completion": "So that shows us all the javascript sources that will be optimized. And this is super interesting because it really shows us the issue. So here is the source of our AddrGetter function that we optimize. And that code uses string.match. And so below we also see that it inlined and thus also optimized this regex match javascript code. Now that maybe sounds weird, but it turns out that JavaScriptCore implements a lot of normal builtin functions not in C++ but also in Javascript. So here in builtins StringPrototype.js we find the source code of the match function."}
{"prompt": "What function is called to determine if the code has observable side effects for regular expression match?", "completion": "So this is also being optimized. And when you look at that code you can also see it simply calls out to the matchSymbol function of the regex - basically what linus had directly in his exploit. And then we can also see that it inlined and optimizes the symbol.match code. Which can be found in the RegExpPrototype.js file. Here it is called just match. And look at this. The code here has a function call to \u201chasObservableSideEffectsForRegExpMatch\u201d. And if it has side effects, it will call matchSlow,"}
{"prompt": "What new check was added to the hasObservableSideEffects function?", "completion": "but if it determins that it doesn\u2019t have side effects, it calls regexpMatchFast. And so in our exploit case it looks at a few different things and decides that it has no side effects and takes the fast path. Now looking at the patch for this vulnerbaility we can see that they added a check to this hasObservableSideEffects function. and this new check, checks if the lastIndex property of the regex is a number. And in our exploit case, we set it to an object with this toString function. Which means in the case of the patch here,"}
{"prompt": "What is the DFGAbstractInterpreter and what does it do?", "completion": "it would fail this test and would instead of the fastPath take the slowPath. That\u2019s how they fixed it. Now how and where exactly the slow path does not result in the same issue, I don\u2019t really know. As you know I\u2019m just learning this too and the code is not the easiest to read and reason about. However I do know that the fastPath, so regExpMatchFast is in fact, a so to say, instruction - it\u2019s its own opcode, at least inside of the DFG, the Data Flow Graph. In the DFGAbstractInterpreter for example we can see a big switch case that takes a node from the graph and checks it\u2019s opcode."}
{"prompt": "What is the effect of accessing the lastIndex property of a global regex?", "completion": "And in here we have the regExpMatchFast opcode as well. And now compare it to the one above, the RegExpTest. Here you can see the function clobberWorld which means if this operation is used, the JIT can\u2019t trust the structures of objects anymore. And the comment here actually says why: \u201cEven if we\u2019ve proven known input types as RegExpObject and String, accessing lastIndex is effectful if it\u2019s a global Regex\u201d. So I guess here they thought about that accessing lastIndex could execute arbitrary javascript leading to side effects, and thus destroy any assumptions, however it was forgotten for regexMatch."}
{"prompt": "What are some common issues with PHP tutorials?", "completion": "In the last two episodes we had a look at static html and how the http protocol is used to get files from a webserver. In this video we will introduce the programming language php, which can be used to create dynamic websites. At the end of last video I did a google search for php tutorials and got very angry. So here is why\u2026 When I start programming and I want to learn about php, I start googling. I look for tutorials. Like this one. And it looks very trustworthy. But this is one, like so many other php tutorials are responsible for so many insecure php websites and bad php developers. I show you why."}
{"prompt": "How does the method attribute of a form element affect the behavior of the form?", "completion": "Let\u2019s take this example code and copy it into a new file called \u201cform_get.php\u201d. Let\u2019s have a quick look at this file. So down here we have some html code that we already know. We have a form tag with some input elements. Presumably to enter your name and your age. The method of this form is GET, we will see later what that means. But at the top we have this weird opening questionmark php tag. Which closes down here with another question mark. And inside we have stuff that doesn\u2019t look like html."}
{"prompt": "How does the browser receive the HTML code from the server when a file is requested?", "completion": "Well, this is the php code. So php code can be mixed in with html. Let\u2019s see how this affects the site loaded from the webserver. We use our php simple webserver with php - S again and if we now visit this site form_get.php, we can see the form with the two input text elements. Now let\u2019s have a look at the HTML source code.. Rightclick - view page source. This is the raw html code the browser received from the server when it requested this file. Huh\u2026 Ok\u2026 there is our html code. But where is that php stuff from before our html code?"}
{"prompt": "What is the purpose of the if statement in the php code?", "completion": "Well, when we requested this file, the php program read the file and checked for embedded php code. And this embedded php code is never part of the response, it always gets removed. But php code could modify the response - like here with echo. But it found this if statement and either name or age has to be set, so that it can reach those echos. THus doing nothing. Now open the developer tools with the network tab again and when we enter something in this form and press submit, we see the page load again."}
{"prompt": "What is the structure of a URL?", "completion": "If we look at the file name, as well as the browser URL bar, we can see that it now appended a question mark with some stuff to it. This again is part of how URLs are structured. After the domain or address we have the path to a file. But if we reach a question mark at some point, then the file name is complete and another part of the URL is starting - the so called GET variables. So GET variables are always part of the URL. And you can see that they are key-value pairs. Name is LiveOverflow, and age is 12 - and they are spererated by an apersand."}
{"prompt": "What is the syntax for appending strings together in PHP?", "completion": "So even though we are loading the same file, form_get.php, the response is completly different, no text boxes anymore... Even if we look at the source code, there is no html left. So in the original php file we can see now, that this time the php block is more interesting. the first line of code is checking if there is a GET variable name or a GET variable age. Which is true, we have those now in the URL. And if that\u2019s the case then we echo the string \u201cwelcome\u201d which we append the GET variable Name to. In php you concatenate or append strings with dots. AFter the name comes the br tag, which is a newline in html. The next line of echo prints \u201cYou are\u201d, followed by the GET variable age and appends \u201cyears old\u201d to that. Which is exactly what we are seeing now in the response."}
{"prompt": "What does the exit() function do in PHP?", "completion": "And the reason why we don\u2019t see the html after this php block is, because inside of this if is an exit() call, which basically means - stop php execution right here. THus never reaching the html down here. So this php code ran and echoed those variables. We often refer to this behaiour as \u201creflected\u201d. Because like a mirror, it will return what we threw at it. So in this case we throw LiveOverflow and the number 12 at the webserver, and the webserver responded with exactly those strings. Now why is this code so shitty?"}
{"prompt": "What does injecting HTML tags allow a malicious user to do?", "completion": "Well who prevents us from injecting html tags. Let\u2019s start slow. Let\u2019s enter a b tag which should print some text bold. And when we submit the form, it works. Now you could argue, there is no harm in printing something bold. That\u2019s a nice feature for customization, for the users of this website, right? Well consider this, you can now inject all html you want. Which means I can completly fake the content of the site. \u2026 Oh btw, you can write your strings directly into the URL. No need to go through the form everytime. That\u2019s just how GET parameters work."}
{"prompt": "What types of attacks can be launched using XSS injection?", "completion": "So I can inject a fake News article. And now I could take this URL and send it to unaware non-technical users. And when they see that their trusted website asked them to donate, they might do it. It\u2019s not even on a fake domain like many phishing mails. It\u2019s on the real domain, using this injection to fake content. This makes it very trustworthy and efficient for phishing attacks. Now this is already cool, but could you also inject javascript? You know javascript can also manipulate the html, but could also do much more than that."}
{"prompt": "How can malicious code be executed in a web application using a specially crafted URL?", "completion": "You can easily show what javascript can do if you simulate this attack. For example on reddit. Let\u2019s say you theoretically found a way to execute javascript with a special crafted URL like on our shitty php example before. Just to make it clear, reddit is not vulnerable to this - this is just simulating what could happen. So open the developer tools and then the javascript console. Because here you can write javascript as if you were executing that javascript on the site. So I could write a line of code which upvotes the first story on here, by simulating a click on an upvote button. And If I check my upvotes I apparently upvoted this weird thread here."}
{"prompt": "What is an example of a malicious URL an attacker may use to exploit an XSS vulnerability?", "completion": "Now imagine I had a URL that could execute this line and upvote my post, now I spam a lot of users with it, they click on it and upvote it without them knowing. And theoretically I could also write code that sends now private messages to random other users containing my evil URL. Thus creating a javascript worm. So I hope this makes it clear that javascript execution controlled by an attacker is really really bad. Now the question is, can we inject javascript on our example php page? Let\u2019s try to inject a script tag that executes alert. Because alert would trigegr a popup,"}
{"prompt": "What does Chrome's XSS Auditor do to try and prevent XSS attacks?", "completion": "which would be nic visual proof that we can execute javascript. So let\u2019s enter this as name and let\u2019s see what happens. Mh. No popup. And the console threw an exception. The XSS Auditor refused to execute a script in\u2026blah blah... it\u2019s sourcecode was found within the request. This is the Chrome XSS auditor, who tries to prevent, so called, cross site scripting, short XSS, attacks, which means injecting a script into a webpage. So apparently we cannot execute javascript because chrome prevents it. If you check the source code of the page you can also see the violating script part highlighted in red. And that\u2019s why chrome said it found this javascript sourcecode,"}
{"prompt": "How can we properly protect against XSS attacks in a PHP web application?", "completion": "this alert, in the request. In fact it was here in the URL as a GET parameter. So damn. Our attack failed. Looks like this page is safe afterall. I guess not so shitty php? Weelll\u2026 this is just half of the story. in this case it\u2019s actually super easy to bypass the XSS auditor to get our javascript executed. But you will have to figure it out yourself or wait for the next video. But before we finish this video, let\u2019s quickly talk about how to fix this properly. The keyword here is \u201cescaping\u201d. We have to escape user supplied input before we echo,"}
{"prompt": "What is the PHP function used to escape special HTML characters?", "completion": "or reflect it into the page. In this case our output from echo would be in the context of html. I specifically mention this because output could also be placed inside of an HTML tag attribute, or inside of a script tag. Those are all different contexts that come with their own challenges. But in this case it\u2019s the most basic example - Just echo into the html code. So to prevent this we would like to escape, special html characters such as the greater than sign, so we can\u2019t inject new html tags. The php function for that is `htmlspecialchars`."}
{"prompt": "How can we prevent HTML or script tags from being injected into our _GET variables?", "completion": "If we use that around our _GET variables before we echo it, then we can\u2019t inject html, or script tags anymore. If you try that with the form you will see it will now display the greater than sign instead. And the reason for that is if we look into the html source code, we can see that the greater than sign character got replaced with \u201capercant, gt, for greater than and semicolon.\u201d This is now a special HTML code, that is obviously not a tag anymore and will be rendered as a greater than sign when the page is displayed to us."}
{"prompt": "What is a proxy server?", "completion": "When I first started with Pwn Adventure 3 I thought I would have to implement a network proxy and reverse engineer the protocol much earlier. I didn\u2019t think that debugging the non-stripped binary would be this powerful. But we are slowly heading to the more complex challenges and I wanted to do a network proxy eventually. So now is the time. According to wikipedia, in computer networks, a proxy server is a server that acts as an intermediary for requests from clients seeking resources from other servers."}
{"prompt": "What ports does the game communicate over?", "completion": "So we want to sit between the client and server to inspect the traffic and maybe even manipulate it. Like a MITM attack basically. So from our very early wireshark investigation we know the game communicates over TCP, and is contacting a master server on port 3333 and then a game server on some port between 3000 and 3005. If you don\u2019t know how TCP works, I recommend you to watch my TCP introduction video from a long time ago which should make a lot of stuff clear. We also know, that we can control where the game tries to connect to by manipulating the IP of the servers in the /etc/hosts file."}
{"prompt": "How can we develop a TCP network proxy for Pwn Adventure 3?", "completion": "So let\u2019s start by pointing the client to a different IP, our Proxy server and for me that is my MacBook. I wanna develop the proxy server on my day-to-day machine as that\u2019s most comfortable to me. So when we now try to login in the game, the client would try to connect to the master server, which is now pointing to my MacBook. But of course there is no server listening on port 3333 on my laptop yet, so that will fail. But what is our high level plan? To create a TCP proxy we want to essentially open a port on our machine so the game client can connect to us, but then we also want to connect to the real server and forward any packets."}
{"prompt": "How does the TCP network proxy work to analyse game traffic?", "completion": "But forwarding might be a misleading term here, because we are not really forwarding the packets, we are actually opening a socket to listen here, and fully receive the data. So now we just have the content of the TCP packet in our hand. And then have another socket open with the real server, where we then take the data and send it out. So we fully unwrap the packet, look at the content, and repackage it again for the real server. And of course we also want to handle answers from the server, which we unwrap, look at the content, and then repackage it by sending it over the socket to the game client."}
{"prompt": "What is the plan for developing the TCP network proxy?", "completion": "And we basically have to do this twice, for the master server and game server as these are two separate connections. Okay, high level plan done. Next, let\u2019s plan our program that does that. I\u2019m not a networking expert so my engineering solution is probably not the best way to do it, but as long as it somewhat works, it\u2019s an ok prototype and proof of concept, to see if what we want to do is even working. So essentially we want to open a listening socket for the game client to connect to, as well as establishing a connection to the real server. Thes are two different connections that could receive date at any time, so these components would have to be placed into their own thread."}
{"prompt": "How do we connect the Game2Proxy thread and the Proxy2Server thread?", "completion": "I call one the Game2Proxy thread, and the other one Proxy2Server thread. And then we also want to connect them somehow, because when the game wants to send something to the server, it arrives in the Game2Proxy thread, which then has to send it out to the server socket that is used in the proxy2server thread. So we have to exchange references to each other\u2019s socket as well. And that\u2019s basically it, in each of the function that receive the data we can then program anything we want to do with it, before forwarding it to the other socket."}
{"prompt": "How does the proxy thread work?", "completion": "But because we have to deal with not only one server, but we have a master server, as well as up to 5 game servers, we could bundle the creation of the two components into another general Proxy thread, so we can easily create multiple instances of that. Cool, so we have a little bit more detailed technical plan. So now we can go another layer deeper and start looking at the actual implementation. Because I\u2019m most comfortable with python I decide to write my proxy in python. And so we can use the threading module to create Thread classes for our general Proxy as well as the Game2Proxy and Proxy2Server thread."}
{"prompt": "What is used to create a thread that handles the connection to the real game server?", "completion": "And we can use just low level sockets to implement the network communication. Let\u2019s start with the Proxy2Server. That is supposed to be the thread that handles the connection to the real game server. So we start by creating a class Game2Proxy which inherits from Thread. This allows us to define a run() method that will run in the thread. So in here we would create a while true loop that handles the data and network connection. But before we continue in here, we should setup the server connection first which I do in the __init__ method. This is the constructor."}
{"prompt": "How can we keep a reference to the real server connection in our network proxy?", "completion": "Because we overwrite it, we have to make sure to still call the original init function. And then we can create a new socket, which is just a basic socket example taken from the python docs and connect it to the host and port passed into the constructor. So later we will give it the real server IP and port here. We keep a reference to this server connection in the object variable or attribute server. And then in the run method, which will keep looping forever in a thread, we will attempt to receive up to 4k of data from the real server. Which means if we get some data back,"}
{"prompt": "How do we create the Game2Proxy thread class?", "completion": "we want to forward it to the game client. So we don\u2019t have a game client connection yet, but if we have one we can then call sendall to forward this data. So self.game will later be set to the socket that is the connection to the game client. But that socket is created by the Game2Proxy thread. So let\u2019s create that thread class next. Class Game2Proxy and also base class Thread. In that init function things are a bit different. We also get a host and port, but this is where we want to listen. This is the proxy part where the game tries to connect to. So the socket we create we will then bind to the host and port given by the parameters."}
{"prompt": "How does the proof of concept TCP network proxy work to forward data from the game client to the server?", "completion": "This again is just a basic python socket server example taken from the official docs. And then we call accept(), which will wait for a client to connect. Once a client connects, we get the socket to communicate with that client and we assign it to self.game. Then in the thread run method we loop forever and see if we have data from the game client. If we did receive something, we would try to forward this data to the server socket. That\u2019s the socket created by the other class. So now we have to hook them up both. We have to create both threads and give each of them a reference to the other\u2019s socket."}
{"prompt": "How does the Proxy class establish a forwarding connection to the server?", "completion": "For that I created a third more general class called Proxy. Which is also just a general thread setup but then in the run method we create the Game2Proxy thread object which will wait for a client to connect to the port specified and if we get a connection the the Proxy2Server will establish a forwarding connection to the server. Now both threads created their respetive socket and now we jsut have to exchange them. So the one that talks to the game client has the socket to forward data to the real server,"}
{"prompt": "How many proxies are being initialized in the video?", "completion": "and that the server has a socket to the client, to forward back answers. That was just the setup of the threads, and then we actually start them. This will kick start executing their run methods. Now, the only thing that is missing is to create that Proxy thread. Or actually multiple proxy threads. Let\u2019s start with the masterserver, which will listen on all interfaces on port 3333 and forward them to the real server IP. This is where my real server is located. And then we start that thread. And then we launch multiple Proxies for all possible game servers that the client might want to connect to. So 5 additional proxies for port 3000 to 3005."}
{"prompt": "How does the TCP network proxy identify the direction of data being sent?", "completion": "And this should already work! Let\u2019s add a small debug output into the threads and see if we can see the traffic. To identify the where data was coming from I include the port as well as an arrow to indicate the direction. So one is stuff the client sends and the other is what the server answers. Then let\u2019s start it. This looks good, all of our proxy servers are waiting for a client to connect. And when we now login to the game, we can see that data with the master server is exchanged. Keep in mind that I cut the output after 100 bytes, so the actual data might be longer and it\u2019s hex encoded because it\u2019s binary data."}
{"prompt": "What data does the server typically send back to the client?", "completion": "And when we now join the game, we can see a lot of messages on port 3002. So that\u2019s the game server. If we pause it for a second we can see that the client sent a lot of similar stuff, and the server responded with I guess empty data. Just 0000, two zero bytes. Probably indicating \u201cyep I\u2019m still here, but I don\u2019t have anything new for you\u201d. The whole engineering challenge we have here is not to build the most performant and resource saving proxy to handle thousands of conenctions or whatever, our goal is to build something that allows us to explore, analyse and play with the network connection. And to do that I add two more things."}
{"prompt": "How can we expand the commands used in the TCP network proxy?", "completion": "Btw if you want to exit the proxy, you will have to kill the process. But we will take care of that now. After the creation of the threads I add a simple while true loop that constantly waits for input from us, and then takes that as a command. So if we find a \u201cquit\u201d command, then we just tear down the whole thing with exit. And here we can expand the commands later, for example if we want to inject our own packets. We could easily do that here. The other thing I want to do is the parsing and analysis of the data that is exchanged."}
{"prompt": "What is the purpose of the 'parse' function in developing a TCP network proxy?", "completion": "And that is supposed to be an explorative playful part. So it would suck if we always have to kill the proxy, restart it, log back into the game and check something, just to do it all over again. So I decided to place the parsing into a second file. Here we simply define a \u201cparse\u201d function. This fuction will take the data, as well as the port of the connection so we can identify if it\u2019s game server or mater server data, as well as a n origin parameter to indicate if this is data originating from the client or from the server."}
{"prompt": "How can we ensure our changes in the parser module are applied to the network proxy?", "completion": "So we can import that parser module now and in the loop where we handle the data we receive we call the parse function with the corresponding parameters. So this is data coming from the server, and this is data coming from the client. Though to get a really interactive playful experience we have to reload the module. Because otherwise the function is loaded once when it\u2019s imported and then when we make changes it does nothing. So when we reload here the module we always have our latest changes. Because our changes could be terrible, we have to wrap that in a try and except block,"}
{"prompt": "What is the purpose of the code that checks if a message is from a server and then returns?", "completion": "to catch any exceptions caused by this. Let\u2019s try it. Going in game and we see all the messages. So this is the message that is coming from our parse function here. And let\u2019s see if we can modify it and see the changes. How about we only want to see data for the game server, and only data sent from the client to the server. So we check if this is a message from a server, and then return. Now we only see client messages. Amazing, right? So we can start playing here and interpreting and parsing this data and we don\u2019t have to restart the game or proxy."}
{"prompt": "What value changes when the player stands still and jumps up in the game?", "completion": "And when we made a dumb error, we see the exceptions here and can quickly fix it. Before I send you off, let\u2019s just show you really quick what we can do with that now. So for example we see here a message that never changes sent from the client to the server. But if we move ingame, we walk around a bit, we can see a change. But not everything changes. Only in this area. If we stand still and jump up, then besides the other new packet we see, only this value here changes. Sooo\u2026 do you have a guess what this data might show us?"}
{"prompt": "What are some of the best security researchers that are active on the secret hacker forum?", "completion": "I can tell you a secret as a place on the Internet most of the big names that you know of they are all there and they are all communicating there you can all interact and you see also the interactions between all these amazing researchers it's like a secret place for only the best of the best and this is also where I learned a lot and today I'm telling you how you can find this place now you can navigate around what interesting things you can find there and I give you the permission to join you can sign up yourself and then curate the list of researchers that you're interested in but don't tell anybody [Music]"}
{"prompt": "What is taint analysis and how is it related to sources and sinks?", "completion": "Sources and sinks describe a very simple concept for security code reviews or finding vulnerabilities in general. Those terms are also often used in the field of taint analysis and that\u2019s basically what we will talk about. I think it\u2019s one of these things that are super obvious and many of you have already developed this intuitively without having a name for it. At least that was true for me, but also once I learned about the concept this intuition transformed into an actual technique for me. So I figured there must be others that might be at a similar point and it could help."}
{"prompt": "What is the title of the video in which the concept of sources and sinks is applied?", "completion": "Source and sinks. What does that mean? Sources are where data is coming from. Attacker or untrustworthy sources of data. And sinks are places where untrustworthy data could do something bad. Let\u2019s do a very simple example. You have maybe seen my video \u201cLet\u2019s play a game: what is the deadly bug here?\u201d, where we look at a very short php program and I explain to you my thought process in finding the security issue. So I think it\u2019s a very good example of this concept being applied. I didn\u2019t explicitly use the terms sources and sinks in the video, but that is essentially what I did."}
{"prompt": "What data source is not controlled by an attacker in this code?", "completion": "So let\u2019s quickly identify the sources here. Sources are where data is coming from, and in this case there are three $_POST request variables. These are fully user controlled. But data is also coming from the SECRET environment variable, so in terms of security we have to think now, is that particular source relevant to us. And in the video I was contemplating about that but determined an attacker has probably no control over it, so I excluded it from my mental list of attacker controlled inputs."}
{"prompt": "What is an example of a dangerous function that could be used as a sink?", "completion": "The sink in this case is pretty obvious, it\u2019s this dangerous exec function. And now we have to figure how or if sources are connected to the sinks. If we find a connection between attacker controlled input, the sources, to the dangerous function, the sink, then we probably have a security issue. Makes sense, right? To figure out if this is the case, can be super easy, but in this example it was not straight forward. I mean the post variable, so one of the sources, is directly passed to the exec function, and that\u2019s bad, right?"}
{"prompt": "What is the concept of using an HMAC to authenticate a command passed to exec?", "completion": "But it\u2019s not that simple. Because before it we have a lot of conditions that try to protect exec. In this case the idea was to use hmac to authenticate the command passed to exec, which means only the admin who knows the secret could do it. And the admin could also just login to the server with ssh and execute any command anyway, right? So it\u2019s not inherently a security issue. We have to proof now that an untrusted person, and in this case this means sb. who doesn\u2019t know the secret could pass malicious code to exec."}
{"prompt": "What are some examples of dangerous functions in PHP?", "completion": "And how we figured that out you either know already, or I recommend you to watch that video. Anyway. There are a few methods how you can work with sources and sinks. For example when you want to review some code, you could start by looking for all the dangerous functions. Let\u2019s stay with the php example. You could then look for every function considered dangerous. There is this really nice stack overflow question that collects many of them. So there are a lot of dangerous functions that are obvious such as exec, and system and eval, but the issue is, not every function is clearly dangerous."}
{"prompt": "What is an example of a dangerous function that is used in PHP?", "completion": "For example there is really obscure stuff, like the old php preg_replace function which is used, to \u201cPerform a regular expression search and replace\u201d, but it has this /e modifier which can lead to php code execution through one of the parameters. Another example is that a developer could create construct a dangerous setup themselves. For example a function that creates a file and stores user data in it, but the file is also accessible from a php webserver and so if a user enters php code into that file,"}
{"prompt": "What are some examples of user controlled inputs that can lead to security vulnerabilities?", "completion": "it could be executed by visiting that file. So you see it\u2019s not that easy to find all the sinks in a program. But the concept is clear, you try to find places that could be dangerous, if user controlled input gets there. The other side, the sources are also not that easy. I mean it\u2019s pretty obvious that the GET and POST parameters are user controlled, but some inputs are not clear. For example my wifi name is a simple XSS test, and in one video where a device was listing my wifis, it caused an XSS."}
{"prompt": "What are the two main approaches to connecting sources and sinks during a security code audit?", "completion": "The developer did not anticipate that the wifi name could be malicious input. And especially with frameworks that abstract away a lot of stuff, it\u2019s sometimes really not clear what exactly is user controlled. Which means it\u2019s like the sinks, not something you can always just search for, but the concept is clear, we want to find all the sources of untrustworthy data. And then we try to put sources and sinks together. You can either do it forwards, backwards or a combination of both. Forwards means you take one of your sources and just follow where this data is going to."}
{"prompt": "What is taint analysis and how is it used in security code audits?", "completion": "Essentially you are doing taint analysis by hand. \u201cOkay this input is then split at the comma, the first element is passed to this function, the second element is passed to this function.\u201d and then you continue to look at both functions. Along the way you remember all the transformations of the input or sanitization, like if certain character is removed, or what kind of checks exists and you hope it eventually it leads to a dangerous sink. The backwards path means you take a dangerous sink, and try to follow the path back up,"}
{"prompt": "What are some examples of dangerous functions that can be used when conducting a security code audit?", "completion": "where is this data coming from, what kind of checks have to be true in order to lead down here, and you try to figure out if it leads to a source of untrusted data. And which method to use totally depends on the target. For example if you have code with a looot of command executions or SQl queries, then looking backwards from all these sinks could be too much and it would be easier to just follow the 5 inputs. But maybe it\u2019s easy to find all the dangerous sinks, but just the input is not very clear,"}
{"prompt": "What is the concept of sources and sinks and how is it used in client side web security?", "completion": "so you try to track back. So deciding what to do is very much just a bit of experience and a lot of GUT feeling. So the concept of sources and sinks is very easy, and I think using this terminology when talking about vulnerabilities is very useful. So next time you have to find vulnerabilities in some code for a class assignment or CTF, try to use methods like this here. One other thing I want to mention is that, it appears to me that the concept of sources and sinks is used a lot more in the client side web security community, than in other areas."}
{"prompt": "What is an example of a dangerous function that can lead to DOM XSS?", "completion": "Especially in the area of DOM XSS. So you have like classic XSS where the server code places untrusted data into the generated HTML sent to the browser, but in DOM XSS, it\u2019s not like that. Some untrusted input is passed to some javascript function and that leads to JS code execution. For example if an attacker can control the content passed to the javascript function innerHTML, which will write HTML, then of course you can write a script tag as well which is executed. And because there are so many javascript frameworks being used, with weird stuff, it\u2019s a typical thing for researchers to share sinks with each other."}
{"prompt": "What are some ways that developers can document potentially dangerous functions in their code?", "completion": "So you find a lot of lists of sources and sinks for various frameworks. I like this kind of sharing, and would love to see it more adapted to other languages as well. Documenting dangerous functions, especially when they are more obscure is a really helpful thing. So if you are a developer, and work with some kind of framework in any language, and you come across some functions that do something really fishy, can be easily misused or are more powerful than people think, document it. Tweet about it with #sink and hashtag the name of the framework."}
{"prompt": "What is the title of the famous phrack article that inspired the title of this video?", "completion": "In past videos we have learned how the CPU works, how to read assembler and how to reverse engineer the functionality of a simple program. In the upcoming videos I want to go a little bit deeper and explore how we can exploit a program when we have the ability to corrupt memory. This first video will be more about how to setup and get everything running. So we can focus on the technical part in the next videos. The title of this video is inspired by the famous phrack article \u201cSmashing The Stack For Fun And Profit\u201d from 1996."}
{"prompt": "What challenges are included in the Linux images provided by exploit-exercises.com?", "completion": "You can imagine that a lot of stuff has changed since then. Though, we first have to learn about the basics, before we can have a look at modern techniques. We will kind of follow the timeline of exploitation technique discovery and attempted mitigations. Like DEP or ASLR, just to name two. As basis for the next couple of videos, I will use challenges included in the Linux images provided by exploit-exercises.com. This allows you to set up this system as well, which I highly recommend. With protostar you will start with simple memory corruption and modification, function redirection, and finally executing custom shellcode."}
{"prompt": "How can we connect to a system over a network that has an SSH server running?", "completion": "In order to make this as easy as possible to introduce, ASLR and Non-Executable memory has been disabled. So first download the protostar .iso and boot from it in the VMWare Player. As you can see it doesn\u2019t start with a nice graphical user-interface like our Ubuntu system does. But don\u2019t panic, you learned how to use the command-line from the very first episode. Now, I will use this moment to introduce you to `ssh`, which stands for secure shell and is a program that allows us to connect to a system over a network, that has an ssh server running."}
{"prompt": "What operating system does the speaker use as a host OS?", "completion": "This would be the kind of access you get when you have to administrate servers that run for example a website. That\u2019s the reason why I introduced you to the command line in the very first episode, because you really really have to know how to use it. You can also tell that I run windows as a host OS. I think I haven\u2019t mentioned it before, but the main reason here is, that I imagine the majority of people start out on Windows, which means it\u2019s the best way to reach more people. We don\u2019t want to be excluding like so many other parts of our societies."}
{"prompt": "What is the username and password for the protostar image?", "completion": "At least for me, hacking conveys a spirit to be open and share knowledge. So that\u2019s why I have to download PuTTY for Windows now, which is a windows client for ssh. To use it to connect to this machine we have to find the IP address of it. The username and password for the protostar image is just \u201cuser\u201d. So use that to login. And then execute the command `ip addr`, to find the assigned IP and then copy it into putty, save this session and press Open. You have to login again, but this is much better now."}
{"prompt": "What type of Linux kernel is installed on the virtual machine?", "completion": "We can copy data back and forth and we can have multiple connections. The equivalent for Mac and Linux is just simply `ssh`, the username \u201cuser\u201d at the ip address. Ok. At the moment our shell is /bin/sh. And as you can see, tab-completion doesn\u2019t work. But we can execute `/bin/bash` instead, which makes the command-line a bit nicer. So what do we have here. With uname -a we can get some system information and we can see that we have a 32bit linux with a 2.6.32 kernel. So how does this work now. On the website it says: The levels to be exploited can be found in the /opt/protostar/bin directory."}
{"prompt": "What is the purpose of the setuid function provided by libc?", "completion": "Let\u2019s have a look. `Ls` to list all files in this directory. Immediately you will notice this weird red background color for the filenames. Let\u2019s have a closer look. With `files` we can check the filetype and it tells us that it is a setuid ELF 32bit executable. From earlier videos you may remember that we have never encountered `setuid` before. As always, if we want to know something in linux, we can look in the linux manual. Though, the man page for setuid is actually about the setuid function provided by libc."}
{"prompt": "What is the effective user ID of the root user on the system in the video?", "completion": "But that doesn\u2019t bother us, because it might be related. So let\u2019s see what it says here about this function. setuid stands for set user identity. And\u2026 setuid sets the effective user ID of the calling process. mhh\u2026 with cat /etc/passwd we can see all users on this system. Remember our user is called user so we have the id 1001. And the root user has id 0. So does that mean, that we can simply write a C program as our unprivileged user and execute setuid with id 0, to become root? Obviously not. That would be horrible."}
{"prompt": "What are some common errors that occur when using setuid binaries?", "completion": "Further down it tells us about possible errors like EPERM which says that the user is not privileged and the uid does not match the real uid of the calling process. Ok\u2026 then\u2026 what can it be used for? An example usage is, that a root process might want to drop privileges to an unprivileged user, that in case the process gets exploited, the attacker does not gain root privileges. So if you have a process that has to start as root but then doesn\u2019t need it anymore, it\u2019s good to drop them. Anyway. What does this have to do with our setuid binary?"}
{"prompt": "What command can be used to list all running processes?", "completion": "Let\u2019s open a second ssh session to look at all running processes. Now open a process that keeps running. Something simple like a vim editor. And then we can use the other shell to execute `ps aux` to list all running processes. Now we have to search a bit, but here it is. The first column tells us the user of the running process. And because we as \u201cuser\u201d have executed vim, it will run with our privileges. So no let\u2019s execute one of those setuid binaries and do the same. Let\u2019s search the program name."}
{"prompt": "What does the 'r-x' permission designation mean?", "completion": "Here it is. BUT do you see the first line? It says it\u2019s running as root. What the fuck? How is that possible? Let\u2019s have a look again at the file permissions. Ok first of all `r` `dash` `x` means that anybody on the system can read this file and execute it. The next 3 permissions are the same and refer to the permissions for the group. A group is just an id, that multiple users could share. So we are in the group that is also called user. But theoretically you could group multiple users together."}
{"prompt": "What is the purpose of the setuid bit?", "completion": "Ok. Now it get\u2019s interesting. The first character indicates if a file is a directory. Well it\u2019s not. So the remaining 3 permissions are for the owner of the file. The owner of the file is root. And the owner has the permissions to read, write and \u2026 S? So the s replaced what should be x for executable. This is called the setuid bit. We have already looked at the running process, so you can guess what this does. When this bit is set, and I as a regular user execute it, Linux will actually execute it with the privileges of the owner."}
{"prompt": "What is the purpose of the setuid bit?", "completion": "So in this case it will run as root. Why the hell would somebody do this? There are two good examples. First, you may know sudo. Which is a program that allows you to run something as root if you are a normal user. So how can sudo execute a program as root, even though you typed in the command? Well it also has the setuid bit. Another great example is the ping program. Ping will also run as root, because it has the setuid bit set. Why you ask? Because ping wants to send an ICMP packet which is a fairly low layer."}
{"prompt": "How can a user send ICMP packets on a Linux system?", "completion": "And linux generally doesn\u2019t allow normal users to create such raw packets. But because ping is not evil, somebody created a setuid binary, to allow normal users to send ICMP packets. What if there is an exploit for a program like ping, that would allow you to execute arbitrary code as root, right? So it\u2019s clear, that setuid can be really dangerous. Well. And that\u2019s the whole point of the challenges from protostar. If we can exploit one of these programs here, we can escalate privileges and gain root."}
{"prompt": "What is strace used for?", "completion": "This is basically like jailbreaking on iPhones or rooting on android devices. You try to find a vulnerability that allows you to execute arbitrary code in a privileged mode. Well, on those real devices, especially iOS this is extremely fucking complicated, and a lot more layers are involved, but now you get a better imagination of the whole thing. One last thing before we start with the challenges. You know that you can debug programs, right? For example you can use strace to spy on the system calls."}
{"prompt": "How does gdb prevent setuid binaries from running as root?", "completion": "Or simply use gdb. And gdb allows you to modify memory. So you could just open this setuid binary in gdb, modify the code and execute whatever you want as root? let\u2019s try it. Ok it seems to run. So let\u2019s rerun it and look at the process list. As you can see it doesn\u2019t run as root anymore. The reason is, that gdb could not debug a process that runs as another user. So gdb actually forces the binary to NOT run as root so it can actually debug it. So good idea, but unfortunately\u2026 or maybe fortunately it\u2019s not that simple."}
{"prompt": "What is the difference between a container and a namespace?", "completion": "In the last video where I introduced how to generally use docker, I said stuff like: \u201cWe can use docker exec to execute a process within this container.\u201d or \u201cinside of this container we are root.\u201d And at the end of the video, I told you to rewatch the video and replace \u201ccontainer\u201d with \u201cnamespace\u201d. so you would get: \u201cWe can use docker exec to execute a process within this namespace.\u201d Or \u201cinside of this namespace we are root.\u201d So what are namespaces? We will answer this in this video, and we will also understand why containers are not like VMs."}
{"prompt": "What features of the Linux kernel does Docker use to deliver its functionality?", "completion": "Like always when you want to learn how stuff works, it\u2019s a good idea to just check the documentation or source code. In this case, let\u2019s start with the docker documentation so we can work our way down. The underlying technology Docker is written in Go and takes advantage of several features of the Linux kernel to deliver its functionality. Docker uses a technology called namespaces to provide the isolated workspace called the container. When you run a container, Docker creates a set of namespaces for that container."}
{"prompt": "What features does Docker Engine use on Linux to create isolation?", "completion": "These namespaces provide a layer of isolation. Docker Engine uses namespaces such as the following on Linux: The pid namespace: for Process isolation The net namespace: to manage network interfaces or The mount namespace: to manage filesystem mount points There are a few other features used as well, but the core functionality to achieve this concept of \u201ccontainers\u201d are the namespaces. Before we look at namespaces, let\u2019s make a few different observations first. So this here is a shell inside a container."}
{"prompt": "What command is used to watch the output of a command every two seconds?", "completion": "And this is outside the container, on the host. In the container I\u2019m the user ctf, which has the userid 1000. And on the host I\u2019m the user named \u201cuser\u201d, and have the userid 1000 aswell. When I create a file in the container, I see that it\u2019s owned by the ctf user. And when I look at the shared folder on the host, I see that it\u2019s owned by me, the user. That\u2019s kinda interesting right? Same userid, different names. But look at this. So I\u2019m executing watch with \u201cps ax\u201d. Watch is a small tool to watch the output of a command every 2 seconds, in this case always executes \u201cps ax\u201d to look at the list of running processes."}
{"prompt": "What process can be found inside the docker container?", "completion": "So you can see here the watch process itself! And you can also see ynetd, because this is the challenge container from the previous video. Now let\u2019s look at the processes on the linux host. There are a LOT more processes. A lot. But if you look very closely, you can find a mysterious \u201cwatch ps ax\u201d process. WHAT?! It has the pid 12675. But inside the container it has the pid 79. This should be your first evidence, that docker containers are not VMs. they share stuff with host system. There is a certain level of isolation between the host and a container, I mean inside the container you can\u2019t see the host processes."}
{"prompt": "What process is used to start services in Linux?", "completion": "But clearly it\u2019s not like an actual VM. Now let\u2019s use pstree to look at the tree of processes. You can see here systemd is the init process 1. That\u2019s where the system started. And systemd then started different services. Just FYI if you ever wondered. That\u2019s how linux works. There is an init process, which uses syscalls to clone and fork itself and then execute new child processes. Eventually one of those child processes will be a shell you use. Anyway. We are looking for our watch process from inside the container."}
{"prompt": "What is the relationship between containerd and runC?", "completion": "Where is it? AH here! So it\u2019s a child from the containerd-shim process. Which is a child from containerd. And containerd is a service started by systemd. What is containerd? \u201cAn industry-standard container runtime. It manages the complete container lifecycle of its host system\u201d Whatever that means. In the README of the containerd repository, we can also read this: \u201cRuntime Requirements for containerd are very minimal. Most interactions with the Linux container features are handled via runc.\u201d So let\u2019s checkout runc."}
{"prompt": "What is the purpose of the docker daemon (dockerd)?", "completion": "\u201crunc is a CLI tool for spawning and running containers according to the OCI specification.\u201d Okay\u2026 so we have like docker. Containerd. Runc. oof. What is all that. Let\u2019s zoom out again and look at the highlevel docker overview. There is this picture of the docker architecture. The docker command line tool that we use, like docker build or docker run is a client that communicates with the docker daemon. Dockerd. That d at the end always refers to daemon, which is a term for like background running services."}
{"prompt": "What is runc used for?", "completion": "The docker client can talk to the docker daemon via a HTTP REST API or a UNIX socket. Now in the dockerd documentation, you can search for containerd and find this sentence. \u201cBy default, the Docker daemon automatically starts containerd.\u201d Combining with what we learned before, we can paint this picture. Docker communicates with the docker daemon - dockerd. Dockerd started containerd earlier, because containerd actually manages containers. But it uses runc, which is used for actually spawning and running containers."}
{"prompt": "What process does Docker use to spawn new containers?", "completion": "So let\u2019s investigate. We could use strace to attach to the current containerd process to trace all the syscalls containerd uses. We also want to specify -f, to follow all childprocesses. And log the output to a file. Pidof containerd gives us the process id so we can attach to it. This way we should figure out how containers work. Alright. We are attached. Now let\u2019s use docker run, to start a new container. And this immediately triggered containerd to spawn some new processes and doing stuff. The container runs now."}
{"prompt": "What Linux kernel feature is used in Docker to create isolated environments?", "completion": "So we can have a look at the syscall trace. This trace is huge, and most of it is not interesting. But for example we know, that containerd should run runc, to actually start the container. So let\u2019s look for that! Here it executes containerd-shim, we saw that as another child process of containerd earlier, and we know it must also be the parent of the container processes. Let\u2019s continue. there we go. The next call to execve, is to execute the runc binary! Okay\u2026 now I\u2019m looking for a very specific syscall."}
{"prompt": "What system call is used to create namespaces in Docker?", "completion": "But there are soooo many. It\u2019s obviously doing a lot of stuff. Let\u2019s see if I can find it. I scrolled for quite a while and was unsure if I\u2019d miss it. I mean I know what I\u2019m looking for and could search for it. But I was curious if I can catch it. OH! There it is! Unshare. That\u2019s the magical syscall I was looking for. And just before it you can see that in the same process, so that number here is always the process id where this syscall was called. Before it called processcontrol, with SET NAME, which sets the name of the calling thread."}
{"prompt": "What does the CLONE_NEWPID flag in the unshare() syscall do?", "completion": "So this is the child thread of runc, which calls unshare. So what is unshare. unshare() allows a process to disassociate parts of its execution context that are currently being shared with other processes. The argument [...] specifies which parts of the execution context should be unshared. All flags here are interesting, but let\u2019s focus one of the flags CLONE_NEWPID. It means: \u201cUnshare the process ID namespace so that the calling process has a new PID namespace for its children which is not shared with any previously existing process."}
{"prompt": "What is the return value of the clone() syscall when it is called from the host?", "completion": "- NAMESPACES - \u201cThe calling process is not moved into the new namespace. The first child created by the calling process will have the process ID 1 and will assume the role of init(1) in the new namespace.\u201d So let\u2019s follow this process, and we can find a CLONE() syscall. This creates a new child process. So this will become the PID1, the init process of the new namespace. The return value of clone is the new process ID on the host, because it was called from the host, but inside that namespace, it should have process ID 1."}
{"prompt": "What does the clone() system call return when executed in a PID namespace?", "completion": "When we look at what this process is now doing, we can see that it\u2019s still runc, but it renames itself as INIT. It has become the init process of this namespace. Of this container. And now let\u2019s continue to see what this new child process does. Eventually it calls clone() again and creates another child process. But this time it\u2019s a process in the new PID namespace, right? When process ID 1 has a child, it should have pid 2. And clone() as I said returns the new PID. So what does clone executed in that pid namespace return?"}
{"prompt": "What is the return value of the unshare syscall inside the namespace?", "completion": "It returned 2. Now strace is a bit confusing. Because obviously outside the namespace, where strace is running, this child process will have a different pid. It might be this one here 29866. But the return value of that syscall inside that namespace is 2. The processes inside of the namespace think the process has now pid 2. You have now these two parallel universes. They are somewhat shared, the processes of the child namespace live in the parent universe too. But that PID namespace creates a bubble around all the children and they think they are PID 1 and 2."}
{"prompt": "What is the Linux Kernel feature that Docker uses to provide container isolation?", "completion": "So this is the process ID namespace. There are many more namespaces. And in the manpage of the unshare syscall you can see which exist. CLONE_NEWNS - Unshare the mount namespace. \u201cMount namespaces provide isolation of the list of mount points seen by the processes in each namespace instance.\u201c. Every storage is mounted, so this refers to stuff like your hardrive, SWAP, the temp filesystem or procfs. You want containers to be isolated from your host filesystem. Or CLONE_NEWNET - Unshare the network namespace."}
{"prompt": "What system call does Docker use to tell the kernel to fake a new process ID or network for a child process?", "completion": "So you can also isolate the container from the networks that are available on the actual host. That\u2019s it. That\u2019s the magic behind containers. Docker is just a fancy interface around this unshare namespace feature. Containerd and runc are just components to interface with all that. In the end it comes down to these syscalls, that tell the kernel, please fake a new process ID or fake a new network for this child process. Now one last thing. You can check the namespaces of a process in the proc filesystem."}
{"prompt": "What is the process ID of the watch process running in its isolated namespaces?", "completion": "So here we have the pid of the watch process which we know must run in it\u2019s isolated namespaces. And with ls we can check the ns folder of this process. And now we can see here the different namespaces identified by this number. Let\u2019s compare this to the init of my host system. So this is not inside the container, this is actual systemd on my machine. And we can also look at the namespace of the current shell process. $$ just represents the current process id. And if you look closely and compare, you can see that my shell, and init, which run on the host, share the same namespace."}
{"prompt": "What is the CLONE_NEWUSER flag and what does it allow for inside a user namespace?", "completion": "They see each other normally. But the watch process, inside the container, has a unique namespace. But not everything. It has a different pid namespace. We knew that already. But the user namespace is the same. This makes sense because in the unshare syscall we didn\u2019t see the flag CLONE_NEWUSER. Usernamespaces are cool: A process's user and group IDs can be different inside and outside a user namespace. In particular, a process can have a normal unprivileged user ID outside on the host, while at the same time having a user ID of 0 inside the namespace;"}
{"prompt": "What is the effect of the unshare syscall in relation to Docker?", "completion": "So you could be root inside of a container, but in reality you are just a regular user. It looks like you are userid 0 root. But you actually have no additional privileges. But for the example at the beginning this was not the case. Userids were equally mapped inside and outside the container, and you saw that when we created that file. The user id was 1000 inside and outside the container. We just had different names displayed for it, because the name is read from /etc/passwd. inside the container the name was ctf."}
{"prompt": "What kernel features are used to create the separation between the host and the container?", "completion": "And outside it was user. Anyway. I hope this helped you to better understand what containers are. And you understood that you are using the same kernel inside and outside the container. And that you can choose what to unshare and not unshare between the host and the container. That\u2019s why it\u2019s not like a VM and you need to be careful that you don\u2019t expose too much to the container, because it can be dangerous for breaking out of it. And of course some kind of kernel exploit would mean you can break out of it too."}
{"prompt": "What are the two options for supporting LiveOverflow?", "completion": "Hey, You are probably watching this video because you know that I create educational videos about IT security, and you are thinking about supporting this project. For that already I want to say thank you. But let me explain everything. So the first problem is to decide between, monthly, or a per video/per creation, support. That\u2019s why I decided to go with both. On youtube you can find the Join button which allows you to support me with a fixed monthly amount - it\u2019s roughly 5$. On Patreon on the other hand you can pledge money per video, but you also have the option to set an upper LIMIT per month."}
{"prompt": "What are the advantages and disadvantages of providing a monthly pledge or per video support on Patreon?", "completion": "Both options have advantages and disadvantages which I want to quickly explain. With a monthly pledge you provide some income stability. Much more like a regular job. With this I also hope I could receive ongoing support if for example I get sick or just need a break, or want to take more time for a really good video. On the other hand we have patreon with a per video support. Certain dollar amounts per video sound high but you can intelligently use the monthly limit to clearly communicate what you want."}
{"prompt": "What is the Patreon pledge limit set for a supporter of LiveOverflow?", "completion": "For example. You could pledge like 2$ per video, but set a 10$ monthly limit, which means you like to just see more videos, up to five a month. That means less effort, but more output. For example basic tutorial series. But if you would pledge 10$ with a 10$ limit, then you clearly tell me: \u201ctake your time, I rather would have one single high quality in-depth video per month\u201d. So this allows me to clearly justify how many days of work should go into a particular video. Up until now I think I have never skipped a week for a video."}
{"prompt": "What is the benefit of a per video pledge for LiveOverflow?", "completion": "Not during any holidays, crazy work weeks, vacations or when I got sick. AND there were weeks with bonus videos. So it\u2019s understandable that you as a monthly supporter might expect I deliver every week. But. I have dealt with this stress for a long time now, and I actually would like to not feel this stress anymore. So keep in mind that a video every week is not a guarantee. However with a per video pledge I would only receive money if I make videos, so then it\u2019s no problem. And this leads me to expectations in general."}
{"prompt": "What is the maximum amount of stress LiveOverflow is currently under?", "completion": "when somebody pledges 5$ per video, and then I publish a video about a boring topic, or I cut a CTF video write-up into multiple parts, they might feel cheated out of 5$. So\u2026 this is very important. before you support me in any way, be it monthly, or be it per video, I want to make it clear, please don\u2019t have any expectations. I\u2019m already extremely stressed out by trying to balance what are essentially two full-time jobs. I really cannot add more stress in my life by having possibly hundreds of people with even more expectations."}
{"prompt": "What is the URL for the LiveOverflow Patreon page?", "completion": "So please only click on the Join button if you think the LiveOverflow channel has retroactively qualified for your support, by having released hundreds of videos in the past. And please go check them out, I think there are a many great ones that so few people have seen because they are older. So\u2026 whatever you will decide, thanks for even considering supporting LiveOverflow. Oh and also, if you are a student or you don\u2019t have the means to spend a few dollars, that is totally fine and that\u2019s why I try to keep videos free in the first place."}
{"prompt": "What is the difference between Jeopardy-style and Attack-and-defense CTFs?", "completion": "Security CTFs, or Capture-The-Flag competitions have nothing to do with paintball or shooter games, but they are awesome to learn hacking. They can be very challenging and teach you a lot of new skills. In this video I want to tell you about what kind of challenges there are and how you can find CTFs to play. Generally there are two categories of CTFs. Jeopardy-style and Attack-and-defense. While the second one sounds like a lot of fun, personally I have never played one. So I will only focus on the Jeopardy-style,"}
{"prompt": "What type of proof is typically required for a CTF challenge?", "completion": "especially because it\u2019s easier to get into. So a typical CTF offers a bunch of different challenges that you have to solve. Most commonly you have to exploit some kind of service so you get remote access to the server, so you can then read the content of a file that contains a special string, the flag, which is proof that you hacked the system. You can then enter that string in a form and you get points depending on how hard the challenge was for your team. Usually a challenge has a title, a short description and maybe infos on how to reach the service or a file to download."}
{"prompt": "What was the challenge called at the HITCON CTF 2014?", "completion": "Oftentimes the title or description is already a small hint. So for example there was a challenge called sha1lcode at the HITCOn CTF 2014, and without really looking into the challenge I already assumed that you have to write shellcode, and it has something to do with sha1 hashes. Maybe writing shellcode in the form of sha1 hashes. And indeed, that was the solution in the end. There are a lot of different kinds of challenges, and sometime you get some new creative ones, but the typical topics covered are reversing,"}
{"prompt": "What type of CTF challenges might involve reversing engineering?", "completion": "pwning, crypto, web and maybe misc or programming. Reversing usually comes with a executable, a program you can download and run locally. The program implements some kind of algorithm that checks an input key. If you find the correct key, which is oftentimes already the correct flag, then you solved it. So solving it requires you to reverse engineer and understand the implemented algorithm to deduct the correct input key. A good example for that is my Zwiebel video write-up. For pwning challenges you often get also an executable, but with it an IP address and port of a server running this program."}
{"prompt": "What techniques are used to solve advanced CTF challenges?", "completion": "So you have to figure out how to exploit the program to gain remote code execution. You develop your exploit locally and then use it against the server, where you can then read the flag file. These challenges range from simple buffer overflows to very advanced heap feng shui stuff. And they are the most interesting ones to me. The cookbook challenge vide writeup on my channel is one example of such a challenge. Crypto, like the name says is about cryptography. Sometimes it\u2019s about attacking a self-made cipher, or very simple crypto attacks like weak random generators."}
{"prompt": "How can one bypass authentication in a web challenge during a CTF event?", "completion": "But it can get really advanced and mathematical. Where you are basically lost if you are not up to date with the research and papers form that field. I have a simple crypto video writeup from the Internetwache CTF that gives you an idea, but there are way more advanced ones where I just yield. You should check out hellman\u2019s writeups. Web challenges are also clear, they are about web applications. Usually you get a URL and you have to exploit maybe a advanced SQL injection, or bypass authentication."}
{"prompt": "What is the best platform for finding CTFs?", "completion": "Sometimes even XSS or CSRF challenges. I also have a web challenge writeup where you can get a feeling for what it is about. Misc basically covers anything else. And programming is also self explanatory. Mostly it\u2019s about clever implementations of solving some kind of problem. Now that you are excited about solving some of these challenges, let\u2019s talk about where you can find them. The best platform for all of this is ctftime. It\u2019s made by the CTF community for the CTF community. You can see which CTFs are upcoming and you get information like the format, when it happens and where to register."}
{"prompt": "What is the point system of hard and easy CTFs?", "completion": "You can also see the archive of competitions in the past. So for example the HITCON CTF recently. And below, you see the final ranking of all teams. Each CTF has points attached to it. Hard CTFs have high numbers like 50, or 75 points. Easy CTFs have maybe only 5 or 10 points you can get for them. So if you participate in a very hard CTF and do well, you are rewarded more than for easy college CTFs where you can easily get rank 1. But those CTFs are also really damn hard. At least I struggle a lot with them."}
{"prompt": "What is one way to find a CTF team?", "completion": "Over the year the CTF teams collect these points and you have an overall ranking. Being in the top 50 is quite challenging. But how to find a team? Well it\u2019s like finding a group of friends. There is no one way how to do it. I found my group from another security competition I participated in. And we kept hanging around on IRC and started playing other CTFs. And suddenly we had a serious team. Before that I played CTFs solo, which meant I would maybe solve only one challenge per CTF but that\u2019s fine, I can\u2019t compete with the crazy skilled people anyway, and I just play for my own curiosity."}
{"prompt": "What websites can I use to find CTF challenges that are available forever?", "completion": "But you could also checkout the reddit CTF team OpenToAll, which is, like the name says, open to everybody. But all these CTFs are usually short. They are over a weekend. Maybe 48-72 hours. But there are also websites where these kind of challenges are available forever. So I played a lot on w3challs, smashthestack and overthewire. In the beginning you will realize you know nothing. You fail every challenge you try. But that\u2019s normal. So what I always do, I will look up the challenge after the event."}
{"prompt": "How can I gain experience with CTFs?", "completion": "Because people create writeups or upload their exploit script. And then you can work through those solutions. You can research topics you didn\u2019t know about. You see how other people solve it. And you start to gain experience. And you will see that after a couple of CTFs you start to be able to make progress yourself. So for that prupose you should look up the writeups on ctftime, or the ctf writeup github repository (maybe contribute yourself by gathering other peoples writeups and create a pull request),"}
{"prompt": "What hex editor does the speaker use to inspect the RTMP protocol?", "completion": "Let\u2019s have a look at another ffmpeg vulnerability. Again Paul will walk us through the vulnerability that he found together with Emil and I try to understand it and add some comments. Hopefully to make it a bit easier to understand. In the previous issue we achieved code execution quite easily, this time we will have to be much more accurate during exploitation. This crash was found during fuzzing the RTMP protocol. This protocol is binary, so let\u2019s open this open up in my favourite hex editor called radare2."}
{"prompt": "What is the maximum size of each chunk in the RTMP protocol?", "completion": "I like to use it when viewing binary files, because it has a very shiny UI. Nothing too special here, just some binary data. So let me tell you something about this protocol, while I am launching the binary once again. RTMP stands for Real Time Messaging protocol, actually it was developed by Adobe for real-time streaming of audio and video. The protocol has actually a lot of stuff inside and I had to spend some time learning the specs before getting into exploitation. All you need to know about the RTMP protocol so far is that it does a handshake first and then it starts to transfer data in small chunks and maximum size of each chunk is one hundred and twenty eight bytes."}
{"prompt": "What is the purpose of the channel_id in RTMPPacket?", "completion": "Now, let\u2019s dig up into the source code once again. So after passing the version check and doing some handshakes we end up in packet read function in rtmppkt.c . This function simply reads one bytes of the header and then call the most important function in a loop. And this is the function which does all the parsing of the protocol. There are a lot of structures, functions and allocations and all of them are important. As you can see each chunk has the channel_id. It is basicly identifier of each RTMPPacket in the array, which corresponds to its own buffer."}
{"prompt": "How does the RTMPPacket structure get filled in the array when the current channel does not exist yet?", "completion": "One channel may be filled by multiple chunks, because maximum size of each chunk is hundred twenty eight bytes and packet data might be much larger. Each chunk has fields like size, type, header, timestamp and some extra data. So if the current channel does not exist yet, RTMPPacket structure is filled in the array and a buffer is created for it. So the av_realloc function with NULL pointer means simply, do the allocation ofthe corresponding size, Otherwise data is just filled in the existing structure and the buffer."}
{"prompt": "What happens if an attacker sends a packet with the same packet ID again but with a different size?", "completion": "So if you will pay enough attention, you may notice an issue there, when the structure is filled for the second time, there is not check that the buffer size passed for the second time is actually the same that the size of the allocation made the first time. And this how we manage to overflow the heap. Ah yeah this makes sense. So the packet contains a channel ID read from the header. And if this packet was not seen before it will alocate it with the size. But if an atatcker sends the packet with the same packet id again with a different size it will not be reallocated."}
{"prompt": "What is the process of exploiting the CVE-2016-10191 heap overflow vulnerability in the RTMP protocol?", "completion": "Let\u2019s visualize that. If we send a packet with id 1 and size 0xa0 it will get allocated. Then we can send another packet with id 2 and the size 0x80 and it will get allocated after the first one. Now we send again a packet with id 1 and a much larger size, like 0x200. Now we overflow stuff on the heap. Awesome. Let\u2019s try to gather some primitives from the source code. So we could allocate a data chunk by sending a new channel ID. We could overflow the chunk next to it by changing the size And we could also trigger the reallocation inside the rtmp_check_alloc_array function."}
{"prompt": "What technique is used to exploit the RTMP protocol vulnerability in CVE-2016-10191?", "completion": "If we send a channel_id large enough we will trigger the reallocation of the control structure and it will be positioned right after our buffer we can overflow.. By doing this little heap magic we overflow the pointer to the data and get arbitrary write. That\u2019s a super easy plan. We just force the reallocation of the array that contains the pointers to the data chunks, and thus the array will be allocated now after the one data packet we have. And then we send again a packet with this id to overflow into this array."}
{"prompt": "What is the purpose of the create_payload and create_rtmp_packet functions in the exploit?", "completion": "And thus control the address of those data chunks and can point it anywhere we want and thus also write there. So I already did some preparations before and wrote a little proof of concept, because most of the work here was counting the offsets. So there are the functions I wrote. These are lambdas for packing our integers using little endian. create_payload function helps me to pack data into the RTMP protocol. And create_rtmp_packet function will help me to create fake rtmp structure on the heap."}
{"prompt": "What technique does Paul use to create a control structure on the heap?", "completion": "Now let\u2019s take a look at the main code. So here is the handshake happens. After the handshake I send first payload with size just a bit bigger than 80 bytes in hex, and some \u2018A\u2019s and the channel_id number 4. I do this, to create control structure on the heap. Next I send some data with larger channel_id to trigger the reallocation of the control structure. Next I overflow the next heap chunk, which happens to be the control structure and fix it\u2019s size, so that I will have no problems with the heap when I will be allocating more data."}
{"prompt": "How can an attacker gain control of the RIP register?", "completion": "I position the fake chunk on the place of RTMPPacket with second channel_id. As you can see there I position a realloc@got.plt instead of data pointer, so I will be able to write to it. As my last steps I write to got.plt with some data, and after I use the big channel_id once again to trigger the realloc function. All of this should give us control of RIP register. Let\u2019s see. Super straight forward exploit, right? If you can overwrite an addresses in the control structure, in this array, you can point it anywhere and write data to it."}
{"prompt": "What techniques can be used to achieve code execution in a vulnerable program?", "completion": "So here is ffmpeg in gdb with the triggered segfault. And it does, because we have successfully overwritten the .got.plt section. Achieving code execution should be easy from now on. I hope that this video motivated you a little bit and shown, that real-life exploitation may be rather simple and this will encourage you to make your own research. Good luck. That is a really great example. Thank you so much Paul for sharing this with us and all the work you have put into recording. Make sure to follow him on twitter and check the description for some links."}
{"prompt": "What logo and intro did the channel use before creating the new one?", "completion": "Hello everybody, let\u2019s talk in this loopback video about the recent events. First we will talk about the new logo and intro, then about reaching 10.000 subscribers, that\u2019s why we are doing a small Q&A. And a little bit of an outlook into what\u2019s coming next. So that was the new intro. Some videos I have edited before I created this, so don\u2019t get confused when you see the old one again. But what do you think about the new intro and logo? I know it\u2019s not the green hacky rabbit and console anymore, which I used to appeal to these people who are drawn to these misrepresentations of hackers and show them the \u201ccorrect\u201d way, and also because I\u2019m a sucker for these hacker stereotypes. Hack the planet!"}
{"prompt": "What style of video does the channel owner believe matches the new intro better?", "completion": "But I think these new style of videos, with the hand-drawn overlays, match this new intro better. I think it\u2019s more professional and future proof. Let me know what you think about it. Especially constructive criticism. The channel hit 10.000 subscribers recently, which is amazing, because it\u2019s such a niche topic. But that shows to me, that there is real demand for this kind of content. And people appreciate it as valuable information. Which makes me really proud. So, now I\u2019m going to answer questions I got. I have to say, not many people sent me questions which is a bit of a bummer, but actually, I think this just shows that you are more interested in technical content,"}
{"prompt": "What techniques or tools has the creator of the video used to learn and practice computer security?", "completion": "rather than the social youtuber interaction personality thing, which is also why I don\u2019t show a face. I want this place to be about learning new things about computers. Not me. And now let me do a 180 on this opinion, and answer some personal questions :D Do you practice these things alot? Most of what I do is practicing or learning in a way. Especially playing CTFs you have easy stuff you have done before and you get faster, or new things to practice new tools or techniques. One benefit of this channel is, it forces me to not brush over topics but make sure I understand them properly."}
{"prompt": "What kind of work does the video creator do?", "completion": "So creating these videos is very convenient practice. Do you make money with those skills? I work as a freelance penetration tester, or maybe betetr described as application security analyst. I look at code and software, mostly web, from customers and try to find vulnerabilities. It\u2019s a lot of fun, I\u2019m very lucky I can do this kind of work, and it allows me to be very flexible. Especially because I still have to finish my masters degree at university. Do you have an or many Idol(s) (someone you look up to for one or more reason(s))?"}
{"prompt": "What is the speaker's attitude towards their own level of intelligence?", "completion": "Everybody who is better than me in something. So that\u2019s a loooot of people :D There are just so many who I admire for their contribution to this field that I couldn\u2019t even start a list. There is no single idol I follow, but more of an Ideal that I thrive towards. Would you consider yourself skillful, cognitively gifted, or both? I would say I\u2019m not stupid. School was pretty easy with a few exceptions like languages. But I have seen a lot of peers understanding certain things a lot faster a lot deeper than me. And I benchmark myself against these people."}
{"prompt": "What challenges has the speaker failed while spending an inconceivable amount of time in front of computers?", "completion": "And you have to understand that I have spend most of my life in front of these computers, and I have days where I don\u2019t leave the apartment. And my friends are also not really the types that constantly do stuff. So all the skill I have, I have because I spend an inconceivable amount of time doing this. And I\u2019m still no expert. I still fail the hard complex challenges and I still haven\u2019t created an iOS or Browser exploit. I\u2019m trying to catch up but it\u2019s hard. And so, knowing how much time I have spent, and I have not been able to compete with people at Pwn2own or CTFs, shows me that I\u2019m in no way gifted."}
{"prompt": "What are some strategies for overcoming exhaustion when working on a challenge?", "completion": "And there are many people who are much faster than me. What are some things you're currently trying to \"hack\"? Ehm, there are always work related projects I can\u2019t talk about. Or things that will make it into a video, like the embedded hardware CTF that is currently running. When you get exhausted during a challenge, what symptoms do you have and how do you mitigate them? I turn in a circle. I try the same things over and over hoping it would magically work, or that I have overseen something. That is a time killer. I also start watching youtube videos instead of working. The best thing is to take a break, like a shower, or a quick shopping trip."}
{"prompt": "Have you used game hacking to find any bugs in Guild Wars 2?", "completion": "do you (or did you at some point) play video games? Yeah I do play occasionally. Not much. For a long time it used to be Guild Wars 2, did some cool hacks with that, maybe it\u2019s something I can show off some time, but because it\u2019s still a very active game I feel a bit uncomfortable disclosing it. And currently I like to play Overwatch, because I can play quick rounds when my brain needs a break. Have you found any zero day bugs yet? And if so, how did you find it/them :D I did find bugs you can consider 0day, but they were nothing great. Nothing world breaking."}
{"prompt": "What type of computer does the speaker use for their work?", "completion": "Not in any way comparable to cool remote memory corruption bug in a popular sofawre. So I\u2019m still hunting for a cool one. The ones I found were mostly web related and found during work. So also something I can\u2019t talk about at this point. But believe me, nothing exciting. What are you using as your productive system? I use a MacBook for most of my work. With VMs as I need them. And also have a Windows Desktop PC for editing or overwatch. As well as multiple Laptops with Linux or whatever on it. But mostly I work on mac."}
{"prompt": "What is the current pace of the video series?", "completion": "So, now, what will come next. We are almost done with exploit-exercises.com protostar. That will be a great milestone for me. This basically means I have now a whole series that covers the basics of exploitation, and which I believe is one of the better tutorials on the topic on the internet. I will push through this, with two videos a week on friday and tuesday, which I have done for a while now, but I can\u2019t keep up this pace for much longer. I spend too much time on this, and while it\u2019s fun, I can\u2019t neglect my real responsibilities too much."}
{"prompt": "What is the schedule for releasing videos after Christmas?", "completion": "So with christmas coming up, and finishing protostar, I will start moving to a once a week schedule. And hopefully the one or other video in between. But ignoring this huge disappointment, we will slowly move into the modern age of exploitation with ASLR, DEP and so forth.Also in february the embedded hardware CTF will be over, so you will get a bunch of low-level related videos then. Otherwise, I currently plan to make LiveOverflow stickers, which if they turn out to be ok, will bring them to the 33c3 congress in december and will distribute them on the well known tables around the conference for people to grab."}
{"prompt": "What is Google's Vulnerability Rewards Program?", "completion": "I\u2019m really excited about this video, because Google wanted to sponsor a video talking about a security vulnerability that somebody found in one of their products Think about this: They want to pay money, so that I very publicly share \u201cGoogle had a security issue\u201d. That might sound CRAZY for most other companies, but we know Google has always had a great Vulnerability Rewards Program. They have always been very open and inviting when it comes to bug bounty. But still, this kind of exposure to a much wider audience is an experiment."}
{"prompt": "What regulations require the \"advertisement\" label for this video?", "completion": "So yeah, they basically said to me: \u201clook. We connect you to some bug bounty hunter, so they can tell you about a vulnerability they found. And just make a LiveOverflow video like you always do.\u201d I couldn\u2019t imagine anything more perfect than this. They didn\u2019t give me any talking points, didn\u2019t say what I can\u2019t say, just \u201cmake a LiveOverflow video\u201d... Alright then! So because of regulations it says \u201cadvertisement\u201d up there, but believe me, all they did was: asking a couple of researchers if anybody would be up for making a video with me,"}
{"prompt": "What is the name of the bug bounty hunter from the Netherlands featured in the video?", "completion": "and so here is Wouter. Also known as wtm. He is from the Netherlands and is a full-time bug bounty hunter, and spends a LOT of time researching and finding bugs in Google products \u201cBasically Eduardo got in touch with me and asked me to demonstrate a bug to you. I think it should give you an idea of what kind of bugs google is looking for. And it also should provide some background information on how you can start finding bugs in google products. Anyway, this is my approach. Other people might be doing it differently."}
{"prompt": "What resources are available to users in the Google Cloud Console?", "completion": "But I will show you a bug and you can do with it what you want.\u201d  So the bug Wouter found was in the Google Cloud Console, specifically in the Cloud Shell. As you can see, this looks like a regular IDE. A text editor to write programs. But there is more to it, because when you look here at the bottom, you can see a shell. Here is how Google describes this app : \u201cYour Google Curated Admin Machine Google Cloud Shell provides you with command-line access to your cloud resources directly from your browser."}
{"prompt": "What command line tools are available in Google Cloud Shell?", "completion": "You can easily manage your projects and resources without having to install [...] tools on your system. With Cloud Shell, the [...] gcloud command-line tool and other utilities you need are always available, up to date and fully authenticated when you need them.\u201d While this sounds like a sales pitch for potential Google Cloud customers, it\u2019s equally a sales pitch for bug bounty hunters: \u201cEverything you can do on the cloud platform, you can do from this box.\u201d In other words: \u201cTARGET ME! I\u2019M VERY CRITICAL!"}
{"prompt": "What command is used to configure the gcloud client in Google Cloud Shell?", "completion": "FIND BUGS HERE AND IT GIVES YOU LOTS OF MONEY!\u201d \u201cI\u2019m opening my project by default. But this can be any project. I can create a new project and open it the same way. And the only thing this thing does at the top, it configures the gcloud client. So it\u2019s already configured, and you can start working immediately. Let me show you. So now you see my session is configured for the dev-shell project. And when I issue this command, you will see some instances I created for this demo. So you can imagine if you can compromise or gain access to another user\u2019s cloud shell,"}
{"prompt": "How does Google stimulate people to open GitHub repositories in their cloud shell?", "completion": "it would mean you can get access to all resources.\u201d Awesome. I guess everybody understood the purpose of this web application: You can manage all your cloud services, and because of that, it\u2019s very critical - so it\u2019s a great target to hunt for bugs. But it\u2019s also a complex system, which means you first have to get familiar with it. And one particular feature seemed intriguing: \u201cIf you look at the documentation, you can see Google is stimulating people to open GitHub repositories into your cloud shell."}
{"prompt": "What does the URL provided in the video do when clicked?", "completion": "Because it\u2019s a place meant for development. So you are likely to pull in some code from github to do some development. You can see they provide you with an API. you can create buttons in your github repo like this with markdown. So what this basically does is you open a cloudshell URL. And then you pass in the github parameter. And when you open this URL it will download code from github. It will do a git clone and will appear on this side. I will show you with a repository I prepared for this. If you click on this button, you will see it switches over to cloud shell and it will ask me if I want to clone this stuff into my shell."}
{"prompt": "What is the purpose of the git clone in the video?", "completion": "There is nothing special about it. It\u2019s just a git clone. So I assume it\u2019s safe and I clone this. Okay, here you can see it\u2019s starting to clone. And that\u2019s basically the readme from my github repository. Why is this feature so intriguing? He looks at it this way: So my initial thought was: You can easily download content into your home folder on the cloudshell. That\u2019s what it\u2019s meant for. You download github content into the cloudshell. But is this content really safe?\u201d Okay, that\u2019s a great research question,"}
{"prompt": "How can a bug bounty hunter determine if downloaded content can do anything bad?", "completion": "right? That\u2019s a good direction to look for. But how do you figure out if downloaded content can do anything bad? You have to be sure, that no other processes are interfering with the content we\u2019ve just downloaded. So I started looking into the inner workings of cloudshell to see if any other processes are looking at the contents I run in my home directory. To see if there are vulnerabilities there. That makes sense! You download files into your home directory, but it\u2019s just a git clone. So in order for something bad to happen you either find a bug in git clone itself, or something else has to access the files and do something bad."}
{"prompt": "What processes are running inside the Google Cloud Shell?", "completion": "And \u201csomething else\u201d is, of course, another process. So he had to figure out if some process reacts to the files being downloaded. Which means he has to dig into the inner workings. Now let me show you a bit about the shell itself. If you look at the processes running inside, you can see there is not much going on. Because what I was expecting at first when I saw this. I was expecting to see some IDE related processes. As you can see there are no IDE related processes here. So this must be a containerized application."}
{"prompt": "Can theia, the IDE used in Google Cloud Shell, be exploited for XSS issues?", "completion": "So I wanted to start finding bugs in the IDE. it\u2019s called theia btw, the IDE. It\u2019s open source you can download it to play with it. There is a lot of stuff going on, but you can only see part of it. You only see the ssh connections coming in. and you see some scripts used for monitoring, to make sure google knows you are alive. But other than that, there is not much going on inside your shell itself. Looking for bugs in this open source project theia makes sense. You could for example look for XSS issues triggered by files that you open in it."}
{"prompt": "What is the difference between the default docker socket and the socket inside the docker container?", "completion": "Or maybe the markdown rendering has bugs. But he was wondering why you can\u2019t see the theia IDE when looking at the processes. This means the shell and the IDE run in different parts. One thing that I noticed is that there are two docker sockets available. This one is the default docker socket. As we check this socket out, we can see there are no containers running. So this infact is a docker inside docker. My container, my cloudshell is running inside a docker container, but within docker container we also have a docker socket."}
{"prompt": "What is the purpose of the docker daemon process?", "completion": "But one that is really interesting I thought is this one. That is, as you can see in the pathname, it\u2019s a docker socket running on the host. And that in itself is not a security vulnerability but it allows you to escape from this containerized environment. Since we are allowed to connect to the host itself. Wait what? Escaping the container is not a vulnerability? Let\u2019s checkout the docker documentation. So docker works essentially by having a docker deamon process, which waits for commands by a docker client."}
{"prompt": "What is the default location of the UNIX domain socket used to interact with the docker daemon?", "completion": "So the docker command line tool simply interacts with the daemon via a socket, and you can say \u201cplease start or stop this container\u201d. Throughout the docker documentation you can find several traces about what this means. By default, a unix domain socket is created at /var/run/docker.sock, requiring either root permission, or docker group membership. So there is a \u201cfile\u201d that is a so called UNIX socket, and it basically can be used to talk to the daemon. And only root can talk to it, or any user in the docker group."}
{"prompt": "What steps can be taken to limit access to the Docker daemon control socket?", "completion": "And on another article there is a big warning about this: Warning! The docker group grants privileges equivalent to the root user. For details on how this impacts security in your system, see Docker Daemon Attack Surface. And on there they write: Only trusted users should be allowed to control your Docker daemon. Docker [...] uses a UNIX socket. You can then use traditional UNIX permission checks to limit access to the control socket. And the reason why it\u2019s so critical is because containers are not really isolated like a VM from the system."}
{"prompt": "What is the potential security issue that arises when allowing access to a socket in a container?", "completion": "If you can create arbitrary containers, you can just mount anything into a container. So you just gain access to the whole host system. That\u2019s why access to this socket is like giving somebody access to root. So yeah? Why is this not a vulnerability here? And I think this is a great lesson: Context matters. Yes you can escape that one container, but is the host system here really critical? Some people would consider this a vulnerability, but I know people at Google do not consider this a vulnerability."}
{"prompt": "What is the difference between looking around on the host and performing a Docker escape from the Google Cloud Platform\u2019s Cloud Shell?", "completion": "Because it all depends on what you do on the host. If the host doesn\u2019t contain sensitive information, it\u2019s not a problem to look around on the host and see what\u2019s underneath. And funnily enough, some time later, somebody else shared this finding on Twitter: One-liner Docker escape from Google Cloud Platform\u2019s Cloud Shell to the host OS. And they added: Reported to Google and it was determined to not be a security risk. So always keep that in mind. Every target might have a different threat model and sometimes it can be very weird."}
{"prompt": "What command does the bug bounty hunter use to specify a different socket for the docker daemon?", "completion": "I made a video once about a few interesting edge-cases for vulnerabilities, I link it up here, in case you are interested in seeing some discussion about it. But anyway. Let\u2019s see how the escape works and what insight it gives us. You can see here that he executes docker, but specify a different socket. Not the default socket of the docker daemon inside the container, but the socket from the underlying host. The host\u2019s docker daemon. Secondly we start that container and give it some extra priviledges."}
{"prompt": "What privileges and capabilities does the liveoverflow container require in order to access the host root filesystem?", "completion": "So we mount the proc filesystem, sys and the root folder of the host. And then we attach host-based networking. You can see at the moment we don\u2019t have the host based networks available. These are internal IPs reserved for container networking. And then we give it all privileges and all capabilities.then we start it and execute a shell. And As you can see, it allows us to look a bit deeper into the internals of what google is actually doing. Over here you saw we have mounted the rootfs inside the liveoverflow container."}
{"prompt": "What two containers are most important in the Google Cloud Shell architecture?", "completion": "And I will just change the root into that. So we are now still inside the container, but this container has a lot of privileges. And when we now list the containers inside, you suddenly see what\u2019s underneath the surface. And I will not go into detail of all of these containers, but it should provide other reasearchers a way to get started on cloudshell, or perhaps other google products. Because I\u2019ve noticed other google services have similar architecture. Now the two most important containers. Are this one."}
{"prompt": "What is the editor being used in Google Cloud Shell?", "completion": "This is our shell. And this is theia, it\u2019s the editor we see at the top. Awesome! Now we really get some deep insight into the environment. And that\u2019s also where he spent a lot of time on. For example, he tried to visualize all the different containers and how they interact with each other. Yeah, it takes a bit of time. And of course this is not the entire picture, because this is just what I am seeing. I\u2019m obviously not sure if this [is correct]. There are mistakes in my overview. But it works for me."}
{"prompt": "What debugging software did Wouter install in the theia container?", "completion": "According to this overview I managed to find a few bugs. And if I find new information I add it here. In case you wonder how exactly Wouter figured that out. It basically just comes down to having a good broad understanding how software is built and how you can debug stuff. Let\u2019s do an example investigation. Here he used his new privileged container to get into the theia container, the IDE. And as you can see it\u2019s a stripped down container. So you will have to install some additional software to start debugging."}
{"prompt": "What capabilities does a container need in order to use strace?", "completion": "So he installs procps and strace. Procps package contains tools like \u201cps\u201d, so you can list processes and strace can be used to trace systemcalls. I have used it many times before on this channel, it\u2019s a great dynamic debugging tool. BUT he has a problem, because this container runs without the capabilities to use strace. Or to be more precise, the container is not allowed to use the syscalls that strace would want to use for tracing. But from understanding the architecture of the system, he found out how to modify this container."}
{"prompt": "How does kubelet ensure that the pod remains in the state as described in the yaml file?", "completion": "It\u2019s actually orchestrated by kubernetes, and so he knows how kubernetes works and simply modifies the kubernetes config yaml file, and adds those security capablities to this container. Cloudshell will reboot, and that\u2019s because kubelet picks up the changes and wants to make sure the pod keeps running in the state as described in the yaml file. I was actually surprised that with these container changes the website just refreshes and reconnects to the IDE again. Hahaha, It surprised me too. But it took a few tries."}
{"prompt": "What challenges did the bug bounty hunter face during his research?", "completion": "Because I think I\u2019ve lost connection like 50 times and then you have to wait and reboot the machine. But now it works. And I have posted this on github so everyone can download it and give it a try if they like. When telling you the story of how he did this research, it sounds always so easy and straight forward. But I hope this comment by him gives you some insight how frustrating, slow and tedious this kind of research actually is. We are just summarizing into a few minutes probably hundreds of hours of work."}
{"prompt": "How can a bug bounty hunter debug a process in the Theia container?", "completion": "So now we can enter the theia container again and start debugging some of it\u2019s processes. Okay now you see the main process of theia. And we will be able to attach to it. We will write the output to a temporary file. But then suddenly everything broke again. It rebooted. Sorry. I don\u2019t know what happened. I just wanted to keep that in, because I need to keep reminding you, this is tedious frustrating work. Annoying stuff like this always happens. In a video it can look smooth, but real-life is not."}
{"prompt": "What system calls are used when creating a new folder in the cloud shell environment?", "completion": "Anway\u2026 let\u2019s fast forward to tracing the theia main process. This is setup. And now I will connect strace to the ssh daemon on the shell environment. Okay now let\u2019s say we create a new folder java code as you can see some processes are running. I will close strace. And see what happened. This is the theia container. The IDE container.And it connects to the actual cloud shell to start basically this jar. On this end we see the same systemcalls. Here we see the jar files firing up the language server."}
{"prompt": "What programming languages does the language server support?", "completion": "But what I\u2019m interested in is the behaviour of the language server itself. Okay. Now you saw one example how he is able to trace and see what is happening. And he found out that when creating a java project, it starts this java language server by using ssh to execute this jar on the other machine. There are language servers for any programming language. Such a program is used by something like this editor, to provide information for auto completion, it can check for syntax errors or can also help with syntax highlighting."}
{"prompt": "What can be done to ensure that files cloned from Github are secure?", "completion": "And so here he discovers an attack surface with the language servers: This file we just created. But this can be any file I just cloned from Github. So it\u2019s important that anything from GitHub is secure. And that the language server is treating it the way it should. If he can find an issue in the language server that is started when you open a certain file, maybe that could be an issue. And that\u2019s what he found. So this is just a regular repository. We have a java file we are trying to compile. Well we are not trying to compile it, but it\u2019s happening anyway."}
{"prompt": "What code was executed when the vulnerability was triggered?", "completion": "Let\u2019s see what happens. Okay it\u2019s in dutch and asks us if we want to clone this repository. Yes we want. You see the new directory popping up. My repository is being cloned. Yeah the language server is being fired up. Inside this workspace I created a build.gradle file. And inside this gradle file. Oh yeah, it just happened. Our code was executed. And this is the vulnerability. Wouter found out, that for whatever reason the java language server just automatically starts compiling any java project."}
{"prompt": "What does Google consider to be a safe action when using Cloud Shell?", "completion": "And gradle build files allow to specify shell scripts to execute during compilation. So without the user hitting build or executing a file, it just did it in the background. And as we mentioned in the beginning of the video, anything running in this shell can access all your other cloud stuff. So this is kinda bad. But here you can also see a very specific security boundary that google has defined. It should be safe to clone any repository. Of course if you clone an evil script and actively execute it yourself, that\u2019s your own fault."}
{"prompt": "What reward did the bug bounty hunter receive for finding the vulnerability in Google Cloud Shell?", "completion": "But a user does not expect a git clone to lead to arbitrary code execution. And Google didn\u2019t know about this behaviour either, this was not intended and that\u2019s why this is a vulnerability. And I know you are curious, he got 5000$ for this. That was really interesting. I personally learned a lot from this. At the end of our conversation I had the chance to ask him a few questions and got some great responses I want to share with you. Do you report every small odd thing you see, because it could be a vulnerability?"}
{"prompt": "How much time does a bug bounty hunter need to spend researching new targets and understanding how something works, versus actually looking for bugs?", "completion": "No I try not to send in everything. I believe my acceptance ratio is around 97%. Because you don\u2019t want to waste google's time. These are highly skilled and expensive engineers, so you should think about everything twice before you send it in. You don\u2019t want to put them into the position where they need to decide on the quality of the bug. And most of the case you just need to send in quality and wait what happens. How much time do you think is spent on researching new targets and how something works, versus actually looking for bugs?"}
{"prompt": "What percentage of time does the bug bounty hunter spend looking for potential vulnerabilities?", "completion": "70% of my time just doing reconnaissance and finding something that\u2019s interesting enough to give a close look at. But when you find something as for example like this target, then things start to shift and suddenly you can spend 100% of your time looking into these bugs. But overall I would say 70% of my time is just spent on finding the next thing to look at. Did you have any notable dead-ends when looking into this target? That\u2019s hard to say. I wouldn\u2019t have one specific dead-end in mind. But of course when you are doing bug hunting you have dead-ends everyday."}
{"prompt": "What is the URL for the Google Vulnerability Rewards Program?", "completion": "Because you have an idea, you try it out and 9/10 times they don\u2019t work how you think they were working. So I would say dead-ends are just daily business to me. I hope you enjoyed this deepdive into the bug hunting process. Maybe it even inspired you to head out now and research an application and possibly even find some bugs. I have linked the resources about this bug in the description, checkout the google vulnerability rewards program And please let me know: isn\u2019t this kind of sponsored video the best match that could ever happen for this type of video?"}
{"prompt": "What measures did the speaker take to protect himself on the server?", "completion": "Last episode concluded with me building the bee farm behind me. But this episode is gonna be wiiiild. So much stuff happened on this server. And I wanted to tell you about exploiting Cross-site scripting issues on Minecraft servers and another story about the protocol vulnerability I found in march. But first let\u2019s see what happened next on the server. As you can see, more people discovered the server and started playing on it. Which is super cool. But that also meant I started to get scared for my life on here, so I went into creative mode."}
{"prompt": "What creative methods do people use to mess with players on a server?", "completion": "This way they cannot damage me. Simplest cheat I can do on my own server. In my defense, I\u2019m lazy\u2026 AND I kinda have to do it especially when I want to stay AFK to record stuff. Otherwise players will mess with me. For example, see what they did here again. Imagine if they could actually kill me. This way, it\u2019s just funny. Anyway. I just wanted to figure out what people have been doing on the server so I kept flying around. The first thing I noticed were all the signs. There were so many new signs!"}
{"prompt": "What materials were used to build the house at spawn?", "completion": "While a building or destroyed terrain is always a sign of life, signs are kinda special because they are an actual message somebody typed out. So awesome to see. So while I have seen quite a few players online and seen so many signs, I do not see much happening at spawn. Except this one house! Which was actually built somewhat in the style of the other houses. Pretty empty inside, but I\u2019m happy somebody built something here. Not so happy I\u2019m about this crappy wall up here. WHAT IS THIS? Hopefully somebody cleans this up."}
{"prompt": "What methods were used to explore for secrets underground in the video?", "completion": "I also used the Xray mod we have developed in a previous episode to hunt for more secrets underground. But nothing really jumps out. I did however find these signs! Somebody didn\u2019t want to explore more because the videos are getting released very slowly and are like 1-2 months behind the state of the server. So apparently too many spoilers here to see. But\u2026 I don\u2019t think there are too many spoilers. I cannot find new stuff anywhere I\u2019m flying\u2026 at least I got to meet some players. Here we tried to take a selfie!"}
{"prompt": "What was the purpose of the bedrock hole with lava and campfires built by the speaker?", "completion": "Mhh\u2026 well this is the state of the server end of june. And more and more players are going to find the server. So maybe I just have to give it a bit more time. Hopefully in the future there will be more to see! Over two weeks have passed now. And oh my god what happened at spawn. Remember how I built this bedrock hole with lava and campfires. It was supposed to be a jail for people to only get out with hacks. And this spawn cannot be modified by anybody besides me. So WHERE IS THE LAVA, MY CAMPFILE AND WHY IS THERE OBSIDIAN???!"}
{"prompt": "What is the potential security vulnerability that was reported in March?", "completion": "Uh! There is a person! CAUGHT IN THE ACT. What can you say for yourself?! Did you commit these crimes??? After interrogation and some light torture I can conclude they maybe didn\u2019t do this? But they did tell me how they found my server. Remember how I had leaked the IP in a previous video? Well this person is running their own personal archiving service and they had the original video still downloaded. The internet never forgets. Thanks for the chat but I have a crime to solve. Let\u2019s investigate more of the area."}
{"prompt": "What type of exploit did Herobrine use to gain OP on the server?", "completion": "we have a wooden frame around the spawn area. That must be the build border. Inside this area nobody can build. BUT there is some cobblestone. We have lots of signs around this area. Maybe one of them is the culprit. They are all SUSPECTS! Was it maybe YOU! OTTOMATED??? After more heavy torture they at least revealed to me how they found the server. And apparently, I f\u2019ed up again and didn\u2019t censor the IP properly. Apparently the IP was visible in the terminal window title. OM MY GOD. NO F\u2019N WAY!???"}
{"prompt": "What type of act of kindness was provided at the spawn point in Minecraft?", "completion": "How can I be so bad at censoring the server IP. Let\u2019s ignore this fail and come back to this here. WHAT HAPPENED AT SPAWN?! Oh wow look over there, a big wheat field. Whoever built this, probably didn\u2019t destroy spawn. Because this is an actual act of kindness. Providing food for all the hackers escaping the bedrock hole. Thanks for doing that! Love it! Let\u2019s see. Can we find anything else? OH MY GOD WHAT IS THAT OVER THERE?! IS THAT A ROLLER COASTER? Wow that looks amazing!!! Exit and entrance. Let\u2019s take a ride!"}
{"prompt": "What type of track is the roller coaster on in the video?", "completion": "Sand\u2019s and Syntxd\u2019s roller coaster. Here we can get a free cart. Place it on the rail and hit the button. Okay. On the sign it says \u201cHold \u201cW\u201d\u201d. let\u2019s do that. And off we go! wohoooooooooooo .. That\u2019s so cool. Let;s enjoy some music while we take a ride! That was awesome. Thanks so much for building this!!! I will visit again! We also have a small house here. With lots of banners. And maybe something in the nether? Mhhh\u2026 nope doesn\u2019t look like it. Let\u2019s fly back to base and see if anything changed there."}
{"prompt": "What type of construction is visible in the video?", "completion": "And indeed. Another house appeared! Really cool. OH\u2026 it\u2019s only half finished. And what is that. That is an ILLEGAL VILLAGER TRADING AREA! I DID NOT ISSUE A PERMIT FOR THIS!? This is pure ANARCHY. Uh another house\u2026 or\u2026 attempt of a house\u2026. Ok\u2026 cool. Also where did my big trees go? I always replanted them! All gone? Also the wall is still not fully built. Great\u2026 BUT OH MY GOD WHAT IS THAT BACK THERE?! That is new. LOok at that. Two bases built into the mountain. That is awesome! So cool. Love to see these builds."}
{"prompt": "What mysterious player was able to obtain bedrock to put the speaker in jail?", "completion": "At the lake where we went fishing early in the series also a trolmans skull appeared. Mysterious. As you can see. More and more activity. More and more builds. More and more signs. And nobody lavacasted my base yet!!! So that\u2019s incredible and really fun to see on a server only playable by minecraft hackers. By the way. Remember the mysterious player who was on the server from the beginning who was also able to obtain bedrock to put me in this jail? I\u2019m the only admin on this server... Or am I? Mh."}
{"prompt": "How can one investigate potential unauthorized access to in-game administrator capabilities in Minecraft?", "completion": "So clearly, the bedrock is evidence that somebody either found a bug in the game to get arbitrary items, or somebody got unauthorized access to in-game administrator capabilities, or somebody really hacked into the linux server. I guess this is like incident response or forensics. So let\u2019s go over some options? Could it be log4shell? Probably not, I\u2019m currently running 1.18.2, which is safe. Is there maybe a known bug in minecraft to acquire arbitrary blocks like bedrock in 1.18? Of course we don\u2019t know, but probably not?"}
{"prompt": "Is it possible to exploit a vulnerability in the Minecraft network protocol to gain access to a server?", "completion": "There could be, but stuff like that would be very powerful on any servers. And I feel like if somebody found a bug like that it eventually would have spread and we would get tons of stories about these crazy hackers. So I consider the chance of that very low. It\u2019s never impossible, just very low. So Maybe somebody got access onto the server for example through an ssh exploit? Also unlikely. Same reason. If there would be a ssh vulnerability it would be so powerful that it\u2019s worth millions of dollars and used in state-level hacking."}
{"prompt": "What information can be found in the ops.json config file?", "completion": "It\u2019s just unlikely somebody would use that against my minecraft server. So the only last option we have is maybe they got admin or OP permission in minecraft? Oftentimes this is done through malicious plugins, but I don\u2019t think I installed anything bad. But if a player got op permissions, the player should be included in the ops.json config file. So let\u2019s check it, cat ops.json. Oof. There it is. This other player somehow got OP. We could also check the logs to see when this player joined the first time, and maybe we see something in there that explains it to us."}
{"prompt": "What elements does the malicious script interact with to allow Herobrine to gain OP?", "completion": "Alright. Because I use the docker-minecraft-server setup with docker-compose, we can use docker-compose logs to print out all the logs. And then we can filter for the username with grep. Let\u2019s look all the way at the top. And do you see that? tags loading a javascript file? What does this script do? Without context we can just guess, but it looks like somewhere it enters the op command, and then it clicks an HTML element with the id sendRconCommand. Probably a button. And this is everything we need to know."}
{"prompt": "What is a cross-site scripting attack and how can it be used to gain access to a Minecraft server?", "completion": "This is a XSS attack. A cross-site-scripting attack. So let\u2019s say you rent a server at some kind of minecraft server hoster, they usually give you a web console for minecraft. In there you can do various admin commands like making somebody op. Of course, this is a website, written in HTML and javascript. As you can see, when a player writes a chat message, it shows up in the console. So what happens if a player sends a message with an HTML tag. For example . This tag tells the browser, this text is a header."}
{"prompt": "How is a fake command sent in Minecraft?", "completion": "And see that? The test is written like a header with large letters. But it would also be obvious ingame. Every other player would see a chat message, so instead of just a normal message, one could also send a fake command. So /asd and then a  tag. This way it\u2019s not a chat message and doesn\u2019t show up for other players. But in the console it is still shown. And this is a very serious vulnerability. As you can see when I try to change the gamemode to creative, I cannot do that. I\u2019m not an OP right now."}
{"prompt": "What is the trick for investigating XSS vulnerabilities described in the video?", "completion": "But if we send the whole payload like Herobrine, did, then we become OP. Made Liveoverflow a server operator. And we can now change the gamemode to creative. We can fly. We can change the time. And we can get access to any block we want, including bedrock. So let\u2019s investigate the technical details further. How this attack really works. And there is a neat trick for investigating XSS like this. In the website with the console we open up the developer tools. And then ingame we inject a script tag with a debugger statement."}
{"prompt": "What are the steps required to trigger the developer console when a website is vulnerable to XSS?", "completion": "So If the site is vulnerable to XSS, cross-site-scripting, it basically means instead of our input being displayed as literal text, it is interpreted as HTML code. And in that case the javascript code includes a debugger statement which is like a breakpoint. This can be used to debug and analyse code. When we send this message you can see that the developer console is triggered. Debugger paused. And we see our javascript code here. And look here at the callstack. These are all the javascript functions that were called leading to the execution of our malicious code."}
{"prompt": "What is the vulnerability found in the consoleUI script of the website implementing the browser console?", "completion": "We can look through the various function, but the most interesting to us is probably `writeToConsole` from the consoleUI script. So this is the code of the website implementing the browser console, specifically when new data has to be written into page. and here you can see that the data variable is our chat message. And it simply concatenates this data with other HTML code and appends it to the console-output. This is the vulnerability here. You must not take malicious user input and place it as HTML data onto the site."}
{"prompt": "What is a method for preventing malicious scripts from being executed in HTML?", "completion": "The fix for that is simple though. Instead of appending the HTML data, make it explicit that this is just text. For example by creating this row-stadard div element first, and then write the user input with innerText. This way you tell the browser, THIS IS JUST TEXT, this is not HTML code. Which means this malicious script is never executed. I just wanted to make it clear, in case somebody is confused. This is all a thought experiment, a made up example, storytelling, of how somebody could have gotten op permission."}
{"prompt": "What vulnerability did vktec test for when he did the world wide minecraft server scanning a few months back?", "completion": "(spoiler alert in reality I\u2019m herobrine, WOHA SHOCKING, I know who would have guessed. Sorry to ruin the mystery). But the point is, even if it\u2019s not real, it totally could be real. The hack we just talked about is absolutely something that could happen because the vulnerability is real. I just think packaging this vulnerability into a fun story makes it a bit more engaging. So a few months back when I did the world wide minecraft server scanning, and I tested for log4shell, I actually also tested for exactly this issue."}
{"prompt": "What is XSS and how does it work?", "completion": "I injected a script tag with a payload to test if it executes. Even though I scanned thousands and thousands of servers, I didn\u2019t find a single server responding. But this is the problem with this vulnerability. XSS is an issue where you don\u2019t attack the server, you attack another user. So Herobrine can only attack me with this XSS payload, WHEN I have this website with the console open. If this website is not open, there is nothing to interpret this HTML code. And most users never open this browser console."}
{"prompt": "What server hosting solutions are not vulnerable to the network protocol vulnerability reported in March?", "completion": "So randomly exploiting somebody with it is very very very low probability. But of course in a targeted attack, somebody could ask the server admin \u201chey can you check in the console something for me?\u201d, they open the browser and then you send the malicious message. Boom! You got admin on the server. So while it cannot be exploited on a big scale, it\u2019s still very useful in a targeted attack. Now of course not every minecraft browser console is vulnerable to this. For example, while I haven\u2019t tested pterodactyl myself, which is the server hosting solution a lot of people use, I did ask on their discord and people told me, when they tested this,"}
{"prompt": "What is the name of the company that was vulnerable to the minecraft protocol vulnerability reported in March?", "completion": "it didn\u2019t trigger. So this is not a widespread issue. But there is at least one minecraft server hoster who is vulnerable to that. I know that because I\u2019m a customer and I checked it. I actually reported it on the 3rd of March. Including a fix recommendation. I sent two emails and twitter messages but didn\u2019t get a response or acknowledgement. And over two months later, it was still not fixed. Also it\u2019s the Same company who didn\u2019t mitigated log4shell months after the vulnerability was publicly known."}
{"prompt": "What was used to solidify the lava in the restricted build area?", "completion": "But I\u2019m getting sidetracked. Let\u2019s come back to the original investigation. How did somebody remove the lava and add the obsidian here? More signs and more people. Maybe it was one of them? Mhmhhh\u2026. Let\u2019s investigate the crime scene further\u2026 Uh WHAT AM I SEEING THERE?! Is that a dispenser? With a water bucket inside? Just outside the restricted buildarea? Let\u2019s hit the button and see what happens. Oh wow the water flows all the way into the hole!!! That\u2019s what happened! They got water over there and it solidified the laval."}
{"prompt": "What is the \"known-plaintext attack on aes/cfb8 encrypted packets\" vulnerability reported by the video creator in March 2022?", "completion": "Turned it into obsidian. Also now non-hackers can escape spawn as well by swimming up the water. Sneaky. The cobblestone then is also probably a lavacast. Lava flowed a little bit into the build-restricted area and turned into cobblestone with water. MYSTERY SOLVED!!! I\u2019m so smart\u2026 But actually there are smarter people than me. Remember the vulnerability I reported in the minecraft protocol in march 2022? \u201cknown-plaintext attack on aes/cfb8 encrypted packets\u201d There is more to the story. When I submitted this bug some bird whispered me that somebody else had reported a related issue but a few months earlier."}
{"prompt": "What is the vector of the exploit that was reported in the video?", "completion": "And their report was apparently more critical than mine. What did I miss? Is there a more serious bug that I didn\u2019t see? THIS DROVE ME INSANE?! Here are my notes on what I heard about the other security bug. Trying to figure out what it was: 1. to my understanding an exploit with the same vector exists. 2. Their exploit idea is a bit different 3. they do exploit predictable AES packages and require the victim to be in the same network 4. BUT it could potentially be escalated into sending completely attacker-controlled packages,"}
{"prompt": "What methods were explored to exploit the network protocol vulnerability reported in March?", "completion": "not requiring specific actions from the victim, essentially allowing to completely play using the victim's account. 5. And their proof of concept also included using a proxy server as a way to observe packages. But their example merely shows the replay attack and getting kicked for invalid packages, not actually going further Oh my gosh. I started to contact lots of different technical minecraft players and brainstormed with a few of them. What could I have missed? Luckily. After about a week or so I finally got in contact with this other person."}
{"prompt": "What kind of encryption does Minecraft's protocol use?", "completion": "It was \u201cvktec\u201d. She is the genius who apparently found a more critical issue than mine in the same area of the protocol. So let\u2019s checkout her report. If you haven\u2019t seen the previous episode about the minecraft protocol before, or you don\u2019t remember it anymore, rewatch that episode please to refresh your mind. Because we head straight into the technical details now. So here it is: \u201cReplay attack against encrypted sessions\u201d. Minecraft\u2019s protocol uses AES-CFB8 encryption with no message authentication or nonces."}
{"prompt": "What type of encryption is used in the network protocol vulnerability reported in March?", "completion": "This makes it trivially susceptible to replay attacks. Mhhh\u2026 a full replay attack? So the public key of the server is probably always the same. And the CLIENT chooses the secret. So if we just record all initial packets, including the packet that contains the encrypted secret, which is then later used for the AES encryption, we can just replay all packets. Of course we don\u2019t know what packets were sent, and we cannot change the content. It\u2019s AES encrypted, BUT we can replay it. Because the encryption uses the same secret as before!"}
{"prompt": "What is the potential consequence of Minecraft not kicking players for sending invalid packets?", "completion": "Which basically means, if we recorded packets of a player joining a server, we can replay these packets at a later time, and basically join as that user again! But of course only replay those packets. So we cannot fully take over that account. Just perform the same actions again. yeah that\u2019s an angle I haven\u2019t thought about! I love that! I love that I stared at this protocol for such a long time and this attack idea didn\u2019t come to my mind! This is so awesome! But the report goes even further. Additionally, as Minecraft does not kick players for sending invalid packets, it is theoretically possible to replay actions out-of-order."}
{"prompt": "What is the importance of AES CFB-8 mode for exploiting the self-synchronization vulnerability?", "completion": "CFB-8 is self-correcting after 16 bytes of invalid data. Meaning an attacker can send the 16 bytes of data preceding the packet they want to send in order to replay an arbitrary packet. Oh my gosh yes! I mean I think some corrupted packets can cause you to disconnect. But generally speaking, this should work. When I explained AES CFB-8 mode in my previous video I left out an important part, but this way it was a bit simpler. That detail didn\u2019t matter for my vulnerability. But for the self-synchronization exploited here, it does matter."}
{"prompt": "How does AES-CFB8 mode work to encrypt a stream of bytes?", "completion": "In my graphic it looked like we always pass in one single byte into the AES decryption function. And we get a single byte out. But that is not the case. AES operates always on 16 byte blocks. So the trick is,CFB-8 mode works by shifting over the encrypted stream of bytes. Always in 16 byte blocks. So let\u2019s say we have some minecraft packets. These are for example two different long chat messages. This stream of bytes gets encrypted with AES CFB8 mode. In other AES encryption modes you would divide that into 16byte blocks."}
{"prompt": "What is the benefit of using CFB8 mode when encrypting a Minecraft packet?", "completion": "But in CFB8 mode, the byte blocks are shifted byte-by-byte, or shifted by 8 bits, that\u2019s why it\u2019s called CFB-8. So we always apply AES to 16 bytes, but because of CFB-8 mode only XOR the first byte and keep that as an encrypted byte. This way we slowly get a stream of output bytes.. Now on the receiving end, when the server decrypts these bytes, we again take a block of 16 bytes and start shifting it as well, and always XORing one byte to get an output byte. Now imagine we want to send this minecraft packet in a different order."}
{"prompt": "What type of encryption is used in Minecraft's network protocol?", "completion": "Or replay this packet again at a later time. So we take the encrypted bytes of our chat message. And we inject it into some other random packets. When decrypting the sliding AES window will now start decrypt gibberish for 16 bytes. Because these new bytes are not what was expected. BUT after these 16 bytes, at the start of our actual chat message, the AES CFB-8 mode basically self-syncrhonized and recovered the state. Now everything is getting decrypted correctly and we successfully replayed an older chat message."}
{"prompt": "What is the self-synchronization property of AES/CFB8 encryption?", "completion": "That is a really really cool attack. And comparing this to my issue, this is super fascinating. I think this attack describes a much more severe critical vulnerability. BUT it\u2019s also harder to pull off in practice. In contrast mine, admittedly still hard to exploit in practice, has a clearer attack idea, but impact is not that severe. On the other hand, this also has effects on my attack. I didn\u2019t understand the self-syncrhonization property of AES CFB-8 before, so I assumed after modifying a byte in my attack the decryption will produce garbage and the client always disconnects."}
{"prompt": "What are the two attack ideas discussed in the video that can be used to exploit the network protocol vulnerability?", "completion": "But that is not the case! The protocol can recover! It was so cool to talk to Vktec about this issue. And it\u2019s a really cool example of security research. Even though we both looked at the same area, and our attacks are both a result of the same bad crypto. She didn\u2019t think of my attack idea of modifying packets, and I didn\u2019t think of her attack idea of replaying packets. So when we combine our knowledge, combine our ideas and learn from each other, we actually get a more powerful attack. And that is beautiful."}
{"prompt": "What was the name of the pwnable challenge at the 34c3ctf?", "completion": "readme_revenge was a pwnable challenge at the 34c3ctf and in the end 30 teams solved it. Difficulty: easy-ish? \u201cYou can't own me if I don't use a libc! Right? Right?\u201d. We can download the binary here and this was the IP and port to interact with the challenge. When I read the title I knew immediately I had to try it. You see two years ago at the 32c3ctf there was a challenge called just \u201creadme\u201d. Back then I tried to solve it but failed. After the CTF was over I looked at writeups from other people and tried to understand it and even made a video about it. Two years ago I did not have the skill, knowledge or experience to solve it. So when I saw that there is a readme_revenge at the 34c3ctf I just felt like, I had to solve it. It was my personal challenge and in some way it was very close to my heart. It was a challenge I failed two years ago, and now I can proof to myself that I improved. So let\u2019s have a look at it."}
{"prompt": "What is the name of the original readme challenge that was referenced in the video?", "completion": "Like I said, the challenge reminded me of this older challenge and I assumed it was pretty similar. And it was easy to verify. For that challenge you didn\u2019t have to get code execution, but the flag was actually embedded in the file. And if you look at the strings of the binary you can see a placeholder flag. So the binary running on the server contains the real flag instead. And that is also where the name comes from \u201creadme\u201d. Your task is to read or leak this flag from the target binary. The solution of the original readme challenge was super creative and really blew my mind at the time. So I encourage you to watch it because I had that knowledge in the back of my mind when approaching this challenge. So while it was obviously not the same challenge, it was a \u201crevenge\u201d of the readme challenge, it was similar in many ways. So i had a pretty good idea already."}
{"prompt": "What is the output of entering a format string modifier such as \"%x\" into the program?", "completion": "But let\u2019s check it out. When we run it the program waits for input and then greets us with \u201cHi, liveoverflow, bye\u201d. So it just reflects what we write. I immediately checked for format string vulnerability and entered a format string modifier like %x, but it didn\u2019t do anything. I also just tried a long input and to my surprise I immediately got a segfault. Well that\u2019s a good start. Let\u2019s look at it in gdb. So I run the binary with the long input. FYI, If you don\u2019t know why my gdb looks so colorful, it\u2019s because I use the pwndbg gdb extension."}
{"prompt": "What instruction caused the segmentation fault in libc?", "completion": "But here was my second surprise, the binary had all the symbols still included, so we get all the function names. That\u2019s neat. So where did we crash? we got a segfault in printf? Inside of libc? To be more precise in __parse_one_secmb. That\u2019s weird. The instruction that caused the segfault is a compare where it calculates an address based on rax and rdx. And rax is clearly overwritten with As. So it tried to access bad memory. But in libc? Does this mean printf of libc has a buffer overflow vulnerability? Well."}
{"prompt": "What are the implications of storing a local variable as an offset from the instruction pointer instead of from the stack pointer?", "completion": "we will see. Let\u2019s have a look at main. Disassemble main. It\u2019s super short. We have a scanf, to read in a variable called \u201cname\u201d. And then we call printf with that name. There is a small but important detail here with the variable name. Usually local variables are placed on the stack, so they are referenced as offsets from the stack pointer. Makes sense, right? But in this case the variable is stored at an offset from the instruction pointer rip. This means it\u2019s not on the stack, if it\u2019s an offset of the instruction pointer,"}
{"prompt": "What section of the ELF binary does the address 6b73e0 belong to?", "completion": "so an offset to the binary itself. This means it\u2019s a global variable stored in a data segment. You can see here gdb has already calculated or resolved this address for us. RIP at this point would be this address + this offset here. So 6b73e0. And if we look at the virtual memory map of this process, we see that this address is in here. It says it would be \u201cheap\u201d, but I\u2019m not sure why it says that. Because I\u2019m pretty sure that\u2019s not a heap. If we look at the sections defined in the elf binary with objdump, we can see that the address belongs to .bss . Which is used for statically allocated variables."}
{"prompt": "What variables were overwritten in the example buffer overflow challenge?", "completion": "Anyway, let\u2019s go back to the crash. If we look now at the location where name is stored, we can print the memory. Here we see that there was a bit of a size allocated for the name. However we wrote much more As than that. Because we have all the symbols, we can also see which variables we have overwritten. So we overwrote a huge dl_static_dtv array. No idea what that is. We overwrote a dl_lazy variable, a dl_osversion variable. I mean we have killed a lot of stuff. And apparently libc printf referenced something from in here."}
{"prompt": "What is the purpose of statically building a binary with libc?", "completion": "mhmh... we have a very clear buffer overflow and we overflow global variables and many of those variables are libc internal variables. The binary was statically built with libc, which means the whole libc functions are part of this binary. that\u2019s the reason why those variables are part of our binary data segment. Usually, when dynamically referencing and loading libc, these variables would be located in the dynamically loaded libc memory. Anyway. Here we have found the vulnerability. So how can we turn that now into reading the flag from memory. Clearly just blindly overwriting data doesn\u2019t work, so let\u2019s do this systematically."}
{"prompt": "How can you take a snapshot of memory without an overflow in a binary exploitation challenge?", "completion": "I wanted to carefully control what I overwrite, so let\u2019s take a snapshot of the memory without an overflow. To do this I set a breakpoint at the end of main, then I rerun it with a small input and then I print the memory starting at \u201cname\u201d in 4 byte, or 32bit, chunks. I just keep enter pressed until I reach the end. So now I can get a huge list with all the memory and the symbol names. Then I copy the whole thing into sublime, and using some text editor hotkey magic to quickly reformat this data. Removing all the pwndg prompts, making it all a python comment,"}
{"prompt": "How can we convert a memory value to raw bytes in Python?", "completion": "and then taking the memory value. In the end I want to rebuild the whole memory with the correct values. So I will use a buffer variable where I will append the raw bytes. And in a second I will define a new function b32 that will convert this memory value to raw bytes. I can do this with import struct, and then struct.pack with capital I for 32bit values. I will also create a function b64, because we have a 64bit binary, so might come in handy as well. So now this python script prints the whole memory. Cool."}
{"prompt": "What is an example of a buffer overflow challenge?", "completion": "Theoretically if we use this to overflow the buffer, it will overwrite the memory with completely safe values. Basically not change anything. And indeed. It seems to have worked and we didn\u2019t get a segfault. But now comes the true challenge. What DO we overwrite that could help us leak the flag from the memory? Well, I didn\u2019t know. In the old readme challenge we smashed the stack cookie in a buffer overflow on the stack, which executed the stack smashing detection function. That function would print the program name. The program name is referenced from a pointer on the stack. And so overwriting that pointer with the same overflow on the stack, with the address of the flag, caused the flag to be printed when the stack got smashed. So I kept that inspiration in mind."}
{"prompt": "What is the purpose of the pointer to argc and argv in the video transcript?", "completion": "So I was just going through the symbols one by one and tried to find one that sounds interesting. dl static dtv, slotinfo list. Dtv gaps. Tls generation. Domain bindings, cat counter, exit fn called, prefetch multple threads. Debug. Gnah.. nothing immediately jumps out to me. Oh libc argv and libc argc, so there is a pointer to argc and argv as well? I keep that in mind! The old readme challenge also used an overwrite of the program name pointer to point it to the flag. So might be useful again."}
{"prompt": "What does the comment in the libc source code say about the printf function?", "completion": "Gconv lock. This all means nothing to me. Nothing screams \u201cHEY I PRINT YOUR FLAG IF YOU CHANGE ME\u201d. But then I reached the printf function table. And FUNCTION TABLE always screams: \u201cchange me and you can redirect code execution\u201d. But why is there such a thing as a printf function table? If we look up this function in the libc source code, we can maybe learn more about it. A comment here says \u201cArray of functions indexed by format character. \u201d and in here is also a function called \u201c__register_printf_specifier\u201d."}
{"prompt": "What is the purpose of the register_printf_function function?", "completion": "So if we google for that function we can quickly find that there is such a thing as \u201cCustomizing printf\u201d. \u201cThe GNU C Library lets you define your own custom conversion specifiers for printf template strings, to teach printf clever ways to print the important data structures of your program. The way you do this is by registering the conversion with the function register_printf_function\u201d Let\u2019s read up a bit more about it. This function takes a spec, a handler function and an arginfo function. \u201cif spec is 'Y', it defines the conversion \u2018%Y\u2019. You can redefine the built-in conversions like \u2018%s\u2019,\u201d \u201cThe handler-function is the function called by printf and friends when this conversion appears in a template string.\u201d \u201cThe arginfo-function is the function called by parse_printf_format when this conversion appears in a template string\u201d That sounds perfect! Our printf template string contains a %s. If we somehow could redefine the conversion for %s, we could define our own handler function. And could execute any code we want. I mean we can\u2019t call register_printf_function,"}
{"prompt": "What is the offset of the small 's' specifier in the printf_function_table?", "completion": "but we could maybe overwrite and modify the underlying table directly. If we look again into the sourcecode of the register_printf_function, we can maybe figure out how it would work if we want to redefine %s. So we would pass in a small \u2018s\u2019 as spec. And we would give it a function as converter and arginfo. And down here it simply uses spec as an offset into the printf_function_table and printf_arginfo_table. That sounds easy. We know there is a pointer to the __printf_function_table in the memory that we can overwrite, so we could point it to some other memory. And that memory should then have a function defined at the array position small s. So that would be at offset 0x73 or entry number 163 in decimal."}
{"prompt": "What function is used to overwrite the printf function table in the video transcript?", "completion": "Cool. So let\u2019s try that. First let\u2019s look for some memory area we could abuse for this. Let\u2019s try here _dl_static_dtv. Let\u2019s hope it\u2019s not important. So now we want to overwrite the printf function table to point there. Let\u2019s try it out. We write that into a file, set a breakpoint in gdb. And use the file as input. Now let\u2019s see the memory, oh it\u2019s not there\u2026 But it should be there? This is the stuff that could drive you crazy, but you need to chill and approach it logically. So the overflow happens because of a scanf."}
{"prompt": "What characters are considered whitespace in the scanf() function?", "completion": "The scanf used %s to read input. So let\u2019s checkout the man-page of scanf. The scanf() family of functions scans input according to format as described below. s Matches a sequence of non-white-space characters; The input string stops at white space. AHA! So maybe our memory dump contained some white space. So what are typical whitespace characters? Of course 0x20 a regular space is a whitespace character. But also new line would be a problem. And basically all of these.. So 0x09, 0x0a, B C and D. So let\u2019s make sure that these can\u2019t occur in our buffer. I just ad a few lines of code to replace these with a regular capital X. let\u2019s try it out."}
{"prompt": "What is the address of the array entry for the ascii value 's' in a 64-bit system?", "completion": "Oh segfault. Ok we clearly did something now. Let\u2019s checkout the memory in gdb. And yup! There is our value\u2026 But wait\u2026 that\u2019s not quite right? Why 58 at the end? OHHHHH\u2026 our address had a space too. Well good we caught that. So let\u2019s point it at 24 instead. Cool! next we want to try to set a function for %s. So from our new table address, we have to get the array entry for ascii value `s`, which is 0x73. Which means we have to take that times 8, because we are on 64bit so each array entry, each function address is 8 bytes wide."}
{"prompt": "What address does the function reference just before the calculation of rcx + rdx*8?", "completion": "Cool. So let\u2019s go to that address and write there a test values. Let\u2019s see if we successfully redirected code execution! We run it with the input. But hmpf. Segfault. Let\u2019s look at the code why. It tried to calculate rcx + rdx*8. HEY! That looks almost like what we calculated. Rdx is also infact the 0x73. So the letter \u2018s\u2019. But rcx is zero. So this calculation points to bad code. But why is that happening, didn\u2019t we overwrite the function table entry with a value? It shouldn\u2019t be zero? But if we look at the disassembly of this function, we see that it references the arginfo table just before it. HA!. we didn\u2019t modify that. Sooo\u2026 once we pointed that to the same address,"}
{"prompt": "What technique did the speaker learn from the old readme challenge to use with stack_chk_fail?", "completion": "we can try it again. both tables should be ok now. Let\u2019s rerun it with that. And we get a segfault at a call `rax`, and `rax` is the value we wanted it to be. Awesome! So what to do next? I first thought about pointing it to printf, and maybe we can somehow control the first parameter too, based on how this printf modifier function is called, but then decided to use the technique I have learned from the old readme challenge. Using stack_chk_fail. Let\u2019s get the address of that function. That could work. But to print the flag we also would have to control the program name pointer and point it to the flag. But remember, there was some kind of argv pointer in there too."}
{"prompt": "What is the modified function executed when printf encounters a %s as a result of overflowing the printf modification table?", "completion": "Previously it pointed into the environment variables on the stack, so let\u2019s just point it somewhere here. And then this is now a list of argument string pointers. And so the first pointer has to point to the program name. so we point it to the flag instead. This is the address of the flag in the file. I\u2019m excited. Will it work now? We pipe the exploit output into readme_revenge and BOOM! Stack smashing detected. And here is our flag! So what we did was, we overflowed the printf modification table and redefined what to do when printf encounters a %s. Upon finding the %s it took the address of our modified function table which pointed to stack_chk_fail instead. That function is then executed and gets the program name to show it in the error message. But we also modified the pointer to the program arguments, argv and pointed the program name, which is the first argument,"}
{"prompt": "How many bytes of data is the user allowed to control as input?", "completion": "NINTENDO Hireme! \u2026 is the name of a difficult\u00a0 programming challenge from Nintendo European Research & Development - short NERD. It\u2019s\u00a0 basically a CTF challenge and I would categorize it as a keygenme. So this C source code\u00a0 implements an algorithm that could be part of some software as a license key check. This code is\u00a0 probably the only NINTENDO software you are legally allowed to crack. Which I think is funny.\u00a0 The input you are allowed to control is here. So you have to find 32 bytes that when\u00a0 executing this, results in the output to be the target string \u201cHire me!!!!!!!!\u201d. On first\u00a0 sight I thought this shouldn\u2019t be too difficult,"}
{"prompt": "What ethical concerns did the presenter have about posting a solution to the Nintendo challenge online?", "completion": "but then I actually struggled a bit. In the\u00a0 first part I tell you about how I approached this and what I tried that didn\u2019t work. And in the\u00a0 second video we look more closely into my solution Before we start I briefly want to mention: it\u2019s an\u00a0 ethical concern for me that if this is an actively used recruiting challenge, I don\u2019t want to ruin\u00a0 it. I believe the right thing to do is generally not to post spoilers online, about something\u00a0 like this. But this challenge is over 5 years old and there exist already solutions online.\u00a0 So I don\u2019t think I\u2019m causing any damage. Anyway."}
{"prompt": "What is the name of the array that is written to at the end of the Forward() function?", "completion": "First step is obviously to get a rough\u00a0 overview of the code. We have a big array called \u201cconfusion\u201d with 512 bytes, a big\u00a0 diffusion array with 32 32bit integers, that look pretty random, and the input array. The main() function is very short, it simply defines two arrays, the target and the output.\u00a0 The output is given to the Forward function, and then afterwards 16 bytes of the output are\u00a0 compared with memcompare to the target. So the Forward() function should write the output. And we\u00a0 can see that the output is the second parameter of Forward, which inside the function is called d,\u00a0 and it\u2019s written right here at the end. Easy."}
{"prompt": "What is memcmp and what does it return when the compared bytes are the same?", "completion": "When you execute this little program, it doesn\u2019t\u00a0 print anything, nothing seems to happen. but it returns the result of memcmp, which if you have\u00a0 some experience with programming and linux, you know that it will be the exit code. And the\u00a0 bash shell can print the last exit code with $?. Memcmp returns 0 when the compared bytes are\u00a0 the same, or non 0 , when they differ. So when we execute this and look at the exit code,\u00a0 we see it\u2019s 10. Which means the currently set input bytes do not result in the output\u00a0 to be equal to the string \u201cHire me!!!!!!!!\"."}
{"prompt": "What is the purpose of using two for loops in the video to print the generated output bytes?", "completion": "At this point I\u2019m lazy and I don\u2019t really\u00a0 want to read the source code in detail yet. Maybe it\u2019s a simple algorithm and\u00a0 the solution can be simple too. So I decided to simply add a debug output\u00a0 that prints the generated output bytes. For that purpose I write two simple for loops\u00a0 that go through the 32 bytes and print each byte, one time as hex value, and one time as an\u00a0 ascii character. Just in case if you are wondering why I don\u2019t do simple printf instead\u00a0 of the single character, it\u2019s because the output might contain non-printable ascii characters\u00a0 such as null-byte, and then printf won\u2019t print the full byte sequence as ascii. And for what\u00a0 I want to do next, I want to see each byte."}
{"prompt": "What is a chosen-plaintext attack?", "completion": "You can also now see that the current\u00a0 input bytes lead to the output \u201cReverse me fast\u201d. Which is obviously not \u201cHire me!!!\u201d So\u2026 My first attempt to attack this algorithm is what in cryptography you would\u00a0 call a \u201cchosen plaintext attack\u201d. \u201cA chosen-plaintext attack is an attack\u00a0 model for cryptanalysis which presumes that the attacker can obtain the ciphertexts for\u00a0 arbitrary plaintexts.\u201d maybe you wonder what this here has to do with cryptography. Well\u00a0 this could be understood as an encryption."}
{"prompt": "What is the goal of a chosen ciphertext attack?", "completion": "The input is 32bytes and the output is 32bytes, so\u00a0 you could also think of this as encrypting our 32 plaintext input bytes to the output ciphertext.\u00a0 Of course the reverse could also be the case. Maybe this decrypts the bytes and what we have\u00a0 is a chosen ciphertext attack. It doesn\u2019t matter. The goal with both is \u201cto gain information that\u00a0 reduces the security of the encryption scheme.\u201d. There are very fancy mathematical\u00a0 correlation attacks or whatever, and I have no clue about them, but a very very\u00a0 simple thing you can test is, if I change one byte of the input, how does it change the output?\u00a0 If I change one byte, and it only changes one byte on the output, it would be trivial with\u00a0 trial and error to find all the correct bytes."}
{"prompt": "What type of attack is not possible with the challenge presented?", "completion": "And so that\u2019s what I started with. I take\u00a0 the first byte here and change it minimally, and look at the new output. But as you\u00a0 can see the output changes dramatically. And this happens when I change the first byte, the\u00a0 second byte or also the last byte. With the debug output it\u2019s very clearly visible that changing the\u00a0 input minimally has huge effects on the output. So this very trivial attack is not possible.\u00a0 There might still be less obvious mathematical correlations you could statistically analyse,\u00a0 but I don\u2019t know how exactly. And I\u2019m lazy."}
{"prompt": "What type of array is never modified in the algorithm?", "completion": "Dammit. I guess I need to dig deeper. This means\u00a0 I need to get a first overview of the algorithm. As you can see the variables passed into Forward\u00a0 are differently named than the ones used inside. So I want to clean that up. C is the input, d\u00a0 is the output, s is the confusion array and p is the diffusion array. Now the code is a\u00a0 bit easier to read. Now the first thing I noticed was that the confusion array\u00a0 and diffusion array is never written to. It\u2019s never modified. It remains constant. And the confusion array is always only used as a lookup. They pass in a byte and take whatever\u00a0 byte is stored at this location in the array."}
{"prompt": "What is an S-box and what is its purpose in cryptography?", "completion": "I\u2019m not a crypto expert, but I would call this an\u00a0 s-box. And the original variable name was also s. \u201cIn cryptography, an S-box (substitution-box)\u00a0 is a basic component of symmetric key algorithms which performs substitution. In\u00a0 block ciphers, they are typically used to obscure the relationship\u00a0 between the key and the ciphertext.\u201d And this is what happens here. input is used\u00a0 here, but not directly. The input bytes are substituted through the confusion array. If\u00a0 for example the first input byte is a 0x02."}
{"prompt": "What is the value that the algorithm works with?", "completion": "Then it takes the third byte of the array. So a\u00a0 0x25. And that\u2019s the value we actually work with. The same happens down here. The internally\u00a0 calculated values are substituted before they are placed into the output. In reverse\u00a0 this means, the output that we have as a goal, our target \u201chire me\u201d, are not directly\u00a0 the internal bytes of the algorithm. We need to reverse the substitution first. But\u00a0 reversing the substitution is kinda simple. We know that the byte 0x02 matches to the byte\u00a0 0x25. Which means if we have 0x25 then we know the input byte must have been a 0x02. Ezy.\u00a0 There is just one caveat, and that is that some bytes appear multiple times. In that\u00a0 case it\u2019s not directly clear which one it is."}
{"prompt": "What is the process of reversing an s-box lookup table?", "completion": "It could be either. But I mean that just\u00a0 adds a small option and when we try to reverse the algorithm, we can just simply\u00a0 try both options and see which one works. So after I realized that confusion is basically a\u00a0 s-box lookup table, I decided to remove it, just to mentally declutter the algorithm. Of course\u00a0 we must not forget that it\u2019s there, but mentally I\u2019m ignoring it for now. We know we can easily\u00a0 reverse the s-box, so I rather want to focus on the parts that might not be that clear. It\u00a0 helps to easier understand the general algorithm."}
{"prompt": "What techniques could be used to reverse the Forward() function?", "completion": "After that, I decided to go for\u00a0 another naiv attempt, because I\u2019m hoping that everything will work out if\u00a0 I just start trying to reverse the algorithm. So let\u2019s get started! The function\u00a0 is called Forward(), so we can try to implement a Backward() function. This Backward\u00a0 function has to do everything in reverse of the Forward() function. So let\u2019s think about\u00a0 the last part and how we can reverse it. We have the output given, and now we need to\u00a0 reason about what the internal input bytes were."}
{"prompt": "What is the relationship between the two bytes of the internal input array?", "completion": "When analysing ciphers like this, you can think\u00a0 about \u201cwhat bias or knowledge does a number contain\u201d. One out byte is the XOR result of two\u00a0 input bytes. So the byte of the output carries some information from the previous bytes. More\u00a0 precisely it carries the XOR result. If you know the XOR operation, as well as it\u2019s properties, you\u00a0 know that we have a problem. Because we can\u2019t tell exactly what our two bytes were. However we also\u00a0 know that if we guess one of the two bytes, then the other MUST be the output XOR that guess. Which\u00a0 means, we don\u2019t need to bruteforce all 32 bytes of the internal input array, but it looks like we\u00a0 still would have to bruteforce 16 bytes. The other 16 bytes have this direct relation through XOR.\u00a0 Unfortunately a byte has 256 options, which means,"}
{"prompt": "What is the maximum number of iterations required for the loop in the challenge?", "completion": "a bruteforce would still be 256 to the power\u00a0 of 16. And that is still an unimaginable large number. We would never be able to bruteforce that. Once I had that realisation, I accepted that I won\u2019t find a simple solution. And I need to be\u00a0 more smart about my approach. Generally the goal is now to find a way to reject or outright ignore\u00a0 bytes that would never be valid. So maybe there is a way to limit the bruteforce search-space, but\u00a0 for that we must understand the next part better. Let\u2019s look at that part by starting at the\u00a0 top. We see that most of it is wrapped in a loop executing this 256 times. So think about\u00a0 the very first iteration. In the very first loop we take our input bytes that we control and\u00a0 that we have to set to solve this challenge, and basically store them in the output array. And in\u00a0 the same step we also reset our input array to 0s."}
{"prompt": "What is the purpose of the outer loop in the code?", "completion": "Of course there is the substitution happening, we\u00a0 are not forgetting it, we just ignore it for now. Once this round is prepared, we can see that\u00a0 the outer loop counts j, which goes through each byte of the input array. And for each byte of the\u00a0 input array, it executes a loop over k. And k goes through the output array. On first sight it looks\u00a0 maybe a bit crazy here, but it\u2019s pretty simple. First of all in every loop we are XORing the\u00a0 current value of the input array, with out[k]. Out[k] is a byte set from our previous input up\u00a0 here. But it\u2019s multiplied with this expression."}
{"prompt": "What is the purpose of the diffusion array in this challenge?", "completion": "This expression actually has a bitmask of 1, AND\u00a0 1, which means the result of this expression is a single bit. Which can be zero or one. So some\u00a0 out[k]s are multiplied with 0, and some with 1, which means, not every out[k] is XORed into\u00a0 the input bits. A decision happens here which out[k]s are actually XOREd onto the input. And the\u00a0 decision is made by the diffusion array. For each input byte we select one of the diffusion array\u00a0 elements. For the first input byte we select the first diffusion integer. And then we loop through\u00a0 k, which keeps shifting the bits of this integer,"}
{"prompt": "What is the effect of XORing 0 onto the input in the first loop?", "completion": "and then masks the shift result to select the last\u00a0 bit. The first integer we use is 0xf26cb481 and it has a 1 bit at the end. So we XOR out[0] into\u00a0 the input[0]. But in the next loop when k is 1, we shift now the diffusion integer by 1, and\u00a0 now there is a 0 at the end, which means out*0 is 0. And XORing 0 onto the input has no effect,\u00a0 it\u2019s basically like we do not XOR that out byte. Alrightly. After this first round is complete,\u00a0 we go into the second round. Now the input here is not our input bytes anymore. The input bytes\u00a0 were totally scrambled by this XORing down here."}
{"prompt": "What is the last loop in the algorithm used for?", "completion": "But we store it in out again, reset\u00a0 input and XOR the new output bytes into the input. This is all done 256 times.\u00a0 Basically this is a biiiig XOR mixer. And when the mixing is done, we reach the\u00a0 last loop, which only loops for 16 bytes. It writes the actual output now. Each one of the\u00a0 16 output bytes is the result of XORing a pair from the scrambled input array. This selects all\u00a0 the even bytes, and this all the odd bytes. So the first byte of the output, is the first byte of\u00a0 the input XORed with the second byte of the input."}
{"prompt": "What is the purpose of the diffusion array in the input array?", "completion": "I want to make it clear that, me\u00a0 talking through those individual steps, doesn't mean I deeply understand it,\u00a0 and I don\u2019t expect you to understand it. I\u2019m literally just reading the code and\u00a0 transforming it into spoken english words. It\u2019s just a way for me to get familiar with\u00a0 the code, and make you familiar with the code, and we just start thinking about it. There is a\u00a0 chance we notice something interesting, but it\u2019s not a guarantee. And I certainly had no idea yet. So let\u2019s approach it with the same thought from earlier. What information does a byte in the\u00a0 input array carry. Well an input byte is the result of a loop with 32 XORs. But from earlier\u00a0 we know it\u2019s not really 32 times, it depends on the bits in the diffusion array. And the diffusion\u00a0 array is a constant. It never changes and it will always cause the same out bytes to be taken\u00a0 for the XOR. And I had the feeling, that this must be something we can maybe attack it with."}
{"prompt": "What is an example of how XOR operations can be simplified?", "completion": "You know XOR is self-inverse. XORing the same value cancels out. And imagine you have a long\u00a0 list of XOR operations, you can always pair up XORs of the same value, and they cancel out. Takt\u00a0 his as an example, this is a long example XOR operation, and it can be simplified down to just\u00a0 being the number 0x41. And this line and loop is essentially a very long list of XOR operations.\u00a0 But nothing in my brain clicked. I didn\u2019t see anything obvious that would allow me to cancel\u00a0 out most of the operations so I\u2019m still stuck."}
{"prompt": "What steps did the speaker take to analyze the challenge?", "completion": "Damn\u2026 I slowly realized that this will take me\u00a0 longer than I thought it would. But now I already got started and I kinda promised somebody that\u00a0 I will look into it, so now I MUST not give up. But I did take a break. I walked my dog and went\u00a0 to bed and tried the next day with a fresh brain. The next day I thought I need a bit more of a\u00a0 visual analysis and I got out my notebook. I started by drawing the out array again,\u00a0 which has 16 bytes. The next important internal values are from the input array. And\u00a0 now I can draw the bias I mentioned before,"}
{"prompt": "How does the loop in the video take values from the outarray and put XORed results into the internal input array?", "completion": "this outbyte is the result of the XOR from\u00a0 these two input bytes. And this obviously also applies to the other bytes. You knew this\u00a0 already, nothing new, just visualizing it. But now comes the block we have a harder time\u00a0 with. The loop takes values from the outarray and puts XORed results into the internal input\u00a0 array, so here are the two arrays. And now the first input byte is the result of a selection\u00a0 of XORs of the values from the out array. And the second byte is the result of a selection\u00a0 of DIFFERENT XOR values from the out array."}
{"prompt": "What potential relationship between the first and second byte of the internal input array may be revealed by examining the out array bytes?", "completion": "I was hoping by drawing this, instead of trying\u00a0 to imagine this, I would have an easier time to find a pattern. If the brain is not busy retaining\u00a0 this information and can concentrate on potential relationships between different parts, there\u00a0 is a higher chance to notice something. And so I\u2019m ignoring the first stage now and just\u00a0 try to think, if I had the input array bytes, how could I get the out bytes. The first and\u00a0 second byte of internal input might include some of the same XOR values from the out array. This\u00a0 means both result bytes \u201ccarry some information\u201d about the same bytes. Which means there is also\u00a0 an indirect relationship between those two."}
{"prompt": "What techniques could be used to quickly reject invalid candidates when attempting to bruteforce possible out array values for the first input byte?", "completion": "For example if we would try to bruteforce\u00a0 possible out array values so that the first input byte is correct, then this has a\u00a0 direct effect on the second input byte. And if we now try to find valid bytes for the\u00a0 second byte, we cannot touch the XORed values we used in the first byte, otherwise the result\u00a0 is wrong again. And I started to get a feeling. This feels like a logic puzzle. Now remember\u00a0 the bruteforce problem of the first stage, I was wondering if the relationship and\u00a0 dependencies between those input bytes can be used to quickly reject invalid candidates, or even use\u00a0 it to somehow generate valid inputs\u2026 but mhmhh\u2026 Again, saying those things doesn\u2019t\u00a0 mean I know how to do that."}
{"prompt": "What strategies did the speaker use when trying to solve the challenge?", "completion": "It\u2019s just what I\u2019m thinking and what I\u2019m\u00a0 looking for. I still haven\u2019t had an epiphany. And I think it\u2019s time to take a break.\u00a0 I didn\u2019t solve this challenge quickly. It took me multiple days with breaks in between\u00a0 to keep thinking about what else I could try. So now that you have gotten a first overview,\u00a0 feel free to try to solve the challenge yourself. I think you learn A TON by just trying it. And\u00a0 you have the whole week. And next week I tell you how I solved it and you can then compare\u00a0 your notes, or your solution, with mine."}
{"prompt": "What is the threat model of botting in MMORPGs?", "completion": "In the previous video I showed you a dumb design decision of a Guild Wars 2 Trading Bot author, who decided it was a good idea to leak the API keys from all bot users. These API keys can be used with the Guild Wars 2 API to get all character information. I have written a small script that has collected data on all active bot users along with their wealth, for the past three months. And so I wanna have a look at this data and also talk about the threat model of botting in MMORPGs Before we get into the data, let\u2019s talk about botting itself."}
{"prompt": "What strategies can be used to control inflation of an in-game currency in an MMORPG?", "completion": "I try to approach this topic as if I would design an MMORPG and I\u2019m well aware of the threat that somebody could hack the client or automate and bot certain aspects of the game. For me MMORPGs have two major concerns they need to control in order to have a healthy game. One is the player satisfaction. This is purely subjective, it\u2019s about feelings players have that are often completely separate from reality. And the other one is keeping inflation of the ingame currency under control. If you ever played a game with rapid inflation,"}
{"prompt": "What are some common game design techniques used to prevent inflation in MMORPGs?", "completion": "it\u2019s basically unplayable as a new player and it\u2019s just a terrible experience. And there are many many game design decisions that you can make that affect these things. For example a very typical thing games do is to have a gold sink. That means there are very expensive luxury items that just pull out masses of currency or items to fight against inflation. Items can become character bound so they are removed from the economy and much more. So what does this have to do with botting. So when most people imagine botting in an MMORPG game, they imagine bots that run around,"}
{"prompt": "What are the effects of bots on MMORPGs?", "completion": "kill monsters to level or collect items and gold. So why is this bad for agame? First, with each kill, gold or items are generated out of thin air. More gold available in the economy, can lead to a higher inflation. And because botting can be scaled to hundreds, thousands or even way more, this can really destroy the economy. This is the main reason why botting is so bad for a game. Another issue is, that when regular players encounter botters, it has a negative emotional effect on them. They feel cheated, maybe even their kills get snatched away, they can\u2019t buy stuff anymore because of inflation and they can\u2019t find real players to chat and go on adventures together."}
{"prompt": "What methods could be used to prevent a dedicated botter from bypassing locally running scanning tools?", "completion": "So if we design a game to defend against this threat, what can we do? Should we invest into obfuscating the client, making the network protocol super complex, implement or buy scanning solutions that behave like anti-virus software trying to identify bots or hacking tools through heuristics? But those are all terrible solutions, because they are expensive and ineffective. A dedicated botter can always bypass those locally running scanning tools. It just slows them down and maybe prevents simple people from doing it, but professionals,"}
{"prompt": "How can game design be used to prevent players from having a bad experience with bots stealing their kills?", "completion": "that earn money from botting, they will find ways around it. Much more elegant solutions are solving this through game design. For example Guild Wars 2 doesn\u2019t have a concept of kill, experience, loot or resource stealing. Everything is shared. So players wont have a bad experience with bots stealing their kills. You can also design your game and server logic in a way that you completly don\u2019t trust the client. For example let\u2019s say you have a dungeon and at the end is a reward. Instead of spawning the reward chest at the start and having closed doors preventing access,"}
{"prompt": "What strategies can be implemented in a MMORPG to increase the difficulty of botting?", "completion": "you can have a mission timer or different checks before the server spawns it at the end. Thus if sb has a client-side wallhack or even control over the communication protocol they can\u2019t just access the chest rightaway. You can also implement more complicated boss fight mechanics that require dodging and positioning, so that bots have to be really really smart in order to farm it. You can also make a lot of resources account bound, so that a lot of the good loot can\u2019t even be traded or sold by the bot owners."}
{"prompt": "What is the purpose of instanced MMOs in relation to bots?", "completion": "You can also have instanced MMOs, because then bots can do everything without ever being seen from players, thus it helps against a bad perception of the game. It\u2019s kind of fun trying to think of systems that make bots less effective to protect the game, isn\u2019t it? But what about a trading bot. Because this is a little bit different. I claimed earlier that the ingame economy, mainly the inflation is a crucial part to keep a game healthy. So how does a Guild Wars 2 Trading bot affect the game? First I have to explain how the tradingpost works."}
{"prompt": "What percentage of the price is taken away when an item is listed and bought on the trading post?", "completion": "When you have an item you can list it for a price. Listing an item costs 5% of the price you choose. That is paid right away. Then if somebody buys the item, another 10% of the gold is taken away. Basically you have a 15% sales tax on each trade. And placing a buy order does not cost anything. So this means that a trading bot instead of printing ingame money. It actually removes gold from the economy. 15% at a time. So a trading bot is in a weird way actually HELPING to fight inflation. Also I would claim, that the casual regular player, likes to buy items when they need it from the trading post, and sell items right away to sb who offered to buy it."}
{"prompt": "What are the positive and negative effects of using a trading bot in an MMORPG?", "completion": "That\u2019s not the most efficient way, but the most comfortable way. And so a bot, who is constantly trying to overbid on items so they get buy orders filled raise the price a casual player can sell an item for right away, and at the same time try to undercut when listing the item, so their sell listing is sold quicker. Which pushes the price down for casual players that just want to buy an item. So it even has another positive effect. However there are also two major negative points. A trading bpt is competing with all the players who would like to maximize their profits,"}
{"prompt": "What is the effect of bots on MMORPGs when it comes to trading?", "completion": "or engage in trading too. The undercutting and overbidding minimizes the profit a regular player can have. It also lowers the bots own profit, but a bot can obviously do a lot more trades than a human and can thus justify lower profit margins. And another issue is, that if players feel like there are bots trading it can have a very negative emotional effect. A feeling of unfairness and so forth - even though maybe objectively a trading bot is not bad, regular players will not see it that way. So I believe a trading bot is unfair, though it\u2019s not bad or dangerous for the game,"}
{"prompt": "What percentage of users who downloaded the bot submitted an API key?", "completion": "as long as players don\u2019t see them. So let\u2019s have a look at the data I have collected. I\u2019m using a jupyter notebook to work with the data and used it to create all the graphs. The code is terrible, please ignore it. I have not included the API keys so you can\u2019t find out which players were doing this, but you can find all graphs in the description below and so you can have a look yourself. First of all, over the roughly three months of collecting data, I have seen 94 unique Guild Wars 2 API keys. So I guess almost 100 people have downloaded the bot, executed it and entered their API key."}
{"prompt": "What percentage of bots were active at any given time during the data collection period?", "completion": "However when you look at the graphs you will see that many have not actively used the bot. Next let\u2019s look at the activity graph. At the bottom you can see the time span of the data collection. It started on 12 of november and went up to the 7th of februrary. My crawler checked the API every hour, so each point represents a bot being registered online and having some sell or buy data. You might wonder why there are only 76 bots and not 94. That\u2019s because 18 people basically didn\u2019t do ANYTHING. These 76 however started the bot for a brief period."}
{"prompt": "What periods of time did user 25 run the bot for?", "completion": "But even though they used it, there are still several that were basically never reallya ctive. So for example user number 72 downloaded and ran the bot for a couple of hours on the 23. November. After after that, never again. In contrast to that user 25 has basically a bot running 24/7 for the whole period. BTW this gap over here was my fault, my crawler died and I didn\u2019t realize it quickly enough. And then there is user 55, who used it fairly actively, but then stopped in december, maybe went home for christmas without their PC and then restarted the bot again when they returned in january."}
{"prompt": "What percentage of the gold value of items listed for sale is lost due to trading post taxes?", "completion": "These graphs tell a lot of interesting stories. Now let\u2019s have a look at individual bot graphs. I think number 25 is awesome, it\u2019s a really active bot. I think it\u2019s actually the most active one that I have recorded. So You can see here dots with several colors. Orange is the gold they have in their wallet or inventory. Blue is the gold trapped in items they have listed for sale. So blue is a theoretic gold value they would get if they would sell the items. But now that I think about it again, I think I forgot to deduct the 10% trading post tax from that."}
{"prompt": "What is the maximum amount of gold that the bot has had in the form of buy orders?", "completion": "Anyway, blue should be a bit lower overall. Red are the buy orders they have, so that\u2019s money that is waiting in the tradingpost for somebody who sells the item for this price. And black is the \u201cnet worth\u201d, basically it\u2019s just the sum of gold, value of the items listed for sale and the buy orders. It\u2019s the theoretic gold wealth of this account at that moment in time. So if we look at the start of this graph we can see that the bot has constantly 400 to 1300 with up to 1700g in buy orders. So hoping to get cheap items."}
{"prompt": "What trends can be observed in the overall \u201cnet worth\u201d of the Guild Wars 2 player tracked in the data?", "completion": "And blue are the items being sold. So these items wait for a buyer. And as you can see their price is always going up and down meaning that new items are being listed for sale and that people buy items. Now I think that there is always a dip down on weekends? Which could mean that because on the weekend more players are playing, more items are being bought from this player. So the money in listed items goes down. But I can\u2019t really explain myself those big jumps. So black is the overall \u201cnet worth\u201d and I think there are clear upward trends visible here, with around maybe 750 to almost 1000g per week?"}
{"prompt": "What might be the reason for the sudden drop in value of listed items on the MMORPG?", "completion": "But remember a lot of the wealth is kept in items that might never get sold, so it\u2019s not all just raw gold. But here with those big jumps I think maybe my calculation fails a bit and actually the user cancelled all buy orders and so forth and then moved gold away. Also there is a fairly sudden drop in value of listed items, so maybe the person even cancelled a lot of listed items and relisted them lower or just outright sold them to the highest bidder? Maybe? Well i don\u2019t know, speculating here."}
{"prompt": "What effect does the bot's trading strategy have on the overall net worth?", "completion": "This trend here I think is awesome. The listed items are slowly being sold off, which increases the available gold. However the gold is immediatly put back into ordering new items, so more and more gold is now in the ordered items. Overall, because by selling those items and ordering new ones, the bot made a profit and thus the overall net worth is slowly increasing. But the trading strategy during this time is also ineffective, because ideally the listings wouldn\u2019t go down, they should be at least stable or rising with the wealth."}
{"prompt": "What date did the listings for the secret items start to flatline?", "completion": "But like I said, that\u2019s a very active bot and probably the most successful one. We can also use gw2efficiency with the API key to spy a little bit what this player traded. So here they are, these are the secret items that apparently are very profitable to trade. The most money was apparently made with the black Poly-luminescent trinket. The War God skins are also good. BTW if you are wondering why the listings are flatlining starting around the 9th of january, this can be seen also on other graphs."}
{"prompt": "How does Bot 30 appear to be performing in terms of networth?", "completion": "Unfortunately this is an issue with the guild wars 2 API. The listings are not updated, so the data there is faulty. Another very active bot, number 3, seems to be less successful. Here the networth is pretty constant. So kinda useless to let the bot run. Bot 30 looks awesome, but don\u2019t get fooled by the slope and look at the y axis steps. Here the bot started with around 200g and made maybe 500g in about 3 weeks. That\u2019s also not very great. And those drops look really like the person pulled out winnings into another account."}
{"prompt": "What are the costs associated with using a trading bot in Guild Wars 2?", "completion": "Unfortunately this user\u2019s API key is invalid. Maybe they got banned? Or maybe they just removed the API key because they stopped using the bot. So is this bot worth it? I\u2019d say clearly no. A lot of the graphs are pretty much just a flat line, so they users don\u2019t choose good items to trade. And you have to include the electricity cost, hardware cost and game key cost PLUS the subscription for the bot. I think it\u2019s a complete waste of money and is better spent on buying gem cards. Also should the average Guild Wars 2 player be outraged over these unfair bots?"}
{"prompt": "What is the URL of the challenge website?", "completion": "Mindreader had more solves than any other challenge and was considered easy. And still, I failed to solve it. In the end I had solved two medium and one hard challenge, so what was my issue with mindreader? Well. Let me tell you about how I approached this challenge and what went wrong. Mindreader. Can you read my mind? I was wondering what that could mean. Reading your mind. I thought maybe it could be related to reading a processes memory. Well. Challenge is running at mindreader.web.ctfcompetition.com When we visit this site we find a very easy form with a text input."}
{"prompt": "What steps can be taken to configure a web proxy in Firefox?", "completion": "If you write something it passes a GET variable f with your input but returns a Not Found error. Well that already smells bad. So a natural first thing to do is to try local file inclusion. And sure, /etc/passwd works. So what do we do now, where can we find the flag. Usually when I work with a web challenge I use a web proxy like Burp. My firefox has already the proxy server configured so I just have to start burp and then can visit the site. Disable the request interception, visit the page and look for the request in the HTTP history."}
{"prompt": "What web server is being used in the request/response details?", "completion": "And there it is. When you highlight it you see the request and response details of the HTTP request down here. Then I hand over this request to the repeater, which is a neat feature of burp where you can repeat those requests. So it becomes really easy to change the f GET parameter and see the result on the right. So now I wonder what I could be looking for. I remember a few interesting files on linux, but obviously I don\u2019t know everything. And one of the first things I noticed was the Server nginx in the response."}
{"prompt": "What is the file path that can be used to access environment variables of the current process?", "completion": "Which made me start to google for the default config and log locations because I was hoping to learn something about the web app running there. So for example /var/log/nginx/error.log. Or /etc/nginx/nginx.conf. But nothing worked\u2026 mhmh At some point I opened up a terminal and connected to a linux VM I had running somewhere to find interesting files. Especially because I wanted to check the /proc filesystem. There is a lot of information about your own process there. So I tried to access a few things like /proc/self/environ which should print the environment variables of your current process."}
{"prompt": "What are the contents of the /dev/ folder that the speaker is referring to?", "completion": "But it didn\u2019t work. Here is the first mistake I made. I wonder if you notice it. I will come back to it in a second. I then went on and looked for other interesting files, maybe there is something in /dev/. I started to continue trying out different interesting /dev/ files and there was this fd folder. Fildescriptors. And it\u2019s actually a symlink to /proc/self/fd, so pointing at your own fildescriptors. You can see that fd 0 returns OK, and fd 1 and fd 2 just keep hanging, but no error. And there seem to be even more open filedescriptors;"}
{"prompt": "What type of input was used to solve the mindreader challenge?", "completion": "not only the standard stdin, stdout and stderr. That\u2019s interesting but didn\u2019t give me anything. Anyway. This was my second mistake. Do you notice my mistake here? I didn\u2019t so I thought this is going nowhere. So I started to work on another challenge and procrastinated checking twitter. And there was an unread message. This guy had some problems with Joe and asked me about it. Had a short chat about the CTF and because he saw I didn\u2019t solve mindreader yet, he told me I could easily do it. Well\u2026 yeah I assume because it\u2019s an easy challenge that I should be able to do it,"}
{"prompt": "What are the two major mistakes that the speaker made when attempting to solve the mindreader challenge?", "completion": "but so far I\u2019m stuck. And then the worst thing happened. He sent me a spoiler for the challenge. Please don\u2019t do this. If I don\u2019t solve a challenge I don\u2019t mind and I will seek out writeups after the event. But in the moment you deprive me of a valuable learning experience. Because even when I\u2019m stuck with a challenge I start researching. And the bits of information I read and pick up left and right makes me more knowledgeable in general. And next CTF I will be better. I tried to stay away from mindreader after that, but it was bugging me and for my own curiosity and because I was failing with another challenge I just had to look what the hint is."}
{"prompt": "What type of error occurs when attempting to access a file in the /proc directory?", "completion": "I just can\u2019t ignore this, it\u2019s in my head. And the code revealed that the flag is in the environment variables, which I already had a hunch for as the possible place, but now I know the goal. And it also shows why /proc/ didn\u2019t work. There is a filter. And it hit me in the face. I realized the two major mistakes I made and how I could have solved it on my own. This right here has turned into a valuable lesson for me. Ok let\u2019s have a look at my first mistake. When I tried to access something in /proc and get the error, it\u2019s actually a different error then when I try to access some random other file."}
{"prompt": "What is the relationship between /dev/fd and /proc/self/fd?", "completion": "I did not notice that. The second mistake I made was when I checked /dev/fd/. Because I knew it was a symlink to /proc/self/fd from my example linux system, and while I did wonder for a second why that works, I filed it away as a small oddity. If I had made notes of the weirdness that I see with accessing /proc and that apparently the symlink works I could have combined those two things and figured it out myself. But I didn\u2019t. I was sloppy, I didn\u2019t take proper notes, and most importantly I didn\u2019t pay attention to the details."}
{"prompt": "What technique did the hacker use to access the processes environment variables?", "completion": "Oftentimes when it comes to hunting for bugs it\u2019s the small oddities you must not ignore. A hacker who can focus on details, will discover great vulnerabilities. So when I saw that proc was filtered and returned another error, and that I had to access the processes environment variables, I immediately knew what to do and tried to use the symlink to /proc/self/environ through /dev/fd/.. One directory up ../environ and get the flag. Solved. Well not really. I got a spoiler. I\u2019m not sure if I had solved it without."}
{"prompt": "What techniques does LiveOverflow use to make CTF video writeups?", "completion": "A while ago I made a video explaining my video making process. And since then I made several changes and improved it. So I wanted to give you an update on that, so it\u2019s easier for you to start making CTF video writeups. I\u2019m not saying that\u2019s how you should do it, but I will tell you about my experience and why I do it this way. so if you consider making videos, I think I can give you some valuable information here. And then you can come up with your own process. So the process changes slightly depending on the topic, but in this case here I will cover a CTF video write-up."}
{"prompt": "What software does LiveOverflow use for video editing?", "completion": "The CTF challenge is from the google ctf 2017, it was a hard challenge called a7 - gee cue elle. First of all I moved away from sony vegas to adobe premiere, because I was hoping it had better integration with photoshop to draw my overlays to improve my videos. Well that didn\u2019t turn out to be true, but I still think the move was worth it. doing animations, like moving graphics and rotating them and so forth, directly in Premiere is much easier than in vegas, but drawing and making the graphics for it is still not integrated into each other well."}
{"prompt": "What software does LiveOverflow use to create their videos?", "completion": "And another downsite is that Adobe products cost quite a bit per month, but I really enjoy making those videos so it\u2019s worth investing into my hobby. Okay. So I start with a template that has the intro animation as well as outro already in there and then I add the recordings I made with OBS during the CTF. Then I go over each video file and label it with the challenge it was about. So the first problem is, that CTF challenges take time and are often a mess. I don\u2019t record 12h of my screen and then try to extract 10min of content from it, and even more important is, that the recording is not really optimised for a video writeup."}
{"prompt": "What methods does LiveOverflow use to remember his steps while solving a CTF challenge?", "completion": "I use a big resolution, sometimes multiple screens and multiple devices, it just is not great footage. I will get into that a little bit later when we come to editing. So usually I always record a little bit during the CTF when I have a feeling I made substantial progress. And this way I also don\u2019t forget my steps. Then I open up a google doc for the script and start going through the footage and start writing. \u201cA7 - gee cue elle was a hard misc challenge.\u201d and so forth. While writing I already try to imagine how I would show that with a video."}
{"prompt": "How long does it take to create a LiveOverflow episode?", "completion": "And I think about what errors I like to include and what I will leave out, what I would like to focus more on and what is unimportant. Trying to come up with a nice story. So some videos become more basic, others become more advanced. Usually I am for about 3 pages in google docs with arial font 11. That will create a 9-12minute video. So I continue writing the script. Check and verifying some stuff, try to find the parts in the recording and so forth. Now I\u2019m already a page in and I basically just started with the challenge, so I start to wonder if I can\u2019t cover it in 3 pages."}
{"prompt": "How can one keep the length of a video short while still ensuring that the audience understands the application?", "completion": "In this case there is quite a bit of code we have to read and understand and that\u2019s always a bit tricky for a video. When you do the challenge yourself you spend a lot of time reviewing the cdode and maybe comment everything, maybe you extract pieces and run them on their own, but for a video you have to keep it short and kinda point out only important parts. But that could mean the audience doesn\u2019t understand the application at all. so that\u2019s just something to keep in mind and is difficult to balance."}
{"prompt": "What is the best way to decide whether a script should be split into two parts or kept as one longer part?", "completion": "After a while the first draft is done. Way over my 3 pages limit. Now I use a timer and read the script out loud again, fix some minor grammar and flow issues and check the length. Looks like this video is going to be a bit longer. Now I have to decide, make two parts and flesh these out more, or make one longer part. This one is hard because it\u2019s right there at the border. So I decide to go with one video for now. I could always split it later. When i feel like the script is done, I go back to premiere and record my voice over."}
{"prompt": "What should be considered when reenacting footage in a video recording?", "completion": "And FYI, up until here took me about 3 hours. Now I start to assemble the video and edit it. Like I mentioned earlier, the video recordings from during the CTF are often shitty. Tabbing around, having personal information in notifications visible, small fonts, crowded terminals etc. This means I usually reenact most stuff again. So for example here I want to record how I searched for OWASP A7 again. Some things to consider when recording footage. Try to match the aspect ratio of the video with your windows."}
{"prompt": "What is a trick for creating a clean browser window in a perfect 16:9 aspect ratio?", "completion": "A small trick to do that is to use some kind of image or the video preview to make a clean browser window in a perfect 16:9 aspect ratio Try to have the font big enough, that it could be read without fullscreen or high quality. There are a lot of mobile phone users out there. Typing is always slow. Speed those parts up. And have very determined mouse movements. Try to not include the spelling mistakes and corrections. Try to focus as much on what you want them to see, and minimize unecessary information If you are typing in a terminal, try to leave a border at the bottom or always clear the terminal so you write at the top, because when you pause in youtube the bar stays on and covers up what you typed."}
{"prompt": "What is the approximate amount of time it takes to edit a LiveOverflow episode?", "completion": "Super annoying. ANd like with any write-up, you have to clean up your code. That\u2019s another big reason why using the footage from during the CTF is so bad. It\u2019s always messy. At some point I\u2019m done arranging and editing the video in Premiere. Because I had to reenact and rerecord so many things and look through footage it probably took me around 4 hours. But I\u2019m not fully done yet. First I have to export the video in Premiere and then open it in Photoshop. Yep you heard me right. I open the video in photoshop, because photoshop can do video editing."}
{"prompt": "What is LiveOverflow's process for creating animated graphics in videos?", "completion": "And this is pretty cool to draw my overlays. So basically I go now through the video and create layers on which I can draw with my graphics tablet. And that\u2019s super easy and chill and goes pretty fast. That\u2019s basically my secret of doing my overlays. Unfortunately I can\u2019t animate stuff here. So I can\u2019t animate moving graphics or so. If I plan to do that, then I usually create the graphics first and import them to premiere. But that\u2019s pretty tedious. I really would like a better process here, because animations would be really cool."}
{"prompt": "What can be done to prevent audio cutting out in the beginning of a video rendered in Photoshop?", "completion": "Then I render the video in photoshop, which is buggy, because sometimes the audio in the beginning cuts out, which apparently happens when the disk can\u2019t read the video source file fast enough and I have the footage on a huge hard drive, not an SSD. So what you can do is quickly play the video with vlc, because then it seems to be in memory or so and I never have a problem. Anyway. This part took me about an hour or so. So it\u2019s pretty fast Next step is uploading\u2026 so going To youtube\u2026.. Oh\u2026 Gynvael is streaming right now."}
{"prompt": "What is the amount of time that passes between when a video is uploaded and when it is released publicly?", "completion": "Better go watch this instead. After procrastinating, but also learnign awesome new stuff, I finally do the upload and create a thumbnail for it. Then some other small stuff has to be done, like adding the transcript for the subtitles and adding the endcard. If you pay attention to the upload date and look when I publicly released it, you can see that quite some time passed. I actually always have videos in the pipeline. When I made this video I had 6 unreleased videos which means I have a buffer for over a month."}
{"prompt": "What techniques does LiveOverflow use to prevent feeling overwhelmed while producing videos?", "completion": "And that\u2019s important to me, because I always have bursts of motivation and I go crazy a few days making videos and then I need a break again. And for example in the recent weeks I had ton of work and was travelling and couldn\u2019t make any videos. So now I have only 2 videos left. That\u2019s also the reason why I don\u2019t really make up-to-date news videos often. Basically there was only the nintendo switch and dirtycow video I made. It feels really good to release a video consistanly every week but I don\u2019t want to have anxiety and the pressure to create another video."}
{"prompt": "What is the approximate amount of time it takes LiveOverflow to create a video?", "completion": "I can go comfortably on vacation or just play a game without feeling guilty. Overall you can see it takes me about one full day to create a video, without the time it took me to solve challenge or research a topic. if I would care less in making the footage look good or not write a script and be good at just talking and improvising, I could be a lot faster. But that\u2019s how I like to do it right now and, I\u2019m curious how I change my process over the next year. My videos have changed a lot from when I started."}
{"prompt": "How can I become more efficient when creating videos?", "completion": "Hey, some of you asked how I make my videos. So I want to take you along the process of creating one of my episodes. I know that some parts could be more efficient if I would know better tools. So while I obviously would like to show you how I create videos, I\u2019m also looking forward to get some tips and tricks how to do things differently. And maybe become more efficient or create more beautiful videos. The video creation process can be divided in 3 big steps. Write the script. Record screen footage, fix mistakes in the script, and then record the audio."}
{"prompt": "What article from Phrack was the second episode of LiveOverflow about?", "completion": "And finally, as last step, edit the whole video and draw all the graphics. Ok. First step is researching and writing the script. Usually I start by opening up a google docs and start writing. And then I get into a research, try it, write it - loop. In this case I make the second episode about the dlmalloc heap unlink exploit. Which is heavily based on phrack issue number 57 article \u201conce upon a free()\u201d and \u201cvudo malloc tricks\u201d. In the last video we developed our own exploit for unlink which won\u2019t work because of null-bytes,"}
{"prompt": "How can you use negative numbers to set the size of a heap chunk to a value that doesn't contain 0-bytes?", "completion": "so I thought as a narrative for this video, it would be cool to just explore what the researchers back then discovered and expose my audience to the true heroes from hacking history. So I reread what they were writing back then and try to think about how I could present it in a video. The key lesson from this video will be about setting the size of the heap chunk to a value that doesn\u2019t contain 0-bytes, which seems huge at first, but you can abuse the fact how negative numbers work. While writing the script I always read it out loud to see how it flows, and then make changes to it."}
{"prompt": "What software does LiveOverflow use to record their screens?", "completion": "At this point I may also fire up the exploit-exercises protostar VM and try it out. Just to make sure I get it right. Usually I will catch some mistakes in my script now and modify it. Once I\u2019m confident I got everything working, I make notes of the commands I\u2019m going to use and put them on a second monitor. For this particular video this first part of researching, writing the script and trying it out, took me roughly 3 hours. Next step is recording the exploit development. To record my screen I use OBS and a lower framerate."}
{"prompt": "What is an advantage of recording video with a lower frame rate?", "completion": "Because high framerates are not really necessary and it makes the files smaller, so easier to work with and store. For this particular video there will be quite a big chunk just explaining stuff with figures. So the practical part that I have to record is not too long. And with my notes and the script it should be done quickly. If I make mistakes during recording I either decide to incorporate them into the script, because I like to have them as a learning opportunity. Or I have to redo the segment."}
{"prompt": "What software do I need to edit my video with graphics?", "completion": "During recording I realized that I should change some of the text, so I refine the script again. Now I open up my little template that has the intro and outro in it and record the audio of the script. This whole part of recording the video screen footage and the audio, with refining the script took in this case maybe 1h. The practical part was not too long. Next up is editing the stuff with all the graphics. That\u2019s the most tedious part. After my first couple of videos I really wanted to add more visuals."}
{"prompt": "What is the process for creating video overlays using a graphics tablet?", "completion": "An arrow or a box around something important goes a long way in my opinion. You find some older videos of mine where I tried to do this with editing directly in Sony Vegas. But that was super slow and looked crap. I have not that much experience with video editing, so the only thing I knew I could do easily would be to get a graphics tablet and draw them by hand. The process is simple, I can take a screenshot of the current scene in vegas, paste it into photoshop, draw the overlay on a new layer,"}
{"prompt": "What type of architecture is the ATmega328P microcontroller?", "completion": "Another easy challenge seems to be here in the reverse engineering category. The desert of reversing. BTW, whoever did the drawings for this CTF, I really appreciate it. It looks awesome. In this category we have to reverse engineer the programs that run on this arduino board. So before we checkout the next challenge, let\u2019s try to learn more about this plattform. First of all we know that the microcontroller used on this arduino board is an ATmega 328P. So we can google this name and find the official atmel website where we can download the official datasheet for this chip."}
{"prompt": "What is the difference between the assembly language used in AVR and Intel based machines?", "completion": "Ok. So we got here a microcontroller that is based on the AVR\u00ae enhanced RISC architecture. That\u2019s our first piece of information. That chip can execute AVR code. That is very different from what we use on our PCs or Laptops. Those are usually intel based 32 or 64bit machines and use intel assembly. I can read intel disassembly okayish, but I have never read AVR disassembly. So I\u2019m new to this, like some of you. Also RISC means reduced instruction set. Which is a simplified assembler. At first that sounds cool, but to be honest it\u2019s harder to read I think."}
{"prompt": "What are the differences between RISC and CISC architectures?", "completion": "At least for me coming from x86. Which is CISC, a complex instruction set. Basically the difference is that, eh\u2026 this is not a real example but just to give you an idea. A CISC architecture might have a multiply instruction that works directly on memory addresses. And all the memory magic is done by the hardware. But on a RISC architecture you might first have to load the one value from memory, then the other value, then multiply them and then write back the result. So 4 instructions vs. 1. You have to learn less instructions on RISC,"}
{"prompt": "What are the main differences between Harvard architecture and Von Neumann architecture?", "completion": "but once you know them you will always have to read more lines for the simple things. In reality both architectures have absolutely their value and good reason. Just for me, coming from x86 and having no experience, it probably gonna be a bit of a rough ride. But before we look at AVR assembler, let\u2019s continue with getting a broader overview of the device. So on embedded devices, or generally very low level computing you want to interact with hardware. Obviously there is no special instruction called TURN LED ON."}
{"prompt": "What is memory-mapped I/O and how does it work from the perspective of a programmer?", "completion": "Usually this is done with something called memory-mapped I/O. It\u2019s pretty much hardware magic. From the perspective of a programmer we have a big chunk of memory we can use. You know, from address 0 to like 0xffff. But not each memory address is the same. There are regions. For example a certain part of this abstract memory model could indeed map to some memory, some flash, where you can read and write values to. Like we would expect. But another address might map to an actual output pin. And you could define that writing a 0 to that address will output a 0, and writing anything but 0 would mean the pin will output a logical 1, or in reality something like +5V."}
{"prompt": "What type of architecture is used in the ATmega328p microcontroller?", "completion": "So if we think of our board what kind of inputs and outputs we have, we know that there are multiple pins available, AND we know that there is a serial uart interface that allows us to send data via RX and TX. And especially in our case, where we interact with this board via serial, we are very interested in how that is done, so we can identify in the disassembly (that we eventually will reverse engineer) what code is interacting with us. Is reading input. So I was very interested in looking up the memory map of this microcontroller."}
{"prompt": "What is the range of addresses for memory mapped I/O on the ATmega328p?", "completion": "For example address 0x2d00 could map to serial input, and then we could maybe search in the disassembly for a read from this address. Ok so I search for memory map. And then I get confused. This one here only shows the application and bootloader flash region? There is no memory mapped I/O? How does this work? But continue the search and I find finally a memory map that shows I/O stuff. Wait. That is weird. This memory goes from address 0 to address 0x3fff, and this memory goes from 0 to 0x08ff. What?"}
{"prompt": "What is the difference between Harvard architecture and Von Neumann architecture?", "completion": "Then the bootloader and application code would overlap with the I/O that doesn\u2019t make any sense. That stumped me for quite a while. I was not expecting that and obviously I didn\u2019t read the documentation too carefully. I hate myself for how long that took me to figure out. It turns out, AVR uses a harvard architecture. And if you ever wondered, why you had to learn weird things like harvard vs. von neumann architecture in computer science classes, well, here is a good example. If I had never had that in school, I probably would not know about this."}
{"prompt": "What are the differences between Harvard and Von Neumann architectures?", "completion": "So in the intel world, everything is just one big chunk of memory, program code lives in the same memory as does data do. Thus we can do crazy exploits where we overflow stack data and jump into the stack and execute code. On harvard, this doesn\u2019t work. The data is separated from code. So the CPU reads instructions from one memory area, executes those, and those instructions work with the data memory. So you can never jump into data and execute code there, because that just doesn\u2019t work that way."}
{"prompt": "What is the abbreviation for Universal Synchronous Asynchronous Receiver Transceiver?", "completion": "Anyway. I wanted to look at the memory stuff to figure out how the serial connection might work. So let\u2019s look in the datasheet for that. There is a section called USART, basically UART that I breifly mentioned before, it stands for Universal Synchronous Asynchronous Receiver Transceiver. Apparently it\u2019s a highly flexible serial communication device. We are on the correct track. So here we have a block diagram that apparently describes this thing. Let\u2019s see if we can make some sense of it. Here is the RX and TX output, at least something we kinda know about."}
{"prompt": "What is the purpose of the shift register in relation to the USART?", "completion": "There is also a clock, which has something to do with the baudrate. Also kinda makes sense. We can also see that RX and TX use a shift register, which means the code doesn\u2019t have to actually speak the serial dataformat bit by bit, but can simply load the shift register, and with the help of the clock it will slowly get shifted out as a serial output. And same with reading, it slowly fills up the shifft register and we can then read the whole result. And there is an interesting note saying: Refer to the Pin Configurations and the I/O-Ports description for USART pin placement."}
{"prompt": "What is the AVR assembler code used to receive data through USART?", "completion": "We look that up in a second. There is a lot more information here but let\u2019s scroll a bit further down to see the receiving examples. If we read that, and we completely don\u2019t understand it, we might have to go back and read a bit more. That\u2019s just how researching and learning new stuff works. Ok so here we have an example written in AVR assembler and equivalent C code. The following code example shows a simple USART receive function based on polling of the Receive Complete (RXC) Flag. And for the assembly code, the received data will be stored in R16 after the code completes."}
{"prompt": "What instruction is used to read data from the UDR0 memory location for serial communication?", "completion": "So it reads from a memory location called UCSR0A with the IN instruction. And then uses \u201cskip if bit is set\u201d and checks if the RXC bit or flag is set in that previous value. If it\u2019s not set it will execute the jump afterwards to loop back up. But if it was complete, it would read from a memory location called UDR0 into register r16. Which means it received a byte from the serial communication. We can also quickly check the sending site and see that it basically works the same, it also uses the UDR0 location, just this time to send data - with the OUT instruction."}
{"prompt": "What is the I/O address referred to as UDR0?", "completion": "So what is UDR0. When we search for it we find this huge table which is a register summary and apparenly UDR0 is at offset 0xc6. UDR0 stands for USART I/O Data Register 0 The description says that as the USART Transmit Data Buffer Register and Receive Data Buffer Registers share the same I/O address referred to as UDR0. The Transmit Data Buffer Register (TXB) will be the destination for data written to the UDR0 Register location. Reading the UDR0 Register location will return the contents of the Receive Data Buffer Register (RXB)."}
{"prompt": "What is the address of the UDR0 register in the ATmega328p's external I/O registers?", "completion": "And the data memory map from before shows, that the external I/O registers are between 0x60 and 0xff, and the UDR0 register is at offset 0xc6. So it\u2019s called a register, but it\u2019s also just an address in memory, a very low address, 0xc6. This means, if we find a read or write to address 0xc6, we have the address where serial data is handled. At this point I won\u2019t go into further detail. But I think this video is a great introduction on how you can approach a new unknown field. I condensed in this video hours of research and I read small snippets here and there that will help me getting a better and better understanding of this architecture."}
{"prompt": "What addressing issues arise when using AVR in IDA?", "completion": "Besides the official datasheet, I also googled a lot and read forum posts. The arduino platform has a big community, so you find a lot of discussions that help you understand some weird AVR things. But one of the most helpful other resource I found, are slides from an AVR workshop with radare2 which was extremely helpful. For example when I started debugging and reversing the first AVR binary I was confused about weird stuff in IDA and when I read the slides I learned that yeah, there are addressing issues with AVR in IDA."}
{"prompt": "What is the name of the Python library for developing exploits discussed in the video?", "completion": "Let\u2019s solve a very basic pwnable challenge. In this video we will host the challenge with docker and also write and run our exploit in a docker container. as well as get a first introduction to pwntools. An awesome python library for developing exploits. You can find the git repository with the challenge on my github, called pwn_docker_example. If you have questions or issues, checkout the README of the repository, I will keep updating it with information. So let\u2019s get going. I\u2019m using here my mac, to show you that with this docker workflow it\u2019s easy to do linux binary exploitation on a mac."}
{"prompt": "How do you build the challenge server and ctf container in the docker workflow?", "completion": "But it should work the same way on linux, and hopefully also on Windows. Anyway. First we clone the repository. Here we find two folders. The challenge and the ctf folder. Let\u2019s first start the challenge server. We do this by building the docker image for this challenge first, the command is in the dockerfile at the top. This will take a moment. In the meantime we can also build the ctf container. I introduced both these docker containers in an introduction video about docker, I also will link it below."}
{"prompt": "What version of Ubuntu is used for both the challenge server and the docker container?", "completion": "The ctf container is a pretty shitty image I came up with, it\u2019s nothing special, but it\u2019s good enough to run and develop our exploit. It should be noted that both docker containers are based on the same ubuntu version. This is very useful for binary exploitation challenges, because many exploits depend on, for example knowing the exact version of some library like libc. So if you know the version of the challenge server, it\u2019s a good idea to mirror that locally. Often you can also take a guess, and assume it\u2019s the latest stable or LTS version of ubuntu."}
{"prompt": "What command should be used to run the CTF container?", "completion": "That seems to work generally well. But maybe it\u2019s also part of the challenge to figure that out, through vulnerabilities that allow you to leak data. Anyway, in this case here you don\u2019t need to worry about any of that. The version matches. When the images are built, you can run the containers. The command is also in the dockerfiles. But make sure that you are in the correct location when you run the ctf container, because it mounts the current folder into it, and we want to make sure we have access to the challenge binary."}
{"prompt": "What port does netcat use to communicate with the challenge binary?", "completion": "And so I\u2019m here in the pwn_docker_example directory. This will then be available inside the container too. Both are running now and we can use netcat to speak over the network with the challenge binary. If you are curious and want to see this network communication, install wireshark, listen on the correct interface, and filter for TCP packets on port 1024, and you will see the text being sent back and forth. Anyway. not important. Now we are ready to tackle this challenge. Let\u2019s see what we have been given."}
{"prompt": "What flags were used to compile the system_health_check binary?", "completion": "We have here the system_health_check binary and the source code. Source code is given, because it\u2019s a basic pwnable challenge. It\u2019s not a reversing challenge. But it\u2019s good practice to reverse it without the source code, so feel free to do that. And then you can peak into the sources to check if you did it correctly. But I\u2019m lazy. Let\u2019s look at code. At the top you can find information on how this binary was compiled. We are especially interested in the flags that disable some security protections."}
{"prompt": "What security features are enabled on the binary in this challenge?", "completion": "No PIE, position-independent-code. Which means the binary itself runs without ASLR. At least the code and data sections from this binary. It doesn\u2019t affect loaded libraries like libc, the heap or the stack. Those are still affected by system ASLR. And we have no stack protector, which means there is no stack cookie and stack based buffer overflows are easy. Inside the ctf container you can also use the tool checksec on the binary to see the enabled security features. And you can also see that no stack canary,"}
{"prompt": "What is NX, and what does it mean for shellcode?", "completion": "stack protector, was found and that position independent code is disabled. BUT NX is enabled. So non executable stack. Which means you can\u2019t use shellcode like in old buffer overflow tutorials, because the shellcode on the stack couldn\u2019t be executed as code. At the end of the video I have a few generally tips and resources to learn what all that means. So make sure to don\u2019t miss that. Now back to the sources. So first of all you can see here a few functions named ignore_me. They are just here to setup the binary so it runs nicely."}
{"prompt": "What is the purpose of the functions 'ignore_me_1()' and 'ignore_me_2()' in the challenge?", "completion": "It doesn\u2019t have to do anything with the challenge and can safely be ignored. Here it disables buffering on the input and output and we register a signal that will kill the process after 60seconds, which helps us cleaning up long hanging processes. Ignore them. They are just setup stuff. That\u2019s why they are named ignore me. But feel free to research what these functions do. Anyway. Here is the actual part of the challenge. We have a function \u201cbackdoor\u201d that's obviously super suspicious. And then this remote_system_health_check."}
{"prompt": "What is the behavior of the program if the user enters the wrong password?", "completion": "In the main function we see that this function is called. What does it do? Well it simply asks you to enter a password. The password is statically stored in the binary here. \u201cSuper Secret password\u201d. It does a string compare on your input. And if it\u2019s correct, it will execute the top command. To give you some system information. If the password was wrong, the program exits directly. If you have done some basic exploitation challenges before, you might immediately notice the call to gets(). Which reads in a string into the buffer passed as parameter, but doesn\u2019t check the size."}
{"prompt": "What is the purpose of the ret instruction?", "completion": "So if you enter more than the 0xff characters, so 256, it will overflow this buffer. This buffer is stored on the stack. And on the stack there is other critical data which can be overwritten. A very important piece of critical data is the so called return pointer. So what exactly is that? When a C program calls a function, it is compiled to an assembler call instruction. The call instruction places the address of the next instruction onto the stack, and then jumps to the code of the function. When that function is done, it will execute the ret instruction."}
{"prompt": "What instruction is used to read the value on the stack and jump to it?", "completion": "This ret instruction looks at the value on the stack, and jumps there. So then the execution can continue. Btw these graphics are from my binary exploitation playlist episode 0x0C. If it\u2019s unclear, try to watch this series. So this value previously pushed by call onto the stack decides where we return to. Which means when we can overwrite this value which was placed by the call instruction on the stack, for example due to a buffer overflow, we can overwrite it with a value of our choice, and decide where we jump to when the function tries to return."}
{"prompt": "What is the problem when attempting to overflow the buffer?", "completion": "But let\u2019s go slow. First let\u2019s see what happens when we enter that password. We use netcat to connect to the server. Enter the password. And we see the output from the top command. Cool. Now let\u2019s see what happens when we try to overflow the buffer. Let\u2019s simply enter a lot of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAs trying to overflow it. But we have a problem. Wrong password. Nothing happened. The problem is that in the case of a wrong password, the function never tries to return. We simply exit()."}
{"prompt": "How can an exploit script be prepared for a pwnable challenge?", "completion": "So we can only reach the return with the correct password. But how can we overflow the buffer, and at the same time enter the correct password which is super short? We will get back to it in a moment. Let\u2019s start preparing our exploit script. I\u2019m using here vscode and i create a new asd.py script in the folder that is shared with the ctf container. In most of my videos I\u2019m not using pwntools, because it\u2019s kinda fancy and magic. And I prefer to show how to implement stuff yourself, rather than using too many abstraction tools."}
{"prompt": "What is the syntax for launching a new process and executing a binary directly using pwn?", "completion": "But maybe it\u2019s time to move forward. We have done stuff by hand for years. So from pwn import * The documentation also has various examples and some details. Definitely check that out or look for other example exploit scripts using it, to steal snippets. So let\u2019s start by simply launching a new process, and we execute the binary directly. So we don\u2019t use the network to talk to the actual challenge server yet. And then we call recvline() to get the first line of output from this process and print it."}
{"prompt": "What command can be used to get inside the container and run the script?", "completion": "It should be noted that I don\u2019t have pwntools installed on my host machine. But it\u2019s available inside the container. So we can use the visual studio code shell down here to use docker exec to get into the container. Go to the folder where the script is stored and we can execute it. It started the local process. Printed the first line asking for the password. And exited again. We can then also use sendline() to send the password as input to the process. And at the end we can use interactive(). Let\u2019s quickly comment out the password again."}
{"prompt": "What is the purpose of interactive mode when exploiting a buffer overflow vulnerability?", "completion": "Interactive simply gives us an interactive input output shell, like netcat, So when we run it, you see the red prompt here and we can enter the password ourselves. And that worked. So basically, if we successfully execute an exploit that gives us a shell, we want to use interactive to send inputs to that new shell comfortably. But before that we need to send our exploit input. So what\u2019s the trick here to trigger the buffer overflow? Well, if you have some experience with C programming, then you might know."}
{"prompt": "What is the difference between string compare and gets()?", "completion": "Strings in C are null-terminated. Meaning in memory there is no information about how large a string is. A string simply is defined as any squence of characters and it stops at a null-byte. So string compare compares strings, which means if it reaches a null-byte it is done. alright. Gets() on the other hand can be a bit confusing because it says \u201cget a string from standard input\u201d. But if you read the actual description it says, \u201creads a line from standard input\u201d. Which means it reads into the buffer until either a terminating newline or end of file is reached."}
{"prompt": "What tool can be used to create a unique pattern string to provoke a buffer overflow?", "completion": "There is a discrepancy between string compare and gets. So gets absolutely can read null-bytes from the input, it only stops at newlines. While strcmp reads newlines but stops at null-bytes. This means we can add characters after the null-byte, and when we execute this now, we see it passed the password check. Now let\u2019s send a lot of characters trying to provoke the buffer overflow. I\u2019m using cyclic here, which is a function by pwntools which creates a unique pattern string. This becomes useful in a moment."}
{"prompt": "What signal does the binary stop with when the process crashes?", "completion": "I\u2019m creating a string that is 0xff long, and a bit more. Just to be sure. When we execute that now, we see that a core dump appeared in the folder. Indicating that a process crashed. And our interactive shell got and EOF. And also we see that the binary stopped with a SIGSEGV, so a segmentation fault. Let\u2019s investigate. To do that I\u2019m adding a small pause to the script. raw_input is typically to get user input in the console, but I\u2019m simply using it to wait until I hit enter. I want to use this to attach gdb in the meantime to the process."}
{"prompt": "What command can be used to attach to a running challenge process with gdb?", "completion": "Pwntools has some fancy gdb attach integrations, but to be honest, no clue how that works and how I could maybe set that up here in docker. If anybody knows some cool tricks with that, please write it in the comments. Anyway, let\u2019s execute it. The script is now waiting for input. In the meantime we can open another shell inside the container. And with gdb -p we can attach to the running challenge process. We need the pid, so pidof the process name system_health_check will give us that. There we go."}
{"prompt": "What command can we use to detach the parent process in gdb?", "completion": "We are attached. The process currently is waiting in the read() for user input, for the password. And we continue the process. Then we go back to our script, hit enter, which then continues and sends the password with the long cyclic pattern. Let\u2019s go to gdb\u2026 oh\u2026 that doesn\u2019t look like it worked. The problem is that with the system() function, we spawn a new child process, and gdb followed that new process. Detaching parent process. You can also see here it executed top. That\u2019s not what we want."}
{"prompt": "What is the gdb extension installed in the CTF container?", "completion": "We want to stay in the parent process. Let\u2019s do it again, attach with gdb but this time set the follow fork mode to parent. And then we continue. Let\u2019s send our payload now. Hit enter. There we go. The parent crashed in a segemntation fault. As you can see, this is a very colorful gdb. Looks a lot more fancy than plain gdn. That\u2019s because I have installed the pwndbg gdb extension in the ctf container. So if you use all that docker setup, you have that too. So here are the registers, here is the disassembly,"}
{"prompt": "What is the purpose of the colors used in the debugger?", "completion": "which right now only shows the return instruction where we crashed, we see the stack, and the callstack or backtrace. The colors also help you quickly identify what the number COULD mean. So yellow values look like a valid stack address. Red values look like a valid code address. And white is just basic data. And so as I mentioned earlier, the return instruction takes the address where to return to from the stack. RSP points to the top of the stack, you can see the stack also displayed here. Rsp points here."}
{"prompt": "How can we make debugging a pwnable challenge more comfortable?", "completion": "pwndgb already recognized that the values on the stack look like a string, so it didn\u2019t display raw numbers like here, but displays it as a string. And this is the cyclic pattern that the cyclic function generated. Let\u2019s take a few of these characters, because with that we can calculate the offset. How many characters do we need, until we reach this point on the stack. But before we do that, let\u2019s make this all a bit more comfortable. We can create a .gdbinit file and add the set follow-fork-mode parent."}
{"prompt": "How can we automate the process of attaching GDB to a process in Pwntools?", "completion": "When we now execute gdb it attempts to read this as an init file. However it complaints because we need to allow it to be loaded from anywhere. So we need to add this auto-load safe path line in our home folder\u2019s /root/.gdbinit. Anyway. Now we don\u2019t have to type that in every time when we want to attach gdb. It will be automatically executed. So from the pwntools docs we can also learn about the cyclic_find function. It calculates the position of a substring into the sequence. So we can create a padding to fill up the buffer until we reach the return pointer on the stack."}
{"prompt": "What does the return instruction do?", "completion": "We repeat \u201cA\u201d so much, to reach the location where we found this \u201caclaacma\u201d string. And the next 8 bytes, will now overwrite the return pointer. I call it in my script RIP, like the instruction pointer register, because essentially it\u2019s the 8 bytes that controls it. The return instruction takes this value from the stack and sets RIP to it. That\u2019s all that the return instruction does. So for me the ret instruction is not really \u201creturn\u201d, it\u2019s rather, \u201cset rip to whatever is on the stack\u201d. Anyway."}
{"prompt": "What helper function from pwntools can be used to convert an integer number into an 8byte raw byte string?", "completion": "What do we want to set RIP to? As a first test let\u2019s just use a recognizable number. P64 is another helper function from pwntools, which simply converts this integer number, into an 8byte, 64bit, raw byte string. So we can send the string as input to the program And we use 0x4242424243434343. So this is CCCCBBBB. And don\u2019t forget to add the RIP after the padding and then let\u2019s try it. BOOM! There we go. On the stack we can see the string CCCCBBBB. And you can also see in the disassembly that return attempted to jump to this address."}
{"prompt": "What address do we need to jump to in order to execute the backdoor function?", "completion": "Obviously still a bad address, thus we have a segfault. So where do we want to jump to? If we look back into the challenge source code, we might remember the backdoor function, which simply should execute a shell for us. So how about we simply jump to that snippet of code and reuse it? With p backdoor, we print the symbol backdoor and find the address of it. We could also disassemble this symbol to find the address\u2026 So this is the start of the backdoor function. How about we try to jump there? 0x401254 replace that."}
{"prompt": "What instruction caused the segfault inside the libc library function system()?", "completion": "And try it. Attach gdb just to make sure. Continue. Boom! Crap. we got another segfault. BUT LOOK WHERE! In the backtrace you see that we were coming from the backdoor function. So we successfully redirected code execution into the backdoor function! This is awesome! We basically won. We just run into some weird other issue. And this one is inside of do_system. So inside the libc library function system(). How does that make sense? How can a widely used library like libc crash so easily. Well\u2026 if you are desperate you might just search for the assembly snippet that caused it."}
{"prompt": "What instruction is causing the crash in the program?", "completion": "If it happens in a popular library, it might be a known issue, right? And indeed! You can learn that the movaps instruction doesn\u2019t like it when addresses are unaligned. \u201cCalling an SSE instruction movaps with unaligned parameter causes a crash\u201d. So let\u2019s look at this instruction. It references RSP, the stack pointer. And the stack pointer ends in an 8. This is a problem. Because we jumped to this system function from this buffer overflow, everything is messed up. The System() function expects that the compiler makes sure the addresses are 16bit aligned."}
{"prompt": "What type of instruction affects the stack pointer?", "completion": "And that means we want a 0 at the end. So how could we do that? Somehow we must change the stack pointer before we call into system. What kind of stuff affects the stack pointer? Think logically. any push instruction moves the stack up. And pop instruction moves the stack pointer down. But also any CALL instruction places a new value on the stack, it\u2019s like a push. And any RETURN instruction takes a value from the stack, so like a pop. So what if we execute a second RETURN before we go into backdoor?"}
{"prompt": "What is Return Oriented Programming (ROP)?", "completion": "We simply could use the first return of our original function and overwrite the stack value with the address of another return instruction. This means after the first ret it will jump there and now execute that return. And this return takes the NEXT value from the stack to continue execution there. This by the way is a tiny ROP chain. Return Oriented Programming. Anyway. This way we can essentially move the stack pointer one element further and thus allign the address of the stack pointer. So let\u2019s look for a return instruction."}
{"prompt": "How can pwntools be used to switch between a local process and a remote server?", "completion": "I simply use objdump -D to get the disasembly of the whole binary and then grep for ret. So any of these addresses point to a return instruction. So let\u2019s add that to our exploit. The first address we jump to is the other return instruction. And after that we jump to the address of the backdoor function. Let\u2019s try it out. Let\u2019s change the exploit script from launching a local process to connecting to the remote challenge server. In this case this is my local IP. This is why pwntools is so awesome, we can easily switch between a local process and the remote server."}
{"prompt": "How can one read the flag in a pwnable challenge?", "completion": "The functions to talk to it stay the same. Let\u2019s run it. We get the output of top. Now let\u2019s see if we have a shell? There we go! Looks good. And we can read the flag. Awesome! This was obviously a very quick walkthrough, a lot to take in. Not going into a lot of details. And it will be hard to apply these steps to some slightly different exploitation challenge. There are a lot of small pitfalls and different exploitation strategies. And as soon as the other mitigations like ALSR and stack cookies are turned on, it gets more difficult."}
{"prompt": "What are the differences between 32-bit and 64-bit pwnable challenges?", "completion": "There is no magical spell to quickly explain that. So it will take time, and you will have to rewatch videos, or read different writeups. I encourage you to take a lot of notes and just try it. I have a whole binary exploitation playlist, covering challenges from exploit.education, but it\u2019s 32bit and a bit old. A lot of the challenges are solved with shellcodes, which are rarely a thing on 64bit pwnable challenges due to the non executable stack. But regardless many of the concepts are still the same."}
{"prompt": "What port is the server running on?", "completion": "The qualification round for RHme3 is over, so we can have a look now at the challenges you had to solve to qualify. I really enjoyed the exploitation challenge, because it was pretty straight forward. And you have had a good chance to solve it yourself, if you are familiar with my exploitation videos. So let\u2019s check it out. \u201cThis binary is running on pwn.rhme.riscure.com. Analyze it and find a way to compromise the server. You\u2019ll find the flag in the filesystem.\u201d When you try to access this domain via the browser it doesn\u2019t work. But we are given two files and I\u2019m sure we can reverse engineer the binary to figure out how to interact with the server."}
{"prompt": "What are some of the challenges involved in performing Return-Oriented Programming (ROP) on a typical modern Linux system?", "completion": "the fact that they give you a libc is already a good hint. Let me tell you what I think when I see it. First, the target system will be a typical modern linux system, so no executable stack or heap and thus we have to do ROP or return to libc. And in order to do that successfully, you have to know where ROP gadgets or libc functions are. But if you use your local libc, then the offsets are probably different. Some CTFs don\u2019t give you a libc, this means it\u2019s harder because you first have to somehow leak the server libc or guess it based on addresses you leak. But yeah."}
{"prompt": "What is typically used as a parameter when calling the libc function system() to get a shell in a CTF challenge?", "completion": "And a typical exploit for a CTF challenge is to simply call the libc function system() with \u201c/bin/sh\u201d as a parameter, to get a shell. So I already expect that I probably want to overwrite some entry in the global offset table and point it to system(). This means I\u2019m kinda looking at this challenge from the reverse. I know, or at least guess what I want to do, and to achieve this I\u2019m looking for a way to write into the global offset table, or overwrite some other function pointer, for that matter."}
{"prompt": "What tools can be used to get a general first impression of what is happening when executing a binary?", "completion": "Only if after a while I realize that that attempt would fail, I consider other possible techniques. So let\u2019s have a look at the binaries. The main.elf file is not stripped, which means it will have all the symbol names in there, which makes reversing really easy. But when we try to execute it, it doesn\u2019t seem to work. And I saw some people complain that it doesn\u2019t work. BUT, what does \u201cdoesn\u2019t work\u201d mean. That\u2019s one of my \u201cpet peeves\u201d. We have to be more careful with our observations. We don\u2019t see any obvious errors. So for example if I just rip out the start of the binary and try to execute that I get very obvious execution errors. That\u2019s not what we see. So we have to investigate why it immediately exits. Really good tools to get a general first impression of what is happening, is strace and ltrace. And when you run the binary with it, you first of all see that it does in fact run, so it works, it just exits for some reason."}
{"prompt": "What library call does the binary execute before exiting?", "completion": "ltrace will show you all library calls, so you can see it executes \u201cgetpwnam\u201d before exiting. And the man page tells us that it tries to get information about a user from /etc/passwd. And the user was pwn. P W N. So I guess it expects this user to be there. Let\u2019s add this user. Oh and also a good idea is to switch now to root. Because it looks like the binary wants to mess with user permissions. So we add this user, enter some random info and there we go. When we now execute it we get further! This time it builds a path, and this path obviously doesn\u2019t exist. So let\u2019s maybe create that one as well. Maybe it wants that path."}
{"prompt": "What is the flag used to follow any children processes in the program?", "completion": "One other thing that happens is the fork(). And fork means it creates a new process. So we should use the -f flag, to follow also any children processes. AHA! And now it tries to create a socket and open a port 1337. Also we can now connect to this port and interact with the program. And that is also the port for the remote server. I heard several people patched the binary to get around all those checks, but it\u2019s not necessary, the program just expects certain things about the environment. But whatever,"}
{"prompt": "What kind of vulnerability was discovered in the program?", "completion": "your solution worked too. So now that we can see what the child process calls with ltrace, we can explore the functionality. And at the same time see the libc calls. This is super helpful to maybe even find issues. Anyway. As you can see this program is a team manager where you can add players, remove players, edit a player or show the whole team. So I obviously started by adding a player And entered a format string as the name, to check if it\u2019s a format string vulnerability, but it was not. All outputs properly print it. But I still quickly found the bug. Because I noticed I first have to select a player before I can show this player. And when I do this and then delete the player I selected,"}
{"prompt": "What is the binary's structure for a player?", "completion": "I can still show the player. And now the values are weird. So obviously when you delete the player you have selected, you shouldn\u2019t be able to show the player anymore. This means, we have a classical use-after-free condition. A reference to the deleted player was not removed. Next I wanted to see how the heap looks like when creating players. Basically I want to know what the player structure is. But before we get there, let\u2019s open the binary in a disassembler. You will immediately notice that the binary contains all symbols,"}
{"prompt": "What is the function of the show_player_func?", "completion": "because it was not stripped. So that is really nice. For example here are daemonize, background_process and serve_forever functions, which do all this, well, background process and listening forever on a port, stuff. But more interesting right now are the menu functions, including the edit, show and set functions. And to look at the player structure, we could look into the show_player_func. The cool thing is, it is also used in show_team. So everytime player information is printed, it would call this function here. Useful to dump some debug info."}
{"prompt": "What information is contained in the gdbinit file created in the video?", "completion": "And in show_player_func it looks like there is a parameter rdi that is used to pass in the player address. So let\u2019s write a gdbinit file that helps us debugging. First I copy the default gdbinit to not loose peda and then we set the follow-fork-mode to child, so gdb will follow the child process upon a fork. Then we set a breakpoint in show_player_func and use rdi to print some memory. Silent so we don\u2019t see gdb info messages and continue afterwards, so we just print the memory but don\u2019t actually interrupt."}
{"prompt": "What command can be used to set a breakpoint in gdb?", "completion": "And then we can start gdb with -x to specify this gdbinit file, which sets the breakpoint with commands and runs the binary. Then we can use our other window to connect with netcat to the local port and add a player using a name we can recognize in memory. And when we then show the team, thus call show_player_func, our breakpoint will be hit and print the memory. And that worked great! Let\u2019s add a second player, also with unique data, B B B B as name and 5 6 7 8 for the stats. Then we select show team and we have a look at the memory."}
{"prompt": "What is the structure of the data containing the player stats?", "completion": "So. We can clearly see 4 32bit integers containing our stats. It was 1 2 3 4 for the first player and 5 6 7 8 for the second player. Then we seem to have a fifth value, which is an address or pointer into the heap. Infact this heap chunk is right after this initial structure. So this is just a string, the name. So to summarise, we have a player structure with 4 32bit integer stats and a pointer to a char array or string. Which is also allocated on the heap. And now we come back to our goal, we would like to overwrite an entry in the global offset table. If we could control this pointer somehow and point it into the global offset table,"}
{"prompt": "What types of exploits are still commonly used by hackers?", "completion": "Browser Exploits are very scary. If somebody has\u00a0 a working exploit, simply visiting a website would compromise your machine by installing malware.\u00a0 About a decade ago this was very common and often referred to as drive-by-downloads. Luckily\u00a0 browsers have gotten a lot more secure, so your typical low-skilled blackhat criminal\u00a0 hacker doesn\u2019t have this ability anymore. But browser exploits are far from being a thing\u00a0 of the past. They just have gotten a lot more complex and thus expensive. And this can be seen\u00a0 for example in hacking competitions like Pwn2Own where researchers year after year showcase\u00a0 0day vulnerabilities they found in browsers,"}
{"prompt": "What is the Javascript engine of Webkit called?", "completion": "and get awarded tens or hundreds of thousands\u00a0 of dollars. Which some say is even low, because selling exploits to for example to governments\u00a0 would get you 3, 5 or even more times the money. But why is it so difficult nowadays? I have\u00a0 actually made a short series about the basics of browser exploitation, specifically looking\u00a0 at webkit or more precisely JavaScriptCore, the javascript engine of webkit. So there you\u00a0 can get an idea how that can look like. But while finding a bug in a Javascript engine that\u00a0 gives you arbitrary code execution is already crazy and fascinating, nowadays that\u2019s only\u00a0 half the battle. Because after that, you are facing the browser sandbox. And in this video I\u00a0 want to have a look at the sandbox from Firefox."}
{"prompt": "What are some examples of actions a process can do when given arbitrary code execution?", "completion": "This video is based on a cool article by freddy\u00a0 from mozilla, so definitely check that one out. But let\u2019s start with the questiol: \u201cwhat is\u00a0 a browser sandbox anyway?\u201d. When you write a simple program and you execute it, it will create\u00a0 a process. And your code can do anything right? You can write code to open files, write\u00a0 files, you can even start new programs. So imagine you implement a browser and you\u00a0 have a vulnerability in the HTML renderer or the javascript engine. Now an attacker would\u00a0 have arbitrary code execution in your process,"}
{"prompt": "What is the main idea behind browser security sandboxes?", "completion": "and they can do anything your program could do.\u00a0 They culd open files, write files or execute malware. This is bad. And this is how it used to\u00a0 be for Browsers. But the architecture of browsers changed over the years - that is the case\u00a0 for every browser. Speaking from a highlevel perspective, you can imagine most browsers now\u00a0 to have a privileged parent process, that is like your regular process that can do anything,\u00a0 but the actual website rendering, maybe your tab, is another process. And the idea is to restrict\u00a0 this process. Websites with HTML and Javascript cannot read or write local files, and they cannot\u00a0 execute other programs. So why should this process have this capability? Let\u2019s sandbox this process\u00a0 and take away all those features. Then this process can just read HTML, render a page, and\u00a0 execute javascript that makes the website fancy."}
{"prompt": "How does the Linux operating system implement process restrictions?", "completion": "And how these restrictions are implemented depends\u00a0 on the operating system. You need kernel features for that. So each operating system does it\u00a0 differently. For example on linux you have seccomp. A process can use seccompt to tell the\u00a0 kernel, please never let me open new files again, and when then an attacker takes over this process,\u00a0 they cannot open files. And when you look at the mozilla wiki about the sandbox, you can find here\u00a0 a config setting to whitelist which syscalls are allowed to be called by the content process -\u00a0 so the sandboxed process handling a website."}
{"prompt": "What techniques does Firefox use to restrict the render of potentially malicious website content?", "completion": "And of course there are similar\u00a0 features like this on windows and macOS. This is cool because we can restrict the render,\u00a0 when handling the potentially malicious website content. BUT in practice it\u2019s not THAT easy.\u00a0 For example the opening, reading and writing of files. Think about it. The browser wants to\u00a0 cache files and images, cookie information has to be stored somewhere permanently, when you\u00a0 want to use the file dialog to upload a file the browser needs access to that. Suddenly you\u00a0 realize, \u201cSHIT!, we need to solve this problem\u201d."}
{"prompt": "What is IPC (Inter Process Communication) and how is it used in browser security sandboxing?", "completion": "And this is where IPC, Inter process communication\u00a0 is introduced. So instead of giving the content process the ability to read and write files, we\u00a0 implement a communication protocol between the content process and the parent browser process,\u00a0 where the content process can only perform well defined actions. We could for example create\u00a0 a message that says \u201cplease write this cookie to permanent storage\u201d. And then the parent process\u00a0 implements how that is done, the parent process actually opens the file and writes to it. And\u00a0 this is the whole sandbox architecture idea."}
{"prompt": "What is the mechanism used to ensure low-privileged render or content processes are isolated from the underlying system?", "completion": "You have low-privileged render or content\u00a0 processes. And they use IPC to communicate with the parent if they want to do\u00a0 anything that would require higher privilege, and let the parent now deal with it. So this brings us back to exploitation again. If you find a vulnerability in HTML or JavaScript,\u00a0 you can take over this process, but you are very restricted. Now you need to find a second\u00a0 vulnerability in the sandbox implementation. Cool. now we solved one practical problem,\u00a0 but there is another concern you might run into when you want to have an effective\u00a0 sandbox. Let\u2019s say all your websites are rendered in this content process, and it\u2019s\u00a0 properly isolated from the underlying system thanks to secure IPC protocol. Well many people\u00a0 have their critical data loaded in the browser."}
{"prompt": "What is the issue when the sandbox process is owned in modern browsers?", "completion": "Imagine you want to steal a users emails. You\u00a0 don\u2019t need malware anymore on the machine. You can simply go to Gmail in the browser.\u00a0 So when you compromise the render process, and all websites are loaded in the same process,\u00a0 you can now still steal all the emails. So it\u2019s still a critical issue when the sandbox process\u00a0 is owned. And this is where we get into more modern sandbox designs and here you see this\u00a0 visualized in this image on the blog post. Current firefox, or maybe old firefox\u00a0 depending on when you watch this,"}
{"prompt": "How does the Fission project for Firefox address the issue of websites embedding other websites through iframes?", "completion": "had a process per tab. And websites can embed\u00a0 other websites through for example iframes. So this is exactly the issue we just talked about.\u00a0 But the Fission project for firefox tries to solve that by implementing site isolation. Now each\u00a0 site gets their own process. And this is awesome, because now exploiting the process running\u00a0 this ad, cannot access the main page anymore. Your emails on gmail.com would be safe. Of course this adds more complexity to the sandbox. Because iframes need to\u00a0 be able to interact with each other."}
{"prompt": "What is the IPC feature that is used to enable communication between two iframes?", "completion": "For example you want to use the postMessage API in\u00a0 javascript to send messages between iframes. So of course now you need to implement more IPC features\u00a0 to enable communication between those two as well. So as you can probably guess, this\u00a0 complexity introduced from process isolation, can still introduce lots of new vulnerabilities.\u00a0 But the effort is still worth it, because now there is an additional barrier,\u00a0 where earlier there was none. And as mentioned before, these kind of security\u00a0 features are not unique to firefox. For example chrome also implements process site isolation.\u00a0 But in this video we want to focus on Firefox."}
{"prompt": "What does Mozilla consider a High Impact vulnerability?", "completion": "Now given that Firefox has a sandbox, a full\u00a0 exploit to compromise the machine and install malware, requires a renderer exploit for example\u00a0 in javascript, and additionally a sandbox escape. And these two tasks can be perfectly separated.\u00a0 So if you have a team one person can look for sandbox escape and the other person can look\u00a0 for the initial javascript vulnerability. So as a security researcher we can choose to hunt\u00a0 exclusively for sandbox bypasses. It will still be useful, even if you haven\u2019t found a renderer\u00a0 vulnerability yet. And this is also reflected in the mozilla bug bounty. Mozilla considers\u00a0 a sandbox escape a High Impact vulnerability."}
{"prompt": "What are three strategies for attacking sandbox escapes?", "completion": "\u201cSandbox escapes that assume arbitrary code\u00a0 execution in the content process - such as invoking an IPC method with attacker-controlled\u00a0 parameters - do qualify for Highest Impact.\u201d It is currently even paid better than the\u00a0 code execution in the content process. Which also makes sense. If the sandbox\u00a0 would be perfect you could maybe even ignore memory corruptions in javascript. Because\u00a0 the sandbox implementation protects your system. Ok so now that we know that\u00a0 sandbox escapes are interesting how can we attack them. I\u2019m not an expert, but\u00a0 I think there are three strategies. Attacking the operating system implementation. Attacking\u00a0 the IPC layer. Or logic bugs from using IPC."}
{"prompt": "What techniques can be used to bypass the sandboxing features of an operating system?", "completion": "So maybe you could try to find a bypass or\u00a0 weakness in the sandboxing features of the operating system. For example if the sandbox is\u00a0 configured to allow unrestricted open and write syscall, well then you can write local files\u00a0 and maybe this means you bypassed the sandbox. Another research angle could be the IPC\u00a0 implementation, which is written in C++. So maybe there are memory corruptions within the\u00a0 IPC protocol layer. And in January mozilla even shared a blog post about fuzzing the IPC layer in\u00a0 firefox. Here mozilla even gives tips to hackers."}
{"prompt": "What is a potential approach to fuzzing scenarios involving Firefox IPC?", "completion": "\u201cOne potential approach to fuzz such scenarios\u00a0 effectively could be to start Firefox with a new tab, navigate to a dummy page, then\u00a0 perform a snapshot of the parent process and then replace the regular child\u00a0 messages with coverage-guided fuzzing.\u201d Mozilla wants to share tips like this,\u00a0 because if they can help researchers to understand Firefox IPC better, maybe\u00a0 more people can find vulnerabilities and report them. And that makes firefox\u00a0 ultimately more secure over time. So fuzzing the C++ implementation\u00a0 is another attack possibility."}
{"prompt": "What is the purpose of the JavaScript Inter-Process Communication (IPC) in Firefox?", "completion": "And now we come to a third option. And this\u00a0 is very highlevel. You will be surprised because you don\u2019t really need to have any\u00a0 low-level knowledge to hunt for bugs there. I\u2019m talking about logic bugs in the IPC messages.\u00a0 And this is what this article that motivated this video is about. \u201cExamining JavaScript\u00a0 Inter-Process Communication in Firefox\u201d. Maybe you didn\u2019t know this, but not everything\u00a0 in firefox is written in C++. Actually many parts are written in Javascript. Have you ever thought\u00a0 about why the settings page is not some kind of native window with settings, but it\u2019s shown here\u00a0 inside the browser. Well this is a web page that controls the browser settings. Btw it\u2019s the same\u00a0 in Chrome as well. You can even open the developer tools and explore the HTML of this page. You\u00a0 can even see here Javascript that is loaded from internal resources. By the way, don\u2019t get confused\u00a0 by the prefix chrome://. I asked freddy about it and he pointed me to this glossary."}
{"prompt": "What is the difference between the chrome of a browser and the Google Chrome browser?", "completion": "\u201cIn a browser, the chrome is any visible aspect of a browser aside from the\u00a0 webpages themselves (so chrome is e.g., toolbars, menu bar, tabs). This is not to\u00a0 be confused with the Google Chrome browser.\u201d Okay. But in terms of functionality, obviously\u00a0 the settings page needs a lot more privileged than your normal website - you have to be\u00a0 able to change the firefox settings. And so I believe this page is actually part of the parent\u00a0 process. It\u2019s not in an isolated content process. Anyway. This article introduces the IPC message\u00a0 sender and receivers implemented in javascript."}
{"prompt": "What is an IPC message?", "completion": "They are called JSActors and they can be\u00a0 used to send messages back and forth. And so let\u2019s look at an example. When you\u00a0 execute alert(1). This overlay window is opened. And this is actually implemented in\u00a0 the parent process. When you execute alert(1), internally an IPC message is sent from the\u00a0 content process, to the parent \u201cplease open an alert box\u201d. And this alert box has a title with\u00a0 the url, the text we entered and an OK button. So now let\u2019s investigate this. I\u2019m using here\u00a0 Firefox Nightly and any of the steps we are doing are could change anytime. But i\u2019m sure it\u00a0 will be similar, or there will be updated guides."}
{"prompt": "How do you enable the browser chrome debugging toolboxes and remote debugging in Firefox Nightly?", "completion": "To prepare the browser for research now, in the\u00a0 devtools we have to go to the settings and enable browser chrome debuggin toolboxes. And we enable\u00a0 remote debugging. And then you have to restart firefox nightly. Once restarted you can now go\u00a0 into the menu, tools and open the browser toolbox. This opens the multiprocess browser toolbox and\u00a0 it\u2019s basically an attached debugger for firefox. For the parts that are implemented in HTML\u00a0 and javascript. And we right now are in the main parent thread. And you can see here\u00a0 other processes, for example a process for browser extensions which are isolated as well\u00a0 having the process id 35016. And as I said,"}
{"prompt": "What is the message handler for the alert box in Firefox's IPC mechanism?", "completion": "many parts in firefox are implemented in HTML\u00a0 and javascript, so is the interface. See this?! We can explore the browser interface. We can even\u00a0 look closely at the implementation of the tabs. Here is the liveoverflow tab and I can even modify\u00a0 the interface. It works the same way how you can use the devtools to modify websites. I mean\u00a0 this literally is the familiar developer tool. Anyway. We are interested in the IPC mechanism,\u00a0 so we can now look for the message handler for the alert box. We can search for the\u00a0 message \u201cPrompt:Open\u201d and we can find this receiveMessage function. So let\u2019s set a breakpoint\u00a0 here and call alert again. alert(\u201ctest\u201d)."}
{"prompt": "What is the modalType parameter used for in the IPC message?", "completion": "Browser freezes. And in the toolbox we can\u00a0 see \u201cPaused on breakpoint\u201d. We are in the main thread in this function. So let\u2019s look at\u00a0 this IPC message coming in. It for example has an args.title, with the url. Or an args.text with the\u00a0 \u201ctest\u201d string. There is also a modalType which is currently set to 1. And it seems to control what\u00a0 kind of alert box you get. Pretty interesting, right? You could now change here values and see\u00a0 what happens. But this is just the receiver site. Let\u2019s look at the sender now - the content process\u00a0 sending this IPC to the parent. To do this we open another debug toolbox, this time the content\u00a0 toolbox. As you can see, it is running in another process, process 25072, the web process. And this\u00a0 basically has the capabilities you have when you would compromise the content process. Here we can\u00a0 for example access the tabs, and get the first tab pointing to liveoverflow. And now we just need\u00a0 to follow basic instructions how the IPC protocol works. First we want to get an actor for the\u00a0 prompt and then send a query asking for the parent to please Open a prompt with these parameters."}
{"prompt": "How can a compromised content process be used to control data in Firefox?", "completion": "And we can play now with these parameters. For example we can specify a different\u00a0 title. Or change the modalType to 3 and even fake this remoteID. Let\u2019s see what happens.\u00a0 Okay breakpoint hit in the parent and here you can see the fake data coming in. We were really\u00a0 able to control this data. Let\u2019s run it and see if this modalType 3 looks different from the\u00a0 regular alert. Look at this!!! modalType 3 is a weird native window not this fancy overlay\u00a0 window. Kinda looks like an oldschool alert. And you just witnessed what a\u00a0 compromised content process could do,"}
{"prompt": "What type of malicious data can be sent to exploit a vulnerability in a content process?", "completion": "You cannot do this from regular javascript on a\u00a0 website. But if you find a vulnerability in the content process, you could send arbitrary IPC\u00a0 messages like we did with the debugger toolbox. So you can now hunt for logic bugs. For example\u00a0 you can look for IPC message receivers that handle files for example, and you can try to send\u00a0 evil arguments that maybe break something. We could for example instead of a string, send\u00a0 a javascript object and try prototype pollution. So I create an evil object with just some messy\u00a0 stuff, and send that. We get an error that it\u2019s an unknown dialog type object, but nothing else\u00a0 seems to have broken. But you get the idea,"}
{"prompt": "How can the Prompt:Open IPC message between child and parent processes lead to a sandbox escape vulnerability?", "completion": "you can use the browser toolbox to\u00a0 explore the IPC and look for logic bugs. The article also shows an example of\u00a0 such a sandbox escape CVE-2019-11708. This vulnerability was used in a 0day\u00a0 attack against coinbase in 2019. Read this: \u201cInsufficient vetting of parameters passed with\u00a0 the Prompt:Open IPC message between child and parent processes can result in the non-sandboxed\u00a0 parent process opening web content chosen by a compromised child process.\u201d. So as we just\u00a0 learned, webpages are opened in this isolated sandboxed process. And only privileged and trusted\u00a0 internal sites like the settings page is opened in the unsandboxed parent. But the vulnerability\u00a0 here was, that the prompt IPC handler could be abused to open a prompt as a new tab loading\u00a0 an attacker controlled website in the parent process. And this attacker controlled website\u00a0 is now not restricted by the sandbox anymore and can thus do much more privileged actions.\u00a0 Eventually gaining code execution on the machine."}
{"prompt": "What techniques can be used to research the Firefox sandbox?", "completion": "Sandbox escapes can sound really\u00a0 complicated and magical, but I think this blog post was just excellent to show how\u00a0 easy researching the firefox sandbox could be. Really cool. I hope this overview and a short dive into the firefox sandbox\u00a0 implementation was interesting to you, if you want to learn more about browser\u00a0 exploitation, checkout my playlist that I mentioned before and of course check the\u00a0 description for links to the articles. I\u2019d also appreciate if you checkout\u00a0 liveoverflow.com/support. thanks."}
{"prompt": "What are the PR names for GSM, UMTS and LTE?", "completion": "So in the first video I introduced SIM cards and how we can use SIMtrace by osmocom to trace the communication between the phone and the SIM card. So let\u2019s slowly make our way up into the network. Before we look at the first phone, I quickly want to get everybody on track when it comes to the different telecommunications technology. So you definitely have heard the terms 2G, 3G, UMTS, GSM, LTE, GPRS, 4G, EDGE and maybe more. The Gs stand for generations. 2nd, 3rd and 4th generation, and basically they are the PR names for GSM, UMTS and LTE."}
{"prompt": "What is the difference between a phone connection and an internet connection?", "completion": "GPRS and EDGE and loads of other terms are extensions that added something to those bigger standards. Phone connections are generally direct connections. That\u2019s very different from the internet where we use single packets. At least historically phone networks are direct connections to enable realtime communication. LTE is actually now also packet based. Packet based communication has gotten so fast nowadays, that you can transmit basically realtime communication through packets. You know this from skype."}
{"prompt": "How was GSM first deployed in 1991?", "completion": "So in GSM, things like GPRS and EDGE add packet based communication to it to the circuit switched style GSM network. While now in LTE we need an extension to have calls, Voice over LTE enables phone calls over LTE. The packet based internet has become so important. And so actually this extension Voice over LTE is not very widely deployed yet so typically for calls your modern phone will still use UMTS or GSM. It\u2019s all a huge mess. GSM was first deployed in Finland in December 1991 and as of 2014, it has become the global standard for mobile communications \u2013 with over 90% market share."}
{"prompt": "What types of networks are used in point of sale terminals?", "completion": "At some point we then got UMTS and nowadays we have LTE. And as you probably know from the corner on your phone, you still see all of those things. It\u2019s not like LTE replaced GSM today. So you would maybe think we ignore GSM nowadays, it\u2019s old and we focus on LTE. But the truth is, GSM is still hugely important. A lot of things you might not know about use GSM. So for example a lot of point of sale terminals where you can pay by card have a SIM card inside, and that\u2019s how it communicates with the credit card banking network."}
{"prompt": "What is the name of the conference project mentioned in the video transcript that runs a GSM network?", "completion": "And so understanding GSM is still super beneficial, however it\u2019s difficult to do that. I mean nobody has to setup their own phone network at home, right? But that doesn\u2019t stop people from wanting to understand it. And so the project OSMOCOM, which stands for Open source mobile communications, is trying to do just that. And here is a small snippet from Harald Welt, LaF0rge on twitter, who is the founder of osmocom describing the state of the development in 2015 at the 32c3 conference. By the way they also run a conference GSM network during the congress."}
{"prompt": "What year did open source mobile communication protocols begin to be implemented?", "completion": "Let\u2019s start with a little bit of the history of open source in mobile communication protocols. You have to remember that we started about 16 years after the proprietary implementations. The GSM network that we are running here at the event, or that we started to run 7 years ago, started 16 years after GSM networks were run first in the public in europe. At public operators. So we are really really late. And if you like to compare the status of open source mobiel communications with open source operating systems, then I would say we are about where linux was 1994/95."}
{"prompt": "What is the general status of GSM networks according to the speaker?", "completion": "So i would say capable but not taken seriously. Sort of the general status. So I would like to at that maybe the mobile operators that built the proprietary technologies might not take you seriously, but I think we as the wider IT community really appreciates the work you and all the other contributors have done. As you know, I make these videos because Vadim Yanitskiy who is an osmocom contributor reached out to me. Maybe that\u2019s not what you expected. \u201cURGH NOT LTE! GSM it\u2019s like old crap. What do I want with that?\u201d."}
{"prompt": "What was the badge that was shown in the video?", "completion": "But that\u2019s the reality. These things are so complex and require a huge amount of work. So I hope you can really appreciate the work that has been done here and I hope you see the incredible value that this still has. Long story short. What I wanted to say is. We look at GSM in these videos. Last video I promised you to tell you what is so special about the old motorola and nokia phone. And maybe you remember the TROOPERs badge that I have shown in this video. I also had a interview with one of the creators of it."}
{"prompt": "What interface can be used to enable Nokia Network Monitor?", "completion": "The reason for that was that the Nokia phone has some really nice capabilities. So let\u2019s Vadim introduce us to it. Some old phones from Nokia, like this one, do have a well researched debug interface _enabled_. Well, better to say *not disabled* after manufacturing. For example, this interface can be used to enable well known Network Monitor. BTW: this Nokia 1280 was released later than 3310, and it has no Network Monitor Wikipedia even has an entry for that: Nokia network monitor or Monitor Mode was a hidden mode on most Nokia cell phones used to measure network parameters."}
{"prompt": "What is an ARFCN, and how is it related to GSM networks?", "completion": "The mode can only be activated over a special FBus, or MBUS cable. If you checkout the troopers video you will hear a bit about the fbus. But yeah, so here the network monitor is running. So what can we see here? Basically, there are many test displays where one can observe some information or even modify some parameters. For example, here we can see which channel this phone is using at the moment. On the top right corner we can see the ARFCN, which stands for Absolute Radio Frequency Number. Let\u2019s look up the GSM ARFCN number."}
{"prompt": "What is the frequency range of GSM networks?", "completion": "So we have 2G and the number was once 681 and once 683, not that important. And the frequency is 1743 Mhz up and 1839 Mhz downlink. Just a quick refresher. GSM is just like any other radio wave. It has a certain wavelength. It\u2019s all on the electromagnetic spectrum. Visible light is just a small part of it. And so 1700Mhz is I think a bit under 20cm wavelength, so it would be somewhere here on the spectrum. From a nokia network monitor manual we can also see that if you are transmitting, then you would have here the transmit strength."}
{"prompt": "What is the broadcast channel used by the phone to receive paging requests?", "completion": "But phones are not always transmitting. Most of the time they are just listening. On the top middle part *of this screen* one can see how strong is the signal from current base station. At the moment this phone is listening to a broadcast channel called CCCH, or Common Control Channel. And this is exactly where the phone expects to 'see' Paging Requests. Paring Requests are used by the betwork in order to notify subscribers about incoming calls or SMS messages. As soon as Paging Request is received, the phone needs to establish a dedicated channel with the network."}
{"prompt": "How does the network capacity increase when using a Half Rate channel?", "completion": "So we are currently in CCCH. That\u2019s a control channel. If we were in a call, we would switch to a traffic channel. There are two types of Traffic channels: - TCH Full Rate ... and ... - TCH Half Rate The Full Rate channel provides higher bit rate and better quality of speech, while the Half Rate channel allows to increase the network capacity, since two subscribers can use a single time-slot at the same time. So as vadim said in the control channel we are waiting for for example so called paging requests from the network."}
{"prompt": "What is the process for a base station to locate a specific phone?", "completion": "If there is for example a call or sms incoming, the base station would send out a paging request, asking if this particular phone is in this area. It\u2019s a broadcast. Why that particular basestation thinks the phone should be in this area we will talk about some other time. I mean it\u2019s logical that not all basestations in the WHOLE WORLD can send out a paging request asking where the phone is, right? So in this case a basestation just yells out, \u201chey is this phone here nearby?\u201d. And our phones are constantly listening for these paging request, and when our phone realizes,"}
{"prompt": "What is the purpose of the Random Access Channel (RACH) in GSM networks?", "completion": "\u201cOH THAT\u2019S ME\u201d it will respond with a channel request. And that is done through RACH, the random access channel. So this is a channel any phone is allowed to use and happens on the same frequency that we looked up with the ARFCN number. And the basestation is listening for those, and so if two phones at the same time would ask for a dedicated channel at the same time, they would collide, like two people talking over each other, and they would not get their own channel. but let\u2019s say it succeeded, the basestation received your channel request, now the basestation looks at all the currently used channels and will assign you a time slot.."}
{"prompt": "What is the purpose of TDMA in GSM networks?", "completion": "So this is where TDMA comes into play. Time-division multiple access. You somehow need to divide up the limited radio space you have. You need to make sure multiple phones can talk to a basestation and the other way around. So. Time division multiple access. Let\u2019s deconstruct this name. We need multiple phones to access the base station. To respond. And we do that by dividing time. Every phone gets a timeslot. Vadim suggested I explain that with a cross road. Imagine you have a crossroad with traffic lights and the lights turn red and green in a nice pattern."}
{"prompt": "What is a good example to illustrate a time division multiple access system?", "completion": "If all directions, would be allowed to drive at the same time, that would be a problem. So the traffic light always assigns a short time slot where one phone is allowed to drive traffic. Pun intended. So a traffic light is a good example for a time divison multiple access system. If we keep using this traffic example we can also use it to refer back to the ARFCN numbers and the frequencies. Earlier we learned that there are two different frequencies, up and down. So that\u2019s like a road with two lanes."}
{"prompt": "What is the principle behind sending and receiving data on two different frequencies?", "completion": "Each frequency can be used to transmit data. It\u2019s all electromagnetic waves. And we can build antennas that can be tuned to only recognize and send a particular frequency. It\u2019s basically the same way how our eyes are tuned to only see a band, so a small slice of a certain visible light color frequency. Anyway because we have two frequencies we can send and receive at the same time. If there were only one frequency only the basestation or only the phone could send something and then you would have to figure out how to organize that."}
{"prompt": "What is the random access channel used for in GSM networks?", "completion": "The same way like a narrow street with two cars on it. But luckily we have two frequency, one up and down. So we only need to organize multiple phones, whcih we solve with time division like on the cross road. And instead of a traffic light telling us when we can send, we use the random access channel, yell at the basestation, CAN YOU TELL ME WHEN I CAN SEND? And the basestation sees that timeslot 3 is free, and tells you to only send in timeslot 3. By the way, here with RACH messages you also have the first security issue with GSM."}
{"prompt": "What is the purpose of RACH messages in a GSM network?", "completion": "Here is a denial of service. Of course you could just jam the radio frequencies so the phone or basestation couldn\u2019t communicate anymore, but you can also flood the basestation with RACH messages. You request a channel, then the basestation will allocate a timeslot for you and there are limited timeslots. You can\u2019t have infinitely many phones sending in the limited radio space. Of course the basestation will free up channels when they are not used anymore, but if you keep requesting new ones, other phones will probably not be able to get a connection going."}
{"prompt": "What is the purpose of a Location Update in a GSM network?", "completion": "Let's reboot this phone in order to see what would happen. As you can see, it remembers the last ARFCN is was tuned to. The phone always looks for a channel with the best signal quality. So, now it's on SDCCH (Stand alone Dedicated Control Channel). This channel is usually used to perform Location Updates. Location Update is something like \"Hey, I am here, at this particular part of the planet ;)\" And this answers the question how the network knows which basestation to use for the braodcast when you get a call."}
{"prompt": "What types of information can be found in the Nokia Network Monitor?", "completion": "When you turn your phone on, or move around, your phone will send a location update request to a nearby basestation, which will update that information on a central server of the operator, and when somebody wants to call you, the operator can look up your last location, or the last basetstaion, and then use that particular basestation, or basestations in the area to send a paging request out. And hopefully your device responds. The network monitor has a few different screens with information. And one interesting one that is kinda related to your location are the neighbor basestations."}
{"prompt": "What is ARFCN and how is it used in GSM networks?", "completion": "The first one here is the current serving cell, the one you communicate with and the other two are neighbors. And they obviously use a different ARFCN number, because they need to communicate on a different frequency pair, otherwise the two basestations would get into the way. Makes sense, right? This is also super important to know for the phone, because imagine when you are in a call and walk. Or worse drive fast in a car. Your phone CONSTANTLY has to switch basestations, always trying to talk to the one, with the highest signal strength, which is usually the closest one."}
{"prompt": "What protocol is used to forward L2 messages via F-bus interface?", "completion": "Imagine in the middle of a call two basestations and your phone have to perform a crazy handover so you can keep talking. It\u2019s crazy. It amazes me that it all works so well. The network monitor is already pretty cool and we can learn quite some stuff about GSM with it. But it can actually do a bit more when hooked via the fbus to a computer. It's also possible to forward L2 messages via F-bus interface and then inspect them, for example, using Wireshark. The phone would forward both Uplink and Downlink packets,"}
{"prompt": "What methods are available for obtaining the firmware from a Ledger Nano S?", "completion": "Last time we have used JTAG and the st-utility to dump the firmware from the Ledger Nano S. In this video I want to setup the reversing environment and go over some basics. But before I want to go over a few general things. First... using JTAG is not the only way to get the firmware. I mentioned in a previous video that I had the Ledger chrome app open, and it was dumping all the APDU commands sent to the device in the developer console. And so there we observed the commands where the firmware update was sent to the device."}
{"prompt": "What is the APDU command used to select the memory address to write the updated firmware to?", "completion": "And you could just extract the firmware from these APUD commands. In fact that was how Thomas got the firmware originally, not through JTAG. And you can actually find these firmware update APDU commands hardcoded in the scala source code of that chrome app as well. Yes it\u2019s scala. And yes the APDU commands are hardcoded. So for example this is the APDU command to select the memory address where to write the updated to. 8003000 Maybe you even remember this address, because this is where the magic value f00dbabe is located."}
{"prompt": "What is the starting address for the bootloader code on the Ledger device?", "completion": "And looking at the next APDU message, which contains the first actual firmware data, you can see that it now writes f00dbabe there. So from these apdu commands here, you could extract the regular application firmware - the firmware part that would be loaded at 8003000. But the bootloader code starts at 8000000. And if I remember correctly, I think those APDU commands were streamed directly from a websocket connection down to the ledger, and were not included in the chrome app itself. So it is kinda insane to think that the ledger webserver can directly issue APDU commands to the ledger device using websockets, and the chrome app serves as a proxy."}
{"prompt": "What is the difference between malicious firmware updates using the \"f00dbabe\" technique and using JTAG?", "completion": "Anyway. Point is, there are other ways to grab the firmware, not only with jtag. One other thing I\u2019d like to emphasize, the fact that you can dump, debug and FLASH new firmware to the chip via JTAG. This maybe sounds bad, but can not be compared to the malicious update via the f00dbabe technique. The difference is that JTAG actually requires physical access, opening it up and hooking up cables. While a malicious firmware update, abusing the f00dbabe magic value, can be triggered from malware on your PC."}
{"prompt": "What type of processor is the Ledger's insecure processor?", "completion": "So the attacker does not have to have physical access to the device. It\u2019s a software issue, while open JTAG could be considered a hardware issue. However I personally don\u2019t really care about the accessible JTAG on the Ledger\u2019s insecure processor in terms of security. I\u2019m just happy that JTAG is enabled, because it really allows us to learn a LOT about embedded devices. Anyway\u2026 let\u2019s start reverse engineering. So a few years ago I actually bought an IDA license. I got a student license for it, not sure if you have ever seen that."}
{"prompt": "What version of IDA is used to analyze the ARM firmware?", "completion": "And it\u2019s not IDA Pro, it\u2019s IDA standard. Which means it doesn\u2019t come with decompilers AND doesn\u2019t even support x86 64bit. But it was only around 250$ at the time, and that was a christmas present for myself back then. The reason why I mention it is, because it does support ARM - so we can use it for this project. But of course it\u2019s now quite a few years old - version 6.6. So the UI and a few things will have changed. Anyway. Let\u2019s open up the dumped firmware file. Once we selected the architecture ARM for our firmware dump file, we get this form."}
{"prompt": "What is the size of the SRAM section on the chip?", "completion": "Here we have to enter some information about the chip memory layout. You have seen it already, we can find this in the chip\u2019s documentation. And for example the flash memory area where the code will be, starts at 0x8000000. And it\u2019s 0x8000, so 32kb large. Now IDA asks us if we also want to create a RAM section. And let\u2019s do that. SRAM starts at 0x20000000, and according to the chip information, it is 6kb big. So 0x1800. So we just told IDA at what addresses the chip has RAM and ROM. But now we also have to tell IDA where the input file, so the raw binary firmware dump,"}
{"prompt": "How does IDA determine the encoding mode for each instruction?", "completion": "should be located. For example if we had extracted one part of the firmware from the APDU commands at 8003000, then YES, ROM still would start here, but we would load the code we have starting at 3000. Makes sense right. But our firmware dump is the complete memory, so we just set that. Then let\u2019s continue. We get a first warning. This processor has two instruction encodings: ARM and THUMB. IDA allows to specify the encoding mode for every single instruction. For this, IDA uses a virtual register T. If its value is zero, then the ARM mode is used, otherwise the THUMB mode is used."}
{"prompt": "What command can be used to change the value of the register T in IDA?", "completion": "You can change the value of the register T using the 'change segment register value' command (or hotkey Alt-G) Let\u2019s remember that for a second. Because we get the next warning: You have just loaded a binary file. IDA can not identify the entry point automatically as there is no standard of binaries. Please move to what you think is an entry point and press 'C' (to mark it as code) to start the autoanalysis. So first of all ARM vs. Thumb. We talked about this last episode when we looked at this in GDB, and we know that we have THUMB instructions here."}
{"prompt": "What steps are necessary to change the T segment register to 1 in IDA?", "completion": "Which means we need to change that already. ALT+G, and then we set the T segment register to 1. Now this segment changes from 32bit code to 16bit code. The second warning was about not knowing where code is. An ELF binary for linux, or a PE binary for windows has a defined ENTRY POINT which IDA can use to start analysing code. But with a raw binary dump like this, IDA doesn\u2019t know where code and data is. So that\u2019s where we humans come in and we have to do it by hand. But we will deal with that in a moment."}
{"prompt": "What is the color representation of the memory map in the video?", "completion": "First something else. At the top you can see a color representation of the whole memory map. And so this chunk here is our ROM, so the code we loaded, and then we have this black divider, because here the SRAM starts, the RAM of the chip. We also can notice this grey area, which when we go there, shows, that IDA found there a raw ascii string. That might be a signature that is used for verification. At least that\u2019s my guess. Anyway. Looking back at the memory map of this chip, we can see that this chip has of course more than just ROM and RAM."}
{"prompt": "How is the Cortex-M0 internal peripherals mapped to the AHB2 BUS?", "completion": "For an embedded device that has stuff connected to pins, the peripherals are obviously important. So at these memory ranges, the external pins and other features like USB and SERIAL can be accessed. So starting from 0x40000000 we have a few different segments, and we also have the Cortex-M0 internal peripherals. There is actually a more detailed memory map, especially when it comes to the peripherals further down in the documentation. So what was listed as just AHB2 in the general memory map, is actually one internal BUS inside the chip and there are these peripherals mapped to it."}
{"prompt": "What is the STM32F0's GPIO and how can it be accessed?", "completion": "For example the GPIOs. General Purpose Input and Output. Basically your pins. Here is another good peripheral example in the APB bus. here we have access to the USB. I found this excellent blog article about \u201cUnderstanding the STM32F0's GPIO\u201d, which will help you understand how to read these tables and information, and how that translates to actually writing code and accessing these memory areas to interact with these external pins. I can really recommend it. So if you want to seriously prepare your IDA environment, you would want to properly create all these memory segments and name them accordingly."}
{"prompt": "What steps are needed to create segments in IDA?", "completion": "Now I\u2019m a bit lazy, and I also already kinda know where we are going, so I resort to create only a few important ones to me. To do that you can go to Edit -> Segments -> Create Segment. And then enter the name and memory ranges. I do that for all the segments I\u2019m currently interested in. And you can see how the overall memory view updates up here. Now we have the different memory segments registered with IDA. Next we need to figure out where does the code actually start? First let\u2019s try this dynamically, by using the st-util to establish the JTAG connection to the device, and then using the arm-gdb to connect to it using remote debugging."}
{"prompt": "What is the special magic value that is loaded into register R2 when the device resets?", "completion": "Then we can see that the device resets and pauses at 0x80000c0. Now we can go to that address in IDA and press C, or I actually press P, to mark this as a procedure. This triggers ida starting to analyse the code. And you can see on the left, that IDA found a lot of functions now. So this is where the code starts - let\u2019s call this reset. With [SPACE] we can enter the graph view and already observe something cool. Here you see it loads a special magic value into R2, and it says \u201cB0075ec7\u201d - bootsector."}
{"prompt": "What is the value that is loaded into R1 and compared with b00t5ec7?", "completion": "Then it moves an address into r3, and that address looks familiar, right? If you hover with the mouse over it, you can actually see that it references 0xf00dbabe. So once the address is in R3, it then loads the value f00dbabe into R1 and then compares b00t5ec7 with f00dbabe. Branch if not equal. So if the magic value loaded from here would have been b0075ec7, then we apparently don\u2019t have a normal firmware and we directly jump there. But in our case we have a regular firmware, with the f00dbabe magic value, so we move into this block instead."}
{"prompt": "How can we find the entry point for the normal firmware loaded after 0x8003000?", "completion": "But that still tells us that the entry point for the normal firmware loaded after 0x8003000 should be here. And that\u2019s why I rename this to firmware_main(). But like I said in our case we now move on to the block here blow. And here is a branch, so a jump, to\u2026 the ascii signature? This is a bit unfortunate here. Let\u2019s go to that signature and actually press U, to undefine this variable, so it\u2019s raw data again. You then actually see that the branch goes to this address 0x80004000. And IDA didn\u2019t recognize this as code, because previously it was right at the end of that string."}
{"prompt": "What is the command used to force code to be recognized in IDA?", "completion": "IDA thought it was the null-byte delimiter. But we know better now, and we can force here code by pressing P - and a lot more code is found and analyzed now. At the top you can now see a lot of blue stuff. So all of that is being recognized as code. The green/brown stuff is still undefined data. Anyway. I decide to call this function now bootloader_main. And if we go back, this is how reset looks now. Okay, so we figured out dynamically how to find the start of the code, but how could we do that just statically?"}
{"prompt": "What is the least-significant bit requirement for each vector in the ARM architecture's interrupt vector table?", "completion": "That is also super simple. By definition, the ARM architecture expects an interrupt vector table at the start of the memory. The vector table contains the reset value of the stack pointer, and the start addresses, also called exception vectors, for all exception handlers. Figure 2.2 shows the order of the exception vectors in the vector table. The least-significant bit of each vector must be 1, indicating that the exception handler is Thumb code. And as it looks like, at address 0x0 we have the start address of the stack."}
{"prompt": "What is the significance of the least-significant bit of each vector in THUMB code?", "completion": "And at address 0x4 we have the reset address. So when the device resets, code starts executing there. Further up we also have a few other interrupts defined. Interrupt 0, 1, 2 and so forth. But let\u2019s look at our firmware blob. By repeatedly pressing D, I\u2019m changing the data size of these data values. This allows me to define this data to be 32bit values. And theoretically the first two values should be now, the start address of the stack, and the address of reset. And from the documentation we know again that the least-significant bit of each vector must be 1, if you have THUMB code."}
{"prompt": "What is the meaning of the acronym \"SV\" as used in the context of ARM architecture?", "completion": "And that fits perfectly. 0x80000c0 was our start address. And it has the 1 bit set, because we have the 16bit THUMB instructions. By pressing O we can also tell IDA that this value here is in fact an offset, or address or pointer somewhere. So now it points to reset. And I call this RAM START. If you paid attention you might have also noticed this other value that looks like an address. 0x80000ED. Having a look at the definition table, we see that it maps to SVCall, PendSV and SysTick. SV stands for SuperVisor:"}
{"prompt": "What is the instruction used to generate a supervisor call on ARM cores?", "completion": "As with previous ARM cores there is an instruction, SVC (formerly SWI) that generates a supervisor call. Supervisor calls are normally used to request privileged operations or access to system resources from an operating system. So you can imagine this like a syscall on your PC. There you can, with a special instruction, trigger a syscall and enter privileged kernel code. And here you also can trigger privileged supervisor calls and then the CPU will start executing the SuperVisor handler defined here."}
{"prompt": "How can you configure IDA to set the processor specific analysis options for a Cortex-M0 processor?", "completion": "So we can follow this address, and of course because it\u2019s THUMB again we have to ignore the last bit, so the handler starts at E. THen we press P, and here is the SV_handler code now. And in the vector table we can press O again, to mark these as offsets. So this is how you could have found the start of the firmware statically with IDA. There is one last thing I want to do. In the Options, under General, I can set Processor Specific analysis options and I can edit the ARM architecture options. here I can then select the base architecture to ARMv6-M, because we have a Cortex-M0."}
{"prompt": "What is the name of the Javascript Framework discussed in this video?", "completion": "Welcome to this video walkthrough of a real life exploit. We will have a look at a Javascript Framework called AngularJS. You can use that to create fancy modern web apps. While the concept is pretty cool, the framework suffers from a design issue. Any exploit I will show in this video was not found by me. References and credits are in the description and displayed here. Big thanks to mario from cure53 and gareth heyes from PortSwigger web security blog - most of what I show is based on their research and work."}
{"prompt": "What type of tutorial should someone unfamiliar with AngularJS follow to gain a better understanding of the framework?", "completion": "In the first part I will give a very quick introduction to how to write apps with AngularJS. If you haven\u2019t used it before, take some time and follow a simple tutorial to understand it better. For example the official AngularJS getting started tutorial. And after we had a look at a simple angularjs example, I will explain my setup here how we can debug angularjs. So that in part two we can focus on stepping through the code of an old version of AngularJS, where we try to bypass the sandbox an learn about the Angular internals."}
{"prompt": "What does the AngularJS Testbed provide?", "completion": "In another video I will then show off some more advanced sandbox escapes for more recent versions. But let\u2019s start. I have written a very simple AngularJS Testbed. Meaning a place where you can easily play around with Angular. Let\u2019s start by looking at an angularjs example app. Look at this table. On the left you can see angular JS expressions in double curly braces, basically how you would write them into your html. And on the right you can see the result after AngularJS evaluated those expressions."}
{"prompt": "What version of AngularJS is used in the example?", "completion": "And I have made here several examples with a variable username, and some functions\u2026 Also note that the alert function did not trigger a popup! The result is empty. But where do those values, variables and functions come from? Let\u2019s have a look at the HTML sourcecode. Just to make it clear again, AngularjS is a pure Javascript framework. So here is no server part. All those expressions are evaluated on the client side in the browser after the html page got downloaded. Here you can see now that we use angularJS version 1.5.7."}
{"prompt": "What is the scope in AngularJS and what role does it play?", "completion": "And then we create a new angular application with the name \u201cscopeExample\u201d. And then attach a controller to it with the name \u201cMyController\u201d. We can pass different variables to the controller, but most important to us is the scope. The scope is just an Object from AngularJS which is available inside the app. And you can see in the code we write, that all variables and functions we define are attached to that scope. They are a property of that scope object. And when we look again at our table where we used the double curly braces to get the username, angularjs will basically evaluate the expression, and check if the identifier username exists in the current scope..."}
{"prompt": "What is the ng-non-bindable attribute used for?", "completion": "And in this case there is a username in the scope and it contains the string \u201cWorld\u201d. Thus the result is \u201cWorld\u201d. Similar with the function sayHello. The scope has this function attached and thus we can call that function within the expression. But alert, is not in the scope. We didn\u2019t define that. So this function doesn\u2019t exist and thus has an empty result. Two more things I want to point out. The first coloumn has also curley braces but they are not evaluated, because they have the ng-non-bindable attribute set."}
{"prompt": "What is the difference between the JavaScript eval() function and the AngularJS $eval() function?", "completion": "That deactivates angularjs for that element. The other thing is the $eval. This is not the normal javascript eval function it\u2019s dollar eval. Again, this is evaluated against the scope. We didn\u2019t define the function $eval ourselves, but angularjs has that already attached to the scope object. And that dollar eval is similar to regular javascript eval. But it doesn\u2019t evaluate arbitrary javascript, it evaluates angularjs expression. Thus $eval sayHello is equivalent to double braces sayHello. Double braces also evaluate angularjs expressions."}
{"prompt": "How can an attacker exploit AngularJS expressions in version 1.0.8 to gain XSS?", "completion": "Ok no let\u2019s dive in. Let\u2019s open the testbed for angularjs version 1.0.8. Which is very old. But we need that to understand later exploits. So this is a very simple .php app. If you look at the sourcecode you see a form where you can enter a text. And then whatever is in the GET variable q will be html escaped and safely echoed into the page. You can see that when you try to inject a script tag to pop alert. It doesn\u2019t work. It\u2019s properly escaped. So are we safe from XSS? NO! We are not. AngularJS destroys everything that we have tought web-developers."}
{"prompt": "How can mixing PHP with AngularJS be considered a bad practice?", "completion": "Escaping your string is not enough in this case. The crucial detail here is that our input is reflected into an html element that has angularJS enabled. Two things to mention here, first of all, this is not how angularjs apps are supposed to be written. AngularJS apps should not be mixed with server side templating. Meaning that the intended way for angularjs apps to get data is via API calls after the site is loaded. So mixing here php with angularjs is bad practice. Does that mean that this example is irrelevant?"}
{"prompt": "What is a simple test to identify if an application is vulnerable to AngularJS expression injection?", "completion": "No! In reallife this happens all the time. Some older php app gets extended with some fancy angularJS and boom. You have a just genetically engineered a monster. You can test for angularjs expression injection by using something simple like 1+1. If the result shows 2, instead of the curly braces, then you likely have a angular js (or a similar frmework) injection. Ok so let\u2019s start. Let\u2019s first explore why alert doesn\u2019t work, by looking at angularjs internals. Open the developer console and then go to the sources tab."}
{"prompt": "What is the console at the bottom of the screen used for?", "completion": "On the left you can see available javascript source files. In the center you see the javascript code.To the right you can find stuff like the call stack, the variable scope, breakpoints etc. Which is important when you debug javascript code and step through it. We will make use of that shortly. And at the bottom (maybe you have to hit escape first to open it) you have a console where you can type in javascript code. If you pause at a breakpoint, you have access in that console to all the variables at this point in execution."}
{"prompt": "What is the purpose of the keyword \u201cdebugger;\u201d that has been added to the angularjs code?", "completion": "Before we execute it, let\u2019s quickly take a look at the angularjs code. This is a not minified version, meaning everything is nicely commented and indented. I have also modified the code by adding the keyword \u201cdebugger;\u201d in different places. Those are like breakpoints. When javascript executes that statement, it will stop execution right there and we can look at the state of the variables etc. Ok now let\u2019s execute the expression by submitting this form. The site loads, executes angularjs, the expression gets evaluated and we hit our first breakpoint."}
{"prompt": "What port does the service running on exploit-exercises protostar final0 use?", "completion": "Let\u2019s head into the final levels of exploit-exercises protostar. These levels are a little bit more developed and are on the level of very easy pwnable CTF challenges. Let\u2019s have a look at final level 0. The network setup is basically the same like from the previous challenges, so if you are not familiar with these custom functions you should watch the previous videos where we figure out what they do. So, when a client connects to this service running on port 2995, it will call this function get_username."}
{"prompt": "What function is used to read data from the user into the buffer?", "completion": "This function has a local 512 byte big buffer which is overwritten with 0. Then gets is used to read data from the user into the buffer. And as we have learned many episodes ago, gets is a dangerous function. So this is obviously our buffer overflow. Then it checks if there is a newline or carriage return and if so, would overwrite it with a 0. After that is a loop, which will go over the buffer and call toupper on every character. Then the function returns. This means we should be able to overwrite the return pointer of this function and redirect code execution."}
{"prompt": "What condition must be true in order that toupper is not used on our input?", "completion": "We only have one issue, and that is that the data we would use to overflow would be transformed to uppercase. This means our shellcode, as well as the address we use to overwrite the instruction pointer on the stack have to not change when toupper is used. Meaning, you cannot use lower-case ascii characters. Or is there maybe a trick how we can get around this restriction? Let\u2019s think about this and work our way backwards. So what condition has to be true in order that toupper is not used on our input."}
{"prompt": "How can we use null bytes to exploit the for loop in the protostar final0 level?", "completion": "Well the for loop uses strlen to determine on how many bytes it will do this. And strlen counts all bytes until in finds a null byte. So if we manage to somehow get a null byte before our actual overflow and shellcode, we would be fine. Ok, how could we get a null byte in there. If you check the man page of gets you will see, that gets reads everything until it a newline or EOF. This means gets will have no issue of reading a null-byte. Easy. So we can completly ignore the to uppercase stuff. And just for creativity reasons, you could also abuse the null-byte replacement of the carriage return."}
{"prompt": "How many bytes is the buffer in this exploit exercise?", "completion": "Let\u2019s say the input would use strcpy, thus also stopping at a null byte, you could use a carriage return instead, which will then afterwards get replaced by a null byte. So that would also work. The buffer is 512 bytes big, so let\u2019s use that knwoledge to create a simple proof of concept buffer overflow. We can use python with -c, to directly write a short script in the argument. So we could print like 510 lowercase a, and then we can later see that these were modified to be uppercase. Then we append a nullbyte and continue with a typical alphabet so we can recognize how to overflow the instruction pointer."}
{"prompt": "How can we check if our buffer overflow was successful in the exploit-exercises protostar final0 level?", "completion": "We can also make the alphabet lowercase, to proof that it will not be transformed to uppercase after the nullbyte. Like with the previous networking challenges we can connect to the service on port 2995 with netcat. So we can simply pipe the output of our python one-liner to netcat as well. We don\u2019t see the output \u201cNo such user\u2026 \u201c like before. And the code shows us that it would be printed after the return in main, thus we can assume we successfully overwrote the instruction pointer and crashed the program."}
{"prompt": "What is the default action of certain signals in Linux?", "completion": "But how do we debug this now? If you have a look at the description of the protostar VM, you will see here a headline called core files. It says that the filename pattern is set to /tmp/ something. This means that core dumps are stored in tmp. And when we have a look at the content of /tmp/ we will see a core file we just produced. They belong to root, so let\u2019s switch to root so we can work with them. But what are core files? Let\u2019s ask the linux manual with `man core`. The default action of certain signals is to cause a process to terminate and produce a core dump file, a disk file containing an image of the process's memory at the time of termination."}
{"prompt": "How can the state of a program be inspected when it terminates due to a signal?", "completion": "This sounds good, if we get the state of the memory when it crashed, we should be able to get a lot of information about our buffer overflow. This image can be used in a debugger (e.g., gdb(1)) to inspect the state of the program at the time that it terminated. Oh wow, we can use gdb to look at these and we area already very familiar with how to use gdb. A list of the signals which cause a process to dump core can be found in signal(7). Ok, interesting. Apparently the process received a signal because it did produce a core file, right?"}
{"prompt": "What signal numbers are architecture-dependent?", "completion": "So to understand this properly, let\u2019s also try to understand what signals are. Notice the 7 in brackets after signal, this is important to reference the correct page about signal in the manual. so `man 7 signal`. Let\u2019s have a look at the standard signals further down. Linux supports the standard signals listed below. Several signal numbers are architecture-dependent, as indicated in the \"Value\" column. Mhh, so signals can be different on different architectures. So if it is an intel, arm or sparc processor this might make a difference, bug generally this tells us, that signals could have something to do with very low-level CPU and hardware features."}
{"prompt": "What signal is triggered when you press Control+C?", "completion": "Let\u2019s have a look at the list of signals. For example SIGINT is a signal you have used many many times, it\u2019s an interrupt from the keyboard, this happens when you press control+C. Or remember how you sometimes can get illegal instruction when you jump into invalid code, a SIGILL, that\u2019s also a signal. Which obviously must have been triggered from the CPU which couldn\u2019t make sense of an instruction. Or our favorite syscall, SIGSEGV, a segfault. Trigegred from an illigel memory reference, for example when you jump to non-existing memory."}
{"prompt": "What signal is sent to a process when the user presses CTRL+C in gdb?", "completion": "Or try to write to non existing memory. Which obviously is also triggered by low level hardware when you try to execute bad stuff. This line here is also interesting: The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored. This means most of these signals can be caught by the process. You have actually experience this before too, when you run a process in gdb, and you forgot to set a breakpoint and the process is just running, you can use CTRL+C to break back into gdb. You sent a SIGINT to the process which instead of quitting, had a signal handler set up to catch it and perform a different action."}
{"prompt": "What causes the kernel to send a signal to a process?", "completion": "So signals are kind of like interrupts for processes by the kernel. Certain events like memory access fails, pressing CTRL+C or also killing a process causeses the kernel to send a signal to a process. Unhandled signals usually cause the process to die, but a process can also set up signal handlers to perform certain actions when it receives these signals. So. In our case, when we overflow EIP on the stack, and the function returns a segmentation fault is raised and a signal is triggered. The process doesn\u2019t handle it and is killed by the kernel."}
{"prompt": "What signal caused the process to terminate?", "completion": "At the same time a core dump file is created to save the state of the process that caused this signal. So now let\u2019s use gdb to see what happened. Like before you simply specify the binary as a first argument but then you add the core file as a second argument. And you see immediately when gdb opens, the message that the process terminated due to signal 11, a segmentation fault. We can also look at the registers and see the value of eip. And those are definitely our characters we have entered. We can also explore the stack with examining the stack pointer."}
{"prompt": "How can we use gdb to attach to a process that is already running?", "completion": "You can see that having these core files is extremely useful. Now we know which characters caused an overflow and we can now calculate the offset to the instruction pointer on the stack. Another way to debug this further is to use gdb to attach to the already running process. Make sure you are root. Simply find the process id and call gdb with -p and the pid. As you can see the process is currently in accept waiting for a client to connect. But when we send our PoC overflow, we don\u2019t see a segfault."}
{"prompt": "What is the genre of the game discussed in the video?", "completion": "Welcome to Pony island this is going to be another let's play series on the life overflow gaming channel We are going to play an MMO together this game was released in 2015 and now I finally get to play it Pony Adventure 3 Pony Island is a limited release first-person true open-world MMORPG set on a beautiful island where anything could happen that's because this game is Intentionally vulnerable to all kinds of silly hacks flying Endless cash and more are all one client change or network proxy away. Are you ready for the mayhem?"}
{"prompt": "What version of the secure filesystem is being discussed in the video?", "completion": "The first challenge I did from this competition was the secure filesystem, which we exploited with a hash length extension attack. And then we also solved this other crypto challenge \u201ckey server\u201d, which was about breaking RSA signatures. So let\u2019s continue the path and do the last crypto challenge, I wonder what we will have to break this time. Crypto 150 points. Secure Filesystem v1.92r1. That version number is already suspicious. But let\u2019s read the description first. After the horrible debacle of the first file system, we got together again, invited our friend Mr. Wodka and waterproofed the secure file system. You can test it again, but this time it uses unbreakable encryption."}
{"prompt": "What is the correct format for requesting the contents of a file in the rhme2 Secure Filesystem challenge?", "completion": "The filesystem allows you to request the contents of one or more available files by using the following format: Which is basically the same like in the previous filesystem challenge. Token, then a hash symbol, followed by one or multiple filenames. And we get a list of example tokens and filenames. Here is how it looks when you run the challenge. You get the list of files, and if you supply the correct token and filename, you get the content back. And somehow we want to read passwd. Before I tell you the solution, let me explain my thought process here. Because I went into a completely wrong direction at first and somebody on IRC had to nudged me into the correct direction. I completely failed this challenge."}
{"prompt": "What bit length option did the video presenter initially assume the encryption used?", "completion": "So first I had a look at the version number. That seemed too specific to not be a hint. And it could have lead me to the correct solution, but I got distracted by the list of examples. Because there we can immediately notice, that the first part of it is always the same, which I interpreted to be some kind of block cipher. And I thought the first block always encrypted the same secret key or something - similarly how the bad hash implementation prepended a secret key in the first level. And the version number for me became the bit length of the cipher. The text said it\u2019s strong encryption, so I went to look for ciphers with 192 bit options. I mostly looked into AES."}
{"prompt": "What encryption algorithm was used in the Playstation 3 secure filesystem?", "completion": "But all attempts of manipulating blocks, for example for padding oracle didn\u2019t work. Another lead I had was the waterproof filesystem. I figured maybe it is some kind of whirlpool hash? But that also didn\u2019t make much sense. Then maybe it had to do with the vodka? Maybe there is a russian cryptographer named gorbatschow with some weird obscure encryption. But everything I tried just didn\u2019t seem to be the right path. I kept running in circles and really wanted to give up. Then I got a slight hint to focus more on the version number again."}
{"prompt": "What is ECDSA?", "completion": "And while I did find hints to elliptic curve cryptography when googling for the version number before, I ignored them. That was a mistake. It turns out, 192r1 is a curve parameter for ECDSA. Elliptic Curve Digital Signature Algorithm. Ok. So I know this elliptic curve stuff exists, but I never really looked into it as much as I should have. While RSA seems pretty straight forward, this stuff always seemed a lot more difficult to understand. So I started to read wikipedia. And there is even a section called \u201csecurity\u201d,"}
{"prompt": "What is the purpose of the random k variable in ECDSA?", "completion": "where they say that Sony did not properly implement the algorithm on the PlayStation 3, because one of the variables k was static instead of random. And apparently it means you can then break the signature. So let\u2019s have a quick look at the algorithm and math itself. So the provate key is an integer randomly selected and the public key is the result of some fancy ellyptic curve multiplication. You hash the message you want to sign, like with RSA. And then you have to select a random k. And it must be securely random."}
{"prompt": "What is the value of r in the ECDSA signature?", "completion": "Then you calculate a point on the curve based on that number. Then you do some more calculations, r and s. And the signature is the pair of r and s. So when we look at our example tokens, we can assume, that those are the two different values. R and s. And r is always the same, which is suspicious. If you look what r is, then r is basically x. And x is the x-coordinate of the point on the curve after the ellyptic curve multiplication with the secure random k. This means for every signature, the multiplication had the same result, which means, k was probably always the same."}
{"prompt": "What is the equation that can be solved for the private key d given two signatures rs and rs-prime, employing the same unknown k?", "completion": "BOOM! That\u2019s it. As the standard notes, it is crucial to select different k for different signatures, otherwise the equation in step 6 can be solved for the private key d. Given two signatures rs and rs-prime, employing the same unknown k, for different known messages, an attacker can calculate some fancy stuff and recover k. And then you can solve this equation for the private key d. Done. I\u2019m not very good in math, but I knew that this is such a basic security issue, that I\u2019m sure this came up in some other CTF competitions before. And surely somebody implemented this calculation in python already."}
{"prompt": "What module do we need to install to create a proper signature for the filename we want?", "completion": "That is generally a good hint for CTFs. So I googled specifically for CTF challenges with ECDSA, and sure enough, I find some example code. I can just copy that code, but I also wanted to understand what it does. So let\u2019s do it step by step. Let\u2019s start by getting the ecdsa python module, because we might reuse some functions and in the end use it to create a proper signature for the filename we want. Let\u2019s copy two of the example tokens and messages and extract the values. So we got r and s from the first message."}
{"prompt": "How do we recover the k value in order to recover the ECDSA private key?", "completion": "And r and s from the second message. Then I try to follow the wikipedia article. So first we check the two rs, if those two signatures are vulnerable. Then I wanna prepare most of the values as I need them. First I hash the message we want to sign and convert it to a number, so we can do calculations with it. Which is z1 and z2. Then we need n. N is the order of the curve, so we can get that value from the module. To find that I just look around in the source code of the ecdsa module. Next we gonna recover k like it says here on wikipedia."}
{"prompt": "What is the formula for recovering the private key dA?", "completion": "The first part is simply z1 minus z2, so this is basically just the hash of message1 minus message2, divided by the substraction of the signature. And because you all got some basic math education, you know that instead of division, you can also multiply the inverse. Like 6 divided by 3, is the same as 6 times \u2153. So we just multiply the inverse of s1 minus s2. And we can reuse the inverse modulo function from the ecdsa module. Everything happens here always modulo the n. Ok, now we got the k. So next we recover the private key dA. Which is super simple. It\u2019s just a signature times k minus the hash, divided by r."}
{"prompt": "What is the length of the video hint for the challenge?", "completion": "can you start sure [Music] so today was the first day of the ctf in the morning john and i arrived there fairly early to play one of the challenges that challenge was special because everything got a time slot one single time slot for that day and so we had to come in early before we did that challenge uh we got a hint and a video so do you think you should watch the video first or the picture uh let's go to the video first it's six minutes oh my gosh it's just this for six minutes there's no context the stakes are really high for the ctf what do you think how expensive were the stock footage yeah [Music]"}
{"prompt": "What type of controller does Google Stadia use?", "completion": "okay dang g'day youtube uh so it's been a while since my last video my favorite youtuber apologize for that um we'll be back to a regular upload schedule real soon um but uh i'm gadget overflow i'm bogan uh and today we've got a pretty fantastic unboxing video for you today we have this which was sent to us by google and i'm not too sure what it is but let's you know she looks pretty big let's open it up and take a look oh sweet so let's get this out of the way that's just [\u00a0__\u00a0] now we don't want that what we have here is like this is a controller from that new stadia thing that google's coming to do so what the hell let's find out who that is and who's knocking on me lab door oh no who is it [Music]"}
{"prompt": "What misspelling of the company Asus was included on the delivery label of the box?", "completion": "it's the sign oh my gosh oh what the hell laura okay then thanks mate thanks for that weirdo all right then so we got this new box here uh who cares about this stadium [\u00a0__\u00a0] now right so this this is mysterious and this is interesting so let's find out what's in this box um so the thing is with this one it came from some mob called asus and like you know that the motherboard manufacturer and they do all that kind of stuff but like on the delivery thing they misspelled their own name it was like asis that's really funny because like how do you misspell your own name it's like me misspelling bo it's b o [Music]"}
{"prompt": "What challenges are offered in the exploit-exercises/protostar Linux image?", "completion": "exploit-exercises/protostar offers a linux image with several challenges to learn binary exploitation. But a lot has changed over the years and if you compile these challenges yourself on a modern system it\u2019s not as easy anymore. I already showed you that in the previous videos about the stack challenge. I had to make a 3 part video series to explain how we can still do it. And that also only on 32bit. So if you are just starting out, make sure that you use the Linux image that you can download here and don\u2019t compile it yourself. Otherwise all the tutorials about it won\u2019t work. And now for this video, let\u2019s continue with some other challenge. We compile them on a current Ubuntu version, without any compile flags and see what we get."}
{"prompt": "How can the attacker pass an argument in the format0 challenge?", "completion": "Obviously the rules of the game, that is hacking, are, that maybe there are techniques I just don\u2019t know about. I don\u2019t really know the edge cases in exploitation, I mostly know the general techniques and I think I have some reasonable amount of creativity. But I don\u2019t know everything. So it\u2019s likely that there are people out there that could exploit it. In that case, I\u2019d love to see a PoC for that. That being said, let\u2019s continue with format0. So what is this challenge about? The attacker can pass in an argument, that argument is then being passed as the string variable to the format parameter of sprintf. So we can inject stuff like %d or %s."}
{"prompt": "How can an attacker exploit the buffer overflow in format0?", "completion": "It\u2019s also vulnerable to a buffer overflow, because sprintf, does not print to the console, to stdout, like regular printf, but prints, or stores the formatted string, in buffer. And the buffer is only 64 bytes long. Now when you attack this on the VM that you can download here that has these challenges precompiled, the target variable would be placed after the buffer so that you can overflow the buffer, and write into target. And then you have target modified and when you make it so that it\u2019s overflown with 0xdeadbeef you pass this check."}
{"prompt": "How can we abuse format string modifiers to win the format0 challenge?", "completion": "So enter 64characters, and 0xdeadbeef and you won. But the challenge here also said, try it with less than 10 bytes. And you would do that by abusing format string modifiers that would stretch the formatted output to for example 64 characters, and then you can simply enter 0xdeadbeef afterwards. So for example %64d would output a number with a up to 64 character padding. And so 64 characters plus 0xdeadbeef are written into buffer and you win. Well is that still possible? First we have to install gcc and gdb on this fresh maschine and I\u2019m also going ahead to install peda, a gdb extension that makes things look nicer."}
{"prompt": "What is the issue with overflowing the stack in format0?", "completion": "So let\u2019s start with the simple buffer overflow example. But first let\u2019s set a breakpoint in vuln() before we compare deadbeef. Then let\u2019s start the binary and pass in an input that is much larger than 64bytes. Okay. So we hit the breakpoint and it compares eax with 0xdeadbeef. But eax is 0. How can that be? Didn\u2019t we overflow the stack? Well, we certainly did, the issue is that the target variable doesn\u2019t come after the buffer. It is before, so we can write as much data as we want, we won\u2019t overwrite target."}
{"prompt": "What is the %n modifier used for in format string exploits?", "completion": "You can also see this here. Eax is loaded from base pointer - 0x54, while the address for the string is loaded from basepointer - 0x50, so it\u2019s located after target. Well does this mean it\u2019s not exploitable? mmhh... So if you are familiar with format string exploits, you also know that you can write data with it, by abusing the %n modifier which writes the amount of already printed characters to an address on the stack. And we can overflow the stack, so we could place an address there and then carefully construct the number of characters printed before, such that it writes 0xdeadbeef to an address. And so we could write to target, and win that way, right?"}
{"prompt": "What is the range of addresses found in the stack address of the target variable?", "completion": "But ASLR is our problem. Let me add a printf to the code to print the address of target. ampercant target returns the reference of a variable, so that\u2019s the address. And when we compile it and run it in a nice while true loop, you see how crazy the address of target changes. Target is a local variable so it\u2019s located on the stack. So this is also a stack address. But how much does it change? It always starts with 0x7ff and ends in a C. And this one nibble here only appears to be C,D,E or F. That\u2019s a huge number. It\u2019s over 1 billion. but maybe in this case actually doable. Just takes some time. Maybe a day or so. I just like to refer to the previous three part video where we bruteforced a 3 byte stack cookie,"}
{"prompt": "How many bytes of randomness does the 32-bit version of format0 have?", "completion": "that was roughly 16 million possible options. And so here, 260 million, is in reach, I would say. At least for a very small binary like this. The execution speed is quite fast. Let\u2019s see how it looks like on 32bit. We have to install the gcc multilib to do that. And then we can compile it with -m32. When we execute it a few times, you can see that it obviously has less randomness than on 64bit. It\u2019s only two full bytes and then again a nibble. That\u2019s about 1 million attempts to hit it. So definitely even more in reach."}
{"prompt": "What is the main requirement of a classic format string exploit to write with %n?", "completion": "But of course it\u2019s only feasible if you can do millions of attempts reasonably fast, for example locally. If this were an application that takes longer to start or a remote service, then that would probably mean you couldn\u2019t really do it. How to create a format string exploit and how that exactly works with %n you can watch in multiple other videos that I have done. But there is one additional trick that comes to mind we could look out for. So to write with %n we expect the target address to be on the stack. In a classic format string exploit you would use your input that is maybe also placed on the stack and reference itself."}
{"prompt": "How can an attacker bypass ASLR when exploiting a format string vulnerability?", "completion": "But nobody says it has to be an address you place there, the stack is full of values, maybe you get lucky. If we look on the stack when we are at the 0xdeadbeef compare in the execution flow, you can see a lot of stack addresses. And so these would always be valid stack addresses even with ASLR. Now if one of those would magically point to target, then we could just reuse it. We could just reference that address. But if we check the address we know of target, we can see that it doesn\u2019t show up. Oh well."}
{"prompt": "What formatting function can be used for overflowing into stack addresses?", "completion": "But you see how creative you can get with exploitation. We could have been lucky. But let\u2019s actually continue that train of thought. Ok we don\u2019t have the whole target address on the stack, but we do have a lot of other stack addresses. And we have an overflow, so we can overflow into the addresses. And just overwrite some low bytes and keep the whole front. Let\u2019s add another printf to print the target value. And print the resulting formatted buffer. And let\u2019s play with that. Here you can see the sprintf formatted result."}
{"prompt": "What is the offset used to print the hex value of the user input?", "completion": "Let try to find AAAABBBB on the stack by consuming values from the stack with someformat modifiers. I wanna find the offset where on the stack this value is placed, and we can explore that with %lx and the dollar notation.So at stack offset 1 it\u2019s not, at offset 2 it\u2019s not at offset 3 it\u2019s not. And so forth. But here at offset 9 we now printed the hex value of our input. Now let\u2019s look at the stack layout for a nice stack address we could partially overwrite. Ok so down here is one, let\u2019s see what offset that has. Let\u2019s keep going."}
{"prompt": "What value can be used to overwrite the address printed by 19 lx?", "completion": "There it is, at offset 19. Which also means from the start at offset 9 to offset 19 we have 10 groups of 8 bytes, so 80 bytes to fill and reach this value. We can achieve that with a format string that pads a number to 80 bytes, and then some input to proof that we overflow. And when we now execute it, we see that the end of our address that got printed by our 19 lx, got overwritten with As. If you paid attention you saw that target is always at an offset with a c, so we can choose some input that ends\u2019 with a C as well to overwrite it. For example L, that is 0x4c."}
{"prompt": "How does the format string vulnerability work to overwrite a target address?", "completion": "Let\u2019s execute that now, and you can compare what address we got now through the overwrite with L, and what target really was. You see that often it\u2019s not the same, but eventually, it will match. And so if we replace the %lx to print a 8 byte hex value to %n, then we will WRITE to that address. So now we are writing the amount of printed characters, 81, because 80 + the single L to this address. And maybe at some point we hit target. Let\u2019s keep trying. BOOM! There we hit target, we wrote 0x51 to it, which is 81 in decimal. And that works fairly reliably, we can try those few attempts by hand."}
{"prompt": "How can an exploit be developed for a Format String vulnerability with ASLR enabled?", "completion": "And I think that\u2019s awesome, unfortunately it\u2019s not quite the solution, because target has to be 0xdeadbeef. And that\u2019s 3 billion in decimal. So with this technique we would have to first print 3 billion characters before we can do %n, and that\u2019s not possible. Anyway I think you can see how much exploitation can become a puzzle that you slowly try to piece together. In the end I didn\u2019t manage to solve it but exploring this was really fun. I really wonder if somebody is able to make a semi reliable exploit for this."}
{"prompt": "How can a player win the Overachiever challenge in Pwn Adventure 3 if they are playing alone?", "completion": "Oh my gosh, I can\u2019t really believe it. We have only one challenge left, in Pwn Adventure 3\u2026 Overachiever. Which means we have to get all the Achievements available in the game, but throughout the episodes we got most of them. Only First Blood and Killing Spree is missing. Both are related to PVP. In the first episode, the casual let\u2019s play we already discovered a key that enables PvP. Oh, enabling PvP in... okay so if you press V you start PVP But how can we win this, if I\u2019m playing alone? Well\u2026 we do the easiest hack of all."}
{"prompt": "How is it possible to acquire the Flag of the Overachiever in Pwn Adventure 3?", "completion": "We make a second account. There is \u201casd\u201d, and we enable PvP and then just kill him. Shoot\u2026 and fail\u2026 eh\u2026 gread hitboxes. Ehm\u2026 there we go. First Blood. Now we just have to repeat that 9 more times. We can do it with a few different weapons and magic spells that we have acquired throughout the game. Ahh\u2026 the memories\u2026 Last one\u2026 Boom. Killing Spree. Acquired Flag of the Overachiever. Unable to get flag contents? You do not own this flag? Try again later? WHAT THE HECK? That is what you see when you tried to cheat yourself a flag item on the client, but the server hasn\u2019t given you the actual flag."}
{"prompt": "What achievement did the player unlock to get the key to the last flag?", "completion": "What did we do? Did the admins of the game detect that we were abusing a second account? Just kidding. I don\u2019t know why this happened. So I reconnect. LiveOverflow, 7 Flags. AWESOME! So that looks good. Let\u2019s drop into the game, inventory. Flag of the Overachiever. Amazing. There is the key. \u201cAchievement Unlocked, Red Ring of Death\u201d. An XBox reference. What a journey, I really enjoyed this series, but it was also a ton of work. I\u2019m so happy that I completed it. I hope you enjoyed it too\u2026 One last, very important thing."}
{"prompt": "What techniques can be used to bypass LD_PRELOAD on Windows?", "completion": "There is an amazing credits outro song for Pwn Adventure 3, by Fuzyll, Azsyka, Don\u2019t Panic and Lightning. It\u2019s a parody on the Portals 2 credit song and the lyrics are just great. Please lean back and enjoy: So awesome. My favorite line was: \u201cTomcr00se just solved it all. And now leads the scoreboard. It\u2019s such a shame the same will never happen to you\u201d. What a sick burn. outch! But\u2026 this is not quite the end of our journey. There are a few things I\u2019d like to play around with, because things like LD_PRELOAD do not exist on Windows and I really want to checkout how it could be done there."}
{"prompt": "What is the relationship between the hacker and developer communities with regards to the log4 vulnerability?", "completion": "In the last video we built a good foundation\u00a0 to better understand the log4 vulnerability. We briefly introduced some features of\u00a0 the logging framework. We talked about the disclosure timeline, and learned\u00a0 that there are two parts to this issue. We have log4j lookups as one part. And the\u00a0 second part is how JNDI ldap connections to a malicious server can lead to arbitrary\u00a0 code execution. Then we ended the video with a discussion on the relationship between\u00a0 the hacker and the developer community."}
{"prompt": "What steps are required to open the intelliJ project shared on GitHub?", "completion": "Now in this video I want to start going a\u00a0 bit deeper and explore different layers.  I promised you we go deeper. So get ready\u00a0 to look into how log4j works internally. Chapter 1: log4j lookups in depth On github I shared an intelliJ project. It\u2019s really nothing special.It\u2019s literally just a\u00a0 logger.info call. But I have no clue about Java, it took me way too much time to learn\u00a0 how to use maven with dependencies. So here it is. And I\u2019m proud of it! So you could also open the project in IntelliJ and follow along. To do that go to\u00a0 the maven tab and hit install. After that,"}
{"prompt": "What is the layout pattern used by Log4j when logging messages to standard output?", "completion": "you can set a breakpoint at the logger.info\u00a0 call, hit the debug button and get started. Also by the way, we are using the log4j\u00a0 config I showed you in the last video. The config simply logs messages to standard\u00a0 output and this is our layout pattern. Thread name. The log message. And newline at the end. Anyway. If you now single step INTO the loger.info function, intellij will use their\u00a0 decompiler to show you the logger source code. But because it\u2019s an open source library, you can\u00a0 actually hit this button to download the sources and it will look much nicer. And now you can\u00a0 use step into, or step over to debug the code."}
{"prompt": "What is the name of the function called by Loger.info to log the message string?", "completion": "Here in the debug window you can also see the\u00a0 local variables which we will use to figure out whats going on. And of course, here is the log\u00a0 message string we passed in. So let\u2019s see what happens. Loger.info first calls logIfEnabled.\u00a0 Single step forward. If is enabled, then we call logMessage. We don\u2019t have to step into the\u00a0 isEnabled call, so we can step over it. And then step into the logMessage call. Next we call\u00a0 logMessageSafely, which is a pretty funny name. Also our string message is\u00a0 passed into this messageFactory,"}
{"prompt": "What is the purpose of the \"tryLogMessage\" function in Log4j?", "completion": "to wrap this string in a ReusableSimpleMessage\u00a0 object. Hach java. You gotta love it. Now we also learn why the function is called\u00a0 logMessageSafely, because everything is here wrapped in a try block. And it\u2019s tracking\u00a0 recursion. Because if you pass in an object to log, eventually the logger will have to convert\u00a0 that object to a string, by calling toString(). And if that toString() method calls the logger\u00a0 again, with itself, I don\u2019t know why, you would get an infinite recursion. And so here it keeps\u00a0 track of the recursion depth. If you single step on a line with multiple function calls, intellij\u00a0 also offers you to select which function you want to step into. So lets head into tryLogMessage.\u00a0 Here we call log. And finally a bit more code."}
{"prompt": "What is the process for creating a log event object from a ReusableSimpleMessage?", "completion": "We get a ReliabilityStrategy from the config.\u00a0 No clue. Whatever. We call log on it as well. But then we get the activeLogger config. And\u00a0 that\u2019s basically our xml config file. Here the config is a XMLConfiguration. And the appender we\u00a0 have configured was console. And the log layout can be seen here as well. So this is where the\u00a0 logger config comes into play. And with this logger config we are now going to log our message, In there we now create an event from our logger message. So our ReusableSimpleMessage\u00a0 is now turned into a full blown log event object. And then we log the event."}
{"prompt": "What is the purpose of the LiteralPattern in the Log4j logger layout?", "completion": "I fast forward now a bit. We just keep following down deeper into the logger,\u00a0 and eventually we want to encode the log message and turn the event into an actual\u00a0 string that we can write to the console. And this is where it gets more\u00a0 interesting. We have here an array of formatters that is looped over and\u00a0 the formatted data is written into this buffer. Quick reminder, here is the logger layout we have\u00a0 configured and now compare this to the formatters. First we have a LiteralPattern.\u00a0 Which is just a literal open bracket."}
{"prompt": "What is the name of the function in Log4j used to parse lookup strings?", "completion": "Then we have have %t, which stands for the thread name. So we have here a threadname pattern.\u00a0 Followed by a closing bracket and a space. And then we have a messagepatternconverter. And this is the one we are actually interested in. As you can see, log4j has turned the layout\u00a0 string into an array of format instructions. So lets head into the messagepatternconverter\u00a0 and see what happens to our actual log message. in this message formatter, further\u00a0 down we actually have an if case, if the optional config to disable these\u00a0 lookups is set. In our case that is not set,"}
{"prompt": "What for loop is used to loop over each character of the log message?", "completion": "so the negation is true and we go into the for\u00a0 loop, looping over EACH CHARACTER of the message. TODO: can we optimize it. YES what the f\u2019. This\u00a0 library is really a bit the bloated java meme. Well as you can see it\u2019s looking here for the\u00a0 dollar sign and starting curly braces. So it is looking for lookup strings. And when it is found,\u00a0 it is calling this StringSubstitutor to replace parts of the log message. Remember this function here, because it will become important for\u00a0 the incomplete mitigation advice."}
{"prompt": "What does the \"substitute\" function in Log4j do?", "completion": "Anyway. Inside replace we then call\u00a0 substitute which kicks of this big parsing function looping over the characters\u00a0 and basically extracting these lookup strings. It also works recursively to\u00a0 resolve lookups inside of lookups. Thanks to that feature, you can have very\u00a0 obfuscated attack payloads which enables all the various WAF bypasses. Well\u2026 I\u2019m not stepping through all of this and set a breakpoint right at this found\u00a0 variable end maker case, by clicking next to the line number. And then hit continue."}
{"prompt": "What function is used to retrieve the corresponding EnvironmentLookup resolver object?", "completion": "Here you can see now it actually extracted the lookup string from the curly braces. And now\u00a0 we are left with only env:HOME. Again skipping a bit of code here to the call resolveVariable.\u00a0 This is where it gets interesting again. In there we get a list of available resolvers.\u00a0 Here is the env resolver, and also the infamous jndi resolver. Here you can also see the lower and\u00a0 upper one, which are used in some waf bypasses. Anyway. This lookup call will now use the prefix,\u00a0 env, to get the corresponding EnvironmentLookup resolver object, which has a very simple lookup\u00a0 function. It simply calls System.getenv(key)."}
{"prompt": "What is the process for performing a JNDI lookup using Log4j?", "completion": "It gets my home path. Replaces it in the\u00a0 logger message. And you can imagine the rest. The message is eventually actually\u00a0 printed on the console with the HOME path. I won't actually step through what happens\u00a0 with a jndi lookup message. It\u2019s basically the same thing, just that eventually we reach\u00a0 the jndilookup which is using a jndi manager. And that then does all the jndi magic. Creating\u00a0 a socket and connecting to the URI and so forth. if you are curious you can spend some hours\u00a0 stepping through that crazy code yourself,"}
{"prompt": "What is the difference between having a complex logging library and forcing the person who wants to log an environment variable to call System.getenv and append it to a string?", "completion": "now you know how to do that. But let\u2019s look again at the environment lookup\u00a0 example. And I have an honest question. And I think this part is very important\u00a0 for every developer who is watching. Let\u2019s talk about secure software design. I hope I don\u2019t sound judgmental. I just want\u00a0 to ask very directly to think about this. Is it better to have a complex logging\u00a0 library with lots of code to parse each message to be able to include environment\u00a0 variables. Or is it better to force the person who wants to log an environment variable, to\u00a0 call System.getenv and append it to a string?"}
{"prompt": "What are the security considerations when writing Java networking code?", "completion": "I understand that this code looks less\u00a0 pretty than the magical library. And there is certainly an argument about writing\u00a0 more readable code. But in terms of security, LESS COMPLEXITY is always more secure. Now you have to be careful with what I mean with \u201cless complexity\u201d. For example it\u2019s less\u00a0 complex to write java networking code with readObject and move arbitrary objects through\u00a0 the network, than to implement a more \u201ccomplex\u201d message handling. For example json data that\u00a0 then has to be turned back into an object."}
{"prompt": "What is the difference between the readObject call and the simpler solution for handling data?", "completion": "Lot\u2019s of if and else cases to verify the json\u00a0 data is correct. But it just looks more complex. actually it\u2019s simpler. It\u2019s very basic. Some\u00a0 strings or numbers come in and you handle them. The readObject call is HIDDEN complexity.\u00a0 There is a binary format hidden from you that magically turns into full blown java\u00a0 objects. You can imagine that there is a lot of internal magic code to make that happen. And so you have to realize that you introduce HUGE complexity, thus increase attack surface\u00a0 into your program with this solution. The simpler solution, requires you to write a bit of annoying\u00a0 code lines, but you are dealing with very basic strings and numbers,and clearly, they wouldn\u2019t\u00a0 directly lead to arbitrary code execution."}
{"prompt": "What principles should be kept in mind when writing secure code?", "completion": "so when you create a bigger system architecture,\u00a0 or you are just tasked to implement a smaller feature of a larger project. always design\u00a0 for simplicity. And as I said, I don\u2019t mean the simplicity of your code in isolation, I mean\u00a0 the simplicity of the whole stack you plan to use. Eventually you can develop an intuition for\u00a0 which functions and libraries mean complexity, and what kind of code is \u201cbasic\u201d. I hope that kinda makes sense. I believe it\u2019s one of the most important principles\u00a0 to go by when wanting to write secure code."}
{"prompt": "What is the email address format of the keys required to unlock the next challenge in the Flareon CTF app?", "completion": "Flareon is a series of reverse engineering challenges by fire I because they want to find and hire smart individuals interested in reverse engineering So if you need a job just contact me and I sell you the solutions. Just kidding I don't know yet how far I will get as reverse engineering can be quite time-consuming And I believe many challenges are based on Windows, which is not really my world anyway The game is simple analyze the sample find the key each key Looks like an email address and ends with Idi flare - on comm enter the key for each challenge in the flare on CTF app to unlock the next challenge and Oh boy, did I get mad at this browser?"}
{"prompt": "What is the email that the string is compared to in the main method of the Java decompiler?", "completion": "Terminal dot slash didn't work l s which is supposed to list files just showed Text and even having moved with CD into a directory you could just move away literally unplayable So, let's look at the first challenge minesweeper championship registration welcome to the fifth annual Flareon challenge the minesweeper World Championship is coming soon, and we found the registration app. You weren't officially invited But if you can figure out what the code is you can probably get in anyway Good luck and here we can download the file when you unpack the 7-zip archive with the password infected You will get a dot jar file. I'm a hundred percent sure that the first challenge will be just the most basic thing ever So I just immediately used JD GUI Which is a java decompiler and right here in the main method you find that the string is compared to the email golden ticket 2018 at Flareon comm so this is our first flag. Let's copy it into the form and submit the flag, correct?"}
{"prompt": "What version of IDA Pro is the speaker using to analyze the EXE?", "completion": "Cool. We solved the first challenge. So let's not waste any time move on to the next one ultimate minesweeper You'll Hecht your way into minesweeper championship. Good job. Now. It's time to compete Here's the ultimate minesweeper binary beat it win the championship and we will move you on to greater challenges again We get a 7 sub archive with the binary to download this time. We got an exe file I assume because it's still just a second challenge that it's still super simple. So I immediately opened the disassembly Ida I'm using the version 7 freeware here to analyze the exe but right here when we select how to Load the file Id I saw that the binary seems to be a dotnet?"}
{"prompt": "How is the log4j vulnerability expected to be remembered?", "completion": "Log4j is a very popular logging library for java. So a critical vulnerability in there is bad. And that\u2019s what we got for christmas. So nice. You probably have seen the log4shell payloads and how to test for the vulnerability everywhere. And I\u2019m telling you now, this payload will go down in the history books like the shellshock snippets. I expect to see it on t-shirts at the next conference I visit. Anyway. I thought for a while if I should make a video about the apocalyptic log4j vulnerability or not."}
{"prompt": "What are some potential ethical considerations surrounding the use of log4shell in Minecraft?", "completion": "On one hand I know, a video about this topic will be popular, but on the other hand the internet is FULL of good resources about it already and I don\u2019t want to just \u201ccopy&paste\u201d what other people already have written about and repackage in video form. If I do a video, I want to provide a bit more in-depth information or share a unique perspective. And I think I have that now. I hope with this video I can clear up some confusions about it, look a layer deeper into it, and share some general thoughts about what you can learn from all this."}
{"prompt": "What techniques should be used to confirm the presence of a log4j vulnerability?", "completion": "I have a lot of thoughts, so this video will come in two parts. But before we really start I have a PUBLIC SERVICE ANNOUNCMENT: To all my bug bounty hunters. When you hunt for log4j messages make sure you actually confirm the vulnerability. For example when you write an email in gmail with a jndi payload, you actually get a DNS pingback. And you might believe you confirmed the issue, but actually you didn\u2019t (shock). In this case it\u2019s just Google scanning the URL for spam detection reasons. So to actually confirm if the log4j injection is real, always add a nested lookup, for example the javaversion, and try again."}
{"prompt": "What does the DNS pingback reveal about the log4j vulnerability?", "completion": "If it were really a log4j vulnerability, you would get a DNS ping to xxx, the javaversion, xxx and the long domain. But if we check the pingback we receive now. We only get xxx. So this confirms that there is no log4j lookup happening. This is not a vulnerability in google. And I know every bug bounty program is getting swarmed with reports these days. And for the sanity of the triagers. Please confirm your bugs before reporting blindy. Thank you. Anyway. Let\u2019s head in.  Let\u2019s start with the basics."}
{"prompt": "What is the syntax for logging a message using log4j in a Java program?", "completion": "Chapter 1: log4j I wanted to briefly introduce you to log4j and some basic features that really help to understand the bigger picture. So here is a simple java example using log4j. We get a logger instance and we can then call logger.info() to log a message. Besides this, log4j can be heavily configured. Here is a very very basic log4j2.xml config file. And in here we say that we have a logger that logs anything starting with the log level info to a target we called \u201cconsole\u201d. And console is actually referring to the target standard_system_out."}
{"prompt": "What patterns are available for formatting log messages in Log4shell?", "completion": "So when we run the program we see log messages in the terminal. But you could also here define that the logs are supposed to be written or \u201cappended\u201d to a file, or even sent away to a remote logging service. Also here we can specify the log message format. We have in brackets %t, which says we want the thread name here. And %m is the actual message. And at the end we have %n, which is the line termination, so a newline. There are many patterns available. Like we could add date and time information,"}
{"prompt": "What lookups are available in log4j?", "completion": "or the name and line of the java file where the logging happened. And this leads us to another log4j feature. lookups. Most of the lookups are fairly innocent. For example the env lookup allows us to add environment variables in the log message. So for example if we wanted to print the current home directory, we can just write ${env:HOME}. And log4j will then replace this. And so there are various lookups, for example the java version or, if you run in a docker container you can log the container name."}
{"prompt": "What is the purpose of JNDI lookup?", "completion": "you can see that this is useful information you maybe want to include in your log message. Chapter 2: JNDI And now you probably wonder what the jndi lookup is for, because that is the one used in the exploit. Well, the purpose of JNDI is basically to do the same. It\u2019s there to lookup some information to be included in the log message. But JNDI is just a lot more complex and powerful than just environment variables, because it is used to fetch information from a remote server. Let\u2019s do an example how this could be used."}
{"prompt": "What is a common method for configuring a database address across multiple applications?", "completion": "Let\u2019s say you have multiple apps that connect to the same database. And somehow you have to configure the database address in all of them. You could hardcode it, but that\u2019s not great when you do local development and then want to run it in production. Really messy. Alternatively you could have a config XML file with the address in it, or how it is very common in web hosting, you set it with environment variables. But that still require to make sure all of this information is set correctly on all systems."}
{"prompt": "How can Java applications access information stored on a server using JNDI?", "completion": "Why not centralize this information. So in the case of very enterprisy java, you could use a server that stores this config. This could be an LDAP server. And it can be accessed with JNDI. The Java Naming and Directory Interface. So now when any app is running and wants to know the database to connect to, it can ask, with JNDI the LDAP server where the databaseserver is. Great. At least that\u2019s one use-case I can imagine what to use JNDI for. I\u2019m not too familiar with enterprise java deployments and don\u2019t know how it is actually used."}
{"prompt": "What is JNDI and how can it be used to get values from a remote server?", "completion": "Anyway. let\u2019s come back to logging. It makes sense that if you are generally using JNDI, maybe you want to log such a value as well. and so the JNDI lookup of data in some LDAP server is a nice feature, right? So we understood the general usage of log4j, we learned about log4j lookups, and what JNDI can be used for. Now we can already better understand the vulnerability. Because it\u2019s important to understand that JNDI has nothing to do with log4j. JNDI is a java thing to get values from a remote server."}
{"prompt": "What is the CVE number for the log4shell vulnerability?", "completion": "Like LDAP. And log4j has various lookup features with those curly braces, and one of those happens to be the feature to perform JNDI lookups. And that\u2019s very important to keep in mind. On one side we have log4j supporting various lookups. And on the other side we have JNDI which is supported as one feature OF log4j lookups. Makes sense, right? So we covered some basics. Let\u2019s talk about the log4shell vulnerability. Chapter 3: log4shell timeline On the 10th of december apache published an advisory for CVE-2021-44228 with an update for log4j."}
{"prompt": "What feature patch was submitted to log4j in 2013 that introduced the vulnerability?", "completion": "Unlike some on the internet believe, it was not first discovered in minecraft. This issue was discovered by Chen Zhaojun (I\u2019m sorry for the pronunciation) of the Alibaba Cloud Security Team. I believe it was reported around the 26th of November. So there were about two weeks from report to disclosure. But let\u2019s go back in time a bit, to understand how this vulnerability came to be. In 2013 a feature patch was submitted to log4j to add JNDI lookups. As we have heard, could be a cool feature. But this was actually the introduction of the vulnerability."}
{"prompt": "What feature was requested in 2014 in the issue submitted to the log4j library?", "completion": "So it was there for like 8 years. in 2014 there was a funny, but interesting issue submitted. Somebody wanted the ability to disable (date) lookups completely. Because of compatibility issues with other libraries. This issue highlights the problem of intransparent and hidden magical features of libraries. Here a developer was trying to log a string that looks like a valid log4j lookup, but it was not. They literally wanted to log this string but then log4j tried to resolve this as a date lookup and threw exceptions."}
{"prompt": "What methods can be used to ensure secure libraries are built in a way that meets developer expectations?", "completion": "And this was a surprise to the developer and so they asked for a feature to disable the lookups. log4j lookups are well documented in the documentation, but not everybody who uses log4j knows all of this. So it\u2019s unexpected behaviour from the point of view of a regular developer. And here is a first lesson we can learn. When we plan to build secure libraries we have to think about the expectations of developers. And developers expect they log string messages and that there is not much fancy stuff done with it."}
{"prompt": "How can Log4j be configured to ignore lookups when logging messages?", "completion": "And if we still want to offer those fancy features, it\u2019s best to put them behind an opt-in configuration. This allows powerusers to make use of it, but people with just basic logging requirements don\u2019t use more than they need. Anyway. This issue report actually led to the implementation of a new feature. %msg{nolookups}. This can be put into the log4j config file here in the pattern layout. this tells log4j, when you log a message, IGNORE the lookups. If we now try a lookup, you see it\u2019s not resolved."}
{"prompt": "What is the recommended mitigation for the log4shell issue without upgrading log4j?", "completion": "So lets fast forward to 2017, a log4j maintainer added a new config option formatMsgNoLookups, which generally disables lookups globally. This now also applies to only %m, so you don\u2019t have to replace and configure all log messages with %m{nolookups} anymore. Both of those features have been recommended as a first mitigation of the issue. Without upgrading log4j, people could just add this to their logger configs and be safe. However this mitigation was later redacted because it\u2019s not perfect. I think it\u2019s generally an ok mitigation,"}
{"prompt": "What is the IT emergency of state 4. red issued by the German government regarding the remote code execution using the JNDI LDAP lookup?", "completion": "but there are some caveats you should be aware of, but more on that in aprt 2. Anyway. after 2017, it took a few years and finally in 2021 we get the advisory about the remote code execution using the jndi ldap lookup. It\u2019s crazy. Even the german government issued an IT emergency of state 4. red . This means \u201cThe IT threat situation is very critical. Outage of many services is likely, and the live operation of services cannot be guaranteed.\u201d. It\u2019s insane. There is also some interesting data from cloudflare."}
{"prompt": "What was the first public usage of the log4shell exploit found by Cloudflare?", "completion": "Cloudflare, is proxying web requests for TONS and TONS of sites. Over many many years. So if somebody has data on historic use of this exploit, then it could be cloudlfare. And they said the first usage they found was on the 1st Deccember. This is kinda interesting, because it\u2019s 9-10 days before public disclosure, this is no surprise to me. researchers often share their findings with friends. You know the cool hacker underground, the scene. There are groups of people that just like to share their research progress and bounce ideas around."}
{"prompt": "What techniques were discussed in the Blackhat talk by Pwntester and Oleksandr Mirosh in 2016?", "completion": "So to me it\u2019s really no surprise that this slowly leaked through some cracks. It\u2019s to be expected I think and nothing to be really concerned about. but it\u2019s also good to see that nobody seemed to have known about this vulnerability for years and kept it secret. So that\u2019s the timeline. But wait a minute. that\u2019s not the complete timeline. There is a significant point missing in this history. Actually there happened something important in 2016. let\u2019s talk about JNDI and LDAP Exploitation. Chapter 4: JNDI/LDAP Exploitation In 2016 there was a talk at blackhat by pwntester and Oleksandr Mirosh."}
{"prompt": "What methods can be used to execute arbitrary code in Java development?", "completion": "A JOURNEY FROM JNDI/LDAP MANIPULATION TO REMOTE CODE EXECUTION DREAM LAND. In this talk they presented research into JNDI and specifically the LDAP and RMI features. It turns out that you can basically \u201cstore\u201d JAVA serialized objects in LDAP. And then a JNDI lookup is not just looking up a basic string, but maybe a complex java object. And this is where we enter the world of arbitrary code execution. In the Java development world, people love to send complete objects over the network. Even in my java computer science class at university, when we covered networking and sockets."}
{"prompt": "What is the potential security issue associated with sending serialized objects between Java applications?", "completion": "We made examples with ObjectInputStream and then readObject. It\u2019s super easy to just transmit complete objects through the network between java applications. It\u2019s a very powerful feature. But this has massive security problems. java objects have functions, constructors and so forth, with code that can run. So if an attacker can send arbitrary seralized objects to an application, then you likely get remote code execution. And in bigger java applications this is very common. Especially in applications that are generally ran in \u201cinternal\u201d enterprise networks."}
{"prompt": "What steps can developers take to prevent arbitrary code execution in Java applications?", "completion": "I also guess most Java Remote code execution CVEs are the result of arbitrary object deserialization or class loading. That kinda stuff. There are also Java features to restrict what these serialized objects can do.There is the java Security Manager where you can set certain policies to prevent or sandbox arbitray code execution. But yeah. This whole object serialization and remote class loading is a Java feature. Developers will use it. And so apps will be vulnerable. Anyway. It\u2019s important to understand that this talk is generally about JNDI and the remote class loading with LDAP."}
{"prompt": "What are the possible security implications of controlling Java Naming and Directory Interface (JNDI) lookups?", "completion": "And I\u2019m not covering this much more in the video, so if you want to know more about their research, watch the talk and read their whitepaper. But what\u2019s important for me to highlight is, that this whole research has nothing to do with log4j. It is just a talk about security researchers looking at a particular java feature, JNDI. And they simply asked themselves, \u201cif somebody could control JNDI lookups, what could go wrong\u201d. And they found out, it can lead to remote code execution. And so this is very interesting, because at the time in 2016, this talk and research was not that \u201cinteresting\u201d."}
{"prompt": "What is the most important puzzle piece of the log4shell vulnerability?", "completion": "I mean on the surface it\u2019s \u201cjust\u201d more examples of java object deserialization stuff which we see a lot of. At least that is my feeling as somebody who is not deep in the java world. But now in 2021, we know that this is exactly what is exploited in log4j. Suddenly this research is the most important puzzle piece of the log4shell vulnerability. Anyway. we should be wondering, \u201chow can it be, that in 2016, at one of the the biggest and most important security conferences, world class security researchers clearly said \u201cApplications should not perform JNDI lookups with untrusted data\u201d because it leads to remote code execution,"}
{"prompt": "How can log4j be exploited using JNDI lookups?", "completion": "and it took 5 years for somebody to realize that this can be exploited in one of the most popular logging libraries?!\u201d. What was the problem? Chapter 5: Security Research vs. Software Engineering There are two questions we could ask ourselves. First \u201cWhy did java developers that know about log4j and JNDI lookups, or even the log4j maintainers themselves, not know about this threat, which was publicly shared at a well known security conference?\u201d And the second question is \u201cWhy did pwntester, or we the whole security community not realize that the JNDI research, can be abused with log4j?\u201d."}
{"prompt": "What are the implications of untrusted data being passed to a JNDI lookup?", "completion": "Alvaro Munoz, aka pwntester, who did the talk at blackhat shared this tweet. If developers dont know that untrustred data should not be passed to a JNDI lookup, then WE (as the security community) have failed them. Its not THEIR fault And he is absolutely right. I think it\u2019s awesome to have developers who try to stay up to date on security research, and if you are a developer watching right now, I hope my channel helps you with that. But to be honest, we the security community uses the term \u201cSECURITY\u201d."}
{"prompt": "How can security researchers gain a better understanding of how applications are built?", "completion": "We should be the ones who should have recognized the impact. I mean we did, The alibaba cloud security team did. But a bit late\u2026 in 2021. So this is a perfect example why I think it\u2019s so important for any security researcher, and pentester, and whatever, to understand how applications are built - having development experience. I think this is a great example of the security community failing to understand how apparently every bigger java application is built. This research in 2016 was so important for the java landscape."}
{"prompt": "What approaches are available for bridging the gap between the security and developer communities?", "completion": "And nobody recognized that earlier? That's a bit embarrassing for us. Unfortunately the security community and the developer community are very separated. And that makes sense, while the fields are very related, in both of them you have more than a lifetime of information to consume. So it\u2019s easy to say \u201cdon't be so seperate\u201d, but I don\u2019t how could we actually solve that. I hope my YouTube channel is popularizing creative security thinking, but\u2026. Lots of work do be done in this area, and I hope we can somehow improve it."}
{"prompt": "What are some of the secure code design principles that can be used to mitigate log4j vulnerabilities?", "completion": "And with those final thoughts, we have reached the end of part one of this two part series. Next time we will dig deeper into the code of log4j, talk about secure code design. And so If you are a developer, please watch the next video as well. We will also bridge the gap to related vulnerabilities like format string vulnerabilities. And we discuss the mitigation that later was redacted. For now, thanks so much for watching. I would really appreciate if you can share this video with your friends and colleagues and maybe checkout liveoverflow.com/support."}
{"prompt": "What is the origin of the name \"XSS\" for cross-site scripting?", "completion": "Cross-site scripting is the name for a\u00a0 well-known type of security issue that can affect websites. And I always thought\u00a0 the name , \u201cXSS\u201d, is terrible. I think it\u2019s confusing a lot of beginners, well at least\u00a0 it confused me back when I started. Instead, I think \u201cJavaScript code injection\u201d, or more\u00a0 general \u201cHTML injection\u201d, makes a lot more sense. So I always wondered why we have this\u00a0 weird name \u201ccross-site scripting\u201d - at some point somebody had to invent this\u00a0 name and somebody had to discover the type of vulnerability in the first place."}
{"prompt": "What security bugs existed in Netscape and Internet Explorer browsers in the years leading up to 2000?", "completion": "Another motivation for this video is that, of course having names for things, like \u201cXSS\u201d,\u00a0 is very important when we communicate with each other, but naming things can also cause\u00a0 compartmentalization. mindcuffs. Blinds. And hacking in its essence is extremely creative\u00a0 and you should always think outside the box. So in my opinion it\u2019s important to understand\u00a0 the history of any kind of vulnerability, because it makes you truly understand the\u00a0 issue to see the wider picture. And that\u2019s why, we have been on a journey through history,\u00a0 starting around early 1996 with the invention of JavaScript by Netscape. And the following\u00a0 years up until 2000, were riddled with lots of security bugs in the browsers themselves.\u00a0 Netscape but also Internet Explorer had lots of issues that nowadays we would call Universal\u00a0 XSS. BUT as I said, this name didn\u2019t exist back then. So lets figure out in this video,\u00a0 how we got the name \u201cCross-site scripting\u201d When you want to know something about history,"}
{"prompt": "What was the name suggested by Microsoft security-engineers for the vulnerability that eventually became known as Cross-Site Scripting?", "completion": "you go check what wikipedia says. And on\u00a0 the cross-site scripting page we can read: \u201cMicrosoft security-engineers introduced the term\u00a0 \"cross-site scripting\" in January 2000.\u201d But the source listed for that is a microsoft blog post\u00a0 from 2009, celebrating the 10 years of Cross-site scripting. While this is not the original release,\u00a0 in this blog post David Ross shares some of the names that were suggested. Unauthorized Site\u00a0 Scripting, URL Parameter Script Insertion, or \u201cCross Site Scripting\u201d. Cool, but that doesn\u2019t\u00a0 help me much. I still don\u2019t understand why they thought of these names, why not HTML or JavaScript\u00a0 injection or insertion. Though the \u201cURL Parameter Script Insertion\u201d is pretty close."}
{"prompt": "What was the emergency that Microsoft coordinated an advisory release with CERT in 2000?", "completion": "Mh\u2026 Besides those other name ideas, david also mentioned that they \u201ccoordinated an\u00a0 advisory release with CERT in the year 2000\u201d, so microsoft worked together on\u00a0 this with the national \u201cComputer emergency response team\u201d. What was this emergency? Also\u2026 Why was MICROSOFT the one to talk about\u00a0 it? I want to better understand what happened in 1999 and 2000. And luckily I was able to\u00a0 talk to David Ross. The author of this article. So I was wondering. Back in 1999/2000\u00a0 \u201chow novel was this kind of attack?"}
{"prompt": "How did Microsoft become aware of the XSS vulnerability?", "completion": "were \"XSS\" issues already known? Or was it\u00a0 something the team at microsoft discovered?\u201d And he responded saying: \u201cI Was doing work related to Georgi Guninski's\u00a0 bugs, which we termed \"cross-domain\" bugs\u201d. Recognize this name? If you have seen the previous\u00a0 videos on this topic, you will know georgi. Yah\u2026 Initially my plan was just make a single\u00a0 video about the origin of the name XSS, but when I started researching deeper,\u00a0 thanks to david ross, I realized history is a lot richer and to understand how we got\u00a0 to the term \u201cCross-site scripting\u201d we had to understand the events that happened before it."}
{"prompt": "What security issue did Georgi find in Internet Explorer and when was it disclosed?", "completion": "So if you haven\u2019t seen the previous videos, go check them out. The playlist is linked below. But to briefly summarize, Browsers had a lot of interesting security bugs at the time related\u00a0 to JavaScript. And we have looked at several of these original vulnerabilities in action.\u00a0 One of them was for example this issue Georgi found in Internet Explorer and it was disclosed\u00a0 in January 2000. just 9 days before the world would get introduced to \u201ccross-site scripting\u201d. Now this particular browser issue was referred to as a cross-frame policy security issue."}
{"prompt": "What is the mechanism by which XSS vulnerabilities exploit a bug in the browser to access data from another website?", "completion": "And that name makes total sense. These vulnerabilities back then were always breaking\u00a0 the browser security boundary between two websites. Of course these vulnerabilities all\u00a0 worked differently, but in the end it\u2019s always one website that either embeds another site via\u00a0 iframes or opens another site via window.open, and somehow exploiting a bug IN THE BROWSER,\u00a0 can access data from that other website, like the cookies or so. So we have an issue\u00a0 related to crossing over into another browser frame. \u201ccross-frame policy security issue\u201d."}
{"prompt": "How long had Cross-site Scripting attacks already been exploited prior to the Microsoft Internet Explorer 5 security vulnerability disclosure in August 1998?", "completion": "But these were browser issues. XSS is a vulnerability in websites themselves. as we\u00a0 now know, in parallel to this kind of browser security research from georgi and others, a new\u00a0 field of exploitation was slowly boiling up. And of course microsoft didn\u2019t invent Cross-site\u00a0 scripting attacks themselves. It was already getting exploited in practice. So have a look at\u00a0 this vulnerability disclosure from August 1998. HOTMAIL \"ATTACKMENTS\". They even have a logo. To all those people complaining about vulnerability names, logos and\u00a0 websites. 1998. There you have it. It is not a new trend, it always happens."}
{"prompt": "What type of vulnerability was discovered by Blue Adept with Microsoft's Hotmail service in 1998?", "completion": "And I\u2019m glad that this website exists, because it\u2019s really hard to find information about the\u00a0 \u201coriginal XSS\u201d attacks. But thanks to a website like this a lot of history is preserved. So let\u2019s read a few paragraphs of this. \u201cThis page describes a security problem that Blue Adept discovered with Microsoft's\u00a0 Hotmail service on August 28, 1998. \u201c As you probably know, hotmail is microsofts\u00a0 webmail services. So email in the browser. \u201cUsers clicking on mail attachments\u00a0 in Hotmail are vulnerable to having their passwords stolen by malicious users.\u201d Further down they explain how you can\u00a0 \u201cSEND A HOTMAIL \"ATTACKMENT\" TO YOURSELF!\u201d."}
{"prompt": "What is the difference between injecting script tags, hidden script tags, and meta tags?", "completion": "They have here this mailmess.html document which\u00a0 you can send yourself as an attachment. And when opening it in hotmail, a payload triggers. Now the payload in this example is actually a java applet, BUT look at this comparison\u00a0 site \u201cWHICH FREEEMAIL SERVICES ARE SAFE\u201d: So Microsoft hotmail is vulnerable to java\u00a0 applets, and a few other services as well. BUT Look there. They also list which services\u00a0 are vulnerable to injecting script tags, hidden script tags and meta tags. I\u2019m not 100%\u00a0 sure what the difference is here, but clearly,"}
{"prompt": "What were the early influences that gave rise to Cross-site Scripting (XSS) vulnerabilities?", "completion": "this is a classic case of Cross-site\u00a0 scripting. It just didn\u2019t have the name yet. As you know, cross-site scripting is\u00a0 a vulnerability where you can inject javascript code into a website that another\u00a0 user then executes. And so of course XSS can only EMERGE on services where users communicate.\u00a0 The web was just slowly becoming more interactive, and webmailer were obviously a prime breeding\u00a0 ground for this. So back in August 1998, they tried to raise awareness\u00a0 of the issue of HTML code, or more specifically applet and\u00a0 javascript tags, embedded within emails."}
{"prompt": "What type of restriction is Cervenka urging Hotmail to implement to protect against XSS attacks?", "completion": "This of course triggered lots of news articles\u00a0 as well. And look what they write here: \"We're not trying to use this as an\u00a0 illustration that there's a problem with Java applets in general, but\u00a0 rather that there's a problem with the user interface or filtering design of the\u00a0 Web-based email services,\" Cervenka said. And in another article they wrote: \u201cSome free email providers, including Yahoo Mail, already filter out JavaScript\u00a0 code from incoming messages.\u201d \u201cCervenka is urging Hotmail to implement\u00a0 the same restriction. In the meantime,"}
{"prompt": "What browser did Microsoft use to battle against javascript-related bugs?", "completion": "he recommends that Hotmail users\u00a0 disable JavaScript in their browsers.\u201d It makes total sense to me that the first\u00a0 XSS issues emerged in web mailers. It\u2019s really a straight forward attack. You have Emails,\u00a0 emails that also probably support HTML formatting, and you just add some malicious\u00a0 javascript code inside of that. And now slowly the puzzle pieces fall together. Think about the big picture. So on one side Microsoft is battling against javascript-related bugs in their\u00a0 Internet Explorer where one website can run some malicious javascript to somehow access\u00a0 data from another website. AND on another front,"}
{"prompt": "What security team at Microsoft was responsible for battling malicious javascript hidden inside of emails at Hotmail?", "completion": "microsoft is battling against malicious\u00a0 javascript hidden inside of emails at HOTMAIL. This is so fascinating to me.\u00a0 Because from the outside at the time, microsoft looked like they don\u2019t care\u00a0 about security. They don\u2019t manage to fix the issues in hotmail. Lots of angry\u00a0 news articles about it. And as you all know, Internet Explorer has a very bad reputation\u00a0 for being super insecure and buggy as well. BUT microsoft is a huge corporation. And they had\u00a0 a security team that really cared. But if you ever worked in a huge corporation, you can imagine\u00a0 what kind of uphill battle that must have been."}
{"prompt": "What coding practices can lead to Cross-Site Scripting (XSS) vulnerabilities?", "completion": "And so at the end of 1999 and early 2000, david\u00a0 ross and his team of other security researchers at Microsoft summarized and generalized this new\u00a0 type of javascript related issue within websites. Here is the original press release\u00a0 from microsoft in february 2000. \u201cMicrosoft has identified a serious security\u00a0 vulnerability that could potentially affect many web sites and web site users. The vulnerability,\u00a0 (now) known as \"Cross-Site Scripting\", is equally possible on all vendors'\u00a0 products, and does not result from a defect in any of them. Instead, it results\u00a0 from certain common web coding practices.\u201d To me it seems like, from their experience with\u00a0 issues in hotmail, they understood the underlaying issue of XSS being the result of bad coding\u00a0 practices. Not properly encoding the output."}
{"prompt": "How can attackers use an HTTP GET request to exploit a cross-site scripting (XSS) vulnerability?", "completion": "Now. Let\u2019s continue with their\u00a0 FAQ where they show an example attack with HTTP GET. this is what\u00a0 we would call today \u201creflected XSS\u201d. So if you are the attacker, you would\u00a0 add this link to your website. It\u2019s a link that looks like it is going\u00a0 to microsoft, BUT the link target, is actually pointing at another website,\u00a0 foo.com, with a vulnerable parameter ID. Supposedly this ID parameter is reflected\u00a0 onto the page. So you can inject a script tag that loads a malicious javascript file\u00a0 from your evil server and executes it."}
{"prompt": "What is the purpose of removing the anchor tag when showing someone an XSS issue?", "completion": "And when I saw that, tne\u00a0 name finally clicked for me. Let me explain. Nowadays when you want to show\u00a0 somebody an XSS issue, you show it with a link. You would just straight show the vulnerable\u00a0 domain. In this case you remove the anchor tag and just focus on the link target. And that\u00a0 is why the name XSS was always confusing to me. If you look at the vulnerable link itself,\u00a0 there is no \u201ccross-site scripting\u201d. You inject a script tag into the vulnerable website.\u00a0 Why not call it javascript or html injection?"}
{"prompt": "What is the difference between cross-frame bugs and cross-site scripting?", "completion": "BUT microsoft was coming from a time when\u00a0 georgi and others found vulnerabilities in browsers where one website can use\u00a0 javascript bugs to access another website. They were called cross-frame bugs. And so if you add the surrounding anchor tag again, then this almost looks like a typical\u00a0 cross-frame bug. It\u2019s a malicious website that can access data from another website, BUT it works\u00a0 differently, right? It\u2019s not a bug in the browser, it\u2019s a coding error in the target website. And so seeing the example payload with a link like this, suddenly it makes sense. To them\u00a0 it\u2019s one website being able to inject javascript into another website. And that\u2019s probably\u00a0 why they called in cross-site scripting."}
{"prompt": "What emergency advisory was released by CERT to inform the public about XSS?", "completion": "Hah! \u2026 Well, I still think nowadays it would be\u00a0 better if we rename it to \u201cjavascript or HTML injection\u201d. Because I think \u201cinjection\u201d is such\u00a0 an important general concept existing everywhere. Command injection, sql injection, JAVASCRIPT\u00a0 injection, burger injection. All the same idea. But now that I understand the\u00a0 history, where it came from, now the name makes sense to me. I can accept it Anyway\u2026 As you can see the researchers at\u00a0 microsoft back then understood that XSS is a big deal. It\u2019s not just a challenge in\u00a0 hotmail, it affects everything. And that\u2019s why we need an emergency advisory, to inform\u00a0 the public and spread the knowledge about how to fix these issues - this information has\u00a0 to reach every web developer. So the CERT released. CA-2000-02. Malicious HTML\u00a0 Tags Embedded in Client Web Requests."}
{"prompt": "What kind of output should web page developers recode in order to prevent cross-site scripting vulnerabilities?", "completion": "\u201cBecause one source is injecting code into\u00a0 pages sent by another source\u201d (here they use the word injection) \u201d, this vulnerability has\u00a0 also been described as \"cross-site\" scripting\u201d. \u201cWeb Page Developers Should Recode Dynamically\u00a0 Generated Pages to Validate Output\u201d. Anyway. I think now we understand\u00a0 the origin of Cross-site scripting. And if you are OLD and remember any public\u00a0 XSS vulnerabilities from before the hotmail attackments, please share them with me. I would\u00a0 love to find out more about these early XSS issues from before the issue had this name."}
{"prompt": "What version of AngularJS did the researchers use for the sandbox bypass discussed in the video?", "completion": "In the last video we have looked at a very simple javascript sandbox escape by abusing the constructor property of the scope object to get an instance of the Function constructor, which we then used to generate a function with alert and execute it. In this video we will have a look at a different sandbox bypass for the version 1.4.7. A lot of internal stuff has changed between the old version 1.0.8 and this one. But we will figure it out. Again, credit for this bypass goes entirely to all those amazing researches who looked at angularjs in the past."}
{"prompt": "What does \"Referencing Function in Angular expression is disallowed\" mean?", "completion": "And the bypass I\u2019m showing here was found by gareth heyes. So let\u2019s move on to this newer angularjs version and use our old bypass. And Let\u2019s see what happens. Mh no alert. Let\u2019s have a look at the console. \u201cError!. Referencing Function\u201d (notice the capital written Function, that refers to the Function constructor. You know, what we used to call alert.) \u201cin Angular expression is disallowed\u201d. Ok crazy. Angular refuses to work with the function constructor that we got by following the constructors from the scope."}
{"prompt": "What is the highest constructor in JavaScript?", "completion": "In the stacktrace we can also find the function where this error is coming from. It is coming from ensureSafeObject. Click on it to see the function. This is it. And here is quite a clever check if the object comping in as a parameter obj is the function constructor. I have briefly mentioned that the highest constructos in javascript is the function constructor. This means that if you try to get the constructor of the function constructor, you will end up with the function constructor again. So when obj is already a function constructor,"}
{"prompt": "What is the purpose of the debugger statements in the modified AngularJS code?", "completion": "the constructor of that will again be the function constructor, so this \u201cif\u201d will evaluate to \u201ctrue\u201d and throw this error. Aaand as you can see I have also modified this angularjs code and added debugger statements as brakpoints in multiple places. This will stop the execution when you have the developer tools open. Now I will take the sanbox bypass from gareth heyes and we will step through the javascript code to see how it works. And why it works. But that might be a bit freaky. So we will start by looking at this expression and try to get a first understanding on what it tries to achieve."}
{"prompt": "What is the purpose of the first part of the payload?", "completion": "And in a follow up video we will then see how this actually works inside of angularjs. First of all I will modify this a bit and instead of array dot join I will use string dot concat. I think It\u2019s a bit less confusing. I will also modify the actual payload a little bit to make it more clear. And also add a breakpoint into it before we call alert. So as you can see, this expression has actually two parts. The first part with some weird prototype stuff and an assignment. And seperated, like javascript, with a semicolon is another expression with an dollar eval - I hope you remember the first video where I explained that dollar eval is just evaluating a angularjs expression."}
{"prompt": "What is the charAt() function and how is it used in the angularjs expression?", "completion": "It\u2019s equivalent to double curly braces. So this whole thing is basically an angularjs expression with another expression evaluaed inside. Let\u2019s have a look at that first part. So\u2026 It somehow does somethign with charAt. chartAt is a standard string function. it returns the character at the index given as parameter. So charAt zero returns the character \u2018a\u2019. And charAt one the \u2018s\u2019. But what about that constructor prototype stuff. So the expression starts with a string and references the constructor of that."}
{"prompt": "What is the function of the String.prototype.charAt() method?", "completion": "Which obviously gives us access to the String constructor. Note that is not a dangerous Object yet like the function constructor. I mean. What harm can a string constructor do that only allows us to create new strings? From that String constructor it now references prototype. Prototype is fancy javascript. Every string we use is a descendant from the String object. And prototype can be used to references the actual function or method that is inherited to all string objects. So we are now referencing the charAt function that all other strings inherit."}
{"prompt": "What does the String.prototype.charAt() function do?", "completion": "And now the exploit wants to assign something different to that method? What the fuck? It want\u2019s to assign the concat function? So let\u2019s see what concat does. String \u2018b\u2019 dot concat is also a string function or method. It concatinates another string. So for example append the string \u201cccc\u201d to \u201cb\u201d, which returns \u201cbccc\u201d. So now let\u2019s overwrite the prototype charAt with concat. Now the string \u201casd\u201d dot charAt suddenly returns the concat function instead of charAt. What the hell? And when we now perform the charAt like we did at the beginning, we don\u2019t get the first character, we append 0 to the string."}
{"prompt": "What is a method that wcbowling used to exploit the format level 0 challenge from exploit-exercises/protostar?", "completion": "Last weeks video was about revisiting format level 0 from exploit-exercises/protostar on a modern ubuntu system. And we played around with it to see if we can figure out a way to exploit it, but in the end I wasn\u2019t able to solve it. But lucky for me a user with the name wcbowling on reddit thought it was fun too and actually had a method to exploit it. So let\u2019s have a look at it. So here is wcbowlings post: I love going back to old challenged like this :) Managed to get a fairly reliable exploit,"}
{"prompt": "How many iterations does it take to overwrite the GOT entry for __stack_chk_fail?", "completion": "normally under 500 iterations. And there is a highlevel description on how it works: Overwrite the GOT entry for __stack_chk_fail with an address so we jump there instead. The address can be passed in via argv, we cant use nulls but we can use blank strings instead. As the argv location is semi random, it takes around 500 iterations which is pretty reasonable for 64bit So obviously I didn\u2019t manage to figure that out, which means I didn\u2019t know something and here is a learning opportunity for me. So I\u2019m not going to pretend I knew this."}
{"prompt": "What are the three constraints encountered in the challenge described in the video?", "completion": "For whatever reason I never noticed that __stack_chk_fail is in the global offset table. And the reason for that might be, that I never encountered a challenge with these constraints? We have A) a format string exploit that generally allows us to write anything anywhere B) No libc function after the format string vuln that we could overwrite in the global offset table And C) where we also have a buffer overflow with a stack cookie. So I really like this challenge now, because the solution is so clever."}
{"prompt": "What is the goal of the exploit?", "completion": "So the function that is being called when the stack cookie got overwritten through a buffer overflow is also on the global offset table. Which means our goal is to redirect code execution to our winning message by overwrite the GOT entry for __stack_chk_fail. And then do a buffer overflow, to trigger that function. To write to that global offset table entry, we have to get the address somewhere onto the stack, so that we can use %n with the format string vulnerability. And the issue is that it contains nullbytes which we can\u2019t pass in via the arguments."}
{"prompt": "What is the purpose of having a list of addresses (argv[]) that point to strings in the stack?", "completion": "I think the arguments are string copied onto the stack? So we can\u2019t enter arbitrary nullbytes. But wcbowling had a cool trick with empty strings as arguments. Because a string ends with a nullbyte, so an empty string is just null. I think I had a super early video to talk about the environment and arguments on the stack, but quick recap, you have the argv[] char pointer array, so it\u2019s a list with addresses that point to the strings. And then you just have memory with all the strings. And so this way you can get the address with null-bytes on to the stack."}
{"prompt": "How is the exploit implemented in wcbowling's comment?", "completion": "Pretty clever, I never thought about this before. And now you basically just have to put everything together. Wcbowling uses pwnlib to implement the exploit, it\u2019s a very useful python library, check it out. And so here the magic format string is built with a large offset into the stack that hopefully hits the addresses passed in via the arguments. And so there are two single byte writes. Why are only two bytes written? well the GOT already contains an address that is almost the target address, except the last two bytes."}
{"prompt": "What techniques did wcbowling use to solve the challenge of finding a good offset into the stack to hit the arguments?", "completion": "So you can just reuse most of it. Then this is being executed in a loop until the winning message is shown. The stack has some randomized offsets, thus you have to try it a few times. Here is the asciicinema recording by wcbowling. By the way, if you have a problem with a challenge and you write me an email, you could use that to record a screencast so I can actually see how you debug it and what the problem is. So while I understand now the basic idea, I still wanted to implement it myself. There are a few challenges that you have to solve like, what is good offset into the stack to hit the arguments, and the alignment of the address through the arguments."}
{"prompt": "What is the exploit that is mentioned in the video?", "completion": "And while I was doing that and struggling with exactly those details, I had an epiphany. And I\u2019m sooo grateful that wcbowling shared this exploit, because it pushed me into discovering this. So I actually found a 100% reliable exploit for this challenge, and you can\u2019t believe how excited that makes me. Though I have to admit, that it might only work on my compiled binary, and for somebody else it might not work, you will see in a second why. So here it is. That\u2019s all. And when we execute it, you can see it gets into an execution loop of the winning message."}
{"prompt": "How can you increase the reliability of exploiting format0 in bin 0x25?", "completion": "And while it looks like a simple format string vulnerability with the padding to increase the amount of printed characters, an address and a %n or %hn to write to an address, there are quite a few beautiful puzzle pieces here. So the basic idea came, when I was playing around with overwriting the GOT entry for __stack_check_fail. wcbowling had two writes and placed the address in the arguments, which made it so unreliable. I thought, maybe we get lucky if we place the address into our string, like I did in the last video."}
{"prompt": "What is the fixed offset location of the address written onto the buffer?", "completion": "But there is one problem. The string that is printed is coming from the arguments, which has an unpredictable position. But the string is formatted with sprintf into a buffer, which will have a fixed relative position on our stack. So basically the format string will be evaluated, so first it handles the %d with the 1640 character padding and places it into the buffer. Then comes the raw bytes of the address, and places it. And then comes the format modifier to write to an address on the stack. So now the position of this address that was just written onto the buffer is at a fixed offset location and we always get it with 214."}
{"prompt": "What is the limitation of using %n in the format0 challenge to write a large number?", "completion": "Though the problem is, we can\u2019t have an arbitrary amount of bytes padding. Because the address has to be 8byte alligned. So we can only increase or decrease the padding in 8 byte steps. Which affects the amounts of bytes we can write. With %n. It\u2019s always in these 8 steps. So we don\u2019t have an write anything condition, but we can write something close to the wiining address. Now there are two challenges. First, the stack is fairly small, and the format result is written into buffer on the stack, so if we use too much padding, to write a large number with %n, we run out of stack memory and get a segfault."}
{"prompt": "How can we ensure that our address is written with the correct number of bytes when exploiting format0?", "completion": "But wcbowling\u2019s trick has made me realize, that we can in fact increase the size of the stack by just using more arguments. It will add entries to the argv array and increase it. The second problem is, that the address is only written with 3 bytes, so if the location on the stack had other values in it, it won\u2019t work. We need to write our address onto the stack where there was a zero, or generally a small number before. And here is also where the arguments help us again, because we can groom the stack,"}
{"prompt": "What is a technique that can be used to exploit a format string vulnerability?", "completion": "by adding or remove entries in the argv array, so that the stack is large enough, and we have a zero at the correct spot. I love it! So now we know how to groom the stack to write to the GOT entry, but we still have the issue that we are not sure what to write because of our multiples of 8 restrictions. I wrote a simple python function that generates me valid exploit arguments with different paddings and adjusts the amount of arguments and the write offset accordingly. And I started by looking around the printing of the winning message."}
{"prompt": "What is the target address we are writing to?", "completion": "So ideally we would like to write 0x670, that\u2019s 1648, but becuase of our alignment restrictions that doesn\u2019t work. Anyway, I was then just trying them, to see if anything interesting would come from it. And luckily this one worked. Let me debug this with gdb, I set a breakpoint after the sprintf, before we check the stack cookie. Let\u2019s look at the stack. So this is the %d padding with spaces, to print the amount of characters we want to write to. And then here at the end is the target address we want to write to."}
{"prompt": "What is the \"geometry of intel assembler\" mentioned in the video transcript?", "completion": "The GOT address. We can also look now what value has been written there. So we will jump to 0x40066b. Let\u2019s look at the disassembly and see where that would be. 66b. Mhmmh\u2026 wait! That is not a valid address, this is not right? It\u2019s in between the compare and the jump-not-equal. Let\u2019s use x to print 3 instructions, instead of the disassemble command. Do you see that. WTF there are now moves, and not a cmp? What the heck? Welcome to intel assembler and more advanced ROP. This kind of property was called the geometry of intel assembler, in the famous ROP paper,"}
{"prompt": "What sequence of instructions is executed when the CPU reads the bytes of the intended instruction in the exploit?", "completion": "but never heard anybody using that term. Anyway, we jump in between the bytes of the intended instruction, and the CPU is dumb, it will just read those bytes and interpret them as assembler. And so in this case, the cmp and jne turned into two simple moves. Which means, now there is no check for deadbeef and we run into the printf to print the winning message. When we single step forward now, we get into the procedure linkage table for stack_check_fail, we jump to the GOT entry, which is our weird address into vuln, we execute the mov, and then we call puts to print the message."}
{"prompt": "What is the main concept that is emphasized in the video transcript?", "completion": "Okay, I have been dragging this on for a while now, but we will finally do our first hack. I know you have been waiting for this, but it\u2019s important for me to show each step along the way, because you can\u2019t jump straight to hacking stuff. A huge hidden chunk of hacking is about studying, gathering information, testing, engineering and so forth. I think this tweet captures it perfectly: I'm starting to think that hacking isn't about tech skill. It's being willing to stare at a screen for hours, try a million things, feel stupid,"}
{"prompt": "What is the recommended approach for extracting class information from GDB?", "completion": "get mad, decide to eat a sandwich instead of throwing your laptop out a window, google more, figure it out, then WANT TO DO IT AGAIN. So yeah, don\u2019t be impatient. We get there eventually. At the end of last video I said that we can easily extract class information from gdb with ptype. And that is mostly true, but there are a few caveats. So let\u2019s start by copying a few classes into our header file, and include it in an empty program, then try to compile it. This will reveal a lot of new classes, that are referenced by the current classes, and we can use that to extract even more."}
{"prompt": "What is the purpose of the LD_PRELOAD feature?", "completion": "Or we learn about basic classes, like strings, we need to import. And maybe some other minor mistakes like missing semicolons. There are also some gdb errors, like this Python exception produced by gdb, in the middle of those classes, so those have to be removed as well. But at some point we gathered all the information needed to compile it. But what can we do with this now? There is something called LD_PRELOAD. LD_PRELOAD is an environment variable interpreted by the linux dynamic linker/loader."}
{"prompt": "What is LD_PRELOAD, and how is it used in Linux?", "completion": "The ld.so library that, basically every program you execute uses. You can also read the man page of it. man ld.so. The program ld.so finds and loads the shared objects (shared libraries) needed by a program, prepare the program to run, and then run it. Linux binaries require dynamic linking (linking at run time) unless the -static option was given to ld(1) during compilation. And in there you can also find information about the LD_PRELOAD environment variable. LD_PRELOAD - A list of additional, user-specified,"}
{"prompt": "How do you compile a program as a shared object?", "completion": "ELF shared objects to be loaded before all others. This can be used to selectively override functions in other shared objects. That sounds really amazing right? We can use that to force the game to load any shared object we want before other shared objects, so we could create our own libray, loaded before the Shared object libGameLogic and overwrite functions from that. To do that we simply have to compile our program as a shared object instead. So with -shared, the resulting binary is not an executable anymore, but a shared object."}
{"prompt": "What is the purpose of the LD_PRELOAD environment variable?", "completion": "And you can check that out now with ldd, which shows the dynamic libraries loaded by this program. And if we add the LD_PRELOAD environment variable with our compiled shared object, suddenly the game also loads our test shared object. Cool, right? This means we can include any code we want in it, and it will get loaded into the process as part of loading the dynamic libraries that implement functions used by the program. That means that we can for example define a function Player::SetJumpState. And when the program wants to use this function,"}
{"prompt": "How can we make sure the function we are overwriting with LD_PRELOAD is loaded anywhere in memory?", "completion": "which it wants to call inside an external dynamic library, then it will find ours, and not the intended one from libGameLogic. So let\u2019s add some test printf output here, which also prints the bool parameter given to this function. Oh if you define a function like that now, you also need to compile it woth PIC, position independent code, so it can be loaded anywhere in memory. Now let\u2019s try it. Let\u2019s start the game with LD_PRELOADing our test shared object. We go into the game. And when we JUMP, we see the function being called."}
{"prompt": "What is the LD_PRELOAD feature used for?", "completion": "Isn\u2019t that awesome! In fact we set setJumpState to 1 when we start to jump, and when we land it gets set to 0 again. That\u2019s so awesome. Though, there is one tiny problem here. You see, we overwrite this function. And from last episode we know that it would lead to inform the Server of the Jump. So if I log into the game on another computer and look at this character, I see no jumping at all. The server never gets the information that we jumped. And when we remove the LD_PRELOAD again, and now the program uses the real SetJumpState function, we can see the player jumping again."}
{"prompt": "What is the function of the ClientWorld:Tick() function?", "completion": "So that is a problem, or can be a problem, depending on what you want to do. But we deal with calling the intended function when we need to. For now let\u2019s keep it a bit more simple. Remember the GameWorld global variable? Which has references to the currently active player, or all other players in the world, and much more? I think it would be super cool to interact with that object. While investigating the classes I found this Tick() function that exists for a lot of objects. The ClientWorld:Tick is executed multiple times a second, and it calls a lot of other Tick functions."}
{"prompt": "How does the dlsym function work?", "completion": "One of them is the World::Tick, which appears to do nothing. So because it\u2019s constantly called, and it does nothing else, it\u2019s a perfect candidate to be replaced. So let\u2019s do that. But what can we now do in it? So there is a function called dlsym. It optains the address of a symbol in a shared object or executable. And it takes two parameters. A handle and the name of a symbol. The handle could be a handle to an opened dynamic library, but we can also use RTLD_NEXT, which will Find the next occurrence of the desired symbol in the search order after the current object."}
{"prompt": "What is the purpose of LD_PRELOAD?", "completion": "This is actually also the solution for the previous problem, but like I said, we deal with that when ne have to. But just for completeness sake, This allows one to provide a wrapper around a function in another shared object, so that, for example, the definition of a function in a preloaded shared object can find and invoke the \"real\" function provided in another shared object. But we will use it to get the address of the GameWorld symbol. And the GameWorld symbol is an address, where we have a pointer to a ClientWorld object."}
{"prompt": "What steps do you need to take in order to obtain a direct ClientWorld pointer in the LD_PRELOAD environment?", "completion": "Which means GameWorld is a pointer to a ClientWorld pointer. Because dlsym doesn\u2019t know that and just returns a void pointer, essentially an address, we have to cast it to a ClientWorld pointer pointer. And then we dereference that to obtain a direct ClientWorld pointer. And then we should have access to the whole Object and it\u2019s attributes. And we can write something like this. So we take the world object and get the currently active player, which should be us. We can also do this in gdb to figure out what exactly we have to do, and it\u2019s a very fun to explore the objects."}
{"prompt": "What does the LD_PRELOAD feature allow us to do?", "completion": "So the activePlayer is this ActorRef, with a m_object attribute, which is then our player. Or almost our player. We have to cast that IPlayer to an actual Player Object. And then we can for example call the GetPlayerName function to print the name. Or we can access the amount of mana. If we compile this now, and execute the game while we LD_PRELOAD this, we should see the mana and name of our player. And it almost works? We see our name, the character name is \u201casd\u201d, but the mana is 0? That doesn\u2019t look right."}
{"prompt": "What issue was causing the mana attribute to be pushed down in the class structure?", "completion": "Especially because with gdb we can confirm that the player object should hold our amount of mana. So something goes wrong. Let me show you what the fix for that was. So gdb reported these attributes to be of the type std::string, but in reality they were const char pointers. Replacing them makes it work. And why that was an issue is, that the std::string type takes more space in the class structure, than a simple pointer would. So these other attributes of type std:strings pushed down, the for example, mana attribute."}
{"prompt": "How can LD_PRELOAD be used to overwrite functions of a dynamic library?", "completion": "And so based on our header file, the compiler thought the player mana is much further down in memory, than where it actually was. And debugging this, because I have almost no C++ experience and doing this for the first time, took me around 8-10 hours. I\u2019m not kidding. This small change to fix this, blocked me more than a full day worth of work. Thinking about this is just so sad. But on the other hand, I really learned a lot during this process. This is a topic I don\u2019t know a lot about, this is the first time that I really look at C++ objects and classes in memory."}
{"prompt": "What error did gdb display when printing the object?", "completion": "So during this painful process I actually learned a lot. I mean I can\u2019t even summarise all the stuff I tried and investigated in those 10 hours, but the breakthrough came from combining two observations. One was when I was looking at the offset to the mana attribute from the start of the class, where gdb thinks the mana should be, and where our compiled library thinks it should be. AND noticing the gdb error when printing the object, that something is not quite right there. Still took me quite a while to figure out what exactly it is, but yeah."}
{"prompt": "How can we use the LD_PRELOAD feature to modify the behaviour of the client in Pwn Adventure 3?", "completion": "Reversing and hacking can be really painful, but very rewarding if you get it at the end. So what can we do with that now? I promised you a first hack in this video. If you had a close look at the player class, you may have seen an attribute called \u201cwalkingSpeed\u201d. So we could try to set the walking speed to a super high value. So what will that do? Let\u2019s compile the library again, LD_PRELOAD and start the game. So let\u2019s try to walk a little. And whooooooosh. Look at that speeeed. We are so fast that we can even take over our fireballs."}
{"prompt": "How can we access a protected attribute in C++?", "completion": "That\u2019s so awesome. But there are even more attributes. There was also a player health. Can we make us invincible? Let\u2019s try to always set our player health to over 90000. If we try to compile it now, then we can\u2019t access the health attribute directly, because it\u2019s a protected attribute. But you know, there is no such thing as protected by some kind of magic memory, this is just C++ convention and so if we change this in our header file to public, then the compiler allows us to access it and wont throw an error."}
{"prompt": "How can we use LD_PRELOAD to overwrite functions of a dynamic library to change behavior in a game client?", "completion": "And now we can compile it and head into the game. Hahah look our health doesn\u2019t even fit on the display anymore. So let\u2019s go to the chest protected by bears. Thanks to our walking speed hack we are super fast. And now when we try to open the chest for the flag, a timer will start and bears will attack us. But we have so much health now, You can\u2019t do anything!? Muahahah. Look we are invincible! You have died. Killed by a bear. Oh. Well, so you see, it\u2019s not that easy. Apparently the game server trusts the player position sent to the server, and thus we can walk super super fast."}
{"prompt": "What functions are mentioned in the crash information from the fuzzer?", "completion": "Last video we started doing depper crash analysis\u00a0 on sudo and started looking into one particularly interesting case. This crash happened inside\u00a0 of libc, and the backtrace included this interesting function named lookup_function.\u00a0 Let\u2019s see if that is useful for a sudo exploit. Looking through the crash information from the\u00a0 fuzzer. Specifically those which show nss_lookup, in the callstack of the crashes, we can notice\u00a0 different places that ended up crashing in nss_lookup. One is called within some\u00a0 sudoers policy check. Get group id lists."}
{"prompt": "What objects are present in the check_user testcase that causes the crash?", "completion": "And the other one is also sudoers policy\u00a0 check, but more specifically in check_user. Looking from some patterns in the heap analysis\u00a0 info, it\u2019s noticeable that the one crash always had the same objects lined up. While the other\u00a0 crash had a bit more variety with the object. Currently It\u2019s unclear which of these\u00a0 objects, if any, is the cause of the crash. But if we take a testcase from the check_user\u00a0 stuff, we seem to have a lot more consistency. The crashes had all the same\u00a0 objects there. and I prefer that,"}
{"prompt": "What functions does the sudo main call when policy_check is invoked?", "completion": "because heap stuff can be frickly,\u00a0 and this seems to be more reliable. So\u2026 let\u2019s load one testcase into\u00a0 gdb with our poc helper script. Here we break at the overflow location.\u00a0 So let\u2019s continue to run into the crash. In this case we crashed in a strcmp, coming from\u00a0 nss_new_service, nss_loa_library and nss_lookup. This is not the whole trace though. With bt\u00a0 or backtrace we can see the complete one. It all started in sudo main. Which called\u00a0 policy_check, then sudoers_policy_check, check_user, sudo_auth_init, sudo_passwd_init,"}
{"prompt": "How does the libc source code help to understand a crash in nss_load_function() better?", "completion": "sudo_setspent, and then we leave sudo and\u00a0 head into libc. You can see how the address significantly changes and also the file path\u00a0 is not a known sudo source code file anymore. Quick interruption for a\u00a0 public service announcement. When I encounter a function I don\u2019t really know,\u00a0 I really like to use grep.app to quickly look up example usages. And when looking for setspent,\u00a0 we can see for example this snippet of code, which first calls setspent,\u00a0 followed by a loop over getspent. And in the man page of setspent we can read:"}
{"prompt": "What function is used to read entries from the shadow password database?", "completion": "The getspent() function returns a pointer to the next entry in the shadow password\u00a0 database. The position in the input stream is initialized by setspent(). So setspent initializes somehow the shadow database, so getspent can read entries.\u00a0 So this is basically code to interact with /etc/shadow. so it seems like we want to get\u00a0 the /etc/shadow information of our current user. And that makes sense for sudo. We probably want\u00a0 to check the password the user enters for sudo. Now let\u2019s dig into the libc code. First\u00a0 of all we have to know the libc version,"}
{"prompt": "What is the version of the libc library used in the video?", "completion": "which we can find with ldd --version,\u00a0 or executing the libc library. Doesn\u2019t do much, but shows\u00a0 the version. So we have 2.31. Then I\u2019m using the elixir code\u00a0 browser to easily navigate the code. First I tried to find setspent as a file, but\u00a0 only found getspent.c. And in there we only see a define for SETFUNC_NAME setspent. Let\u2019s remember\u00a0 SETFUNC_NAME and that the DATABASE_NAME is shadow. Also it includes nss/getXXent.c. So let\u2019s follow into getXXent.c. There is a function GETFUNC_NAME, but that\u00a0 function is weird. Don\u2019t think it\u2019s related?"}
{"prompt": "What parameters does the nss_setent() function take?", "completion": "So I went back and searched for SETFUNC_NAME\u00a0 directly. we can find a getXXent_r.c. No clue how that relates, some C magic. But in\u00a0 there we can find SETFUNC_NAME as a function. And looking into the calltrace we can see that\u00a0 we call nss_setent, which is also called here. So this seems to match. And this function takes\u00a0 in the name of our function, so \u201csetspen\u201dt. we can also have a quick peak into\u00a0 gdb again, going down the callstack. Here we call nss_setent, and as expected the\u00a0 first parameter is the string setspent. We can also look at the other structs, for example nip,\u00a0 but no values there that we have overwritten."}
{"prompt": "What does the acronym \"SP\" stand for in the context of the NSS functions?", "completion": "Anyway. So we know the function\u00a0 nss_setent is defined in getnssent_r.c. And we know that next we call setup.\u00a0 Setup is called with the function name again and it says here \u201ccycle through the\u00a0 services and run their setXXent functions.\u201d OHHHHHHHHH I FINALLY UNDERSTAND WHY IT HAS XX\u00a0 in the name. setSPent. SP is an identifier. So it should be read as SET  entry. And\u00a0 looking at the SETFUNC_NAME define from earlier we can find tons of function with that pattern. Looks\u00a0 like SP is for shadow files. PW is for PASSWD. GR stands for GROUP. So it seems like this family of\u00a0 functions is used to somehow interact with these different databases of information! I just learned\u00a0 something new about linux! Anyway. Let\u2019s continue."}
{"prompt": "What is the name of the function that the __nss_lookup call takes as an argument?", "completion": "We are now in setup and we passed in the\u00a0 function name. setSPent. And in there we see a call to __nss_lookup, which apparently\u00a0 looks up the first function. We are getting now really close to the crash, so let\u2019s walk\u00a0 a bit more careful. This function calls nss_lookup_function quite a few times. And I don\u2019t\u00a0 know which of the calls resulted in the crash. But all of these calls take the function\u00a0 name and the service_user pointer pointer. So let\u2019s look closer into what\u00a0 this service_user struct is."}
{"prompt": "What is the file used to control the source of password information?", "completion": "It seems to be a linked list, as it\u00a0 has here a pointer to the next entry. Then we have some lookup actions, no\u00a0 clue, and then we have a link to the underlying library object. As well as the name\u00a0 of the service, like files, dns, nis and more. The file we are in right now is called nsswitch.h,\u00a0 and these names actually relate to the values from /etc/nsswitch.conf. Let\u2019s have a quick peak at\u00a0 this file. NSS stands for Name Service Switch and to be honest, first time for me learning\u00a0 about this too. It\u2019s interesting. For example passwd functionality is offered by files. A\u00a0 file. That\u2019s why there is the /etc/passwd file that is the underlaying source for password\u00a0 information. If you for example would have authentication not implemented with the passwd\u00a0 and shadow file, and for example you use ldap,"}
{"prompt": "What are the benefits of using the nss functions of libc for authentication in sudo?", "completion": "then you replace it here. And sudo ,as a software\u00a0 that has to check the user authentication asking for the password, has to obviously look\u00a0 up, \u201chey, where can I find passwd and shadow data for users.\u201d in a basic ubuntu setup it\u00a0 will be provided by these files or systemd, but if you have central user authentication\u00a0 via ldap, it will be provided via ldap. And all of this is handled by these nss functions\u00a0 of libc. Sudo doesn\u2019t have to implement all that logic. It simply can ask with libc functions for\u00a0 a particular user\u2019s data! AMAZING!!!! Anyway."}
{"prompt": "How does the nss_lookup_functions function work?", "completion": "What is this service_library struct? So this\u00a0 contains a name of the service and a pointer to the loaded shared library. As well as a\u00a0 pointer to the next service library. Cool. Now let\u2019s go back to the code. We now\u00a0 call one of those nss_lookup_functions with the function name \u201csetspent\u201d and the pointer\u00a0 to the first service_user entry. Here it is. Let\u2019s read briefly over this code. First we\u00a0 call tsearch, which seems to be a tree search for functions previously requested. And we pass\u00a0 in the function name and a pointer to ni->known,"}
{"prompt": "What is the purpose of the nss_load_library function?", "completion": "the collection of known pointers. I do remember\u00a0 we definetly had crashes where objects on the heap were related to tsearch. So yeah. we might be\u00a0 able to influence this linked list maybe somehow. But let\u2019s continue. So we search for this function and it\u2019s either known, or not known. If it\u2019s known this function\u00a0 seems to be dereferenced and prepared to be returned. But if it\u2019s not known, we now allocate\u00a0 a new known struct to prepare for the function we are about to find out, and we end up calling\u00a0 nss_load_library with that struct. this function checks if the library is 0, which is zero in our\u00a0 case, and then calls nss_new_service. Passing in the name stored in the struct. Now this function\u00a0 calls strcmp and we crashed in string compare."}
{"prompt": "What is the name of the function in which the overflow happens?", "completion": "The ni struct seemed fine, so the cause\u00a0 of the crash must be the database object, but it\u2019s not printable right now. So I set a\u00a0 breakpoint specifically in nss_new_service and restart the process. The first two breakpoint hits\u00a0 are long before our overflow. So just continue. So here we are at set_cmd, the overflow happens\u00a0 here. So any next call to the function could be just before we crash. I continue again and see\u00a0 that it crashes. So we know, the one after set_cmd is the one we are interested in."}
{"prompt": "What would happen if the library pointer name passed to the strcmp function was properly controlled?", "completion": "Redo it again and so here we are. just before the crash, and we can look at\u00a0 database, which has a pointer to library, and that library object was clearly overwritten.\u00a0 And so of course, taking here the library pointer and then passing that name to strcmp, we crash. So let\u2019s think about what happens if we control the name properly THEN this comparison would\u00a0 succeed, and it would return our library pointer. Going further back the nss_load_library\u00a0 has now ensured that ni->library points to an object. So if that would be the case. Then\u00a0 we have this if-case if lib_handle is null."}
{"prompt": "What function does the video discuss that constructs a shared object name with string copies?", "completion": "We overwrite that data too, so we can\u00a0 definitely ensure to set it to null. And look at that. It says here \u201cload the shared\u00a0 library\u201d. It constructs a shared object name with string copies, using the ni->name. And then calls\u00a0 libc_dl_open!!! Damn! that would be an insane goal to reach. Then we could execute arbitrary code\u00a0 when a library we create is loaded. Unfortunately we do not control ni->name in this case. Mhmh\u2026 Well\u2026 maybe we can find a way to control\u00a0 it? Let\u2019s see about this next episode."}
{"prompt": "What is the email address of LiveOverflow?", "completion": "Hey I currently try to review the state of the YouTube channel and that's why I created this survey which would be really amazing if you could fill it out I do want to read as much feedback as possible but all the fields are optional so whatever you give me is amazing I do want to hear from you because I do create this videos for people and so I want to figure out who is actually watching and what would you like to see because it would be a waste of my time and your time if I create videos that nobody wants to see or you know invest more time into the areas that people are actually interested in so if you have ideas or general feedback that is helpful or some criticism that would be really amazing it's all anonymous so I have no clue who writes something obviously you can leave your email address also in there if you want to hear back or whatever you can also write me obviously directly at left overflow gmail.com if you fill out the survey as much as you want it's awesome thanks [Music]"}
{"prompt": "What techniques does the video suggest for analyzing the network protocol of a game?", "completion": "In the last video we developed a TCP proxy in python that allows us to now analyse the network protocol of the game. I think the code we have written is a really good example of why you should know programming when you are interested in IT security. While it does require some experience in coding in the end it was not much code. And the result is, that we now have a fairly powerful tool on our hands to reverse engineer the network packets. So for now we don\u2019t really have to touch the main proxy code and we can focus on the parser function that we can play with. This function has three parameters, but the most important one is data. This is where the TCP payload that either the client or server sent comes in. And last video we also implemented some filters here to only look at data sent by the client to the game server. And our tool is so powerful, because we can now do anything in here. And whatever we change here,"}
{"prompt": "What data changes occur when the player moves or jumps in the game?", "completion": "will affect the output of the proxy. So let\u2019s get started. A the end of last episode I already hinted at this one packet that doesn\u2019t change when we stand still but changes in some parts when we move around, and also changes in a different part when we jump. So\u2026 let\u2019s collect some test data. We see no data changes when we stand still\u2026 When we walk forward or backward we see some changes. Some Left and right walking\u2026 Then also jumping up and down. And notice that I didn\u2019t move the camera, so now also some looking around."}
{"prompt": "What data is contained in the packet that is constantly sent when the player moves around?", "completion": "Which areas of the data was affected by what action, was pretty obvious, but we need to analyse this very accurately. So let\u2019s copy out some samples into our script and look at them. So what can we see here? First of all, all our actions that we did were about moving around. And that packet is also the one constantly being sent. So it\u2019s really not surprising and doesn\u2019t take much guessing that that will somehow contain our position. We also can quickly see that there seems to be two bytes at the start that are fixed. Then when walking around data changes in this region, and then also back there. So this was forward and backwards walking. The walking left and right here is very similar, just the other byte here at the end is changing. This is perfectly consistent with a X and Y position in the world. Just to make it clear, of course X and Y is changing when we walk forwards and backwards or left and right, because it\u2019s unlikely that we are aligned to the axis. In that case the movement would only change one coordinate."}
{"prompt": "What is the size of the data that changes when the character jumps?", "completion": "But what is bothering me a little bit is, that the data that is changing is 14 hex digits, so 7 bytes. That\u2019s an odd number. We would expect something like 8 bytes, 4 bytes per coordinate or something like that. But let\u2019s continue with Jumping. Let\u2019s take out the two other packets. You see that they are longer and have a different ID. So let\u2019s deal with that later. When we jump, essentially moving up and down on the Z axis, only this value changes. And this is 8 digits, or 4 bytes. AS you know, this is a hexdump, a hex representation of the raw binary data of the packet, so two hex digits are one byte."}
{"prompt": "What is the data format of the position packet in Pwn Adventure 3?", "completion": "And cutting the data here also now seems to indicate that the previous two values should indeed add up to 16 digits. So two times 4 bytes. That would also make much more sense. The last test was looking around and there only 4 bytes in the back are changing. Now we can try to label everything with a guess what the data could represent. We have a constant ID that I think means \u201cthis is a position packet\u201d, we have probably X Y and Z coordinates, as well as some kind of looking around data, two constant zero bytes and then something that indicates which key we pressed.,"}
{"prompt": "What does the \"H\" format character in Python struct mean?", "completion": "Cool! So let\u2019s implement a parser for that. I will be using python struct a lot, which can unpack different types from raw binary data. So let\u2019s start by unpacking the packet_id. To do that we simply call struct.unpack with capital \u201cH\u201d as a format character which indicates we want to interpret 2 bytes as an unsigned short integer number. And you can see how cool it is to just write something, save the file and see the changes. This way it\u2019s super easy to learn more about the data. So here is the integer number in regular base 10 of our first two bytes, but when we print it as hex, it\u2019s not quite what we expect. We expected to see 6d76, but instead we got 766d. So this is now a question of how you want to interpret the raw bytes. Either as little-endian or big-endian. For the packet ID it doesn\u2019t matter and I think it\u2019s a bit more comfortable to read the id when it says 6d76, so let\u2019s change it to big-endian indicated by the greater than sign. Cool."}
{"prompt": "What is the purpose of the noop function in the handler dictionary?", "completion": "We will probably get a lot of other packets later, so I thought it would be a good design to define a handler for different packets. So I create a python dictionary with one element so far, and that is supposed to be a function. So h_position is a function that will get the data as parameter. Oh and also a noop, a no operation, function would be cool. Bear with me it makes sense in a second. Because now we can simply try to get the function defined in the handler for a given packet_id, and if it doesn\u2019t exist the default value, in this case the noop function will be returned, and then the function is given the data starting after 2 bytes. So we cut off the packet_id, because now we selected the correct function to handle the data."}
{"prompt": "What is the size of the X, Y, and Z positions in the game protocol?", "completion": "Mh, maybe we implement an \u201cunknown packet\u201d output in h_noop and then we can also test that. So this output is coming from inside our position handler function, but when we jump, and we get these other packets we haven\u2019t looked at yet, we see an unknown packet message. Cool! Now let\u2019s carve out the X, Y and Z position. Each of them are 4 bytes large. So it could be a signed or unsigned integer, or a float. Now if we look at the data again, we can see that it changes quite dramatically, even though we moved just a little bit. If it were an integer I would suspect much smaller changes."}
{"prompt": "What is the length of the data that is returned by the struct.unpack function in the video?", "completion": "So maybe it\u2019s a float? But in the end it\u2019s just a guess and you can quickly test it. If the output makes sense it was probably correct, if not, then try something else. But I think float is absolutely a reasonable assumption here. So we can write X, Y and Z and get the value of struct.unpack. BTW if something returns multiple values in python, you can automatically unpack them into individual variables like this. So our unpack will unpack 3 floats, indicated by fff, which would be 3 * 4 bytes long. So 12 bytes."}
{"prompt": "How is the looking direction encoded in the protocol packet?", "completion": "And then we can print the data nicely with float format modifiers to only show 2 digits after the comma. Now the moment of truth, let me hit the save button. BOOM! Amazing, look at that. Now let\u2019s move around a bit in game. And yeah, the data changes reasonably. And when we jump, or fly, we see that unknown packet for the jump and we see the Z value change. Amazing! We reverse engineered part of our first packet. Now to be honest with you, I\u2019m not sure how the looking direction could be encoded as it\u2019s also 4 bytes but it must be more than one number? But I ignore it for now."}
{"prompt": "What format string can be used to extract the packet ID from the jumping packet data?", "completion": "Let\u2019s do the easier stuff first. How about we have a look at the jumping packet. That\u2019s an unknown packet for us right now. Again, let\u2019s collect a few samples and format them so that we can try to recognize patterns. One thing you might already notice is that when you press space, then you send a 1, and when you release space again you send a 0. Oh by the way, the packet id is missing here because we cut it off when we handed it to the noop function where we printed the data. So we can extract that one byte with struct.unpack using the B format string for one byte. And print it along the remaining data that we don\u2019t know what it means yet. And we can test it again. We jump a bit, and here we go. So what could the remaining packet data mean. WAIT! Isn\u2019t that the packet ID of our position packet? The length of the data would also match. Ohhhh\u2026. So the network protocol is not just sending a single packet with information every time when something happens, it might bundle multiple packets together. So when we jumped it sent jump information together with position information."}
{"prompt": "How do you parse the data in the Game Network Protocol for Pwn Adventure 3?", "completion": "This means we have to change some stuff of our parser. You can do this in many different ways, I chose to just return the data that doesn\u2019t belong to the currently interpreted data. So for example for the jump handler I cut away the first byte and return anything starting with the second byte. For the position it\u2019s a bit more tricky, we have to quickly count how many bytes that is, so that would be 20. So I cut away the first 20 bytes. And for noop, let\u2019s just cut away a single byte. Now we have to place our parsing into a while loop where we always check the length of data,"}
{"prompt": "What changes did LiveOverflow make to the parser code?", "completion": "and we constantly change data to what the handler functions returns. And at some point the parsers has fully consumed the data. Let\u2019s continue reversing more packets with the same methodology. But I also think I wanna make some changes to the code. Like I said multiple times it\u2019s an explorative process and so our tools develop with us, once we figure out new stuff. So I decided to comment out the position print, so we don\u2019t spam the output so much. And to not print unknown packets in the noop function, but instead check if the packet_id is defined in the handler, and if not we print the packet. And we can also I noticed another unknown packet when switching the weapon."}
{"prompt": "What is the difference between the weapon switch packet and the position packet when shooting a fireball?", "completion": "And when shooting the fireball. But isn\u2019t it weird that we see slowly consuming unknown packet data by our loop, when shooting a fireball, but not with the weapon switch? Even though both are unknown packets? Well if you look closely, then you see that the weapon switch is also just one byte indicating the selected slot. Which is consumed by noop. And then after that we find the packet_id of the position packet again and fully parse that. Cool, huh? So let\u2019s quickly create a handler function for weapon select, which is basically like the jump handler, just a byte. Cool! Another packet reversed."}
{"prompt": "What value do the first two bytes of a fireball packet contain?", "completion": "Now what\u2019s going on with shooting of the fireball? Let\u2019s take an example packet shooting the fireball, StaticLink, and the RemoteExploit Sniper Rifle. And then compare them. One really odd thing is that the fireball packet is longer. Before that all packets had a defined size, so how do we know that fireball is larger than the Static link or sniper rifle? So the first two bytes are again the packet_id, so we know this must be indicating that we are using a weapon or spell. And then we have what looks like a byte with a value that is always different. 0x10, 0xa,"}
{"prompt": "What data is contained in the packet that starts with 0xD and ends with two 535s?", "completion": "0xd. Then comes a 0 byte and then what looks like the start of some data. And that data is very different. Though when you peak at the end of the packet, you notice that they are the same. So let\u2019s try to lign that up. OH! That is another position packet! We didn\u2019t move between shooting, so we know how to parse that data and can ignore it. When looking very closely and comparing the packets I noticed more similarities. It\u2019s here sarting with 82b, and ending in 535. And ligning that up looks like this. Because we know that a positon packet would start here after these two 535, we can conclude that that is definetly an end of another packet."}
{"prompt": "What is the length of the shortest packet in the game network protocol?", "completion": "Which means this 6672 is another small 1byte large packet. And StaticLink, is like jump, an action that can be started and held for a bit and released again. So it\u2019s probably related to that. Let\u2019s create a short handler for that. THen back to our weapon data. At first I didn\u2019t know what that part stands for, but when I looked in another direction and fired another fireball, and compare that data, I noticed that this part changed. So that\u2019s probably also some kind of shooting direction data. But still, how do we deal with the different length packets. Well we know there is a number at the start that is different for all three of them. The largest one is 0x10 and is also the longest packet, then comes the second longest packet with 0xd and the shortest one is 0xa. And when you count the bytes it suddenly makes sense! This is the length.There are 10 bytes, here are 13 bytes and here 16. And the trained eye might have also already recognised that that is ascii text. When you read a lot of hex values for example because you play too much CTFs and spend time in debuggers,"}
{"prompt": "What data type is used to store the length of the text data?", "completion": "you start to recognise when data is text. It\u2019s just a skill you develop over time. So let\u2019s implement that handler, first we extract the length. I assume that the length is actually not just a single bytes but a short, so two bytes unpacked with \u201cH\u201d. Then we know that the name starts after the second byte up to the length. We can use our awesome proxy to immediately test that. When we shoot something we see the name, but of course the data parsing is still missing the last 12 bytes of data. So we don\u2019t really know how to interpret the direction yet, might be same as the position data rotation, or looking direction, but we just ignore it for now and return the data after all of that. And when we test that,"}
{"prompt": "How do you implement variable length packets on a low level?", "completion": "we get a beautiful output when using a weapon. Also you can see now very well how the static link is toggled on and off depending on how long you hold the mouse button. Awesome! We just parsed a variable length packet. Before we end I just would like to mention something. Maybe you find it weird how I so quickly understand how to parse that data. But you know there are not that many options how it can be done. If you ever think about how you would implement it on this low level, then this is pretty much the only option you have. You know the basic data types like integers,"}
{"prompt": "What techniques are used to build packet structures in game network protocols?", "completion": "floats, ascii characters, and out of these you build more complicated structures. And then there are also typical intuitive and very obvious techniques such as type-length-value encoding. And this is pretty much what we had here. The packet_id is indicating the type of data, so like a weapon_shoot type and because of the name that can have different lengths we need also sth that tells us the length, and then the data itself. you just have to think about it for a bit and then I think it\u2019s super obvious. At least when there is no addditional crypto or compression layer involved."}
{"prompt": "What game engine is Pwn Adventure 3 built on?", "completion": "Now that we played the game to learn more about the game mechanics in the first episode, and that we have set up our own server in the second episode, we can finally start gathering technical information about the game and start reverse engineering the client. The very first lead that we get is provided on the official website \u201cOur hackable components all live in their own sandbox, (the net code and game logic are completely custom), so you won't have to hack the engine (Unreal 4) itself!\u201d. That is already very good information and we will keep that in mind."}
{"prompt": "What strategies can be used to gain an overview of a system before attempting to hack it?", "completion": "So my plan right now is, not immediately to try to hack anything. That\u2019s stupid. I have no clue what to do. So first I want to get a good overview of the whole thing. And then that will lead to information I can probably use to dig even deeper. I\u2019m essentially doing information gathering or reconnaissance. And sure I will poke certain parts that I find intriguing and have a quick deeper look. But it makes no sense wanting to jump into a hole right away, if you don\u2019t even know where the holes are."}
{"prompt": "What is the purpose of the find_unique.py script?", "completion": "We also have 3 different clients, a windows, linux and mac client. And obviously the code had to be compiled for each one of them differently. But also probably not every file is different. So I thought it might be interesting to look at the differences and similarities. To do that I wrote a simple python script that simply walks the directory tree to get all files, and then creates hashes of all of them in order to figure out which files are identical and which files are unique. So let\u2019s try this out on the clean client files downloaded from pwnadventure.com."}
{"prompt": "What is the purpose of Mono in the Pwn Adventure 3 game?", "completion": "And we can see quite a lot of files are identical. Some .dlls, some config files. Nothing sounds too interesting. Maybe you wonder why there are .dlls in the linux and mac clients, because dlls are for windows, that\u2019s because this game is based on mono. And mono is a Cross platform, open source .NET framework. So this allows you basically to write windows .net applications and compile them to run on mac and linux. The unique files are also not that interesting, you can see different binaries for the different systems."}
{"prompt": "What type of file is used for dynamic libraries on Mac and Linux?", "completion": "So dylib is a dynamic library for mac, while on linux it\u2019s an .so file a shared object. But the clients we just compared are essentially just the launcher. The actual game is downloaded during the update process. So here I have gathered all three updated game directories, and so let\u2019s run the script on it as well. Each fully updated client is around 2gb of files each, so this will take a little bit to run. Hashing those big files takes a few seconds. Ok so now we have a lot more files to compare."}
{"prompt": "What file extensions are used for the GameLogic library on different operating systems?", "completion": "But they are all pretty boring. A lot of .ini files, so these are mostly config files and then also a lot of .pak files, these are, based on the name, I assume, the actual 3D files and stuff like that. Though it\u2019s a bit weird to me that other resource files, such as MapTerrain.pak are different on each system. I would have assumed all of them are the same. But whatever. Nothing really looks that interesting here. Though this way you might discover a file that is called \u201cGameLogic\u201d. A GameLogic.ddl for windows, a GameLogic.dylib for mac and a shared object libGameLogic for linux."}
{"prompt": "What process ID is associated with PwnAdventure3?", "completion": "Mhmhm\u2026 But let\u2019s have a bit more dynamic approach. Like I said in the first video, I will mostly do this on Linux, so let\u2019s start with that and execute the Launcher. But the Launcher is not the real game, so let\u2019s just hit play and wait for the actual game to have started. Once it\u2019s on the main menu, we look at the process tree with pstree and some flags to get more details. Here it is. PwnAdventure3 has this process ID. The children of this process here are threads, ondicated by the curly braces."}
{"prompt": "What framework is often used in games for SDL Timer?", "completion": "And each thread was also given a meaningful name, whichs quite awesome. So we have an async I/O thread, some message passing stuff, the main thread I guess, RT, remote,(?) or real time(?) heart beat, a render thread, SDL Timer, and SDL is a framework often used for games, so no suprise here, a TaskGraph and I don\u2019t know. Okay. Let\u2019s take the process ID and look for it in the regular process list. So this binary that was executed lies in the launcher directory, but then PwnAdventure3_Data, PwnAdventure3, PwnAdventure3, Binaries, Linux,"}
{"prompt": "What is the name of the file used to directly start the game?", "completion": "and then the file is called PwnAdventure3-Linux_shipping. Let\u2019s exit the game and see what happens when we call it directly. We see some kind of debug or log output, and the game is actually starting! So we have just bypassed, so to say, the launcher or updater and figured out how to directly start the game. Next let\u2019s look at the /proc file system. That\u2019s magical linux stuff, it looks like folders and files, it feels like folders and files, but is actually a bit more magic than that. However we can explore it like files."}
{"prompt": "What process ID is the game running under?", "completion": "So we go to /proc and the process ID of our currently executed game. And with ls we can see the available folders and files. For example here you can check all the environment variables, the commandlines on how the program was executed, but also the memory map of the virtual memory of this process. The output is huge for this game, so let\u2019s pipe it into `less` so we can scroll more nicely. So up here we have our game binary mapped into memory. Then some memory areas that are used for something else, probably a lot of different heaps and mapped memory of the game files and stuff like that."}
{"prompt": "What programming languages were used to create the game?", "completion": "Oh damn there are a LOT. Let\u2019s just skipt o the end with SHIFT+G. Ok so here are the addresses of our stack, the linux dynamic loader and linker and if we scroll up a bit we find some other dynamic libraries used by the game. Lib thread, libdl, and the libGameLogic again. Interesting! lib rt, libm, and libstdc++. Oh so we might actually have a game written in C++ here. Libcrypto, mhmh. We can also search for \u201cmono\u201d in here with / mono Enter. And then with n and SHIFT+n we can search for it. Though it doesn\u2019t appear in this process."}
{"prompt": "What type of library is libGameLogic.so?", "completion": "So it looks like only the launcher is written in .net using the mono framework, the game itself is not. Let\u2019s have a quick look at the binaries themselves. Let\u2019s start with the \u201cfile\u201d command. So the main game binary here is a 64bit executable, it\u2019s dynamically linked and stripped. So no debugging information available. With ldd we can see which dynamic libraries it requires. And here we can also find the libGameLogic.so again. Most of the other libraries are system libraries, so these just offer basic functionality like threading and crypto functions, but the gameLibrary most certainly is something that has to do with the game itself."}
{"prompt": "What are the three standard descriptors in the /proc file system?", "completion": "Obviously. If we check the file output for that binary, we see that it\u2019s a shared object, so not a standalone executable, it\u2019s also dynamically linked and is NOT STRIPPED. Damn. So that means we get a lot of debug information. Before we leave the proc filesystem, let\u2019s quickly check the fd folder. That folder contains a list of all the currently opened file descriptors and to which file they point. Which means this is a list of all the files currently accessed by the game. 0,1 and 2 are obviously stdin, stdout and stderr, so pretty standard, but all the other ones are other files."}
{"prompt": "How can we find the process ID of the game launcher?", "completion": "As you can see most of them are the .pak resource files. Let\u2019s try to head into the game. Connection Error. Failed to load master server certificate. Oh oh. I guess it wasn\u2019t that easy to bypass the updater and make it work? Let\u2019s see if we can fix that. We execute the launcher again, head into the game. And then verify that now we can connect and find that server certificate. Yup. ok\u2026 so let\u2019s find the process id of this process now, by listing all processes and grepping for pwn, and then we go to cd /proc/"}
{"prompt": "What command can be used to read environment variables in the Pwn Adventure 3 process?", "completion": "the process id. Now let\u2019s see if the process was executed with any special command line arguments. We can do that by reading the cmdline file. But nope, it\u2019s just the binary path, which is always the first command line argument. No additional ones used. Then let\u2019s check the environment variables. You can also cat that file, but the file is not pretty, the variables are null byte seperated. But we can pipe the file into sed and use a simple replace rule to match all null-bytes and replace them with newlines."}
{"prompt": "What ports does the game use to connect to the server?", "completion": "Now we get a nice formatted output. But I didn\u2019t see any special environment variables either. Also the current working directory is the same as from where we launched it previously. So I just played around with it a bit and simply went into the folder of the binary and executed it from there. And then it worked. Oh well. There is me trying to be smart. Anyway. Let\u2019s do one last thing, and that is investigating the networking side. To do that I drop into the game and start by checking netstat. With netstat and -a for Showing both listening and non-listening sockets, as well as -c to continiously print connections, then grepping the output for pwn, we see that the game periodically connects to master.pwn3 on port 3333 and 3002."}
{"prompt": "What is the port number used for the game server in Pwn Adventure 3?", "completion": "Port 3333 is the master server, as specified in the server.ini file, but port 3002 is actually the game server, but master and game server are on the same IP, so instead of showing game.pwn3 it shows master.pwn3. Cool. Next let\u2019s exit the game again and open wireshark. Then monitor any interface and filter for all tcp packets to port 3333 and filter for only packets that contain a payload. So where the tcp length is larger than 0. Then launch the game again. And I also log in with an account. If we peak into the content of the packets,"}
{"prompt": "What type of data is being sent between the client and server?", "completion": "it looks like binary and we can\u2019t immediatly see what it stands for. It\u2019s certainly not like HTTP human readable json data or sth like that. Howeve ther are a few ascii strings in there, which is an indication that it might not be encrypted? \u201cGhost in the shellcode\u201d. That was the name of the CTF this was part of. However these packets going from the client to the server, with all the same size, change a lot. So that looks more like encrypted content, or maybe just compressed. But we did see some libcrypto earlier, so yeah, we don\u2019t know yet."}
{"prompt": "What protocol is used in the payload of the TCP packets sent by the game server?", "completion": "Now let\u2019s switch to port 3002, which we saw in netstat to be assigned as our game server. There is a lot more action here. The game constantly sends updates to the server and receives updates. Of course it\u2019s an MMO so we expect a flood of packets. Let\u2019s go back to the start. Wireshark tells us that these are some weird packets. However that doesn\u2019t look right to me at all. Wireshark tries to guess and decode certain protocols, but it looks like it might be something custom. Of course layers below, the ethernet, TCP and IP layer are ok, just the payload of TCP is probably something custom."}
{"prompt": "What is the TCP payload size of the packets sent in the game?", "completion": "So in order to not get wrong decrypted protcols I go into the settings and disable all enabled protocols, and just enable ethernet, ipv4, and TCP. Ok that looks less awful now. So these packets are much smaller, which also makes sense. With every little change you want to inform the server and vice-versa. All these packets with size 70, are actually just 2 bytes of data of actual TCP payload. The values changing here belong to the ethernet, IP and TCP protocol layer. For example that part here is a timestamp."}
{"prompt": "What data is the client sending to the server?", "completion": "So that probably doesn\u2019t interest us. We probably want to focus on the data. And the server just sent us a lot of zeroes. OK here we have the first time I think, the client sending something to the server. Actual ascii data, so that doesn\u2019t look encrypted either. But I don\u2019t know what it stands for yet. \\After that it sends a huge bunch of packets with the same data. Mhmmh.. Maybe we see nothing happen because nothing happens in the game? Let\u2019s go down where there is more action. Let\u2019s try to do some stuff."}
{"prompt": "What indication is there that suggests the game traffic is not encrypted?", "completion": "Then we observe the traffic while playing the game. Walking around doesn\u2019t immediately show a change, however jumping triggers a slightly larger packet. And actually it seems to trigger two. One for initiating the jump, and one for getting back onto the ground. Because of walking and looking around, we can also see some slight changes in the previous packets. So this is an indication that it\u2019s not encrypted and it might be simply our position in the game world. And jumping added something to it, but a lot of it stays the same, so it might be something like \u201cI jumped at this position\u201d."}
{"prompt": "What tools are mentioned in the video as helpful for investigating the game?", "completion": "And \u201cI landed on this position\u201d. I think we already learned a lot about the game today. No worries, I won\u2019t show every little detail I play around with, but it was important to me to show you that it\u2019s important to investigate, and that you can slowly and incrementally learning more about the game, how it works and that can be fun too. Also btw. Make notes of these things. While doing this I was writing down what i did and what I found, because this way I don\u2019t forget a week later what I already discovered."}
{"prompt": "What version of GitLab was used in the Flaglab challenge?", "completion": "During the Real World CTF we had to decide which challenges to try and which not to. Flaglab was listed as a web challenge and had the following description: \u201cyou might need a 0day\u201d You get a link to a hosted website as well as a download link. It turns out that there was a GitLab hosted and from the download, which contains a docker-compose file, it tells us that it\u2019s gitlab version 11.4.7\u2026 So we quickly searched for how old that version is and we found this blog post from 21. November about this release."}
{"prompt": "What type of vulnerability was exploited in the \"flaglab\" challenge?", "completion": "Remember that we were playing on 1. December so we thought: \u201coh crap. That seems like the latest up2date version. We won\u2019t ever find an 0day in this huge codebase. Let\u2019s not waste our time.\u201d Turns out, we kinda f\u2019ed up. During a post-CTF dinner with other teams, some people from RPISEC told me that it was NOT the latest release, there was a 11.4.8 AND the commit history of that newer version reveals several security patches. And one of them, the SSRF in webhooks was even by nyangawa of Chaitin Tech, which is the company that was organizing this CTF."}
{"prompt": "What changes did the author make to the docker-compose file?", "completion": "Knowing all that, it was actually a super simple challenge. And I\u2019m soooo mad that I gave up on this challenge so quickly, because 5 more minutes of research would have been enough to lead me down to a path of solving this. Anyway\u2026 after the CTF I sat down and I tried to use this knowledge now to solve this challenge. Okay so first we have to set everything up. I noticed that in the docker-compose file some absolute paths are used, so I changed them to relative paths. These folders will be mounted onto this path inside of the docker container."}
{"prompt": "How do you set up a HTTP proxy in Chrome?", "completion": "We can also see here that a flag file is required that is loaded into the root of the filesystem, as well as some other password file. Then we can simply type docker-compose up to pull the docker images, which during the CTF would have taken ages because of Chinese Internet. Once it\u2019s all downloaded the dcker container is starting up and gitlab starts to do it\u2019s setup magic. Which takes more time. But looks like it\u2019s done now, we see here network logs. Then I start Chrome with some parameters to set a HTTP proxy."}
{"prompt": "How can you intercept requests to 127.0.0.1 in Burp?", "completion": "From the docker-compose file you can also learn that the http port 80 is mapped out to port 5080, so let\u2019s try to open the page in chrome. But I haven\u2019t started the proxy yet, so let me start Burp and here we go. Btw I wasn\u2019t able to intercept requests to 127.0.0.1 at first, and I\u2019m not sure exactly why, I checked the excluded ranges but that wasn\u2019t it, however I found out by specifying a fake domain in /etc/hosts for localhost, so localhost.com, chrome will do the request over the proxy and we can see here the requests in the history."}
{"prompt": "What version of GitLab was vulnerable to the CVEs used to achieve remote code execution?", "completion": "Okay. Now that we are set up we have to find the bug to exploit. Like I said in the beginning we thought it was an up to date version, but in fact there was a newer version 11.4.8 with several security issues fixed. And one even referenced Chaitin Tech who organized the CTF. We also know that the flag is in the root of the filesystem, so we need a file disclosure vulnerability or a remote code execution. So let\u2019s have a look at the patches. To do that we can simply go to the official gitlab repository and search for the tag with the 11.4.8 version."}
{"prompt": "What type of vulnerability was fixed in the security patch related to the project integrations?", "completion": "Next we can look at the commit history to look for security patches and we can immediately find these merge commits of security patches. A SSRF issue with ipv6 in webhooks, a xss which is rather uninteresting and a crlf issue, carriage-return/line-feed, so a newline injection. Now we can have a quick look at them. Here is the SSRF issue with ipv6. \u201cFix SSRF in project integrations\u201d The cool thing about well documented and structured software projects is that developers write tests! So we can just scroll down to the tests that will make sure no regression of this bug reappears."}
{"prompt": "How can an IPv6 URL bypass the blocked_url check in GitLab?", "completion": "These tests basically tell us how it was possible to exploit this issue. So apparently ipv6 URLs like [0:0:0:0:0:ffff:127.0.0.1] bypasses the blocked_url check. This is a special ipv6 address to embed an ipv4 address. Cool! The other issue was \u201cFix CRLF vulnerability in Project hooks\u201d. And also scrolling down to some tests, we see it was simply about urls with newlines. Either URL encoded as %a or simply regular newlines. So now the question is, do these issues make sense and help us in any way to exploit gitlab?"}
{"prompt": "What types of workers are vulnerable to this exploit?", "completion": "Yes! This can be turned into a remote code execution. It\u2019s actually a very typical security issue. It\u2019s a SSRF, a server side request forgery which you can use to target the local internal redis database, which is used extensively and very typically for different types of workers. And so you can push a malicious work package that leads to a arbitrary code execution. And gitlab was exploited like this several times before. It\u2019s a known CTF challenge and there are many bug bounty writeups about this topic."}
{"prompt": "What technique is discussed in the video write-up?", "completion": "It\u2019s difficult for me to remember where I saw this technique the first time but I believe it was Agarri, Nicolas Gr\u00e9goire, in like 2014 or 2015, but I definitely also read several bug writeups over the years about it. So every web pentester and web bug bounty hunter should actually know this. But let\u2019s first check if we can trigger a SSRF somewhere. At first I thought about targeting webhooks, which can be used to specify a URL that gitlab will send a request to when things happen on the repository, but specify a localhost URL instead, but when I clicked on create new project I noticed the import project option."}
{"prompt": "What type of URL can be used to import a repository into GitLab?", "completion": "And here are multiple ways to import a repository, one being from a git repository URL. And here are a few examples we can use a http, https or git URL to enter a repository. And so for example we could try to enter localhost here instead, so 127.0.0.1 and try to import from there, we get an error that the Import url is blocked. Requests to localhost are not allowed. But we can try the ipv6 bypass which we have found in the patch. I a;ready went ahead into burp and put the request to import this URL into the repeater and replaced the URL with the ipv6 version."}
{"prompt": "What command is used to get a shell inside of a Docker container?", "completion": "I also added port 1234 here, for a reason you see in a second. To test this SSRF we need to get into the gitlab docker container. So docker ps to find the running container and then we can do docker exec with -it, to keep STDIN open and create a pseudo tty terminal, specify the container id, and execute /bin/bash to get a shell. This process is now running inside of the container so we have a shell here. Netcat is not installed so we first have tip apt update and then apt install netcat. Once this is done we can simply netcat and listen on port 1234."}
{"prompt": "What is Redis and how does it work?", "completion": "Next we go into burp repeater. We have to adjust the name of the project because we created it already and so for a new project we need a new unique name. and when we send the request to import this repository, after a short moment, we receive an HTTP GET request to the URL that we have specified. Awesome. SSRF to localhost confirmed. Now we want to target redis with this. Redis is an open source , in-memory data structure store, used as a database, cache and message broker. And it works basically with key and value pairs."}
{"prompt": "What port does the Redis server use for communication?", "completion": "And the protocol it uses to communicate is absolutely simple. It\u2019s a line based command protcol. With ps we can find the redis-server command and the port. 6379. And then we can use netcat to connect to it. And as you can see, we can enter any invalid commands and redis will simply inform us from it being wrong. Even when you enter valid but incomplete commands, it just responds with an error. Let\u2019s try a valid command, let\u2019s set the key liveoverflow to test, that went OK, and send more garbage, and now we get the value of liveoverflow, and here it is."}
{"prompt": "What happens when you send a HTTP GET request to Redis?", "completion": "Test. As you know, netctat simply opens a TCP socket and we are sending here simple ascii payloads to redis. HTTP is also a simple ascii text based protocol. And some really smart people realized, well\u2026 then\u2026 what would happen if you simply send a HTTP GET request to redis? Each line of the HTTP get request would then be a redis command, no? To test this we can simply copy the GET request from the SSRF and paste it into the netcat session with redis. And we see an error, wrong number of arguments for \u2018get\u2019 command, which makes sense,"}
{"prompt": "What technique is used in security attacks to talk to Redis instances via HTTP?", "completion": "because GET is a redis command, right? But then we also somehow drop back to the shell\u2026 let\u2019s connect again and do it line by line. GET, and we see the error. And next the Host HTTP header Host :... boom. Connection dropped. Because SSRF to redis is such a huuuge issue, redis has actually introduced a fix where they basically try to detect an arriving HTTP request. This callback is bound to POST and \"Host:\" command names. Those are not really commands, but are used in security attacks in order to talk to Redis instances via HTTP, with a technique called \"cross protocol scripting\" which exploits the fact that services like Redis will discard invalid HTTP headers and will process what follows."}
{"prompt": "How can newline injection be used to bypass Redis' protection against POST and Host headers?", "completion": "As a protection against this attack, Redis will terminate the connection when a POST or \"Host:\" header is seen, and will log the event from time to time. So you should maybe check your redis logs for this warning. If you see it, you have some big issues. So that\u2019s why this connection is dropped here at the Host: But\u2026 This is a get request, and GET is actually a valid redis command. so if we can somehow get redis commands infront of HOST, then we could still execute some. And this is where newline injection could help us."}
{"prompt": "What is sent when a git clone command is used against a repository?", "completion": "Commands have to be at the start of the line, so the idea would be to simply use newlines in the GET path, and if that works we could inject commands before the host header. But when I tried that with a few lines to test it, I noticed that no request arrives. I don\u2019t have the time to dig into the code why, maybe this particular request was already protected against this. Damn\u2026 But I had another idea. The supported protocols are http, https and git\u2026 I actually have never looked into how the git protocol looks like and what is sent when you try to git clone this repository, so I simply used netcat again, and performed a git clone with a git url to localhost and that port and this is what we get."}
{"prompt": "Q: What technique did Jobert use to achieve code execution in Gitlab?\nA: Jobert used a technique of exploiting the Gitlab queue for system hooks and registering a Gitlab shell worker to execute a command.", "completion": "Netcat receives some weird data, git-upload-pack and that url path ere. test/protocol.git. So we can control this part and maybe newline injection works there. Let\u2019s try it! I go to burp again, change the protocol from http to git and check if netcat will receive it. One moment please\u2026 there we go. We receive it and the newlines are there. Awesome. Now we just have to figure out what we can send to redis to get code execution. Luckily, like I said, gitlab had this issue multiple times before so we can find an awesome writeup by jobert where he shared this technique of using the gitlab queue for system hooks and registers a gitlab shell worker which eventually will execute this command here."}
{"prompt": "What type of issue was encountered when running the Redis commands in the Docker container?", "completion": "In this case whoami and sends it via netcat away. Cool. So first I quickly check if we can reach my outside laptop from within docker and so I lookup my IP and setup a netcat listener, and then from inside the docker container I try to connect to there, and yes that works. So now we just have to copy those redis commands, I noticed that each command has to have some spaces infront, because for whatever reason they get swallowed by something, and I also added a few execs, because otherwise the last command would be invalid just because of how the ssrf sends this."}
{"prompt": "What CVEs were combined to achieve RCE in the \"flaglab\" challenge?", "completion": "And of course very important, we replace the payload with cat /flag and send the output away to my laptop with netcat. Now we just have to execute it, wait a moment and BOOM! The flag arrives. Darn this was soo simple. After having heard from the guys at RPISEC that 11.4.7 was not the latest version and there were security issues reported by chaitin about ssrf, it was just a matter of maybe 2 or 3 hours. I had to fight with some setup issues and stuff never goes smooth. But it was all straight forward regardless."}
{"prompt": "What are two popular wargames for learning IT security?", "completion": "Capture the Flag, hacking competitions, are awesome to learn hacking. And teach the most valuable skills needed for various IT security jobs. My introduction to IT security was the strip CTF and then wargames such as io smashthestack or w3challs. They are not the best resource to learn security, nowadays I would point at picoCTF and overthewrite, but they were fun! There is a reason why modern schools move away from teacher-centred teaching. It seems efficient, but it doesn\u2019t engage students. To become an expert in IT, you just need to accumulate thousands of hours doing IT."}
{"prompt": "What are some of the debugging tools mentioned in the video transcript?", "completion": "And the competitive and playful environment by CTFs provide the motivation and energy to spend countless hours on various technologies. And maybe some beginner challenges like a buffer overflows from 1995 seem out of date and useless, in the process you learn MUCH MORE. You learn how to use gdb, you understand memory and assembly, you start to learn C and system programming, you learn about other debugging tools such as ltrace and strace, about processes and the proc filesystem, and about linux permissions like setuid."}
{"prompt": "What challenge did many teams solve during the DEF CON Qualifiers?", "completion": "And this is HUGE! The amount of knowledge you acquire just along the way is crazy. It\u2019s the old saying, \u201cThe path is more important than the goal\u201d. The alternative would be, that I have to read up on those tools directly, maybe read a book. But that is F\u2019n BORING! Why not just learn all of this, while playing a game? So let\u2019s explore why CTFs are awesome! Let\u2019s look at a bit more up to date example. Checkout for example the challenge uploooadit from the DEF CON Qualifiers, it was a web challenge that many teams solved."}
{"prompt": "What is a HTTP request smuggling, or HTTP desync attack?", "completion": "Here for example the writeup by BullSoc. When you read the source code and poke around at the application, you can find out that some errors are coming from gunicorn, and other errors come from haproxy. Which gives you some information about the overall system architecture. And the challenge turned out to be a HTTP request smuggling, or HTTP desync attack - against this combination of HaProxy and Gunicorn. If you do casual google research you might even find a writeup by nathan davison describing one technique for haproxy, which you can try to apply here."}
{"prompt": "What is an example of discovering unintended solutions through research in a CTF challenge?", "completion": "But a challenge like this, which forces players to do research, might even lead to the discovery of unintended solutions, because many players do not just read blog posts by other people, but dig into the source code of the software used, and find new vulnerabilities. Ultimately pushing their own knowledge AND the field forward. It\u2019s worth mentioning that I also tried to use the Burp plugin that automatically scans for this issue, but it didn\u2019t find it. At least with default configuration. So this challenge is great to learn about and execute your own HTTP desync attack."}
{"prompt": "How does the Magic Tunnel challenge test an individual's skills?", "completion": "And it teaches you to not rely on tools but to do it yourself. So this was pretty introductory. It\u2019s a challenge where as a beginner you can learn something new, or where I, somebody who works in security, can reflect on myself, and ask \u201cwould I have found this, if this was the setup by a client asking for a pentest\u201d.. Mmhh? Ask yourself. Would you be able to find that? Next let\u2019s look at something more advanced. For example this Magic Tunnel challenge. It was a website, a photo album where you could enter an image as a URL, and then the website would download it and show it to you."}
{"prompt": "What is a typical web security vulnerability worth reporting?", "completion": "That\u2019s a very typical web application feature, for example on imgur when you want to add a new image, you can also enter a URL to download it from. So let\u2019s checkout Carolinas writeup of this challenge. First she noted that there is a Local File Inclusion vulnerability. If instead of providing a URI with http://, but you enter a URI that starts with file:// the web application will read a local file to you. Like /etc/passwd. Cool, this already is a typical web security vulnerability worth reporting."}
{"prompt": "How can a user find out which web framework is being used by the server?", "completion": "But the goal for this challenge was to escalate further. And you could use this vulnerability to examine the server. So Carolina writes, you could read from /proc/self/cmdline to see the commandline of the server process. Which turned out to be a uWSGI server. And it was listening on local port 8000. When you send your HTTP requests to nginx, it communicates internally with the webapp using uWSGI on port 8000. You could also figure out that the web application was a django app, the python web framework django, which has a typical folder structure and thus you can now leak most of the source code."}
{"prompt": "What is the attack idea discussed in the video for exploiting a local file inclusion vulnerability stemming from using Pycurl?", "completion": "In there you can also find the reason for the local file inclusion, which stems from using Pycurl. And now the challenge gets actually crazy. Nginx talks to uWSGI via a special protocol and it supports a few features, such as the \u201cloads the specified file as a new dynamic app\u201d. The attack idea is now to use the request sent by Pycurl and target it\u2019s own local port 8000, performing a SSRF, Server Side Request Forgery, and make uWSGI execute an arbitrary script. Problem is, that this is a special protocol and you can\u2019t easily send those packets."}
{"prompt": "What technique does the attacker use to smuggle the malicious code into the web application?", "completion": "But then she abuses a trick, where she used the gopher:// protocol to smuggle it in. To summarize. By making the webapp download this image URL, it will use gopher to talk to local port 8000, and this portion basically is a smuggled uWSGI packet, making uWSGI executing a script like /tmp/test.py. Because this website downloads images and you now know the location of those downloaded files, you can place a reverse shell there and execute it. You get remote code execution and can read the flag. This exploit is totally realistic."}
{"prompt": "What might make it harder to identify security vulnerabilities in a real-world application compared to a CTF challenge?", "completion": "Anybody who says it\u2019s not, is stupid. It might be rare, sure, but that doesn\u2019t matter, IT. CAN .HAPPEN. And if a client pays you to find shit, they expect that you are able to do so. And keep in mind, in a real app there is so much more functionality, which might make it even harder to identify. So THIS CHALLENGE is easier than it would have been in the real world, which means, if you cannot solve this as a CTF challenge, you are unfit to do real world work. I don\u2019t actually mean that. Because people miss stuff all the time."}
{"prompt": "What are some challenges you can learn from with CTFs?", "completion": "Everybody has a different skillset, and everybody constantly has to learn. But it\u2019s a good mental exercise. And CTFs constantly remind me, to not be a lazy ass and sit on an OWASP Top 10 checklist. always dig deeper. I think that is expected of me in my job. Let\u2019s have a look at a similar challenge. But this time in an actual real application. The FlagLab challenge. This was just plain GitLab. It was a real world application which had a similar security issue and I made a whole video about that.."}
{"prompt": "What protocol was used to smuggle a REDIS command to the REDIS server in the example mentioned in the video transcript?", "completion": "But there you also had a Server Side Request Forgery, and to exploit it you had to use the git:// protocol to smuggle a REDIS command to the redis server. Similar to how in Magic Tunnel you used gopher:// to smuggle uWSGI packets. You see, those are the same principles and ideas just executed on different technologies. I bet that 99% of all web developers who ever used nginx with uWSGI, or REDIS, have noooo clue what exactly they are using. And more importantly, the risks the setup has if there is a SSRF."}
{"prompt": "What fundamental principles should a web developer know in order to identify and execute them in the real world?", "completion": "There is an argument to be had that they don\u2019t have to know this, it\u2019s not their job. True?! But for myself, I don\u2019t care what the average is. I want to be better. I want to be the web developer who knows this. But those two examples should also show you, that the goal is not necessarily to know all the different things, but to learn about those fundamental principles and practice them, so that you can identify and execute them in the real world on real targets with all kinds of technologies. When we look into Carolina\u2019s conclusion for Magic Tunnel, we learn that she and her team didn\u2019t actually solve this challenge,"}
{"prompt": "What is uWSGI and what can it be used for?", "completion": "but thanks to other writeups she was able to work through the solution afterwards, and learn a lot about how uWSGI works. And this is where we get into the next important part of CTFs. The writeups. The fact that they weren't able to solve it during the CTF is irrelevant. Playing the CTF is just mostly for fun. But having worked through this challenge afterwards, Carolina now knows a bit more, and is now a bit more skilled than other people. I say this all the time, it\u2019s normal not to solve challenges."}
{"prompt": "What are two benefits of reading challenge writeups as opposed to playing the CTF?", "completion": "It doesn\u2019t matter. Reading writeups and working through solutions is as much part of CTF as playing the challenges themselves. I would even argue that reading the writeups is MORE important for learning, than playing the CTF itself. Solving a challenge often means you already had the ability and skills to do it. But not solving a challenge, or just BARELY solving it after 12h of work, THEN you learn something new. If you find yourself solving a challenge every hour, you do it wrong. You are just getting dopamine kicks, which is fun too, of course, I do the same, but you are not learning anything."}
{"prompt": "What are some of the benefits of participating in CTF challenges?", "completion": "Good CTF challenges teach you about issues and techniques that are usable when doing real world work. They teach you about vulnerability classes you should know about, but also teach you about various technologies which can be useful to find other vulnerabilities in the future. Instilling a research mindset into the players. Knowledge transfer can happen in very different ways. In our industry, we see many experts giving talks at conferences. But I fall asleep at ANY conference talk - no matter how interesting the topic."}
{"prompt": "What are CTF writeups and why are they important for learning?", "completion": "I\u2019m not kidding. If I fall asleep in your talk or class, it\u2019s not your fault. I just can\u2019t stay awake. So for me that\u2019s not a good medium. And like there are good and bad talks, making a good CTF challenge is not easy. To have great knowledge transfer through a challenge, it requires a lot of thought and work by the author. But if they are done right, for me CTFs are the best way to learn something new. And when I say CTFs I mean the whole package, including, or maybe mostly, CTF writeups. Mhmh writeups."}
{"prompt": "What is an example of a realistic vulnerability that can be taught in a CTF challenge?", "completion": "This also means bug bounty writeups can be a great source. And in fact, the GitLab challenge I mentioned earlier, heavily references a bug bounty writeup. BUT! Bug bounty writeups are rarely reproducible, because the platforms got fixed. This GitLab writeup is obviously an exception. So not super ideal for learning, and that\u2019s where CTFs, where the challenges often get released, are so much better. Good CTF challenges, like Magic Tunnel, are made up, but implement a realistic vulnerability to teach you about a specific thing."}
{"prompt": "What strategies can be used to strive for 100% security in a system?", "completion": "And that\u2019s the point. It might be made up, and maybe nobody will ever implement it like that in reality. And you will never see this in your career again. But the importance is that THEY COULD exist. And me wanting to be a professional, I want to be able to find it. We all know, finding all vulnerabilities in a product is unrealistic, but that doesn\u2019t mean you just find the low-hanging fruits and call it \u201cjob done\u201d. NO! I want to strive towards 100% and go for the bugs that might be a bit obscure, but could totally exist."}
{"prompt": "What percentage of vulnerabilities can be identified using the OWASP Top 10?", "completion": "WHY THE F\u2019 WOULD ANYBODY hire some shitty consultant who admits they only can do OWASP Top 10, because that\u2019s 95% of all vulnerabilities. That\u2018s such a bullshit management calculation. \u201c95% is close to 100%\u201d. Even if you won\u2019t find 100% (and that\u2019s reality), wouldn\u2019t you at least want to be theoretically have the skill to find them? Striving towards that goal? We accept that we won\u2019t ever reach it. But being deliberately ignorant about this, staying still and never wanting to learn more, makes me furious."}
{"prompt": "What benefits does participating in CTFs provide to a professional in terms of finding interesting bugs in their client's code?", "completion": "And so CTFs help me to always improve. Always learn more. Always get more experience to find the interesting bugs that most people would miss. And from my work experience I can tell, I found the craziest issues in client\u2019s code that really look like a CTF challenge. Not often, but that\u2019s not the point. When they are there, I want to be able to find them. I think any professional who says CTFs are unrealistic, has never actually reported crazy vulnerabilities to their clients, or played only shitty CTFs."}
{"prompt": "What is the most important aspect of CTFs according to the video transcript?", "completion": "*breath* The CTF Guidelines document summarizes CTFs as: CTF competitions are about creative infosec problem solving in a competitive environment. Competing in creativity, problem solving skills, and speed, in a wide range of areas related to security. For me speed is not important at all. But creativity and problem solving are where CTFs excel. And I would add to this list, the community aspect. I started out playing alone, but after a few years I found a team. And solving challenges together and celebrating the CTF afterwards, and explaining solutions to eachother, is amazing."}
{"prompt": "What is the direct URL to the example code mentioned in the video?", "completion": "In the last video we had our first example of cross site scripting due to a shitty php app. But at the end we fixed our php code, by escaping the user supplied string. But I got this code from this tutorial website - and that one is still vulnerable. So let\u2019s play around with that one. The code here is loaded in an iframe below. An iframe is like another webpage embedded in this main webpage. With right click we can investigate this iframe and for example display it\u2019s source code. Now we also know the direct URL to this example."}
{"prompt": "What protection does Chrome have against XSS attacks?", "completion": "So last time we tried to put a script tag with alert into the name field. But when we do that there will be no alert popup box and we get an error in the Javascript console, showing us that the Chrome XSS Auditor prevented the execution of it. The XSS Auditor is special to chrome. Not every browser has such a protection. For example Firefox does not have an equivalent and will happily execute the alert. But we want to dig deeper. We want to not give up because of something like this. So let\u2019s try to bypass the XSS Auditor of chrome. In this case we do not only have one GET parameter that reflects input. Infact there is this second one the age parameter."}
{"prompt": "What techniques can be used to bypass an XSS auditor?", "completion": "And once there are multiple inputs, the XSS Auditor is basically broken. So what we can try is, to split up our XSS payload. The first parameter name will open the script tag and start the alert but end at the quote. Now we expect a string. And For the age we start with a quote, close the alert function parentheses and finally close the script tag. And when we submit this, we get an alert box displaying us \u201cbr, you are\u201d. Let\u2019s see what happened. When we look at the html source, we can see that we simply wrapped the text between the two outputs into a string, and use it as a parameter for alert. And this is already enough to confuse the XSS auditor."}
{"prompt": "What is one way to replace an alert with a silent XSS injection?", "completion": "As soon as you have multiple injection points you can try to get really creative to fool the Auditor. Let\u2019s try to push this one step further and replace this first alert with something silent, so we can put an alert with our content afterwards. One way is to still wrap the text in quotes, but instead of using it as a parameter we assign it to a variable a. And afterwards we can still write our javascript code and do the alert with something we want. Okay. Neat. In the last video I briefly mentioned that there are different context for XSS and each might come with it\u2019s own challenges or tricks."}
{"prompt": "What is the XSS auditor trick mentioned at the end of the video transcript?", "completion": "So I made here a simple test php page where you can play around with some XSS attempts. So there is the normal HTML context, where it simply echos into the page. But then also two test cases where the echo is inside of an attribute, one with quotes around, the other doesn\u2019t have quotes. And then a script context, where the echo is inside of script tags. At the end I have a small little XSS auditor trick which is quite fun. Anyhow. So. We basically covered the first injection already with the last video. So let\u2019s directly move on to the Attribute context. The first one is handled with parameter b."}
{"prompt": "What methods can be used to inject a script tag into an HTML attribute?", "completion": "Let\u2019s open this page in the source view, so we can see the resulting html, which makes it easier to work with. The parameter b is currently XSS, which we can see got placed inside of the source attribute of this image. Theoretically we could now set b to an image URL, and we would get an image displayed. But can we also execute javascript here? Well what we can try to do is to inject a quote, which would end this attribute, then we could inject a tag closing greater than sign and then include a script tag. That looks good,"}
{"prompt": "What happens when the XSS Auditor catches an attempt in Chrome?", "completion": "that could work, but unfortunately the XSS Auditor caught this attempt as well. So this doesn\u2019t work on chrome, but generally it would be an XSS. For example in Firefox. Also the red highlighting makes it super cool to see if our attempts injected valid javascript. So that\u2019s cool. Would this still work with htmlspecialchars which we used to fix the code in last video? We can test that with the parameter bb. Nope. Doesn\u2019t work. The double quote and the greater than sign get encoded, so this looks safe."}
{"prompt": "What flag should be set in order to use htmlspecialchars to protect against XSS in an attribute context with single quotes?", "completion": "But there is a third test. What about the single quotes? Didn\u2019t work. No. wait. The single quote did not get encoded? Maybe we can still turn this into an XSS. We just can\u2019t use the greater than sign. Luckily image tags have an event handler that fires if an image couldn\u2019t get loaded. This means we can inject an onerror attribute that calls alert. And yeah, that worked. Chrome recognized the attempt of executing javascript. Awesome. So htmlspecialchars does not protect you in every case. For example in the attribute context with single quotes it\u2019s note nough. The php manual documents this, it says you have to specifically set the `ENT_QUOTES` flag, otherwise single quotes are untouched. Another lessons learned in - read the frckn documentation!"}
{"prompt": "What are examples of XSS techniques that work without the need for quotes in attributes?", "completion": "Let\u2019s move on to the next one. This one is easy. Like the previous example we are in the attribute context, and now we even don\u2019t have to take care of quotes. So even if single quotes are escaped, you just simply don\u2019t use any quotes in the attributes. So the injection with onerror works great with and without htmlspecialchars. Now the last example is the script tag context. This looks even more simple. Just write alert(1) and it should get executed. Looks good, but the XSS auditor did not catch this one. If we try this in normal view we trigger the xss. And this obviously also works despite htmlspecialchars."}
{"prompt": "What is a way to bypass the XSS Auditor when using an image tag with an onerror attribute?", "completion": "So those examples showed you that using htmlspecialchars is not enough everytime. There are many places where things can go wrong. So be careful. And BE AWARE in what context you output user supplied strings. But now whats up with those tricks down here. The first Trick is just an example how somebody might try to prevent xss. It replaces all occurences of script. This means you cannot inject a a script tag. There are two possibilities, first one is simply not use a script tag. For example use the image payload we used above. An image tag with onerror attribute to fire an alert. Though the issue is that the XSS Auditor catches that. But there is a way around it. We can use the lame attempt of XSS prevention by replacing script, to our advantage."}
{"prompt": "What is the technique used to bypass the XSS Auditor in Chrome?", "completion": "We can randomly place script inside of our image tag payload. And the occurrences of script will be removed. And now the URL parameter does not resemble anything that is found on this page. Thus Chrome cannot guess that this parameter is responsible for this image tag here. So this bypassed the XSS Auditor. The second trick here is fun. So first we have to understand this Javscript code. First a variable ASD is initialized and set. And then this script checks if ASD exists. If the variable ASD does not exist you would execute the alert."}
{"prompt": "What is a method for bypassing the XSS auditor in Chrome?", "completion": "But how could you redirect code execution of this javascript so that it would execute this alert? I give you a second to think about this\u2026. Okay. here is the solution. We abuse the XSS auditor, who would have thought. We use a fake parameter with the first script as value. Now Chrome thinks that this parameter is responsible for this script tag, and it will disable it. Prevent it\u2019s execution. Thus ASD never got initialized and we successfully redirected code execution to trigger the alert. Without the source view we can see the alert popping up."}
{"prompt": "What exploit was used for the iOS jailbreak?", "completion": "Let me tell you the story behind an iOS jailbreak. More specifically the security vulnerability being called Sock Puppet that was exploited for this jailbreak. I hope you will see the incredible work that goes into finding these exploits. Maybe you have seen this Recently tweet by Ned Williamson shared this tweet: I managed to get kernel_task port using only CVE-2019-8605 for iOS 12.2 (tested on iPhone 6s+) :) Still needs quite a bit of work for stability. Huge thanks to @_bazad for his assistance in achieving a goal I have had for over a decade..."}
{"prompt": "What is the bug identified by CVE-2019-8605?", "completion": "First of all, congrats Ned for achieving your goals. And since Ned\u2019s tweet you have maybe seen new jailbreak releases using, what some call, the \u201cSock Puppet\u201d exploit. So in today's video I want to explain what is behind the bug CVE-2019-8605. And this is only possible because Ned is so awesome that he jumped on a call to explain the bug to me. And by the way, he is also releasing an article about his research over at the Google Project Zero blog. I will make sure to link it below. So I hope you are as excited as I am."}
{"prompt": "What is the main contribution Ned Williamson made to the successful exploitation of Chrome 69?", "completion": "Let\u2019s head in Let\u2019s start at the beginning. How did Ned discover this kernel bug? You should probably know that Ned is a very experienced researcher. Last year he successfully exploited Chrome 69 together with saelo and niklasb at Hack2Win. A Full Browser exploit is of course a chain of multiple bugs, and I think his main contribution was a sandbox escape exploiting the Chrome IPC. The inter process communication that is used by the separate components inside of chrome to communicate with each other."}
{"prompt": "What techniques are used in source fuzzing to find vulnerabilities in complex software stacks such as the Chrome IPC?", "completion": "And he found this bug with a special fuzzer and fuzzing methodology. Fuzzing something like an IPC mechanism is quite challenging and requires considerable engineering efforts. Earlier this year at OffensiveCon19, he gave a talk with the title \u201cModern Source Fuzzing\u201d. In this talk he describes his technique and approaches to fuzzing complex software stacks like the Chrome IPC. It\u2019s about source fuzzing, so you obviously have the source code for Chrome, but it\u2019s still very challenging - just because it\u2019s open source doesn\u2019t mean it\u2019s easy to find bugs."}
{"prompt": "What techniques did Ned Williamson use to discover the Sock Puppet vulnerability in the XNU Kernel?", "completion": "But he was able to get his fuzzer into places where other fuzzers maybe haven\u2019t been yet. And this is absolutely relevant for this iOS exploit, because at the end of this talk he says this: Let\u2019s talk about XNU really quick. This is my new project. I just started. Same exact technique - very different attack surface. And I try to discover how far can I take this thing and where does it stop working. And so I want to test XNU networking and so what I did was, I took the whole network subsystem of XNU, compiled it with the instrumentation for libfuzzer and stuff, and then tried to make this self-contained library in userspace."}
{"prompt": "What technique did Ned Williamson use to debug the XNU kernel?", "completion": "And then of course when you link it there is all the rest of the kernel missing, and so it says like a thousand functions are missing. So what I did was I just stubbed all those functions out to assert(false) and just crash when I call them. So that way I could start running and working with this thing. And if it hit code I needed to work I either put the real implementation in or I would stub it out or put my own mock implementation or whatever. So he announced that he was working on XNU, specifically fuzzing the networking stack."}
{"prompt": "How is Ned Williamson able to do source code fuzzing on a closed source operating system like iOS?", "completion": "And what a surprise that CVE-2019-8605, sock puppet, is a bug in the XNU network stack. That\u2019s where the name comes from. Sockets. Network sockets. So if you are interested about his fuzzing technique to get an idea of how he did it watch this talk and keep an eye out on his twitter. He also wants to open source that fuzzer too. Before we head into technical details, let me just clarify something. You might wonder how he is able to do source code fuzzing when iOS is a proprietary closed source operating system by Apple."}
{"prompt": "What is XNU?", "completion": "Well\u2026 Here is the official Darwin XNU repository by Apple. And they write: XNU kernel is part of the Darwin operating system for use in macOS and iOS operating systems. XNU is an acronym for X is Not Unix. XNU is a hybrid kernel combining the Mach kernel developed at Carnegie Mellon University with components from FreeBSD and a C++ API for writing drivers called IOKit. So iOS as a whole is obviously more than just XNU with a lot of closed source, but when we talk about Kernel bugs and Kernel exploits,"}
{"prompt": "What is the purpose of raw sockets?", "completion": "then you can do research on the open source parts of XNU. And Ned was targeting the network stack. So what did his fuzzer find? Let\u2019s have a look at his original report in the Google Project Zero Bugtracker. This was mid March. Issue 1806: XNU: Use-after-free due to stale pointer left by in6_pcbdetach When we take a look at the proof of concept code he has attached here, we see that he is creating a RAW Socket. Raw sockets are very low level and allow you to craft any kind of network packet, any kind of protocol, and so it\u2019s kinda risky to allow regular users or regular programs to do that."}
{"prompt": "What privileges are required to exploit the Sock Puppet vulnerability in the XNU Kernel in iOS and macOS?", "completion": "Normal users shouldn\u2019t need to do that anyway, because you can specifically create TCP sockets instead for when you want to do stuff like an HTTP request. TCP sockets are on a higher layer - they are fine. This means his original report wouldn\u2019t be usable for an iOS jailbreak, because you would need root privileges. Maybe that\u2019s also the reason why it was initially reported with severity High - not severity critical. You can only attack the kernel when you are already root. But roughly two months after this initial report in mid may, he tweeted When I reported  I could only reproduce it on macOS with root user."}
{"prompt": "What exact protobuf message does Ned Williamson use to describe all the types of syscalls and the type of arguments they can have?", "completion": "That\u2019s what we just learned, raw sockets require root privileges. But, I've found a way to reach it from the app sandbox on iOS. Don't update to 12.3 needlessly, while I continue to investigate! So lets hop onto the call with Ned and let him introduce the variant of the bug that can be triggered as a regular user. Alright, so here is the minimal testcase pretty much. And so the interesting thing is, my fuzzer produced this exactly as is. I just added prints to help test on iOS. Basically I have this protobuf message that describes all the types of syscalls and the type of arguments they can have."}
{"prompt": "What are protocol buffers and how are they used in fuzzing the XNU Kernel in iOS and macOS?", "completion": "And this is exactly what came out of it. What he says here about the protobuf messages has to do with his fuzzer, if you watch his talk from earlier you will know about it. Protocol buffers are from Google and used for serializing structured data \u2013 think XML, but smaller, faster, and simpler. And he uses protobuf to basically define the building blocks the fuzzer can use. In this case his fuzzer is creating syscalls. Because syscalls are what you as a user can use from userland if you want to talk to the kernel."}
{"prompt": "What type of socket did Ned Williamson create for the Sock Puppet vulnerability?", "completion": "So any kernel exploit usually means you call naughty syscalls. And here in his code you can see socket() and setsocketoptions() and disconnectx(), which are all syscalls. And so I looked at it. And I realized that it created this socket. It created this TCP socket. Then it enabled this option that let\u2019s you setsockopt after disconnecting. And if you wonder how he find this new variant, he told me that after improving the protobuf grammar for his fuzzer, specifically to improve the setsockopt syscall, his fuzzer found this.."}
{"prompt": "What is the root bug needed for iOS 12.2 that was mentioned in the tweet by Ned Williamson?", "completion": "And so about three months after the initial report, in mid June, he tweeted: I've just found SONPX_SETOPTSHUT which lets you call setsockopt after a socket has been shut down... I missed this earlier! tl;dr  \"a freed zone element has been modified in zone kalloc.192\",  inside the app sandbox on iOS 12.2. No more <12.2 root bug needed. So you can see it took quite a while, even for him to really understand the bug. To take it from a crash triggered as root, to something that can be called not only from user, but also from inside the app sandbox on iOS."}
{"prompt": "What is the IPv6 syscall that caused the Use-after-free vulnerability in the XNU kernel?", "completion": "The app sandbox has more restrictions on the syscalls you can call. And he also briefly mentions here the underlying functionality that caused an issue. SONPX_SETOPTSHUT (which is a flag you can enable in the socket options) lets you call setsockopt after a socket has been shut down. Quick refresher of his original bug title: \u201cUse-after-free due to stale pointer left by in6_pcbdetach\u201d. Internet 6. So IPv6. PCB - protocol control block. Detach. So detaching/disconnecting a socket. And somehow there was a stale pointer that could be abused in a Use-after-free."}
{"prompt": "What is user-after-free and how can it be exploited?", "completion": "User-after-free means that some code freed an object in memory, and then another part still used it. User\u2026 after\u2026 freed... Which means instead of the original object, there could now be random data there and it might crash because of that. Or with some heap grooming you can maybe control exactly the data that is there. And that could lead to an exploit. Okay\u2026 so now I hope you have somewhat of an idea where the journey is going. Now let\u2019s Ned take over again. Anyways\u2026 Let me actually try to pull up the bug."}
{"prompt": "What programming error is causing the Sock Puppet vulnerability in the XNU Kernel?", "completion": "So it\u2019s in6_pcb.c And it\u2019s gonna be, Yep. I guess I searched for it last time. There is kind of the programming error. And then how it manifests. So the programming error is that basically down here when we are detaching the TCP session from a socket we try to free all the information related to whatever we were doing before we disconnected. And so you will see here \u201cOk let\u2019s free the buffer containing our some type of options and then we null it out\u201d. And then we free this. Here if we had some options set we free them and null them out."}
{"prompt": "What is the problem with the ipv6 options object in the XNU kernel?", "completion": "Free null.. Free null. So you might notice there is some kind of pattern here, of, it looks like we intend to use these again alter. Because we are nulling them out. Or at least that should be a hint that it\u2019s probably possible. Otherwise if we were just destroying this object, there would be no need to null it out, we just have to free it. So the problem is here. So, there it is. So we can see like, ok if we had ipv6 options, so if it\u2019s not NULL, we go ahead and delete everything and free the buffer."}
{"prompt": "What are the two structs that struct A is able to hold?", "completion": "But then the problem is we didn\u2019t actually clear thi this. So this should have been set to NULL. the problem is if we can keep using the socket after it was destroyed. And access this pointer. It will have been freed by this function but we can continue interacting with it. So yeah it\u2019s tricky. So the interesting thing is, how you continue to interact with it. Alright. Let me try to recap the bug with my words. Let\u2019s say you have this struct A, which can hold a struct B and C. When you want to use it, you first malloc the size for A, malloc returns a pointer,"}
{"prompt": "What steps should be taken when using a memory address for a socket option and then wanting to reuse it?", "completion": "so the address to the memory that we can use for it now, and we remember it in varA. And then we can access b and c and malloc them as well. So malloc returns the address where we have space for B and C. Now when you are done with using A, you have to make sure you free everything properly. So you free b and c. And afterwards you free A. Perfect. This would be an option and this is how Ned originally thought of as the socket options. However it turns out that socketoptions can be reused. So what if we would want to reuse A?"}
{"prompt": "What is the difference between freeing an object and setting a pointer to NULL?", "completion": "Then we would just free b and c, but leave varA alone. Now if we would design our program that it would just alloc b and c again once we need it, it would be fine. But in larger applications, especially how it was designed here, we actually check if b and c is set. And only if they are not set, then we allocate new memory for B and C. But if you want to do that, you need to make sure to NULL the pointer when you free the object. Freeing the object just tells the heap allocator that the memory can be used for something else."}
{"prompt": "How can an attacker exploit a use-after-free vulnerability in the XNU Kernel?", "completion": "But the pointer to that memory still is stored in b and c. So this here would be a use-after-free situation. Even though we freed the memory, this check here sees a pointer stored in b and c, thus not allocate it again, and it will be used as nothing happened. That\u2019s why there was this pattern of Free null.. Free null. All the inner options are freed, and then nulled. Freed and then nulled. So the problem is here. So, there it is. So we can see like, ok if we had ipv6 options, so if it\u2019s not NULL, we go ahead and delete everything and free the buffer."}
{"prompt": "What could happen if the in6p_outputopts pointer is not set to NULL after it is freed?", "completion": "But then the problem is we didn\u2019t actually clear this thing. So this should have been set to NULL. Every other option is properly freed and nulled. Except the in6p_outputopts. It\u2019s as if we did properly set b to NULL after the free, but we forgot to null C. Thus c could lead to a use-after-free. the problem is if we can keep using the socket after it has been destroyed. And access this pointer. It will have been freed by this function but, you know, we can continue interacting with it. So now let\u2019s look at the Proof of Concept again."}
{"prompt": "What does the flag SONPX_SETOPTSHUT do when set on a socket?", "completion": "We create a ipv6 TCP socket. Then we prepare the socket options with the special flag SONPX_SETOPTSHUT enabled. That will allow us to reuse the same socket options. And then we actually set this option onto the socket s with setsockopt. From the man page we know that this means: To manipulate options at the sockets API level, level is specified as SOL_SOCKET This is followed by a second call to setsockot, but this time specifically to set the IPV6 options. And here he just changed the minmtu size to -1.the minmtu value doesn\u2019t really have significance, other than maybe being a simple option, I think he just wants to set any IPV6 output option to trigger the allocation of this ipv6 output option struct."}
{"prompt": "What is the weird syscall that triggers the free in the Sock Puppet vulnerability?", "completion": "This thing actually creates a IPV6 option, so when you set that it will see \u201coh that pointer is null\u201d let me allocate a struct representing the options. And then I go ahead and set this minmtu value. Then comes the disconnect. This disconnect is what actually triggers the free that we saw. We disconnect the socket with disconnectx. This is actually a weird syscall. Probably Ned was also surprised to learn that this exists. Because of the history of XNU it shares a lot of the syscalls with for example Linux,"}
{"prompt": "What is the unique syscall for XNU that triggers the free of the inner options in the Sock Puppet vulnerability?", "completion": "or I guess Unix. Socket and setsockopt are syscalls you might even know. But disconnectx is non-standard. It is not part of POSIX. It\u2019s a weird unique syscall for XNU. This will trigger the free of the inner options as Ned has explained. But that one single option, that IP6 options for outgoing packets in6p_outputopts was not NULLED. Now we call sesockopt again. And then normally this setsockopt would say \u201coh hey, this socket is already disconnected I wont set the options for you\u201d. But because this option was turned on."}
{"prompt": "How can a fuzzer be used to help identify a kernel bug?", "completion": "And this is a thing the fuzzer found which I had missed doing my manual review of the bug. It actually generated this struct data completely from scratch. I actually made it look cleaner, but it was just generating a buffer here. And feeding this buffer and size in. And so it found that there is this option SETOPTSHUT, that lets you keep setting options after you\u2019ve disconnected. So that means that we can keep getting and setting the struct that was freed. So from that we basicallyhave a read and a write on a freed struct object."}
{"prompt": "What debug feature can be used to detect attempts to write into freed memory?", "completion": "Which is really powerful. So calling setsockopt on the same socket, reuses the previous socket option. In this case we want to change the minmtu value again. This means we take the socketoptions and then we would follow the pointer into the ipv6 output options. But that pointer is dangling and might now point into other memory. And now writing the minmtu value into this other memory, could corrupt data. But you don\u2019t know what and the kernel might crash or never crash. However when you use something like the addresssanitizer option on your build, then this debug feature would catch this attempted write into freed memory."}
{"prompt": "What happens when the getsockopt system call is used with the Sock Puppet vulnerability?", "completion": "And so that\u2019s why the fuzzer found that calling setsockopt again, will trigger this address sanitizer crash. However when we think about exploiting this, we maybe want to consider what happens when we do getsockopt. So get the socket options. To get for example the current minmtu value. That would also follow the dangling pointer, read the minmtu value, but because it points now into old memory, it could read whatever. When we get the ipv6 options. Basically reading the data srtaight out of the opt."}
{"prompt": "What is the technique used to control what data is placed in the fields of an object that has been freed?", "completion": "So this is the freed thing and we can just read this field from it. This is the thing that is used after freed, right? So the dangling pointer thinks its pointing into memory that has this structured object, but it got freed. So there is random data at all these fields now. Or if you can control what will be exactly there, by spraying allocating objects in the kernel, then maybe you can exactly control what values are here. So you can see all these fields. We can get and set them after the whole object has been freed."}
{"prompt": "What is the basic technique used in use-after-free vulnerability exploitation?", "completion": "So if we do a heapspray and reclaim this object with controlled data. Then you can imagine that we can get this integer and it will just read the integer back to us. And then we can see whatever we sprayed there and we know that our spray succeeded. So that\u2019s the basic idea of use-after-free. Before accessing that dangling pointer again, you just somehow spam allocation of other data in memory. And you carefully choose that data, so that if you get lucky, and the pointer points into your data, you can control every field."}
{"prompt": "How can memory be sprayed to exploit the Sock Puppet vulnerability in the XNU Kernel?", "completion": "And as a fairly safe test to see if it worked, you can always spam the memory, then read this integer with getsocketopt and check if it\u2019s what you expected. If a random object happened to be there instead, you would see, \u201cyeah not my value\u201d, and try again. And maybe next time you get lucky. And over here we can then just replace one of the pointers and keep spraying until we see that this matches a known value. And then we can get, we will actually access the pointer here. And because we know the spray succeeded we have some controlled pointer here and read arbitrary memory."}
{"prompt": "How can the Sock Puppet vulnerability be used to exploit the XNU Kernel in iOS and macOS?", "completion": "And then by the same idea if we reclaim this and set... it\u2019s actually packet info, that\u2019s what I used. So we can get this to read 20 bytes of this fake packet info pointer. It will just read it straight back to us in userland. We can also set this thing, and if we set it to null-bytes it will actually free this buffer. You can\u2019t really set arbitrary bytes, but because you can free this really easily, you know, arbitrary read and arbitrary free is already a already really nice primitive. So I was actually surprised about that."}
{"prompt": "What is the Use After Free vulnerability discovered by Ned Williamson?", "completion": "There is a Use After Free. And you could fake socket options, which contains pointers you control, and now you want to somehow abuse this. I would have thought, being able to control those pointers you can somehow easily get arbitrary read and write. But seems like the socket output options struct is not super perfect and Ned was only able to find this arbitrary read with getsocketopt and and arbitrary free. I think this should be the place for the free. If you somehow trigger this clearing of options,"}
{"prompt": "What specific primitive does the Sock Puppet vulnerability provide?", "completion": "and that pointer is set, it will call free on it. So we can free any allocated memory in the kernel we want. But I was still looking through the code myself to better understand what you can control with the initial use-after-free and actually ran across this line here. This is a memcpy from a buffer you control into the pktinfo. That looks like an arbitrary write. But actually Ned was talking about it during our call and I had forgotten about it. Only when I rewatched the footage I noticed it. So here is Ned talking about a few of the options you have with the Use-After-Free."}
{"prompt": "What is the range of values that can be written to the ipv6 packet opt struct?", "completion": "So if we look at I think it\u2019s this function. Yeah ipv6 set packetopt. So here is where we set the packet options . So this is the freed thin, the opt, right? The ipv6 packet opt. So what happens is. Here is packet info. So when we go and set it. And you will see that these other ones are really constrained. So we can write an integer between 0 and 255, yeah so that\u2019s not that useful. Or negative 255. We have these very highly constrained writes into this struct. And then the other things that involve, like taking a pointer that we controlled and writing it, you can see here there is actually a root check."}
{"prompt": "What is the sticky flag that is turned on in the normal case with packetinfo?", "completion": "So this is no good from the userland sandbox. Basically the only thing we can really call without any complexity to set something here is this packetinfo. The interesting thing is, so when I first looked at this it looked like, okay as long as I can bypass some of these checks here, I\u2019m actually be able to bcopy straight into this thing. It looks great. It turned out that this sticky thing will be turned on in the normal case with packetinfo. So you have to pass this 2292PKTINFO through, you have to go through this old mbuf based packetoptions."}
{"prompt": "How can the Sock Puppet vulnerability be triggered?", "completion": "Like a socketoption setting mechanism. And it turned out that had some of it\u2019s own checks in it, so we couldn\u2019t get in here with controlled data anyways. Doesn\u2019t really matter. But moral of the story is, it looks like we can write arbitrary stuff here, but in reality the only thing we can really hit is this guy. And this is extremely easy to hit. So basically, if we don\u2019t specify an ipv6 address, and that\u2019s just null-bytes, and we also don\u2019t have an interface index. So essentially if this whole struct is just 0 bytes, We can hit this thing no problem."}
{"prompt": "What is the function that leads to an arbitrary free in the XNU kernel?", "completion": "And that is the function I just showed you earlier, that will lead to this arbitrary free. This means if you know the address of some other object the kernel uses, you can force it to be freed. Which is basically a targeted use-after-free for anything you want. And then you can do a heap spray for that and control that structure. And that structure can be the holy grail. And thus this arbitrary free primitive can be turned into something very powerful. This awesome. I really learned a lot from this."}
{"prompt": "How can objects be sprayed in kernel memory without using the kernel alloc syscall?", "completion": "Now this is of course not the whole exploit. This is just the bug itself explained. So the questions that you should have now are: First. How do you actually spary objects in kernel memory. Malloc is of course allocating in userland and there is no kernel alloc syscall. So you need to abuse something else to allocate buffers for you. And second, what do you then do with the arbitrary free. What other kernel object do you target and how do you find it in the kernel memory to point your controlled pointer to?"}
{"prompt": "What is the process for a program to obtain memory?", "completion": "What exactly is the heap, what does malloc really do? Those are questions we try to answer in this video. You may have learned that when you are programming and you need some, more memory you might use the heap, by allocating memory with malloc and if you are done you free it again. And somehow, some magic is happening and you don\u2019t really know how you magically get more memory or give it back. Before we talk about malloc, let\u2019s first talk about how our process gets any memory in the first place."}
{"prompt": "What system calls are used to allocate memory for a process?", "completion": "This is done via mmap or brk. Those are system calls, which means we ask the kernel directly. mmap asks the kernel give us some new virtual address space, basically requesting a new memory segment. Besides mmap there is also brk, which can be used to change the size of an already used memory segment. This is real fucking magic. In the end the process doesn\u2019t care how this memory is implemented - if there is RAM, and where exactly on the ram you store it, or if you have a SWAP file because you don\u2019t have enough RAM."}
{"prompt": "What does the kernel and hardware do to map memory into the process?", "completion": "The kernel and hardware takes care of this, and maps that memory into the process, this means that the process can transparently access those memory addresses and work with them - and transparent in this context means, \u201cdoesn\u2019t have to know anything about it\u201d. You can execute heap1 with strace and you see all those calls to mmap to initially set up the processes memory regions. And near the end it uses brk to setup the heap. So why don\u2019t we just use mmap or brk to get more memory for our process?"}
{"prompt": "How does malloc help to organize and manage memory?", "completion": "And why do we always talk about the heap with malloc and free? Well, malloc is just a very fancy and convenient wrapper that handles that brk or mmapping for us. And does much more. Malloc will call mmap or brk to get more memory if the heap doesn\u2019t exist or is too small. But on top of that it will help us to organize and manage that memory. Also during CTF challenges, and the example we will have a look at shortly, use the heap so little, that we won\u2019t see any additional memory mapped regions. So to keep things simple, we consider the heap to be, just a big chunk of fixed memory mapped memory."}
{"prompt": "What is the purpose of the malloc() function?", "completion": "And we can do in this memory whatever we want. So when we refer to the heap, we actually mean this memory region. So what does it mean that malloc will manage the heap? Let\u2019s explore this abstractly first. We want to allocate 8 bytes. So we call malloc with 8. This means we block 8 bytes on the heap. Each call to malloc will return the address of the heap where the area got blocked, and with this address we know where we can write our 8 bytes to. So we can now write the string \u201cAAAABBBB\u201d to that address."}
{"prompt": "What is the most commonly used heap algorithm?", "completion": "Now we allocate two more times. malloc(8), malloc(8). This begs the question what does blocking mean. And how does malloc know what address to return? If I would hire you to write me a program that gives me an address of memory I can use safely for different sizes, you could come up with a working solution. And if you would implement that you would have created your own heap algorithm. So there are many different ways one could implement that. Though most commonly used is an implementation called DLmalloc."}
{"prompt": "What is stored in the 4 bytes before the start of each chunk in the heap when malloc() is called?", "completion": "Because a dude with the name Douglas Lea wrote it. And that malloc algorithm will store for each chunk it blocks the size of the chunk right before it. And it will also keep 4 bytes before that empty for how the free is implemented. But we will only focus on malloc for now. Let\u2019s do the mallocs again, and let\u2019s think like a computer. So at the start, when the first malloc is called, we obviously know the beginning of the heap. So we store the size that we want to allocate there, and return the address where the chunk part, that is usable by the programmer, starts."}
{"prompt": "How does malloc keep track of free memory?", "completion": "Though, how does malloc now know on the next call to malloc where the next chunk can be placed? Not that we write over our previously allocated area. Well we obviously have to kinda memorize where our free region begins. So malloc will simply do some math, and update the address that pointed to the beginning of the heap, by adding the size of the chunk we allocated to it. And this happens every malloc. So there is a pointer somewhere, that will always point to free memory. Cool. Just for understanding purposes."}
{"prompt": "What is the purpose of malloc() and how can it be used to read and write data on the heap?", "completion": "Given the returned address of malloc, what can you do with that? Well, this pointer points to the start where we can write data to. So if we look at the address just before that, we can read the size of the current chunk. And if we know the size, we can add the size to that address to get to the next chunk on the heap. Where we can do the same again. Now let\u2019s have a look at the heap level 1 challenge from protostar. We will use that example to look at how malloc works in real-life. But first let\u2019s step through the code line by line and try to imagine how the heap will look like."}
{"prompt": "What is the purpose of the struct internet in the video?", "completion": "And then next video we actually do that practically. The objective here seems to call winner(). So we somehow have to redirect code execution to that function. At the top there is a struct defined called internet, which has two members, a priority integer. And the second member is a char pointer called name - Which means name contains a pointer to a string somewhere else. Structs are like classes. At least in terms of providing a structure with multiple different member attributes. Now, main defines three variables from the type struct internet pointer, but only two are used."}
{"prompt": "What is the size of the i1 object in bytes?", "completion": "I guess a leftover from creating this level. I emphasize struct internet pointer, because those three internet objects are not stored on the stack. Only the addresses, the pointer, to those objects are stored in i1, i2 and i3. Anyhow, then it starts allocating those objects on the heap. It first calls malloc with enough space for the i1 object. Sizeof will return the number of bytes this struct requires. In this case that\u2019s 8, because the integer priority is 4 bytes and the char pointer, which is an address, is also 4 bytes."}
{"prompt": "How is the data stored within the allocated area of memory referenced by the char pointer name?", "completion": "Because we are on a 32bit machine. And we know that malloc returns the address on the heap that we can now use. So i1 points to the start of 8 bytes in memory. And now we want to set priority to 1, which will write 1 to the first 4 byte of the allocated area. Then it allocates another 8 byte, and the resulting address will be stored in the char pointer name. Which is at offset +4 of the i1 object. As a programmer we write i1->name, to access the name attribute, but implemented is it as simply going to a certain offset of i1,"}
{"prompt": "What is the purpose of the strcpy calls in the video transcript?", "completion": "in thise case i1+4 is the location of the char pointer name. So now i1->name will contain an address, which points to the allocated heap area which we just allocated. Those 8 bytes are intended to store a list of characters, a string - the name. Then the same is done over again for i2. We make space for the struct i2. We set its priority to 2. And we allocate another 8 byte for the name string. So basically we have now two objects allocated on the heap that we can work with. Next come two strcpys."}
{"prompt": "What is the offset used by the strcpy function to copy the first argument to the name of the i1 object?", "completion": "And we know that strcpy is always super suspicious, because there is no length indication and we can potentially write more than we have space. In this case the internet-name was allocated with only 8 byte, so we could probably write over those 8 bytes and really screw up stuff. Anyhow, the strcpy will copy the first argument to the name of the i1 object. i1 points to the start of the i1 object, and at offset +4, which is the name, is the address of the free 8 bytes that were allocated for the string."}
{"prompt": "How does strcpy() work when dealing with two arguments?", "completion": "So strcpy will take the address stored there and copy the string from argument 1 at that location. And the same thing is happening for the second argument with i2 object. It will take the address stored at +4 of i2, and attempt to copy there our string. After that, we will printf and then quit the program. In the next video we will have a look at the heap while we execute this program to understand how the heap looks in real-life and how we can work with it in gdb. Oh by the way. I lied. I said the second word would contain the size of the chunk."}
{"prompt": "What is the purpose of the lowest bit of a chunk in a heap when using malloc()?", "completion": "Well it does, but also the lowest bit is used to indicate that the PREVIOUS chunk is used. Not free. That becomes more important for the free() algorithm. Thus in our example those numbers values would all be hex 11. I just want to put a small disclaimer here at the end. I simplified the heap and malloc a lot. For example I only talked about one pointer pointing at the free area, in reality there is obviously way more to this. And If we look into the history of exploitation we are currently looking at stuff from more than 15 years ago - like 2001-ish."}
{"prompt": "What are some examples of low effort questions that can be annoying to answer?", "completion": "disclaimer this is going to be a little bit of a Randy video let me say sorry for that in advance I love to help people and try to answer every question I get that's why I have an educational YouTube channel no question is stupid in all this yada yada but sometimes it's really really frustrating not because you are asking a beginner question or so but because how you ask the question let me give you some horrible examples that can make me really mad and also why they make me so mad and hopefully then you will understand how to ask a technical question so that you get the help you want [Music]"}
{"prompt": "What kind of vulnerability did the speaker experience when ordering food online?", "completion": "Something funny happened to me. I wanna tell you a story how I got a free Burger when I ordered food. And use it to explain what injection vulnerabilities are. So last night I was super lazy, didn\u2019t wanna cook so I ordered food. I ordered food there before so certain fields like the address were already filled out. But also the comment field was still filled out. And on the previous order, in the comment field I requested a different sauce for one of the Burgers. I didn\u2019t realize that and just continued and paid online."}
{"prompt": "What type of injection vulnerability was exploited to get the free Country Burger?", "completion": "A little bit later the delivery guy shows up and told me that he changed the sauce for the Country Burger as I had requested. Country burger? I didn\u2019t order one? He said: yeah, you did. Look here on the receipt. And I look at it and I realized what happened the comment I wrote was printed just above the other items that I actually ordered, I used capital letters to emphasize my request and I didn\u2019t notice that it just made it look like it is one of the ordered items. And so he actually thought I ordered a Country Burger and the comment after it was just my modification request."}
{"prompt": "What is an example of an unintended social engineering attack?", "completion": "I mean looking at it now everybody would say it\u2019s pretty clear that it\u2019s not an Item I order. There is no price on it and it\u2019s not bold. But this is a fast food restaurant and those guys have a lot to do, it has to go fast and maybe comments are also not a common thing. I can totally see how it happened. I offered to pay for the Burger, but he said it\u2019s fine. So that\u2019s how I got a free Burger through an unintended Burger Injection or unintended social engineering attack. So what does this teach us about injection vulnerabilities in software."}
{"prompt": "How can injection vulnerabilities be avoided?", "completion": "You see, programs are just acting on instructions that they have been given. Like a guy in a restaurant has instructions he gets from the order that gets printed out. And in this case data, or this comment, was mixed together with business critical information. And whoever created and printed out this order didn\u2019t make it clear to the entity that processes this data, that this is just a comment, not an order instruction. The bill could have been structured differently so that it is very clear. And this is always what happens with injection vulnerabilities."}
{"prompt": "What is the difference between SQL injection and cross site scripting?", "completion": "Let\u2019s take SQL injections. A programmer writing code that builds an SQL query and doesn\u2019t make it clear that this user data is just a string, by wrapping it in quotes and making sure that no quotes can appear in the data by escaping them, then whatever processes the query can be fooled. Or cross site scripting. The programmer writes user data into a surrounding HTML document without explicitly marking this data to just be plaintext without special characters. Thus somebody can inject HTML tags like script tags and perform a XSS attack."}
{"prompt": "What is the underlying principle behind SQL injections and XSS?", "completion": "And obviously there are many many cases in security where the underlying security issue is an injection. Yes SQL injections and XSS have a very different impact and are very different, but only at the surface. The underlying principle is exactly the same. So whenever you place data into some other structure that gets then handed to another entity for further procesing, may this be a webserver, a database server, a browser or a fast food employee, you have to make sure your data is clearly marked as what it is."}
{"prompt": "What techniques are used to develop an exploit in the RHme3 challenge?", "completion": "Hey, welcome back. So last video we started to reverse the exploitation qualification challenge from RHme3 and we had just figured out a rough plan for exploitation. So rewatch this if you don\u2019t know what\u2019s going on. But we also pickup here just where we are about to develop the exploit. And while this is about a specific challenge, the technique to get to the final shell, is very similar for a lot of CTF challenges. So even if you are not doing this challenge, it could still show you some generic techniques."}
{"prompt": "What is the goal of the challenge in this video?", "completion": "Remember in the last video that at the start I was already thinking of what probably our goal is going to be? So in the spirit of doing this whole challenge from the reverse. Let\u2019s think about which Global Offset entry we could overwrite. Ideally I would love to overwrite a function there with system(), which has a string for the command to execute as first parameter. So we are looking for another function that has a similar pattern. Some people contacted me and had issues once they got so far to have an arbitrary write and could overwrite an entry of the GOT, what to do now?"}
{"prompt": "What is the technique of overwriting the puts() function with system() to execute a particular string as a system command?", "completion": "They tried to use ROP gadgets and so forth, but most of the time, at least for the eaiser exploitation challenge, it\u2019s mostly enough to somehow execute /bin/sh to get a shell. In a previous stream I did I showed how to find a one-shot execve gadget that just calls /bin/sh, so check that out, but another technique is to just look for a fitting function. So system() takes a string as the first parameter as a command to execute. So what would happen if you overwrite puts() with system()? Well then everytime the program would call puts(), it would actually try to execute the string as a system command."}
{"prompt": "What is an example of a function that could potentially be used in an exploit of a user-controlled string as the first parameter?", "completion": "Makes sense, right? But it\u2019s not really useful, so in our case we are looking for functions that might have a user controlled string as the first parameter. Let\u2019s see. Strcpy could work in some cases. Or strlen, or puts. But also free could get passed a pointer that coincidentally points to a string. For example if the name is freed, and the parameter would be a pointer to that name string. So there are a lot of options, and of course it could break the program, so you have to be a bit smart. But I chose strlen in the end, as it\u2019s getting called on a string that is read by the user."}
{"prompt": "How can we use a use-after-free vulnerability to control the name pointer in the player structure?", "completion": "Infact it\u2019s reading the name input here. So that\u2019s great. So to recap. We want to overwrite strlen with system, so we can execute /bin/sh when we enter /bin/sh as a name. To do that we need an arbitrary write, and the name pointer in the player structure could do that for us, if we control it. We also know we have a use after free, which means we interpret a value on the heap as a pointer, eventhough the player should be freed. So hopefully we find a way to overwrite that freed memory with data we control, and thus control the name pointer."}
{"prompt": "How is the modern heap maintained differently than traditional chunk management?", "completion": "Sounds like we are almost there! We just have to find a sequence of operations, where we get control of this pointer. In general this should happen when we create some players, select one, remove some and add some again. So I just sat there for a bit and just played around with different name lengths to somehow make one name overlap with the pointer. But it kinda didn\u2019t work right away. I think that\u2019s because the modern heap uses different kind of chunks, namely fastbins and so forth. And they are maintained differently."}
{"prompt": "How can registering two players with 32 byte long names influence malloc of a new chunk skipping the freed space?", "completion": "So in many cases the malloc of a new chunk would skip the freed space. But I\u2019m not 100% sure what exactly happened. I just suspected that must influence it. But if somebody could link me a writeup that has a better understanding of the heap and goes into that issue, I would love that. Anyway, I guessed that this should still be the solution, so I just have to find the correct case where the overlap would happen. And at some point I did! So it happened when I register 2 players with 32 byte long names."}
{"prompt": "What is the length of the allocation that caused the segfault?", "completion": "Selected the second one. Deleted the 2nd and first one, then allocate a new player, with 19 bytes. And when we then show the selected player, we get a segfault! I got the 19 bytes from playing around with the lengths and it perfectly overwrites the name pointer. You can see the segfault happened in printf, probably because the pointer was pointing into invalid memory. Which would be a success. But also you can see our debug prints before the segfault and you can compare the state of the memory where the player was selected and still healthy, and the overwritten object we now used."}
{"prompt": "What techniques can be used to defeat ASLR in a system with ASLR enabled libraries?", "completion": "So you see the name of the third player we created smashed the stats and the name pointer. From here on now it\u2019s easy to write the exploit. We just have to do one minor thing, and that is defeat ASLR of libc. Because even if the binary is not using ASLR, other system libraries on an ASLR enabled system will have randomized addresses. But that\u2019s easy with the name pointer we control, because we can not only use it to write data, but also read memory when we show the player and try to print the name."}
{"prompt": "What is the Python code used to connect to the port 1337?", "completion": "So we can read a libc function address from the global offset table and then calculate offsets from there. In our case I would like strlen, so we can take the GOT address of strlen and use that in the name we use to overwrite the name pointer. But let\u2019s just start developing the exploit. I\u2019m writing it in python. So first I setup a socket to connect to the port 1337. I also implemented a recv_all function that reads data until no data is read in a certain timeframe. So until there is a timeout. Then we can simply send the inputs, that correspond to the menu selections that trigger the bug."}
{"prompt": "What is the telnetlib trick that allows for sending and receiving data?", "completion": "So here. add player. Name. stats. Select player. Delete the two. And then create a third player and include the address we want to set the name pointer to. In our case the address of the global offset strlen entry. And then we send a 5, which does show_player, thus printing wherever the name pointer points to. And then we do some stuff to extract those raw bytes, because it should point into the global offset table and print the address of strlen. After that we use the cool telnetlib trick, that just simply hands over the socket to us, so we can send and receive data."}
{"prompt": "What is the process for calculating the base address of a libc binary?", "completion": "And when we run it doesn\u2019t crash and outputs the strlen address. We can also now press 5 again to see how the player looks like. And these weird bytes here are the address of strlen. And so we extract those. Now we want to calculate the base address of libc. The address where the libc binary is loaded to. To do that we can simply open the provided libc, or your local libc, depending on if you develop the exploit locally or for the remote server. And then you look for strlen and copy the address."}
{"prompt": "What is the process for calculating the absolute address of system on the server?", "completion": "It\u2019s different for not ASLR binaries that have their loading address specified, but in this case the addresses start at 0, so this is the offset inside the binary where this function starts. So when we now take the absolute address that we leaked from the server and subtract the offset, we get the address where libc starts. And then we look up the address or offset for system, and when we add this offset to the libc base, we get the absolute address of system on the server. We can run it, and there it is."}
{"prompt": "How can we bypass the realloc function when modifying a string in a program?", "completion": "That\u2019s the address of system on the server. And then we can use the edit player, edit name function, which will then change the name, but the name is pointing into the global offset table of strlen, so we will overwrite that address. Some of you might have thought that wouldn\u2019t work because you noticed a realloc on the name, but in fact that realloc only happens if the string you entered is longer than the string already stored. And the address of system is not longer than the address of strlen, so we bypass the realloc and just write to it."}
{"prompt": "What skills are needed to find and exploit kernel vulnerabilities?", "completion": "Do you need to know how to program, in order\u00a0 to get into hacking, or having a career in IT security? My personal opinion and short answer\u00a0 is \u201cyes\u201d, but there is more I want to talk about. Reality is a bit messy and the\u00a0 long answer is \u201cit depends\u201d. So let\u2019s explore a few thoughts about this. As you hopefully know, recently I made videos\u00a0 about SerenityOS, specifically looking at kernel security issues. And if you follow me on twitter,\u00a0 you might have seen me retweeting several videos Andreas Kling made about other vulnerabilities\u00a0 in SerenityOS where he even develops exploits for them. They are amazing, check them out. So Andreas\u00a0 Kling clearly has the knowledge and skills to find kernel vulnerabilities AND write exploits\u00a0 for them. It seems even very easy for him."}
{"prompt": "How did Andreas develop his hacking skills?", "completion": "So if YOU want to get to that same\u00a0 level, you might ask yourself: \u201chow can I get there?! How to learn all\u00a0 those skills?! Are there courses I can buy?!\u201d I mean, you might want to watch more\u00a0 liveoverflow videos and checkout the binary exploitation playlist and\u00a0 CTF writeups. Sure\u2026 that might help. But let\u2019s specifically look at Andreas'\u00a0 experience and try to figure out how he got those skills - maybe you can copy it. If\u00a0 you map Andreas\u2019s experience on a timeline, then for basically all his life he was doing\u00a0 programming. He worked as a developer for Nokia and Apple. He worked on WebKit, the browser\u00a0 engine. Here a random webkit blogpost from 2013,"}
{"prompt": "What skills are required to switch from programming to hacking?", "completion": "and see the author? It\u2019s andreas! Then in 2018,\u00a0 he started programming his own operating system Serenity OS, and now just here at the end,\u00a0 he did vulnerability and exploitation stuff. Without specifically learning it. His many\u00a0 years of programming lover level code, which of course also means tons of time spent\u00a0 debugging weird functionality bugs, investigating crashes, understanding how memory and assembly\u00a0 works, and so forth. Through programming he acquired ALL THE SKILLS needed to just switch\u00a0 over to do some hacking. Just like that."}
{"prompt": "What programming skills are necessary to do system exploitation?", "completion": "And I think if you want to do this kind of system\u00a0 exploitation, If you are aiming for understanding or even creating jailbreaks, browser exploits,\u00a0 and all that other cool exploitation stuff, I don\u2019t think you get away without\u00a0 programming. You either already have programming experience in your past, or\u00a0 you have to acquire it along the way. And that makes sense, right?\u00a0 If you want to exploit a C++ program, it makes sense that you\u00a0 need to know the C++ language. Mh... okay... But then there is this\u00a0 curious case of web security. If you listen to various bug hunter interviews,\u00a0 there are quite a few successful hackers,"}
{"prompt": "What are some popular tools for web hacking?", "completion": "who say they don\u2019t have programming experience.\u00a0 And while I cannot fully understand that, because I do come from a programming\u00a0 background, I can see why that can work. There are a lot of tools to perform web\u00a0 hacking and you don\u2019t really need coding. You can use Burp to manipulate HTTP requests. You\u00a0 can use SQLmap to exploit a SQL Injection without knowing the SQL language. You can bruteforce\u00a0 parameters and API paths with stuff like ffuf. You can copy & paste XSS payloads and hope to\u00a0 see an alert() popup. And then there are even full vulnerability scanners\u00a0 like Burp or Acunetix or so,"}
{"prompt": "What is the difference between system exploitation and web hacking?", "completion": "where you just press a button, and then you take\u00a0 the result and sell it as an overpriced pentest report. You can do a ton of web hacking\u00a0 without actually knowing programming. And being \u201csuccessful\u201d in it. At least in\u00a0 the financial success sense. To me that is not very satisfying and boring. It\u2019s not\u00a0 how I measure \u201csuccess\u201d. But doesn\u2019t matter. So I was wondering. If system exploitation\u00a0 clearly requires programming knowledge. And web hacking does not necessarily\u00a0 need it. What is the difference?"}
{"prompt": "What is the standardized protocol that web apps have to use?", "completion": "Usually I say, if you want to exploit\u00a0 a C program, you should know C. If you exploit a php website, you should know\u00a0 php. In some abstract way you can say: \u201cyou need to know the language of your target\u201d. But web apps have one big difference to a local C program. The web has a standardized protocol. A\u00a0 standard language EACH web app speaks. It doesn\u2019t matter if the web app is developed in php, python,\u00a0 java or even C, in the end they all have to speak HTTP. But that\u2019s not all. Every USER of\u00a0 webapps uses a standardized tool to access those apps - namely the browser. So different\u00a0 languages can cause the same kind of issue,"}
{"prompt": "How can hackers identify and exploit web-based vulnerabilities?", "completion": "and you can write tools to look for those issues.\u00a0 Regardless if it\u2019s server-side attacks like SQL injections or logic flaws, or client-side\u00a0 attacks like CSRF or XSS. Those issues have all one thing in common. And that is they exist\u00a0 in the standardized ecosystem of the web. So a web hacker doesn\u2019t necessarily have to understand\u00a0 the programming languages behind it. It\u2019s enough to speak the first layer of languages, the web\u00a0 protocols and understanding the web ecosystem. For system exploitation or binary\u00a0 exploitation this is what is different."}
{"prompt": "What are some of the benefits of understanding how a website is built for web hacking?", "completion": "Every program written is different and has\u00a0 a different way of interacting with it. Exploiting sudo is different\u00a0 than exploiting the kernel. But does that also mean, if you want to\u00a0 do web hacking programming is useless? No. Absolutely not. There will always be issues\u00a0 that depend on the language or frameworks used. And so understanding how a website is built\u00a0 will always expand the possible issues you might think or know about. I also think\u00a0 it helps with the creativity of hacking, because programming is in my opinion a creative\u00a0 thing. And of course if you know programming,"}
{"prompt": "What are some IT security jobs that do not require deep technical knowledge?", "completion": "you can also write your own tools and\u00a0 scanners to help you do a better job. But everything I talked about until now, is a\u00a0 very specific area of IT security. It\u2019s really the industry of bug bounty, vulnerability research,\u00a0 code audits, application security and so forth. But IT security is much larger than that. There\u00a0 are TONS of jobs, maybe even the majority of jobs, that do not require this deep technical\u00a0 knowledge. Doing like Network, firewall and VPN installations, working in a SOC\u00a0 (security operations center), triaging reports,"}
{"prompt": "What type of security activities do not require programming knowledge?", "completion": "doing security awareness against phishing, doing\u00a0 checklist ISO certifications, or even classical pentest where you scan networks with tools. All\u00a0 that stuff doesn\u2019t require programming knowledge. But you know this channel, this channel is not\u00a0 about this weird enterprise world of \u201csecurity\u201d, I wanna make videos about \u201chacking\u201d\u00a0 in the classical sense. I want to explore systems and understand\u00a0 everything on a deeper level. That\u2019s what makes me excited. And\u00a0 I think that area of IT security does require programming experience."}
{"prompt": "What are Andreas Kling's thoughts on IT security bachelor degrees?", "completion": "And that\u2019s why for me IT security is never an entry level position. For me IT security\u00a0 is a specialization in IT and builds on top of a general broader IT foundation. That\u2019s also why I\u00a0 am sceptical about IT security bachelor degrees. Anyway. One last call to action. I think for\u00a0 anybody who doesn\u2019t know programming yet, if they can read tons of different examples why\u00a0 people got into programming and what others can recommend, that is super helpful. So please share\u00a0 your programming motivation and experience in the comments. I\u2019m sure it will help a lot of people\u00a0 to find a cool project to start programming."}
{"prompt": "What motivated Paul to write an email to the host of the life overflow IT security podcast?", "completion": "Welcome to the first episode of the life overflow IT security podcast focusing on IT security research and the researchers behind it. As you know, I have a Youtube channel where I make videos for example to show, how binary exploitation works buffer overflows use-after-frees and so forth and I think the video format works out quite well and In the same way how I saw people looking for a really technical YouTube channel I see people looking for technical podcasts, and there are some really nice security podcasts, but as a podcast listener myself They were not quite what I was looking for So I've been contemplating for a while now how I could make a useful technical podcast and record some tests myself But I didn't really like it, but then Paul a security researcher from the Moscow State university Wrote me an email with subject:"}
{"prompt": "What is FFmpeg?", "completion": "\"Let's make a video\" And he wanted to talk about how he and his friend Emil Lerner Found several vulnerabilities in ffmpeg and how they exploited it. And this video will be coming, but we also had a really nice conversation just talking about the process of getting there and while we were talking I realized this is the kind of podcast I would listen to So this is an experiment first time doing something like this It will likely evolve as I learn more about podcasting so I'm really looking forward to feedback please write me an email to LiveOverflow@gmail.com. So let's get started FFmpeg is an open source project that creates libraries and tools to handle a huge amount of different multimedia files."}
{"prompt": "What educational accomplishments has Paul achieved?", "completion": "For example you can convert videos, extract jpegs from videos, cut audio files, create a time-lapse from pictures And it supports many different file formats and FFmpeg is used by a lot of applications that do something with audio or video and Paul and his friend email found several new vulnerabilities in it, but before we start how they did it Let's meet Paul first He's a student at the Moscow state university or maybe I should say he was he just got his Bachelors. Today, I have became a graduated bachelor."}
{"prompt": "What CTF team did Paul join at his university three years ago?", "completion": "And like me, he seems to be a student who gets really obsessed with something so much that he sits in class and wants to use the time To learn more about exploitation. When I sit in the lectures I'm trying to do some binary exploitation challenges because I'm not that much interested in the (class) material and instead I'm trying to spend my time as much efficient as possible to get better at What I'm interested in. So he clearly knows what he wants now But there wasn't always the case. So basically I didn't know that I would be so much interested in binary exploitation even two years ago because I Started my path as a web application hacker, and I was like very interested in it. I think three years ago, or Yeah, three years ago. I have joined the Bushwhackers CTF team at my university And I was like really happy with it because there were so much interesting stuff that was going on here, we did the CTF as some our teachers were getting?"}
{"prompt": "What motivated Paul Cher to learn more about information security?", "completion": "New courses [in] at the University that were about the web hacking But later, I decided that I want to know everything about the information security. I want to know about the Cryptography, I want to know about the binary exploitation reverse engineering and so on so as I'm getting Deeper and Deeper at the reverse engineering and binary exploitation. I am becoming more and [more] interested in it and First I Did it at some CTFs? just the binary exploitation because Motivation for me was that at the time our team was able to solve like every web challenge That was on the stairs, [but] we weren't able to solve Exploitation challenges which makes us a little bit worse But it's not so far now because there are a lot of people that came to our Security laboratory came to our team that do a lot of binary exploration and some of them are doing it's even much much better than me and I still think [that]"}
{"prompt": "What is Paul Cher's goal in life when it comes to security research?", "completion": "this is the CtF are basically the good way to improve the good point to start your way and but this is not this should not continue for long enough because When you start doing the like binary exploitation in steps you have to show something to the world That you're not just a CTF player you have to show [that] you're like a researcher that you are doing it for something So this was a good chance for me to show that well [the] binary exploration is working the Stack Canary does not prevent of all the bugs all these kind of stuff, so I find that making a good Research is actually my goal like my life goal So making the world more secure finding more and more interesting bugs Improving in the real world binary exploitation, and this is my like life goal He has an interesting point here, so he used CtF Security capture-the-flag competitions to learn more about exploitation and he also recommends it as a good starting point But he also said that at some point You [should] move on to some [real-world] research and this ffmpeg research was his way into the real world For me. This was this research was a chance to Do something real for this world."}
{"prompt": "What is a mnemonic phrase and how is it used to derive a private key?", "completion": "Okay sorry sorry, I know you wanna see more technical stuff, but I think it\u2019s important to hear a bit more about why you would even use a cryptocurrency hardware wallet and what you protect against. What\u2019s your threat model. These devices promise that they are more secure than an alternative but threats are multifaceted and I want to explore this a bit more. When you unpack the Ledger you will find a paper called Recovery Sheet. That is actually intended to backup your private key, by writing down the mnemonic phrase that can be used to derive your actual private key from."}
{"prompt": "What are the differences between a paper wallet and a hardware wallet?", "completion": "Basically, by indirection, it is your private key. Now why would Ledger, this supposedly awesome secure wallet tell you to write down your secret key on a paper? If the paper is more secure then why would you buy a ledger? This comes down to the threat model and the huge amount of different situations you have to consider. The paper wallet and the hardware wallet cover different aspects and are thus in some way difficult to compare. I mean we can compare them but we can\u2019t rank them. Which one is better, totally depends on a given situation."}
{"prompt": "How can carrying a paper wallet be a disadvantage?", "completion": "The advantage of a paper wallet is, that everybody understands the strength and weaknesses of paper. Even amish understand the limitations of a secret written on a piece of paper. And this is a huuge advantage. You understand that you shouldn\u2019t carry it around in your pocket because you could loose it. Which means you definitely shouldn\u2019t travel with it. It\u2019s also obviously not a digital device so it can\u2019t get malware. You also understand that if somebody breaks into your house they could steal it."}
{"prompt": "What are the potential risks of entering a private key into a device to perform cryptographic computations?", "completion": "And so you also know that a small mini-safe might prevent simple thieves, but also that a huge secure built in safe is better to protect it. But also that your kid could shouldersurf you when you enter your code to the safe. You also understand that paper can burn in a fire or be destroyed by water damage. But also that everytime you want to access your cryptocurrencies, you need to enter that private key into some device to perform the cryptographic computations, and those could have malware. You get the point, you understand, probably every kid understands, the limitations and advantages of paper."}
{"prompt": "How do hardware wallets like Ledger, Trezor, KeepKey, and Bitfi help to back up private keys?", "completion": "Because of that Ledger encourages you to write it down. Paper is probably the easiest to understand method to store a private key, because everybody understands what it takes to keep that safe. That\u2019s why it\u2019s a great way to backup your key. But it\u2019s also obvious that that might not be true for everybody. For example if you travel a lot, then where could you keep that paper safe. It has limitations. And I hope that makes sense. Now what about these hardware wallets. Ledger, Trezor, KeepKey, Bitfi?"}
{"prompt": "What cryptographic algorithms are used to ensure that the private key never leaves the hardware wallet?", "completion": "In a very simple sense they are devices that somehow store your secret key, but also perform the cryptographic algorithms, so the key never leaves the device and for example malware on your computer can\u2019t steal your coins. So this is probably the biggest threat model that hardware wallets want to cover. Protect YOU from malware you might get on your internet connected laptop, because you download cracked games bundled with a trojan after you put all your money into bitcoins instead. But this is simpler said than done."}
{"prompt": "What is the functionality of the built-in display on the Ledger hardware wallet?", "completion": "There are a lot of different ways how this can be achieved, so let\u2019s quickly look at a few hardware wallets and what they consider their main features. Ledger supports different apps to support different crypto currencies. Those apps run on the secure element of the Ledger. It has a built in display to verify transactions It has buttons to confirm transactions Access to the ledger is protected by a PIN, which apparently erases your data if it was entered wrong three times. It also supports FIDO, which is something entirely different but super nice, I also use U2F for many of my accounts."}
{"prompt": "What are the features offered by hardware wallets such as Ledger, Trezor, and Keep Key?", "completion": "And then the most funny feature is the Backup & Restore feature, that your accounts are backed up on a recovery sheet. So this paper is one of the notable six features coming with the Ledger. Pretty funny. Trezor has more transparency due to open source it also features a display and buttons to verify transactions and you also get a paper to write down your recovery key. It also has PIN and passphrase entry to prevent simple access to your wallet. Keep Key also offers you to backup your recovery sentence on a paper."}
{"prompt": "What measures are implemented in hardware wallets to ensure secure storage of private keys?", "completion": "Also is protected by a pin entry. And the display also allows you to verify transactions before sending them. And apparently it\u2019s virus and malware proof. And there are probably more but the point is not to show you all the available commercial products. I just wanted to show you that the idea is generally the same. So let\u2019s talk quickly about why they are sharing those same traits. Those were: Backup and recovery by using a paper wallet Secure storage of your private key A display to show some critical information Some kind of buttons or input And a Pin or passphrase First of all, digital devices can be destroyed,"}
{"prompt": "What hardware countermeasures are implemented in the Ledger secure element chip?", "completion": "they can break or can be lost. Especially because these hardware wallets are intended to be carried around with you. So it\u2019s important that you have backups. And maybe a backup of your backup. Or some multisig setup where you give different trusted entities different pieces. So that\u2019s a general threat everybody knows. Then we have the secure storage. Now the Ledger for example uses a secure element which is a special chip which is intended to be a secure chip. There are a lot of hardware countermeasures implemented in there and there is a bit of secrecy around it what they actually do, but that\u2019s just how it is."}
{"prompt": "What is the difference between the Ledger, Trezor, and KeepKey hardware wallets?", "completion": "As you know from the previous video, the Ledger has a Secure Chip and an insecure chip. The Trezor and the KeepKey just have a simple non-secure chip. But that doesn\u2019t mean that much. The problem with the Ledger was not that it\u2019s not a secure chip, but that they don\u2019t care that you could run malicious code on it. Anyway. Then we have a display and buttons. And that becomes super important when we talk about the probably most important case. Malware on your computer. There are two possibilities for a regular software wallet."}
{"prompt": "What are the two main options for storing a private key on disk?", "completion": "First is you just have the private key somewhere on disk. Or the second option is that the key is encrypted and requires a passphrase or pin to decrypt first. In either case the key is at some point accessible for malware on your computer to steal it. These hardware wallets are intended to be used together with a software on your computer and so even if a malware would spoof the address shown to you on your computer, or try to create transactions without your knowledge, the device will show this request to you and you can accept or decline."}
{"prompt": "What are the benefits of using a hardware wallet to store cryptocurrency?", "completion": "And all hardware devices kind of fulfil that same purpose. Offload the private key and crypto calculations to a second device so that your coins are safe even if your regular internet connected computer is compromised. Now if you trust your machine to never catch malware, or never catch malware that targets your coins, then making sure your private key is encrypted when it\u2019s not used, is probably enough. If your device is stolen or you forget to lock your laptop, your coins are safe. But if you want an additional layer, because you can\u2019t trust your machine, you can offload that stuff on a second device."}
{"prompt": "What are some methods of creating a secure hardware wallet?", "completion": "And you could totally use a raspberry pi or an old laptop that will never be connected to the internet, or firewalled and only allow to connect to the crypto networks. Then do the crypto calculations on there. And have full disk encryption with a passphrase to prevent access in case it\u2019s stolen. It\u2019s a simple clumsy hardware wallet solving the same threat. But as you may slowly understand is, then why would you not just use a raspberry pi, or why would you want a ledger or a trezor instead of a keepkey."}
{"prompt": "What threats do hardware wallets protect against?", "completion": "Well, there are nuances to everything. A HUUGE factor is, that it has nothing to do with security. And that\u2019s convenience. These hardware wallets are just super convenient. I personally don\u2019t mind to spend money on something that is less hassle. And maybe some wallets support some obscure scam coins that you really want. So from this highlever perspective you could use any hardware wallet. They all implement pretty much the same thing and aim to protect against the same threats. So why not just get the one you feel the coolest with."}
{"prompt": "What security measures does the BITFI wallet have in place to prevent successful hacking?", "completion": "Except the BITFI wallet. DO NOT BUY the bitfi wallet. So the other day a new hardware wallet appeared on the scene, the bitfi wallet. Heavily endorsed by charlatan, fraudster and scammer John McAfee. That alone should already ring your alarm bells\u2026 buuuut\u2026 I got baited into buying two for doing some research, because of the ridiculous claim that it\u2019s unhackable and they offer 100.000$... shortly after I placed my order I found the bug bounty rules what exactly they require for a reward. They say they put some coins on it, and if you successful extract the coins and empty the wallet, this would be considered a successful hack."}
{"prompt": "How can one determine the private key associated with a bitfi wallet?", "completion": "So basically they only consider loosing or stealing of the wallet a valid threat. But that\u2019s complete bullshit. That\u2019s just one possible situation. The bitfi wallet prides itself with Open Source, which is just a charade because only the key derivation algorithm is open source. As you can see here, you plug in your passphrase, along some other stuff and the private key falls out at the end. So even if you completely get access to all the data on the wallet, you have no chance. You need to bruteforce that."}
{"prompt": "What threat model is discussed in the video transcript?", "completion": "And so even putting your regular encrypted wallet on your parents malware infected machine is equally safe. Because to decrypt it you need the passphrase. That threat model is soo stupid. Especially because that device is just a shitty repurposed android phone, with wifi, so that doesn\u2019t scream confidence at all. They say it\u2019s unhackable because they at least understand basic math and crypto and know that the data is worthless without the passphrase so they structured this bullshit bounty around it."}
{"prompt": "What are the differences between the security offered by the Ledger hardware wallet with a secure element and the Trezor hardware wallet with a regular chip?", "completion": "And the fact that maybe you can get malware on it and steal it as soon as the user unlocks the private key - doesn\u2019t count. Urgh\u2026 makes me so angry. I really hope somebody finds a flaw int the key derivation which lowers the brute force search space drastically. Anyway\u2026 So we talked about the general more highlevel goals. But as I just hinted at with the bitfi wallet, there are small nuances to everything. For example in some way the Ledger with the secure element might offer much stronger protection than just a regular chip storing the key like in the Trezor, though hopefully both devices have the key encrypted and derive a decryption key from the user input."}
{"prompt": "What are the security features of the Ledger hardware wallet?", "completion": "But then also the Ledger allows running apps on the secure element, which is sandboxed and offers only restricted syscalls, but there were issues with that before, so I\u2019m not sure if that was a good architecture choice. Then you have the super easy ability to run untrusted code on the Ledgers unsecure processor, a malware can spread to the Ledger. But as we know from last video, that might not even be problematic. While the Trezor also has an unsecure chip but at least tries to make getting malicious code on there harder."}
{"prompt": "What security measures are taken by hardware wallet developers to prevent malicious software updates from being pushed to the device?", "completion": "Another aspect is, and I\u2019m not paranoid, I totally trust Ledger as much as I trust Windows and Google and Apple to not push malicious updates, but theoretically those wallet developers could push a backdoored software update to steal your key. And then there might be even smaller nuances. How fast does the hardware wallet lock itself if you walk away from your machine. How long can passphrases or pins be and how easy is it to enter them. Are keys extractable from memory if somebody does a cold boot or somehow accesses the memory while device has still power vs. when it was powered off."}
{"prompt": "What are the security implications of using a paper wallet as opposed to a hardware wallet?", "completion": "And mauch much more. And the problem here is, that I don\u2019t even f\u2019n know what to do now. All these hardware devices are extremely complex. Just because I spent now several days with the ledger I have a better understanding of the architecture and can criticise and praise it in certain aspects, and I can\u2019t do that for any other wallet. And I\u2019m even pretty experienced with IT security compared to the average person. How do you expect people to use these devices well. And this is where we come back to the paper wallet."}
{"prompt": "What are the possible weaknesses of a Ledger hardware wallet?", "completion": "The paper is so easy to understand and it\u2019s easy to be confident when handling it. And so even if I have some criticism about the ledger, because I understand better the possible weaknesses, right now, I would probably prefer a Ledger over another wallet, just because the research into it empowers me as a potential user to use it\u2019s potential and pay attention to the situation where I don\u2019t trust it. I mean I don\u2019t really have use for a hardware wallet anyway. But that\u2019s an interesting perspective for me."}
{"prompt": "What laws protect researchers and allow reverse engineering?", "completion": "And to become a bit political, that\u2019s why it\u2019s so important that we have to fight for more laws protecting researchers and allowing reverse engineering, because these things are so complex without being allowed to look under the hood and check if the marketing claims are correct, we are lost. So I hope this unstructured rant helped you a bit more in understanding the complex threat models and how to analyse if a security product really does what it hope it does. Next video we will start with opening up the Ledger Nano S."}
{"prompt": "What is the difference between the code in stack level 3 and the code in stack level 0?", "completion": "In this episode we start to get a little bit closer to a full buffer overflow. In the last episode we have learned how a Buffer Overflow can change local variables, which are stored on the stack. Now we will have a look at stack level 3, which is very similar. If you forgot how we were able to solve stack level 0, you should go back and watch it again. When we look at this code, we see that it is basically the same. The only difference is the name, instead of a modified variable, we have the fp variable,"}
{"prompt": "What is the syntax for defining a function pointer?", "completion": "which is defined as a function pointer. The syntax looks a bit ugly, but if you check the if case, it simply checks if fp is not zero, and then just calls fp, as if it were a function. Now you know that a function has an address location in memory. So it will basically call whatever address is stored in fp. Now like the modified variable in stack0, the function pointer fp gets set to 0 and after the gets function it will be checked if it\u2019s not zero anymore. So we know that fp must also be stored on the stack."}
{"prompt": "What is the command to determine the address of the win() function in gdb?", "completion": "As a hint it says, that we can use gdb or objhump to determine where the win() function lies in memory. So first let\u2019s use gdb and you can use examine or print to get the address of win. Then set the disassembly flavor to intel and disassemble main. Exactly like stack0, we can see that it makes space for hex 60 bytes on the stack. Then we set esp offset 5c to 0, so that is the location of the fp variable. After the gets, we compare the value if it is still 0 and if that were not the case, we load the value into eax down here, and call that address."}
{"prompt": "How do you set a breakpoint at a call in the program to overwrite a value on the stack?", "completion": "So let\u2019s set a breakpoint at this call. Now execute it and enter enough characters to overwrite this value on the stack. Exactly like last video. Ok we hit the breakpoint, let\u2019s look at the registers, and we can see, that we have succesfully set eax to 41414141, which is the ascii value of capital A. And the next instruction tries to call this address. So basically jump there. But that is obviously invalid memory, se we get a Segmentation fault. Now open a second ssh session. And create a python script, that will be our exploit."}
{"prompt": "What is the hexadecimal value of the character that modifies the value of eax?", "completion": "So let\u2019s first try to figure out which offset controls eax. So simply print a recognizable pattern. For example the alphabet. Ok. cool. So pipe this output in a file. Now you can use this file in gdb as input. So we dont have to type it everytime, it will use the content of that file as input. Now \u201crun\u201d and use the arrow left to redirect the file contents in the standard-input of the program. Ok so eax it\u2019s hex 51, and that is a capital Q. So now we know which offset modifies eax. let\u2019s rewrite the code a little bit."}
{"prompt": "What is the correct way to write a hex address for a buffer overflow exploit to account for endianness?", "completion": "Let\u2019s call this part up to the \u201cQs\u201d - padding. So now we want to write here the address of the win function. So simply use backslash x as hex escape for those byte values. Oh oops. That doesn fit. There is a leading 0 missing. Save, write the file. And check it in gdb. Huh? segementation fault? The address looks a bit weird. Looks like it\u2019s the wrong way around? Well, that is because of the endianess. So the numerical value will be basically the other way around. cool. Eax looks fine now. let\u2019s continue and we get code flow successfully changed!"}
{"prompt": "How does the layout of the stack look like?", "completion": "Now let\u2019s quickly solve the next level as well. This level is our first buffer overflow, where we take advantage of the stack layout. The code doesn\u2019t contain much. There is no function pointer variable we could overwrite. And now modified variable. But it still wants us to execute win. So how do we do that? Now do you remember how the stack looks like from last video? Here is a quick recap: So here on the left you can see the assembler code. And on the right I will illustrate the stack. with the 3 important registers, the instruction pointer EIP, the stack pointer ESP and the base pointer EBP."}
{"prompt": "How does a program know where to return to from a main function?", "completion": "So first it starts somewhere else with a \u2018call main\u2019. Call will push the theoretically next instruction pointer onto the stack. And then jump to our main function. As you can see, when the address of the next instruction was pushed, the stack pointer got incremented and the address placed there. So now comes our push EBP. How do we now know where to return to from main? Well if you remember, call pushed the address of the instruction after the call. So the next value on the stack is where we want to return to."}
{"prompt": "How does a function call store the address where the program should return to after the function is finished executing?", "completion": "And the ret instruction is basically just popping this address into the instruction pointer. And thus jumping back where we came from. So as you can see, when a function is called, the address where we want to return to, will be stored on the stack. So instead of overflowing a local variable, we can simply overflow the return pointer on the stack. And when main would return, it would read the wrong value and jump there instead. So let\u2019s use the code that we have just written, and modify it a bit."}
{"prompt": "What hexadecimal value did the instruction pointer and the base pointer need to be overwritten to in order to redirect code execution?", "completion": "Let\u2019s make the payload a bit longer and simply throw it at this program in gdb. Segmentationfault in hex 54, so we succsefully redirected code execution, to bad memory. And if you look closely you can also spot that the basepointer is hex 53. So that one was also overwritten, because if you remember from last video, the old basepointer is also stored on the stack, right before the instruction pointer. And hex 54 is T. So T allows us to control the instruction pointer. This time let\u2019s use objdump to find the address of the win function."}
{"prompt": "How can we encode an address as a string using Python?", "completion": "With -t we get all symbols, and then we can grep for win. So there is our address. Now let\u2019s modify our exploit code. Let\u2019s remove everything up to the S, because that is the base pointer. Now create two variables ebp and eip. We don\u2019t care about EBP so we can just set it to whatever we want. And next we want to set the instruction pointer. But let me show a better way to encode the address as a string. So import struct. And then you can use struct.pack, to convert the address from the integer number into a binary string."}
{"prompt": "How does a buffer overflow exploit work to change the code flow of a program?", "completion": "Then print the padding and append the ebp and eip variable. so let\u2019s execute this exploit and pipe it into the stack4 level. Codeflow was successfully changed! Amazing. We smashed the stack and controlled the instruction pointer. But you still get a segementation fault? The reason for that is, that after the win function is complete, it tries to return to the next value on the stack, which is now some gibberish, and likely not in a valid code area. So it will crash eventually. But we don\u2019t care, because we executed what we wanted."}
{"prompt": "How can understanding different programming languages help to find security issues in software?", "completion": "To be able to find security issues in software, one has to understand how software is written. It\u2019s very helpful to explore different programming languages to understand their differences and similarities and to get into this special way of thinking. Often when I use a software I imagine how a certain piece of it might have been implemented - this makes me think about the software architecture and potential difficulties the developers may have had, which helps to find bugs that can be exploited."}
{"prompt": "What are some of the differences between the syntax of the C language and the Python language?", "completion": "When I was younger I used programming to write damage calculators for browser games or simple chat programs that we could use at lan parties to communicate. Nowadays I use programming more as a tool to solve other problems or help me with repetitive tasks. To get a feeling what programming is like, we will have a look at a very simple program implemented in the very old and low level language C and in the next video we use the more modern scripting language python. You will notice a lot of similarities in terms of structure but also how different their syntax looks like."}
{"prompt": "What is the PATH environment variable, and how is it used when executing a program?", "completion": "Let me first show you what our little program will do. To execute it you simply have to enter the path. Because we are in the same folder we have to start the path with the \u201cdot\u201d, which is an alias for the current location. Maybe you are wondering why the other programs like \u201cLS\u201d don\u2019t require a full path to execute them. The reason for that is when you enter a command, or generally speaking the name of a program, the shell will look at the configured PATH environment variable, which contains a list of directories where to look for programs."}
{"prompt": "What is the command used to determine the location of a given program?", "completion": "There are many different environment variables that all have their purpose, but because we are only interested in the PATH we can use the pipe to redirect the output of env, into another program called grep, which can filter for lines that contain \u201cPATH\u201d. I use grep to filter output of other programs all the time. It\u2019s one of the most useful tools. Another way to get the content of PATH is to use echo to print the variable. Now let\u2019s use \u201cwhereis\u201d to find the location of the LS program, which shows us that it is indeed in a location specified by PATH. The paths are separated by the colon."}
{"prompt": "What is the purpose of adding the user's home folder to the PATH variable?", "completion": "If we would want to execute our program from every location like LS, we can simply add this current directory to the PATH variable with export. A nice trick if you want to copy something in the terminal is just to mark it, and then press the mouse wheel. this will automatically paste the marked text. Now add the user\u2019s home folder to the PATH and then you can execute this program like any other. Now let\u2019s dive in. C is over 40 years old and despite it\u2019s age it\u2019s still used a lot. Its strength is its simplicity - by that I mean that there are not too many language features and thus makes it easy to understand - at least once you understand how a CPU works. Many beginners feel that C is hard, because it feels unintuitive and too low level at first, but you will notice in later episodes that it is very close to assembler, which is ideal to understand and imagine how a computer works."}
{"prompt": "What command is needed to install vim (vi improved) with sudo permissions?", "completion": "our goal is to look nerdy. So we obviously will use a command line text editor called vim. Joke aside, it really makes sense to learn vim, because we actually need it a lot. vi is already installed. But vim (which stands for vi improved) is a little bit nicer and is not yet there. But we get this nice little suggestion to install it with sudo apt-get. The sudo prefix is needed, because only the root user can install new software. Enter a Y to continue Now enter vim and the filename to start editing."}
{"prompt": "What is the name of the entry function in a C program?", "completion": "Before you can type you have to enter the \u201cinsert\u201d mode by pressing i. Keep an eye on the status bar at the bottom, which tells you what you are doing. To exit the insert mode hit escape. And then you can enter commands with a colon such as colon w to save the file or colon q to exit. or simply colon w q to save and exit. We don\u2019t really have to know more features than that for now, except maybe we want to enable syntax highlighting and display line numbers :syntax on :set number First we want to use the include statement to add the standard i/o (input output) functionality to our program. Next we define the entry function which is always called \u201cmain\u201d. Every C program has this function and this is where our program starts to execute. A function has a name and encloses code that belongs to this function. The parameter variables defined here are standardized. The first parameter is an integer number called argc (which stands for argument count). And the second parameter is a list called argv (which stands for argument vector). For now we will use array, list and vector as synonyms. So those function parameters are infact what we can pass to a program on the command line. Just think of the \u201ccat\u201d command. It takes a filename as first argument."}
{"prompt": "What is the command to access the manual for the printf C function?", "completion": "And if you would program cat yourself, you would access the filename via argv. Now let\u2019s print something by using the printf function and a string as parameter. The backslash n is a special character which stands for newline. We have seen it in the last video already. Let\u2019s save this with ESC, colon, wq, Enter. Just a friendly reminder, read the man page of printf to learn more about this function. To access the manual for the C function printf you have to look in the 3rd section of the manual. So man 3 printf."}
{"prompt": "What command do you need to use to compile a program in C using the GNU C Compiler?", "completion": "To create a program from the text we have to compile it. The compiler converts the text into binary machine code that can be executed by the CPU. We can use the gnu c compiler gcc for that. \u201cgcc\u201d, filename of the code and minus o to specify the output file name. Ohh\u2026 I made a mistake. There is a conflict for argv. So let\u2019s quickly fix that by calling this variable properly argc. Now you can execute it. Awesome! Let\u2019s be a good programmer from the beginning and use -Wall to enable all warnings. Now we get a warning that at the end of the function is no return value, despite having main defined to return an integer number. So let\u2019s fix that by adding a return 0 at the end, 0 means that the program exited without an error."}
{"prompt": "What is the syntax used in the program to indicate where a string should be inserted?", "completion": "You can hit \u201co\u201d instead of \u201ci\u201d to enter the insert mode in vim, which automatically creates a new line below. Maybe you start to realise now how powerful vim can get when you get familiar with the shortcuts. And now it compiles just fine! To make this program a bit more interesting we will add an if-statement. We say that the argument count has to be equal to two. And if that is the case, we will print the same phrase as before, just without a fixed name. We can use this format string syntax of percentage s to indicate that at this place belongs a string. And as first parameter we specify this string, which is the second element of the arguments vector. Yes it says, 1, but it is the second entry in this list, because we always start counting at 0."}
{"prompt": "How can a program indicate that it exited with an error?", "completion": "If we don\u2019t have exactly two arguments, we will print an error message. Good practice is to print error messages not to the standard output, but to the standard error. May seem weird for now, but you will understand it in the future. And instead of printing the second argument, because in this else case we might not have one, we will print the first argument instead. We will also add a return 1 here, and the one indicates that the program exited with an error. Compile this code and test it. As you can see if you don\u2019t specify an argument, it will display the usage error message with the program name. The shell passes everything you typed on the command-line seperated by spaces to the program. And this means the first argument will be your program name."}
{"prompt": "What environment variable can be used to retrieve the username of the user running the program?", "completion": "Now if you set the second argument, the personalized message is printed. Also notice that when you want to have a string with spaces, you have to put it in quotes to indicate that it belongs together. With dollar questionmark you can display the exit-code of the previously ran program, which is either 0 or 1 depending on if we got an error or not. Now let\u2019s play a little bit with this program. We already scratched the topic of environment variables. If you look at them again, you can find the $USER variable, which contains your username. So when we execute the program with dollar USER, it will print liveoverflow."}
{"prompt": "How do you escape a dollar sign in C programming?", "completion": "But what if we actually want to print dollar User? To achieve that we have to escape the dollar. The dollar has a special meaning on the command line. When you enter this text the shell will read what you typed and once it reads the dollar, it knows that the next characters will be the name of a variable. It will then look up the value of this variable and replace it. But if we use a backslash before the dollar, the shell will first read the backslash and knows, that if a dollar is following, it will not treat it as a special character anymore."}
{"prompt": "How can I edit the PATH environment variable in the bashrc file?", "completion": "Wouldn\u2019t it be cool to always get greeted when you open a terminal? Browse to your homefolder again and checkout the dotfiles there. There is one file called bashrc, which is a special file that will be loaded once you open a terminal, and it can contain commands that are executed everytime. Open it in vim, and go to the bottom of the file with shift G switch to the insert mode with \u201ci\u201d or \u201co\u201d. Now we can add the export command from earlier, but because we now know about environment variables and how they are recognized and replaced, we can use this better technique to change the PATH."}
{"prompt": "What command do you need to enter in Vim to delete two lines?", "completion": "And on the next line we add our program with the user variable as argument. Escape to enter command mode, colon, w save it. Open another terminal and be excited! This obviously could have also been easier, by just using echo instead of a compiled C program. But it doesn\u2019t matter. We learned something. As an exercise you should add an alternative version with echo and the environment variable to the bashrc. And you can also modify the vimrc to always enable syntax highlighting for vim. I remove the export command again, because I don\u2019t want to have the home folder in the PATH. Go to the line and press d two times - you have to be in command mode, so hit ESC if you are still in the insert mode."}
{"prompt": "What are some common security issues that can be found on the internet?", "completion": "I cannot believe that I would ever say this. But\u00a0 the internet is full of hacking tutorials. Really, nowadays it\u2019s not difficult to find some article\u00a0 or tutorial or tool that tells you about possible security issues. But this also somewhat\u00a0 has created a problem where we feel like any small thing can be a serious security\u00a0 vulnerability. But of course not everything can be critical and serious. So where is the\u00a0 line, and where is the educational content that tells you \u201cchill\u201d, \u201cit doesn\u2019t actually\u00a0 matter that much\u201d. Where is the balance?"}
{"prompt": "What security vulnerabilities are discussed in the context of the Google Vulnerability Rewards Program?", "completion": "In case you didn\u2019t know, me and some other\u00a0 creators have been partnered with Google to create video content for the Google Vulnerability Rewards\u00a0 Program. So the Google bug bounty program. But we didn\u2019t make just more of the same hacking tutorial\u00a0 that you can find everywhere online. We try to explain why Google does not accept certain kind\u00a0 of reports. Simply speaking, at Google there work tons of skilled hackers who understand the impact\u00a0 of certain vulnerabilities and they always have a good reason why they decided they wont reward\u00a0 certain kind of reports. But it\u2019s a very fine line between what is a vulnerability and what is not a\u00a0 vulnerability, this is a difficult topic and you can argue about it a lot. And so we made videos\u00a0 where we tried to explain Google\u2019s position."}
{"prompt": "What are the security headers discussed in the video?", "completion": "And in the video I\u2019m going to share today I talk\u00a0 about various HTTP Security headers, including Cookie flags and CORS misconfiguration, and\u00a0 I\u2019m going to be a bit more critical about them. As I said there is tons of content telling you\u00a0 about why they matter for security and of course that material is not wrong, of course they\u00a0 exist for good reason, but there is basically no content that tries to balance the sides\u00a0 a bit and so in this video I try to be like \u201ccalm down. Chill. The world is not gonna end\u201d\u00a0 if a site didn\u2019t use certain security headers."}
{"prompt": "What are the benefits of spending time to consider if a security issue is serious or not?", "completion": "Also I believe when you consider, at\u00a0 least for a moment that maybe they are not so serious issues, it really helps to\u00a0 develop a deeper technical understanding about this topic. And even if you watch the video and\u00a0 in the end you say \u201cI still believe this should be reported\u201d, at least you have actually\u00a0 thought about the other side. Anyway. Two more things I wanted to mention as well.\u00a0 First of all, this video was not meant to be advertisement for google, but of course it kinda\u00a0 is. That\u2019s why I labeled it this way. Google paid for this video but not to be shown on here.\u00a0 I know it sounds weird but it\u2019s important for me to mention this. This video was produced for\u00a0 google, to be embedded on their site. Not as an advertisement to be shown on this channel. But I\u00a0 thought my video is a very good educational video,"}
{"prompt": "What type of response headers can provide information on the target web server?", "completion": "I really like it myself. And that\u2019s why I wanted\u00a0 to share it with my audience on here as well. So I\u2019m very curious if any of your\u00a0 opinions about HTTP security headers has changed after watching this\u00a0 video. So make sure to leave some angry comments at the end. Also this\u00a0 video was made before I got glasses. So I guess I take them off now to make the\u00a0 transition into the main video less awkward. When you are hunting for bugs you probably\u00a0 look at all the HTTP requests and responses. And they contain a lot of HTTP headers. The\u00a0 response headers are especially interesting as they can contain interesting information from\u00a0 the target. For example it might tell you which web server is running. Other response headers\u00a0 are important for the functionality of a webapp,"}
{"prompt": "What are two categories of HTTP response headers?", "completion": "such as the content-type, telling the\u00a0 browser how to interpret the response. Or the content-disposition header, which tells\u00a0 the browser if a returned response should be just shown or downloaded as a file. But also some of these headers are so called \u201cHTTP security-headers\u201d\u00a0 and they can be important for security. I\u2019m LiveOverflow and I run a YouTube\u00a0 channel covering various IT security topics. and Google asked me to talk about\u00a0 http security headers in this video. Generally HTTP response headers can be\u00a0 placed in two categories. Headers that \u201cweaken\u201d security if they are added, and headers\u00a0 that \u201cstrengthens\u201d security when they are added."}
{"prompt": "What is an example of a security header that can be used to assess if a vulnerability is present when it is not set?", "completion": "So the big question is now, if a site\u00a0 does not set certain security headers, is that a vulnerability? Online you will find\u00a0 many guides on best-practices on what headers to set or not set. So if you identify such a header,\u00a0 could this be reported to a bug bounty program? Let\u2019s learn more about http\u00a0 response headers for bug bounties Example #1: To figure this out we have to look at a few security headers in\u00a0 detail, to understand what exactly they are doing. And only then will we be able to assess if\u00a0 it's a vulnerability when they are not set."}
{"prompt": "What is the purpose of the X-Frame-Options HTTP response header?", "completion": "X-Frame-Options: \u201cThe X-Frame-Options\u00a0 HTTP response header can be used to indicate whether or not a browser should be\u00a0 allowed to render the page in an .\u201d With the  HTML tag you can embed another\u00a0 website into your website. And this could allow an attacker to perform a so-called click-jacking\u00a0 attack. If you don\u2019t know what clickjacking is, checkout this article, which also has a\u00a0 great video from reconless explaining it. But they also explain why clickjacking is not\u00a0 a very serious vulnerability, and why often it is not accepted for a bug bounty reward."}
{"prompt": "What is the best way to protect a website from clickjacking attacks?", "completion": "The thing is, yes, setting the X-Frame-Options header in the response to SAMEORIGIN\u00a0 or DENY, would prevent such an attack. But that\u2019s not the only way you can protect your\u00a0 website from clickjacking. Maybe sounds dumb, but when you simply have a website where\u00a0 there is no actual impact with clickjacking, clickjacking makes no sense. In that case\u00a0 it\u2019s safe as well. Does that make sense? Generally speaking: very critical functionality on a site + clickjacking can be a vulnerability. Then\u00a0 setting the X-Frame-Options header makes sense."}
{"prompt": "What HTML tag is used to embed content from YouTube?", "completion": "\u201cBoring\u201d and less critical actions available on a\u00a0 website + clickjacking, doesn\u2019t matter that much. Setting the header in many cases doens\u2019t\u00a0 hurt. It probably adds a bit of protection, but the missing header doesn\u2019t necessarily open\u00a0 you up to attacks. You have to understand that. AND then of course there are cases where the\u00a0 website WANTS to allow others to embed it. For example on YouTUbe, when you click on SHARE,\u00a0 you can copy an HTML snippet for embedding the video, and it has an  tag. So YouTube\u00a0 WANTS you to be able to embed the content,"}
{"prompt": "What is the purpose of the Content-Security-Policy header?", "completion": "it\u2019s a feature, and of course in that case\u00a0 they won\u2019t ever set the X-Frame-Options header. So you can see, it depends on the context\u00a0 of the website if it\u2019s important for this header to be set or not. Which means you shouldn\u2019t\u00a0 blindly follow best-practice guides, or scanners that tell you that the header is missing. You\u00a0 need to understand if there is actual impact. Example #2 Another important security header is the Content-Security-Policy. CSP. And CSP is awesome\u00a0 because theoretically it can protect your website pretty much from any Cross-Site-Scripting attack.\u00a0 And it even has more features beyond XSS. With CSP you can also set the frame-ancestors to \u201cnone\u201d\u00a0 - which kinda acts like setting X-Frame-Options."}
{"prompt": "What is the importance of setting a script-src CSP header in the context of an XSS vulnerability?", "completion": "So if it could block XSS, wouldn\u2019t\u00a0 it be a very important header to set? Let\u2019s do an example and let's go to the Google\u00a0 bughunter site and have a look at their CSP. Oh?! There is no CSP. mh\u2026 There is this awesome tool from Google engineers called CSP evaluator.\u00a0 And it can help to assess a given policy. In this case there is literally no policy.\u00a0 So let\u2019s just submit an empty text. And the tool reports a high-severity\u00a0 finding. script-src [missing]. So is this a vulnerability in itself? Well\u2026\u00a0 as I said, CSP can protect websites from XSS attacks or other kind of attacks. But because CSP\u00a0 \u201cjust\u201d protects, it doesn\u2019t make it the fix for an issue. If there is an XSS CSP doesn\u2019t fix it, it\u00a0 could just block exploitation. it\u2019s a defense in depth strategy. So setting script-src CSP only\u00a0 matters in the context of an XSS issue existing in the first place. And that means, missing\u00a0 CSP in itself is not really a vulnerability."}
{"prompt": "What does the HSTS header do?", "completion": "again, it depends on how critical the website is, if this protection is really\u00a0 important or doesn't matter. Example #3 Let\u2019s have a look at another header. HSTS.\u00a0 HTTP Strict Transport Security. This really sounds like an important header to\u00a0 set! But what does it exactly do? [it] lets a web site tell browsers that\u00a0 it should only be accessed using HTTPS, instead of using HTTP. [...] for example,\u00a0 the visitor types http://www.foo.com/ or even just foo.com. This creates an opportunity for a\u00a0 man-in-the-middle attack. [...] The HTTP Strict Transport Security header informs the browser that\u00a0 it should never load a site using HTTP and should automatically convert all attempts to access\u00a0 the site using HTTP to HTTPS requests instead."}
{"prompt": "What is the criteria for the browser to honor the Strict-Transport-Security header?", "completion": "This sounds very useful but then why\u00a0 is it considered an invalid report if a site from google is missing it? Well\u00a0 right below there is also this note: The Strict-Transport-Security header is ignored by\u00a0 the browser when your site is accessed using HTTP; this is because an attacker may intercept HTTP\u00a0 connections and inject the header or remove it. [ONLY] When your site is accessed\u00a0 over HTTPS with no certificate errors, the browser knows your site is HTTPS capable and\u00a0 will honor the Strict-Transport-Security header."}
{"prompt": "What is the purpose of an HSTS header?", "completion": "So we already have this weird situation\u00a0 where the header is supposed to prevent users from loading the site with HTTP,\u00a0 but if the site hasn\u2019t been loaded yet, the browser doesn\u2019t know about it. And only\u00a0 honors it once the site was loaded securely once. Which of course is better than nothing, but modern\u00a0 browsers do the same anyway. For example when I visit liveoverflow.com with an http URL, you\u00a0 can see that it tries to go to the http version, but it was redirected to https. Now let me try\u00a0 to go to the HTTP version again, and there is no HTTp request going out. We directly go to the\u00a0 HTTPS version. All of that without an HSTS header."}
{"prompt": "What is the HSTS Preload List, and how is it related to Google?", "completion": "So as you can see, HSTS is not a silver bullet\u00a0 protection and browsers kinda mitigate it anyway. But it\u2019s still generally recommended, and\u00a0 especially together with the hsts preload list (by the way a project by google) it\u2019s good.\u00a0 But you also see that it\u2019s a very known and popular header, Google knows about it.\u00a0 Which you can also see here in the article: \u201cInternally, we are already well aware of our\u00a0 HSTS posture and are actively working on adding HSTS support to additional endpoints\u201d So it\u2019s a known issue to them."}
{"prompt": "What is the same-origin policy and how does it help protect websites?", "completion": "CORS Now we just talked about headers that \u201cadd\u201d security to a site. But there are also headers\u00a0 that could \u201cweaken\u201d the security of a site. And a very typical report is \u201cCORS misconfiguration\u201d. Generally websites are protected by the same origin policy. This means javascript\u00a0 code on for example liveoverflow.com can not send HTTP requests to gmail and\u00a0 leak your emails - the browser says \u201cno I won\u2019t allow liveoverflow.com to access your\u00a0 gmail\u201d. But a webserver can use CORS headers (Cross-Origin Resource Sharing) to actually\u00a0 allow another website to send requests to itself."}
{"prompt": "What are the potential security impacts of setting a very permissive CORS setting that allows arbitrary origins to make requests and also allows setting credentials?", "completion": "And at first sight this seems to weaken\u00a0 the same origin policy. Which it does, so why would anybody do that? Is there any\u00a0 negative security impact? It of course depends. Let\u2019s imagine two websites. One website uses\u00a0 cookie authentication. There is a session cookie. And the other website has token authentication.\u00a0 For each request the code on the site adds an Authorization header with a token. Both websites have very permissive CORS setting, allowing arbitrary origins to make requests.\u00a0 And even allow setting credentials."}
{"prompt": "What is the security impact of setting Access-Control-Allow-Credentials in CORS?", "completion": "Is this a security issue in\u00a0 both cases? Only for one of them this CORS setting is actually an issue. Setting Access-Control-Allow-Credentials tells the browser, that it can add the session cookie to\u00a0 the request. So in this case the request would be authenticated as the current user. And\u00a0 the security impact of this is similar to Cross-Site-Request-Forgery CSRF or XSS. In this\u00a0 case you can perform authenticated requests as the current user. And even read the response. This\u00a0 is really bad. And definitely a security issue."}
{"prompt": "What is the purpose of CORS?", "completion": "But for the other website\u00a0 with token authentication, there is no session cookie. The browser doesn\u2019t\u00a0 set the authorization header for you. So this request would not be authenticated as the user,\u00a0 thus there is no CSRF-like attack possible. So as you can see, context matters and you have\u00a0 to understand if there really is any impact. And you cannot blindly report\u00a0 an open \u201cmisconfigured\u201d CORS. So keep in mind that CORS exists for good\u00a0 reasons. Many websites from Google allow CORS requests, because it\u2019s meant as an open\u00a0 API, that is intended to be accessed from other origins. So you always need to be\u00a0 sure that there is really security impact."}
{"prompt": "What is the effect of the HTTPOnly cookie flag in relation to XSS attacks?", "completion": "Cookie HTTPOnly And before we have a summary of this video, I briefly wanted to\u00a0 mention the httponly cookie flag as well. Cookies are technically part of the\u00a0 headers, so it fits into this video. And the setting causes cookies to only be\u00a0 transmitted in HTTP request, but cannot be read from javascript. It often is considered a\u00a0 defense against XSS attacks stealing cookies, but it\u2019s rather ineffective. Yes the cookie\u00a0 cannot be stolen, so you as the attacker cannot perform requests as the user, but when you have a\u00a0 XSS, the XSS can just send the requests you want for you. And those requests will be authenticated.\u00a0 So it\u2019s really not that big of a deal."}
{"prompt": "What is the purpose of the http-only and secure flags on cookies?", "completion": "And on top of that, not every cookie is really\u00a0 used for authentication. Cookies are a great way to \u201cstore\u201d a bit of information about a user and\u00a0 the app. And they don\u2019t really have any security relevance. So if they are missing the http only\u00a0 flag, or even the secure flag, it doesn\u2019t matter. So as always, you have to really understand what\u00a0 a cookie is for and if there is really any impact. Security Header Summary So let\u2019s summarize what we learned. There is a reason these security\u00a0 headers exist. They do really good things and can protect an application from exploiting\u00a0 other vulnerabilities. But them missing,"}
{"prompt": "What are some of the HTTP security headers that can improve the security of a website?", "completion": "doesn\u2019t necessarily create a vulnerability. Most\u00a0 websites probably could benefit from setting some of them, but it depends a lot on the\u00a0 context. You have to understand the functionality of websites to judge if there is a significant\u00a0 risk. And if it even makes sense to set them, because maybe there is an intended feature why\u00a0 they don\u2019t want it. For example YouTube embedded videos that deliberately don\u2019t want to set the\u00a0 x-frame-options. You cannot blindly copy & paste the result of a scanner reporting that headers\u00a0 are missing. So make sure to read and understand what certain headers do and make sure you\u00a0 understand if it makes sense for an app to add it or not. Does it really do that much for security?\u00a0 Or are maybe developer resources better invested into working on other things? When it comes to bug\u00a0 bounty, always think about the realistic impact."}
{"prompt": "What version of WebKit was vulnerable to the CVE-2016-4657 bug?", "completion": "What does iOS 9.3 and the Nintendo Switch have in common? They both use the browser engine WebKit with a version that is vulnerable to a known memory corruption vulnerability. Remember the news of the pegasus malware for iOS, which was discovered when it was used in a targeted attack against the human rights activist Ahmed Mansoor? That malware used a webkit exploit as the first stage, to gain arbitrary code execution. Qwerty and the pangu team then used this bug in their jailbreakme website. And it turns out, the browser of the Nintendo Switch is so old, that is also has this bug."}
{"prompt": "How can we access the browser in the Nintendo Switch?", "completion": "And this is what a lot of people are using right now as a first entry point in hacking the switch. Obviously the whole jailbreak is extremely complex, even just getting code execution is insane. But I spent now quite some time understanding the bug itself and the first crucial part which creates an arbitrary read/write primitive. So you can overwrite anything in memory, for example function pointers or jitted code. But let\u2019s start at the beginning. First we need to figure out how to access the browser in the switch."}
{"prompt": "What is a captive portal and how does it relate to the Nintendo Switch?", "completion": "You may have heard that the Nintendo Switch doesn\u2019t have a browser, so what the heck am I talking about? Well there is no good browser implemented, but it turns out, that when you connect to a wifi, which requires you to login in a captive portal, it will use a browser view and load that page for you. A captive portal is common in hotels and airports and stuff. So we have to figure out how to load our own website here. When you look at the network settings, you can specify a proxy server, which is great because then I can run a proxy server on my laptop and intercept all the traffic."}
{"prompt": "What IP address should be entered into the proxy settings of the Nintendo Switch in order to establish a connection with the laptop?", "completion": "I use Burp Suite as my proxy server and just have to make sure it listens on all interfaces, so other devices on the same network can use it. So now we just have to enter the IP of this laptop into the proxy settings of the switch. When we now connect to the wifi, the switch will establish connections through this laptop. And we can see here in the Burp history view, that the switch tried to contact conntest.nintendowifi.net That site just responds with a simple string that the connection works."}
{"prompt": "How can we redirect the connection test domain to another IP address?", "completion": "It uses this to check if you have internet connection or not. So, if this check fails, it will think you first need to authenticate from a captive portal. So next we need to redirect this request to a different page, basically our \u201ccaptive portal\u201d. We can do that by simply modifying the /etc/hosts file, to point the conntest domain to another IP. For example localhost. Then we spawn a simple webserver on our machine, for example with php -S. We can place a index.html file in here to verify that this works."}
{"prompt": "What steps are necessary to access a webserver running on localhost from a Nintendo Switch?", "completion": "And with a browser we can see that we have now on localhost a webserver running. So, when the switch now connects to the wifi, it will try to contact conntest and it will go through the proxy on my laptop. My laptop sees in the /etc/hosts file what the IP for conntest is. So the proxy will connect to localhost instead, which will access our index.html file. Let\u2019s try it. We search for the wifi. We connect to it. It will check if there is access to the internet. It didn\u2019t get the expected result for conntest back and tells you you have to login."}
{"prompt": "What is the CVE assigned to the webkit bug exploited in the video?", "completion": "When we now press next, it will load what it thinks is the captive portal. Now we have access to a browser that loads our website. We can also have a look at the requests in burp, which shows us the User Agent the switch uses. So now that we have that setup, let\u2019s read up a bit more on the webkit bug. It was assigned CVE-2016-4657 and has the description: \u201cWebKit in Apple iOS before 9.3.5 allows remote attackers to execute arbitrary code or cause a denial of service (memory corruption) via a crafted web site.\u201d The description can be a bit misleading."}
{"prompt": "What primitive does the Uint32Array provide to exploit the Nintendo Switch?", "completion": "Makes it sound like it\u2019s only an iOS issue, but its generally a webkit bug, and would affect anything that used that particular webkit version. In our case the nintendo switch. Also this is not an exploit where you just type into metasploit `use exploit/nintendoswitch/webkit`. This is something where you actually have to understand it quite in depth to be able to use it. Now let\u2019s take qwerty\u2019s jailbreakme code, which uses the webkit bug, extract the first relevant part and adapt it to the nintendo switch."}
{"prompt": "What is the purpose of the JSCell field in the Typed Array of unsigned 32bit integers?", "completion": "I won\u2019t go through all this process because that took me ages to understand, but I want to show and explain to you what I got now... So let\u2019s walk through it. First we create a Typed Array of unisgned 32bit integers. And in memory this will create a struct with a couple of different values such as a JSCell which contains a couple of interesting values such as a structure ID that determines kind of the type of this object. We will look at that later again. A butterfly pointer, which is used in a bit more complex objects but not quite relevant for us right now, a vector which contains a pointer to a chunk of memory that represents our array."}
{"prompt": "What is the hex value that is used to indicate an integer stored in a JSValue object?", "completion": "And the length of that memory. So that array gives us basically access to raw bytes in memory. Obviously you can\u2019t access beyond it\u2019s length. Then we create a more flexible array. A standard array like you might use it. That array is a bit different, as it can contain arbitrary types. Any kind of objects. So instead of just pointing to raw memory, it points to more complex objects called JSValues. And here is an example of the integer with the hex value 41414141, it would store 0xffff0000 before it, to indicate the value is an integer."}
{"prompt": "What is a JSValue and how can it be used to access an Array Buffer in memory?", "completion": "Look at the amazing phrack paper if you want to know more details about these JSValues. In the case of the exploit it will set the first element of the Array to a big ArrayBuffer and the second to some number. An Array Buffer is also access to raw bytes. Basically different typed arrays can point to the same buffer in memory. Whatever, read the javascript reference. So If I\u2019m not mistaken, the first element of the array is now a JSValue with a pointer to an array buffer. Next we create a simple Javascript Object and overwrite its toString() function."}
{"prompt": "What is the purpose of the \"toString\" function in the video transcript?", "completion": "That function is called whenever you want to get a string representation of that object. So if I return 1337 object as a string, and I would alert this object, it would call to string and show me that one. But in this case the function does a bit more. It first sets the reference to the array we just created to null, as well as setting another property to null. In a second you will see that this \u201cstale\u201d property is also a reference to the arr array. Theoretically now all references to the array are gone, and the garbage collector can free that array."}
{"prompt": "How can the garbage collector be forced to kick in?", "completion": "To force the garbage collector to kick in right now, we can use the function which just allocates and removes a lot of objects. And when you do this a couple of times you can be fairly certain that the garbage collector did the work. After the garbage collection the function will now allocate a lot of new Uint32Arrays. The reference to those are stored in buf, so we can access those arrays. And if everything goes well those arrays might be allocated where the previous array was. But how is this object with that toString function used now."}
{"prompt": "How does the toString function affect the reference to the array?", "completion": "We define an object that we use as properties. And I think we allocate more than just two, so the properties are not stored inline, but I\u2019m not 100% sure here. Anyway, one of these properties is called stale, and it is set to the array reference. That is the property that the toString function will set to null. Another property is `length` which is set to the not_number object. Then we create a new empty array target and apply those properties to it with Object.defineProperties. This means all those properties we defined will be set to the target array."}
{"prompt": "What is the bug associated with the CVE-2016-4657 exploit?", "completion": "During this assignment, the toString() function of not_number will be called and causes the garbage collection of the array. As well as the allocation of a lot of Uint32Arrays. And this is where the bug happens. Theoretically the stale property was set to null, and should not be accessible. But somehow the reference is still there. Some stuff internally did not properly check everything. This means that we have a reference into some memory where previously the arr array was allocated. And we also allocated a lot of Uin32Arrays and we hope that these now overlap."}
{"prompt": "What is the technique used to find if and how the buf and the stale array overlap?", "completion": "As I mentioned earlier, the Uint32Arrays allow direct memory access, they can read and write raw bytes. While the arr array was a complex object, with JSValues. Now it\u2019s already clear what you can do with this. You can use the Uint32Arrays, which are accessible via buf. To read and write raw bytes at the location where the stale property thinks a standard Javascript object is. So first it has to find if and how the buf and the stale array overlap. To do this, we can simply add a number to the first element of stale."}
{"prompt": "What value is added to the first element of the stale array in order to search through the uInt32Array memory?", "completion": "But what is the first element of stale now. Isn\u2019t that garbage memory? well ideally, if everything works, it points to where we created the uInt32Arrays, and we populated that memory region with 0xffff000041414141, which is a JSValue representing an integer. In fact the number 0x41414141. This means that now we add hex 101 to the first element of the stale array, making it 0x41414242. We can then simply search through the whole uInt32Array memory looking for this 0x41414242. Keep in mind that the buf has access to raw bytes, so it will infact see the 0xffff0000 and the 0x41414141, while the stale array things this is a javascript object, and only uses the 0xffff0000 internally to determine,"}
{"prompt": "What is the reason given by qwerty for using a Uint32Array instead of a Float64Array to create a read/write primitive?", "completion": "that we have an integer and the value of it is 0x41414141. So what can we do with this now. This is where exploitation really become creative. The phrack article says that once you have the ability to craft arbitrary javascript objects, you could craft a Float64Array to create a read/write primitive, but qwerty used a Uint32Array. To quote him, here is his reason: \u201cEasier than float to do math with. Lol.\u201d And I guess he has a point. Floating point values in raw bytes are really annoying. So first of all, why do we want to craft a Uint32Array."}
{"prompt": "What is the technique qwerty uses to craft a Uint32Array?", "completion": "If you remember the basic structure of a Uint32Array, it uses a vector to point to some raw memory. If you control where this pointer points to, you can control where you can read data from and write data to it. Because it thinks it points to the actual array. There is a super clever way how to craft this array now. Qwerty creates a new object with four properties. A,b,c,d. He probably just took that from the phrack article, because when you look at how a simple object with only four properties is stored,"}
{"prompt": "What is the structure ID of a Uint32Array object?", "completion": "it stores the values inline. This is very helpful in a second. As you see, the values set, like the hex 1337 are simply placed here in memory after eachother. So that\u2019s a very neat way to control a couple of consecutive values in memory. The two 64bit values are the JSCell and the butterfly pointer. The JSCell, or more specifically the structure ID inside of the JSCell determines, what this Javscript Object actually is. In the phrack article it looks like, this object here has the ID 136. So in order to craft a Uint32Array, we would have to know the structure ID of that."}
{"prompt": "What technique does the phrack article describe for determining the ID of the object allocated with 4 properties?", "completion": "According to the phrack article, this ID can change sometimes, maybe at restart or between different webkit builds. But apparently it\u2019s very common to be 105. Nontheless, because my exploit was very unstable I tried to see if the value is maybe different and the phrack article shows a technique how to do that. Back to the new object for a second. So this will allocate a new object with 4 properties that looks like this in memory. 0x69, or in decimal 105, then zero, the pointer to the smash array, which we allocated way at the beginning and 0x100."}
{"prompt": "What is the purpose of the u2d function?", "completion": "The function u2d is a clever little helper. As every number in javascript is basically a float, we can create a new dataview of 16bytes, so 64bit, set the high and the low 32bits and return the float representation of those bytes. This new object creation will also overwrite stale[0]. Just a few seconds ago I mentioned that stale[0] points to a JSValue representing a number, but now it was overwritten with a JSValue representing a pointer. A pointer to the JSObject that was just created. This JSObject it points to is not very interesting for us."}
{"prompt": "What does the JSValue pointer overlap when manipulating the buf?", "completion": "It\u2019s not an arbitrary object we have crafted. But remember, that the JSValue with the pointer to this object is in the memory that is overlapped by the buf. This means we can use buf to manipulate the pointer. And what we do is, we add 0x10 or decimal 16, which moves the pointer into the properties of the JSObject. Now suddenly the 0x69 is the JSCell value. And the zero here is the butterfly. And the smsh address becomes the vector, the pointer where the actual array is in memory. To be clear this points into the similar struct of that array, so this doesn\u2019t point into the memory location of that smash array, but also into this JSObject struct with its vector pointer and its length."}
{"prompt": "How can we use a Uint32Array to achieve an arbitrary read/write primitive?", "completion": "And 0x100 is the length of that array, which is actually just the Object structure of the smash array. So now you know how we can misalign the pointer to this object, which will interpret the properties here as the actual object. This means we can now try different structureIDs in a loop and check with instanceof if we have crafted a Uint32Array. We remember the original stale[0] pointer in stale[1], then missalign stale[0], then we can check the type of the stale[0] object, if it\u2019s not correct, we increment our structureID guess, and assign a new value to the stale[1]"}
{"prompt": "What is the purpose of creating a Uint32Array in the CVE-2016-4657 walk-through?", "completion": "\u2018a\u2019 property, which will look like the StructureID from the missaligned pointer in stale[0]. What we basically created now is, we have two pointers in stale. Which slightly overlap in memory. We also have somwhere an array called smsh. We have also set the memory location for our crafted array, the vector pointer, to point to smsh. To the smash structure, not the actual memory location of the smash array. This means we have another object that we can fully control. Stale is an array. The first element of stale points to a crafted Uint32Array."}
{"prompt": "How does the Uint32Array exploit allow for arbitrary read/write primitives on the Nintendo Switch?", "completion": "So when we access the elements of that array, we obviously access the 32bit values of the smsh JSObject structure. And as you know, the object contains 64bit values, and the fourth 64bit value is the length of the smsh array. So stale[0] of [0] and [1] would be the first 64bit, 2,3 would be the second 64 bit, 4,5 would be the third 64bit and 6,7 would be the 4th 64bit. So with stale[0][6] we can overwrite the length of the smash array. And we can now check the length of the smsh array. Let\u2019s try this on the switch."}
{"prompt": "How can we use the webkit bug CVE-2016-4657 to gain arbitrary read/write primitive on the Nintendo Switch?", "completion": "We load the page and it might not immediately work, but it will refresh and try again. Ok so we triggered the bug and we found overlapping memory by looking for the 0x41414242 value. Now we check the current length of smash, we craft our object, try to find the structure id, we actually find it\u2019s 105, so I didn\u2019t have to go through this trouble of iterating over them, then we change the length of smsh and print the smsh length again. And it changed. Isn\u2019t this crazy! So now we can just modify the vector where the smash array points to in the exact same way, and then simply read the raw data it points to from the smsh array."}
{"prompt": "What kind of techniques can be used to exploit the memory corruption vulnerability created by the webkit bug CVE-2016-4657 on the Nintendo Switch?", "completion": "or write to the smash array. It gives us super simple access to the whole memory of the process. Next steps could be to find the address of the browser binary in memory to dump it. Maybe find some function pointers in memory you can overwrite, create a ROP chain or maybe even shellcode because we should have jitted code, I guess? This video is already crazy long. So let\u2019s stop here for now. I really learned a lot working through the first part of qwerty\u2019s exploit. I hope this this also gives you a sense for how frckn complicated these modern memory corruption exploits are and what kind of work and knowledge is required to do them."}
{"prompt": "What is the name of the phrack paper written by Samuel Gro\u00df which is mentioned in the video transcript?", "completion": "I only scratched the surface here. I hope this also increases your respect for the people who do this kind of research. At this point I also want to thank Retr0id and Ando who I just met on IRC and were in the same boat as me and we and we helped eachother trying to figure how this works. And also a huge thank you to qwerty, who answered a lot of my noob questions and shared his progress with me. I really appreciate you supporting somebody who tries to learn this! If this sounds like fun to you, make sure you read the phrack paper by samuel gro\u00df,"}
{"prompt": "What is the purpose of the Ptrace syscall?", "completion": "In the previous video I showcased a proof\u00a0 of concept root exploit against Serenity OS. A bit of an obscure operating system. But at\u00a0 the end of that video I shared a few thoughts why I think looking into Serenity\u00a0 OS, and this particular exploit, is NOT a waste of your time, and I\u00a0 want to expand on this with this video. To prove a point, I want to give you an example\u00a0 of how the SerenityOS Kernel and the Linux kernel relate to each other. And we do that by looking\u00a0 at Ptrace. Ptrace is a syscall that basically implements the features for debugging another\u00a0 process. GDB, the gnu DEBUGGER, OBVIOUSLY uses ptrace so you can interact with another process.\u00a0 Specifically you can call ptrace(PT_ATTACH), to attach a debugger, or tracer, to a process, with\u00a0 PT_PEEK you can read memory from a target process,"}
{"prompt": "What are the PTRACE syscall source code features available in Linux and Serenity?", "completion": "with PT_POKE you can write memory. And with\u00a0 PTRACE_SINGLESTEP, you can single step in a process. As I mentioned, it\u2019s the syscall to\u00a0 implement typical debug features like in GDB. Now that you know what ptrace does, let\u2019s compare the\u00a0 PTRACE syscall source code of Linux and Serenity. In the excellent Linux source code browser elixir,\u00a0 we can search for ptrace and then look out for a file that looks promising. You could click through\u00a0 some of the other files, but this one looks most promising. A /kernel/ptrace.c file. Alright!"}
{"prompt": "What function is called when the sys$ptrace syscall is invoked?", "completion": "Now let\u2019s go find the ptrace implementation in SerenityOS. Just FYI, I\u2019m here on the commit\u00a0 where the vulnerability was still present. So code might have changed in the latest version. Here we simply search for \u201cptrace\u201d. And it turns out in the folder\u00a0 Kernel, there is a Ptrace.cpp file.But there is also a Kernel/Syscalls/ptrace.cpp file.\u00a0 So let\u2019s look at the latter first. And here we can find a very short function, sys$ptrace, which\u00a0 very quickly calls Ptrace::handle_syscall. When we now checkout the other ptrace.cpp file,\u00a0 we can actually find that handle function."}
{"prompt": "What is the difference in the implementation of ptrace between SerenityOS and Linux?", "completion": "So here seems to be the actual\u00a0 implementation of ptrace. Now let\u2019s compare Linux and SerenityOS. Linux\u2019s implementation starts by checking if the request parameter is PTRACE_TRACEME, and\u00a0 SerenityOS ALSO has a check of PT_TRACE_ME\u2026. But\u2026. OMG\u2026. why the heck does SerenityOS have another\u00a0 underscore here. I think I changed my mind about Serenity. Literally Unusable. Serenity is garbage. Just kidding. But you can see the code is similar, but different. On Linux, in this case, it\u00a0 calls ptrace_trace() and if that doesn\u2019t return successfully it will call arch_ptrace_attach\u00a0 instead. Otherwise it will return via this goto."}
{"prompt": "What error is returned by SerenityOS when a process is already being traced?", "completion": "And this function ptrace_traceme has a check if\u00a0 we are currently being traced. And Serenity has that check too. If the current process has\u00a0 a tracer already attached we return EBusy! Though it looks like Linux returns EPERM. So\u00a0 a permission error. And the Linux man page also says that EPERM might be returned\u00a0 if the process is already being traced. So as you can see, slightly different\u00a0 implementation of the basically same thing. Now if we look further in the code we see that\u00a0 in SerenityOS we start to have various checks."}
{"prompt": "What is the Linux equivalent of a setuid check to prevent tracing a root program?", "completion": "For example it ensures that the requested ptrace\u00a0 process id is not the ID of the current calling process. Or it also has the setuid check\u00a0 to prevent you from tracing a root program. And here it ensures that the requested process is\u00a0 already traced. And traced by our calling process. Meaning that our calling\u00a0 process called PT_ATTACH before. And here is the Linux equivalent. Linux\u00a0 calls this function ptrace_check_attach, where it checks if the requested child to attach\u00a0 to is already being traced and if the our current process is the parent of the tracee."}
{"prompt": "What architectures does SerenityOS support?", "completion": "Totally similar. But let\u2019s go on with the Linux code of the\u00a0 ptrace syscall. Because we eventually call an architecture specific ptrace implementation.\u00a0 When we click on it and look for references, we see that there is a x86, so intel version,\u00a0 there is an ARM version and TONS of other processor architectures. That\u2019s the mess\u00a0 you have to deal with Linux. Linux supports so many different architectures, and the lower\u00a0 level you get, the more architecture specific code you need to implement. Serenity does not support\u00a0 different architectures, but that also makes it so much easier to read for educational purposes."}
{"prompt": "How does SerenityOS implement PTRACE functionality?", "completion": "Now let\u2019s look into the Linux x86 version. Here you can see a big switch case statement\u00a0 that checks which PTRACE functionality you want. Pretty much the same way how Serenity\u00a0 has here a switch case statement. I mean, I think I showed enough. We\u00a0 could go on and on comparing their code. As you can see the code looks different.\u00a0 The way stuff is implemented is different. But it\u2019s essentially the SAME FUNCTIONALITY. So, I believe, if you understand\u00a0 Serenity Operating System INTERNALS, You WILL also understand Linux internals. Or\u00a0 at least will understand them much quicker,"}
{"prompt": "How can learning to program or reading code help when doing hacking or research?", "completion": "because you already can imagine how\u00a0 something could be implemented. And knowing \u201chow something could be implemented\u201d\u00a0 is an extremely powerful skill when doing hacking or research. That\u2019s why I always\u00a0 recommend learning to program. Or reading code. So SerenityOS is not wasted time. SerenityOS is an\u00a0 amazing learning resource and you can have so much fun playing and poking around the kernel sources.\u00a0 And please NEVER think that a \u201ctoy project\u201d is a waste of time. You can grow your skills\u00a0 MASSIVELY being involved in something like this."}
{"prompt": "What is the root cause of the vulnerability exploited in the hxp wisdom2 challenge?", "completion": "And so what do we do now? We look into the\u00a0 SerenityOS Kernel source code to understand better the exploit we looked\u00a0 at in the previous video. So this hxp wisdom2 exploit from the original\u00a0 challenge author, abused a race condition where an unprivileged process could actually\u00a0 modify the code of a setuid binary in memory. But it\u2019s a race condition, so\u00a0 to have a successful exploit, this was only possible within a small window\u00a0 of time just when the new process was loaded. To understand the root cause of the vulnerability,"}
{"prompt": "What is the purpose of the ptrace and execve syscall in SerenityOS?", "completion": "we have to look into the Kernel code of the\u00a0 ptrace and execve syscall. Ptrace was used to write into the other process\u2019s memory, and\u00a0 execve was used to load the victim setuid binary. Okay, so you already saw a bit of the ptrace\u00a0 code before. But let\u2019s look at it again because last time the purpose was just to compare it to\u00a0 Linux. NOW we read the code with the purpose to understand the vulnerability. So when you read\u00a0 code, you might want to read it differently, depending on your goal. Sometimes you can ignore\u00a0 parts if they are irrelevant to your goal."}
{"prompt": "What is the purpose of the check for setuid processes near the beginning of the execve.cpp file in SerenityOS?", "completion": "Anyway. when you start reading here, you might\u00a0 find something very important near the start of this function, it checks if the target process\u00a0 is a setuid process. And if that\u2019s the case the syscall returns with an access error. This\u00a0 is interesting because this looks safe! This looks like it should prevent anybody from using\u00a0 ptrace to change the memory of a setuid binary. Mh! So I guess we should check the SECOND part, how does execve execute a setuid program? Because ptrace had it\u2019s own file, maybe execve has too, so we can use GitHub\u2019s \u201cGo to File\u201d\u00a0 feature to search for execve. And we can find a execve.cpp file in Kernel/syscalls/. Cool!"}
{"prompt": "What function is called when attempting to execute a shell script or ELF binary in SerenityOS?", "completion": "In there we can find a function that has a similar pattern like the ptrace syscall\u00a0 function. Here is a sys$execve function. As I mentioned, I\u2019m reading this code with the\u00a0 purpose of understanding the vulnerability. So right now I\u2019m just skimming over the code,\u00a0 looking for any serious/important function call related to this. We seem to copy around a lot of\u00a0 the parameters used for execve. But nothing more. and at the end we see a call to the function\u00a0 exec(). Let\u2019s follow that. Here it is! First we seem to open the program we try to\u00a0 execute. And then we check if we try to exec a shell script with a shebang at the start, or\u00a0 if we have an actual ELF binary. In the case of our exploit where we executed the setuid\u00a0 binary passwd, we should be in here. And this seems to eventually call do_exec(). Follow that\u00a0 as well. I\u2019m still just skimming the code here,"}
{"prompt": "What function is used by SerenityOS to load a binary for execution?", "completion": "not really reading it. I\u2019m kinda just looking\u00a0 out for function calls that could be important or related to the vulnerability. And all of that\u00a0 sounds uninteresting. Like, we don\u2019t really care about the absolute path of the binary, or\u00a0 the stack size, or if profiling was enabled. But eventually we can find here a function\u00a0 load(). With this related error message \u201cdo_exec: Failed to load main program or interpreter\u201d.\u00a0 So this seems to load the binary to execute. And that sounds like one of the\u00a0 important functions we DO care about."}
{"prompt": "What are the two variables that are modified in the code when the new program is a setuid program?", "completion": "Mhmh\u2026. Keep that load function in mind. If we skim more of the code, we see here that the effective uid and effective group id\u00a0 is modified. Those variables are prefixed with m to indicate they are member variables of\u00a0 the current process object - so the currently running process that called execve. And now here\u00a0 we check that the new program is a setuid program, and we change the effective uid\u00a0 accordingly. Setting it to root. And that\u2019s it. Do you notice\u00a0 the vulnerability here? If not, pause the video and think about\u00a0 this code for a moment. 3,2,1. Ok."}
{"prompt": "How does PTRACE prevent tracing of setuid binaries?", "completion": "We loaded the new program into memory. And\u00a0 then afterwards changed the effective uid of the process. Remember how PTRACE checks\u00a0 if you are allowed to modify the memory of a process. It checks the effective uid\u00a0 to prevent tracing of setuid binaries. But the new program was already loaded before\u00a0 the euid was updated. So here is the race condition. If we can PTRACE and modify the\u00a0 memory, write malicious shellcode into it, right after the setuid binary is loaded, but\u00a0 BEFORE we update the euid, then it would work."}
{"prompt": "What ideas do we have for increasing the time window in order to exploit a potential race-condition vulnerability?", "completion": "Now that we identified a potential vulnerability, we can think about a strategy to exploit it.\u00a0 And because it looks like race-condition, which means it might be unreliable as it has to\u00a0 happen in this small window. We could try to find a way to increase the time window. So let\u2019s go\u00a0 hunting. Basically NOW you want to actually look at every single code line and function that is\u00a0 executed in this window - and think about ways to make the code run slower. Typical targets\u00a0 are of course things such as loops. If you can make a loop have more iterations, you will have\u00a0 a larger time window. And look at this line here."}
{"prompt": "What is the time complexity of the clear() function in the Unveiled_paths member variable in Process.h?", "completion": "unveiled_paths.clear(). Unveiled_paths is\u00a0 also a member variable, so we can check the Process.h header file to figure out the type.\u00a0 And it is a vector of UnveiledPaths objects. And Vector is a standard c++ class and so we can\u00a0 lookup some information about the clear() method. And according to this C++ reference, the\u00a0 complexity is linear to the size. So the amount of elements in that vector, or list. Complexity\u00a0 refers to the time complexity. So the clear() function runs longer, the more elements are in\u00a0 the list. Which means! We might have found a great candidate to slow down the race condition window."}
{"prompt": "What is the purpose of the \"kill_threads_except_self()\" function in the exploit code?", "completion": "And do you remember the cliff-hanger from the last video? remember the tens of thousands of paths\u00a0 that were unveiled by the exploit code. Now you know why. We wanted to make the size of this\u00a0 vector super large, so that the code runs longer. Cool! Now we understood the\u00a0 vulnerability. What could we do next? Should we try to find a similar vulnerability?\u00a0 Maybe there is another race condition. And actually when I read over this code, I\u00a0 noticed this here \u201ckill_threads_except_self()\u201d. As you know, when we call execve, to execute a\u00a0 setuid binary, our process is of course running."}
{"prompt": "What does the code in SerenityOS say to mark a thread as the current thread that does exec?", "completion": "So our threads are still running. And I thought.\u00a0 WAIT! \u201cKill_threads_except_self\u201d. If we kill all threads after we LOADED the binary, couldn\u2019t we\u00a0 create a similar exploit? Instead of using ptrace to overwrite the new loaded code, we just\u00a0 write the memory from another thread running in parallel? I got super excited, I thought now I\u2019m\u00a0 also a cool hacker who can find a kernel exploit. But my joy was short\u2026 I eventually saw the code\u00a0 right before the load, where it says: \u201cMark this thread as the current thread that does exec\u201d."}
{"prompt": "What options are available to determine why a thread is prevented from running in SerenityOS?", "completion": "Crap\u2026. But on the other hand I wasn\u2019t sure why this would\u00a0 prevent other threads from running. I haven\u2019t looked into the Scheduler code of SerenityOS, so I\u00a0 don\u2019t know why this should prevent it. So we have a choice now, how to deal with this uncertainty. First, we can just believe this comment, OR two, we can try to read the scheduler code,\u00a0 OR THREE, we could do a small experiment. Because I\u2019m not super good in reading and\u00a0 understanding low level code like the scheduler, AND I wanted to believe I could find a\u00a0 vulnerability, I decided to do an experiment."}
{"prompt": "What value does the exploit write to the entry point to detect if a thread is still being scheduled after the load() of the new binary?", "completion": "Let\u2019s create a hax.cpp program for that, which I\u00a0 place into the Userland folder. Here is a minimal main() method, simply printing a string. Btw I\u00a0 have setup serenityOS development environment in a Ubuntu VM. To start Serenity and then run my\u00a0 program, I simply call the ninja or make commands to build Serenity. And just a moment later a Qemu\u00a0 window will open, booting Serenity, and give us a shell. And now we can execute hax. Cool! So. I want to figure out if a\u00a0 thread can still be scheduled after the load() of the new binary. And we can\u00a0 detect that, kind of the same way how the exploit did it. By simply writing a sentinel value to the\u00a0 entry point, and then keep checking that value."}
{"prompt": "What is the function used to create a thread in C according to the video transcript?", "completion": "So how do we create a thread? I don\u2019t remember,\u00a0 so I googled \u201cC create thread\u201d, I found a website which said the function is \u201cpthread_create\u201d,\u00a0 which I hope Serenity also has. Because I like copy&pasting code I simply search the Serenity\u00a0 sources for other Userland programs using it. And with that code inspiration,\u00a0 I wrote my own test. Here it is. And please excuse my ugly code. First I fork into a child and parent. The child gets the process ID of the parent, attaches\u00a0 to the parent, changes the entry address to a sentinel value. And then detaches again.\u00a0 It\u2019s just there to modify the entry point."}
{"prompt": "What is the reason why a Ptrace system call must be used to change the memory instead of writing it directly?", "completion": "The reason why I have to use Ptrace to change\u00a0 that memory, instead of just writing it directly, is that the entry point is mapped READ and EXECUTE\u00a0 only. And NOT writable. And I can\u2019t call mprotect on this memory area to change the permissions\u00a0 and make it writeable, because the mprotect syscall only works on memory ranges that were\u00a0 previously mmapped. And not just loaded through the ELF loader. At least that\u2019s how I understood\u00a0 the code. Figuring this out was frustrating and took me hours reading more kernel code\u2026. Urgh\u2026\u00a0 anyway\u2026 \u201cKIDS! Read kernel code. It\u2019s fun.\u201d ANNNYWAY. The parent then creates a thread\u00a0 and simply reads the value of the entry point in a loop. While the main thread of\u00a0 the parent simply execve\u2019s a setuid binary."}
{"prompt": "What is the technique used to create a race condition in the kernel code?", "completion": "Here is how it looks when executing. This is the original value at the entry point. Then we ptrace from the child\u00a0 and change it to 0x41414141. And then we have the thread just reading that value\u00a0 all the time and we exec in parallel. If my idea for an attack would work, and the\u00a0 scheduler would still schedule this thread, then we might read the new loaded entry point again. And to artificially help my experiment, I added a few useless loops right into the kernel\u00a0 code where I expected the race condition."}
{"prompt": "What could cause a Page Fault error when executing a thread?", "completion": "Of course on a real target kernel this wouldn\u2019t\u00a0 be the case, but just to confirm that this race condition could work, we can do that. But no matter how often I execute this test. Even with an extreme slow-down from my\u00a0 modified kernel It NEVER works. I did run into several Page Fault errors. Which\u00a0 I can\u2019t explain. But the experiment failed. Though I would still like to understand why\u00a0 this line works, why this blocks threads from executing, and so I use a secret OPTION 4, the\u00a0 cheat code, asking Andreas Kling the developer directly. WHY does the scheduler\u00a0 not execute this thread anymore?!"}
{"prompt": "What is the purpose of the 'exec_tid' variable in SerenityOS?", "completion": "So the exec_tid is the thread ID of a thread\u00a0 in the current process, that is attempting to perform an exec. And we use that to prevent any\u00a0 other threads from the same process from getting scheduled from the kernel, while an exec is in\u00a0 progress. Because if we were to schedule any other thread in this process, AFTER we have started\u00a0 messing with the memory layout of this process, then that or the other thread will get very\u00a0 very confused when its code is not where it supposed to be. So the mechanism is very simple.\u00a0 When we enter into exec here, we simply assign the current thread id to m_exec_tid and then\u00a0 the Scheduler, whenever it is picking which thread to schedule next, it checks if\u00a0 the process of the candidate thread has an exec_tid set, then we will not\u00a0 schedule any other thread in that process."}
{"prompt": "How is the exec_tid thread identified in the SerenityOS scheduler code?", "completion": "EXCEPT, the exec_tid thread. So right\u00a0 here you can see, we look through the list of threads that are candidates for\u00a0 execution, and we skip over any threads that are not the exec_tid thread in a process,\u00a0 that has an exec_tid. I hope that makes sense. Oh\u2026 ok this was pretty easy. To be honest, I was\u00a0 kinda scared of reading the scheduler code myself. That sounded super complex to me. But I think\u00a0 Andreas just showed again HOW readable serenityOS kernel code is. I\u2019m a HUUUGE fan of reading\u00a0 source code to understand systems better."}
{"prompt": "How can someone learn about low-level CPU and C++ code if they are a beginner?", "completion": "But the Linux Kernel code can be very complicated.\u00a0 Especially when you have never done it before. This c++ code and low-level cpu stuff is not easy\u00a0 for beginners either, but easier than Linux. And learning and reading code is always a very slow\u00a0 progression. So don\u2019t be scared to read code, and don\u2019t worry if you don\u2019t understand it.\u00a0 You can always come back to it in a few months, and maybe you learned enough to give it another\u00a0 go. Nobody is learning this stuff over a weekend. Anyway, I thought that was interesting."}
{"prompt": "What exploit was used to leak addresses of a JavaScript object?", "completion": "For this video it\u2019s really important that you understood the previous video, where we looked at the exploit and figured out how to leak addresses of a javascript object. And you should have a basic understanding of how a javascript object looks like in memory with inlined properties and the butterfly. Because in this video we will use the same bug from last time, but turn it into a memory corruption. [ad] This series on browser exploitation is supported by SSD Secure disclosure. Checkout the description for more information [/ad]"}
{"prompt": "How can we turn an address leak into a memory corruption exploit in JavaScriptCore?", "completion": "You probably wonder, how can we turn this address leak now into something that allows us to compromise the javascript engine. Well, it\u2019s not as easy as a simple buffer overflow where you get directly control over the instruction pointer. The bug we abused in addrof(), gives us some capabilities, but now we have to slowly turn them into more. So let\u2019s have a look at fakeobj(). Saelo describes a different bug in his phrack paper \u201cattacking javascript engines\u201d, but also introduces a addrof() and fakeobj()"}
{"prompt": "How does the fakeobj primitive work?", "completion": "primitive. What addrof() does we already know, but let\u2019s see what he says about fakeobj(). The fakeobj primitive works essentially the other way around. Here we inject native doubles into an array of JSValues, allowing us to create JSObject pointer Remember this graphic explaining how JSValues are stored? 32bit Integers were stored with this format where the highest bytes where 0xffff, and doubles were in this range. And that\u2019s also how we found them in memory. However when you add a javascript object into an array, then you store a pointer, so the address, to that object."}
{"prompt": "What is the bug used in addrof() that allows us to read a pointer to an object as a double?", "completion": "So if addrof() uses this bug to read a pointer to an object as a double. Could we also reverse that, so that a double is interpreted as a pointer to an object? That\u2019s exactly what we want to do now. Let\u2019s copy addrof and change the name to fakeobj. Our value we pass in, would now be a double, that we want to become the fake pointer. So now remember the issue. The bug was that that this jitted code here will keep treating the array as an ArrayWithDoubles, even though the lastIndex.toString function assigned an object to it, which turns the array into an ArrayWithContiguous and stores the pointer to our object in the array."}
{"prompt": "How is the evil lastIndex.toString function used to corrupt the memory of internal JavaScriptCore Objects?", "completion": "So we abuse that now. In here instead of reading, returning, the first value as a double, we write our target double into the array. we should rename the function now to AddrSetter(). And in the evil lastIndex.toString function, we now assign an object to the array. And instead of returning the double representation that came from the jitted AddrGetter function vefore, we actually want to return the real first element from the array. So it\u2019s pretty clear what will happen now. We have an ArrayWithDoubles."}
{"prompt": "What does the JavaScriptEngine do when an ArrayWithDoubles is turned into an ArrayWithContiguous?", "completion": "Then we jit code that writes a double of our choice into the first element of that array. Nothing special here, it was a double before as well. Then we prepare this toString function and call AddrSetter again. This will execute the regex, which will call toString and which will assign this object to the first element of the array. Now the JavaScriptEngine will turn the ArrayWithDoubles into an ArrayWithContiguous and places a pointer to this new, unnamed, object into the array. But after that, our jitted code continues and still thinks we have an ArrayWithDoubles,"}
{"prompt": "What is the exploit primitive used to turn an address leak into a memory corruption?", "completion": "and thus it will write the double of our choice into the first element. Overwriting the pointer that was set, when here the object was assigned. It\u2019s kind of like a type confusion. At the end we return the first element of the array. Like I said the toString function that assigned the object turned this array into an ArrayWithContigous, but we overwrote the first element with our double. And if that double was chosen, to look like a pointer, javascript will think the first element in the array is pointing to a JavaScript object."}
{"prompt": "How can we craft an object with the fakeobj() primitive?", "completion": "Let\u2019s try this out. Let\u2019s try to craft an object with this. I will use lldb again for jsc, and to run, I pass in our test.js with the addrof() and fakeobj() function, but also use the option -i to also get an interactive javascript prompt. So. how do we do this\u2026 To keep it simple I decided to create a test object with a single property x, and that x is a simple integer. Let\u2019s look at it in memory. We describe(test), get the address of the object, CTRL+C. And print 4 64bit hex values from that address."}
{"prompt": "What is the JSCellHeader composed of?", "completion": "So the first 32bit were some flags, the next 32bit were the StructureID. Together they are the JSCellHeader. Then we have the butterfly which is null, followed by the inlined property x, which we set to a 32bit integer 1. And now let\u2019s try to fake such an object. And this is super clever! Of course I didn\u2019t come up with this, I got this again from saelo\u2019s paper. We can abuse the fact that the first few properties on an object are inlined into the object itself, and not placed into the butterfly."}
{"prompt": "What flags are included in the fake object in memory?", "completion": "Let me show you. Here I create a an object that I will call fake, because it will help us to craft a fake object. And just for a start let me create three properties, a, b and c. Now we describe it, get the address and look at it in memory with lldb. So here again we have the flags, the structureID, the butterfly, and the integer properties inlined. So the address of fake points here. Now think about our fakeobj function. It will write a double into an array and possibly interpret it as a pointer to an object."}
{"prompt": "What would happen if we add a tiny bit to the double value that is interpreted as a pointer?", "completion": "So we could for example use addrof to get address of fake, and when we plug it into the fakeobj function, we would get back the fake object. Quick test. And that works, it looks like we got an object back, and it has the same properties, a,b,c. But here comes the trick\u2026 we can fully control the double that is interpreted as a pointer\u2026 So what would happen if we add a tiny bit to that double value which is the address of fake. Just add a litte bit so that the pointer is now shifting forward, and pointing here."}
{"prompt": "How does the structure ID of a JSObject determine the properties of the object?", "completion": "If we then use the fakeobj() function, it would think that this is a JSObject\u2026 that makes sense right? However this does not look like an object. This here would have to be the special flags, this would have to be a structureID, this would be the butterfly and this would be the inlined properties. But we control these property values with this object fake. so we could try to craft a valid object now. let\u2019s try to do that. First the flags with the structureId. As you know the structure ID defines what kind of properties exist on an object."}
{"prompt": "How can we get the structure ID of an object during the execution of the exploit without using the describe() function?", "completion": "So if we want to fake the test object with the .x property from earlier, we need to use exactly the structureID from that test object. Here is again our memory of test, which we can use as a blueprint that we want to copy. This is what we basically want to copy as properties on the fake object. So how do we get the structure ID of our test object during execution of the exploit, without using describe(), because we don\u2019t have that function in the browser. Well we know already that you create a new structure, and get a new structure ID, everytime you add a different property on an object."}
{"prompt": "What is the purpose of creating a lot of test objects with the x property and an arbitrary other property?", "completion": "We can abuse that to easily guess a valid structure id. We basically create a lot of test objects with the x property, but also an arbitrary other property, to force new new stuctueIDs that all have that x property. We basically spray test objects. If we execute that loop, and look with describe at the last test object that was created, we see that it has the x property, and it ahs this arbitrary other property, but most importantly it has a huge StructureID. So if we randomly pick a structure ID of like 0x1000, we should be very certain, that we get one of those test objects."}
{"prompt": "What methods can be used to increase the probability of crafting a valid JSCellHeader for a fake object?", "completion": "I mean theoretically this could also fail and it could so happen that the structureID we chose was not our target test object, but we can really increase the probability with just spraying many objects. Okay\u2026 So basically we want to craft this 64bit value. We want to keep the same flags as the blueprint test object, but also use a high StructuerID. I use python again, to do the conversion stuff, and get the double representation. So this double should be now a valid JSCellHeader for our fake object."}
{"prompt": "What mathematical operation is being used to encode JSValues?", "completion": "So we assign it to the .a property, but when we check and compare the memory, we notice that somehow there is a 1 that should be there. Turns out that the NaN encoding for JSValues actually says The scheme we have implemented encodes double precision values by performing a 64-bit integer addition of the value 2^48. That\u2019s hex 0x10000000. So if javascriptcore will add that to our value, we have to subtract that value first. So here we get the new double. Assigning that and checking memory, now it looks correct!"}
{"prompt": "What value is needed to be set for the third property on the fake object in order to create the first property on the fake test object?", "completion": "Next we have the butterfly, and we need it to be zero. But how can we do that? If we want to create this property .c down here, we need to create a property /b here as well, and we can\u2019t write a zero. Integer zero would still have the ffff, and even a Null would actually be a 0x2\u2026 well\u2026 for now let\u2019s create a property, but we come back to it in a second. The third property on our fake object would become the first property on our fake test object, so the .x property. And this we can just set to something cool."}
{"prompt": "What is the purpose of deleting the property b on our fakeObject?", "completion": "How about 1337. Okay\u2026 let\u2019s have a look at it in memory. examine memory\u2026 there we go. This looks promising. Our fake JSCell header looks really good. And this is our faked x property. Only problem is the butterfly. That ideally should be zero. But this turns out to be super easy. We can just delete the property b on our fakeObject, and when we look at memory again, we can see that it\u2019s now null. Now let\u2019s place that all into our test.js script. We have the loop to spray structureIDs of our test object."}
{"prompt": "How can we use a double representation to shift an address forward?", "completion": "Then we create the fake Object that we target. We set the properties so that they look like a fake test object. And then we use addrof to get the double representation of the address from fakeObject. Let\u2019s look at the memory again. So this double is this actual address. Which means we want to now get a double that is just shifting this address a bit forward. 16bytes in fact. So we can use python again to convert this shifted address to the double representation, and here we go. Now we copy it and try to use the fakeobj()"}
{"prompt": "What happens when the c property of a fakeObject is changed to a string?", "completion": "function. Hax = to fakeobj of this double. Apparently that returned an object. So let\u2019s see if this object has a property x. It does! It\u2019s 1337. Let\u2019s describe it. Look at the address. JavaScriptCore thinks now that hax is an object here, but those are actually the properties of our fake Object. Crazy right? This means when we change the c propety, so the third property of our fakeObject into for example a string \u201cLiveOverflow\u201d, then this of course also means our hax object now reads a string from it\u2019s x property."}
{"prompt": "What objects can be crafted using the fakeobj() primitive that can increase exploit capabilities?", "completion": "Maybe this seems now a bit useless to you? But imagine the power you have now. You can craft arbitrary JavaScript objects and you control their internal class properties, down to the memory level. For example this allows you to craft a Javascript array and control the butterfly pointer. You could point that pointer anywhere and act as if there was a butterfly. Okay. But it\u2019s still not code execution. But the question you should ask yourself now is, what object could we fake that increases our capabilities."}
{"prompt": "What process of thinking is used in security research to gain more power?", "completion": "Something that gives us even more power. And that process of thinking about faking different kinds of objects, and experimenting with this, this is exploitation research or generally security research. This would be your next step now, if you were a researcher doing this for the first time. However we are noobs, so we still have not reached those state-of-the-art exploitation levels, and of course many researchers have already done that and documented it. So we can look again into linus\u2019s exploit and see what he does with this."}
{"prompt": "What library does Saelo use to create a fake JSCellvalue?", "completion": "First he sprays Float64Array in the same way we sprayed our test object, so that structure ID 0x5000 will be a Float64Array with very high probability. Then he also sprays a few WebAssembly Memory objects. Prepares some webassembly code and here he prepares a fake JSCellHeader. He is using here the int64.js library from saelo, which we ignore for now, it will just create here a fake JSCellvalue, like we did with python. let\u2019s focus on what we do recognize. And that is for example here. Here he creates a new object that he calls WasmBuffer, and the fist property is the fake JSCell header."}
{"prompt": "What structure identifier does Saelo use to create a fake Float64Array in his exploit?", "completion": "Like the first property .a of our fake object was set to our fake jscell header. Looking at how he constructed that, we can see that it is using the StructureId hex 0x5000, so it looks like he wants to create a fake Float64Array. The second property would be the butterfly, and then some other properties. Later he deletes the butterfly again because he also wants here to have zeroes. Which seems weird for an array, because usually arrays use the butterfly, but he does another trick. Then we see our first addrof."}
{"prompt": "What is the purpose of the int64.js library?", "completion": "So here he gets the address of wasmBuffer as a double. Then he uses the int64.js library again, which does all this double to integer conversion and stuff, basically what we did with python. And so he takes that address which was a double, creates a 64bit integer from it, and then adds 16. So he is shifting that pointer a bit forward. the same way we did that with our fakeObject. This is now the address of the faked Float64Array. After that you see that he uses the library code again to turn that address back into a double, and then passes the double to the fakeobj() function."}
{"prompt": "What structureID did Saelo deliberately choose to get a Float64Array?", "completion": "So now he should get a fake Float64Array. But\u2026 here is the other trick. Remember the few WebAssembly.Memory objects he sprayed? Well\u2026 actually he is not at all interested in a Float64Array. He wants a WebAssembly.Memory object. This while loop checks if the fakeWasmBuffer is still NOT a WebAssembly.Memory object. How does this make sense when he deliberately chose a structureID to get a Float64Array? Well, he abuses the fact now, that the two objects overlap. the fakeWasmBuffer overlaps with the original wasmBuffer jsCellHeader."}
{"prompt": "What technique does Saelo use to turn a fake object into a WebAssembly.Memory object?", "completion": "And like we modified the .c property of the fake Object, which affected the .x property of the fake test object hax, here he keeps incrementing the JSCellHeader of the wasmBuffer, which affects the real structureID of the fakeWasmBuffer. And so in each iteration he checks now, if the fakeWasmBuffer has turned into WebAssembly.Memory object. He is basically bruteforcing structureIds in a safe way until he gets gets a WebAssembly.Memory object. And that\u2019s why he sprayed first the floats, and then afterwards just a couple of WebAssembly.Memory."}
{"prompt": "What parameters does the obfuscated function CjPQTPNW take?", "completion": "Let\u2019s not waste much time, this is part 3 of the key verification reverse engineering from Pwn Adventure 3. And so if you want to know more about how we got here, you should watch the previous videos. Our input is now in this 15 byte buffer, so let\u2019s have a look what happens here. This obfuscated function here is very prominent. CjPQTPNW. It also appears to take 3 parameters. A constant, maybe a length again, the buffer with our input, but then also an unknown address. We know it\u2019s an address or pointer that is passed to the function because of lea,"}
{"prompt": "What is the loop variable initialized to at the start of the for-loop in the function?", "completion": "load effective address. So let\u2019s check out that function. Oh, this is very similar to the memset we reverse engineered in the last video. But there are a few more lines here. We have here a very obvious for-loop again, because the loop variable is initialised here with 0, then we have the condition here with smaller than the value coming from here and down here is the increment. +1. And the value that is compared in the condition is coming from here, so edx and that was our constant passed as a parameter."}
{"prompt": "What loop increment is used to copy the input buffer to the new buffer in the key verification algorithm?", "completion": "So yeah, that is a length. Our buffer was rsi, and the unknown new buffer was rdi. And inside the loop we see the address of our buffer being loaded and then a byte loaded from an offset based on the loop iterator. Then we load the new buffer address and write the byte to it. And the rest was the for-loop increment. So, what well known function is implemented here? This is obviously memcpy! Cool, so our input buffer is simply copied here. So this function performs several memcpys. disassemblers offer various features for you to make the assembler code slowly understandable."}
{"prompt": "How can one practice low-level coding without expensive tools?", "completion": "I\u2019m sure you know of IDAs Hex Ray\u2019s decompiler for example. Which is totally awesome and super helpful, but that doesn\u2019t exist for every architecture and doesn\u2019t produce great code everytime so it\u2019s good to practice with just having the assembler. You can always go to more advanced tools later, but if you only use those, then you won\u2019t really get a good feeling for low level stuff. Also these tools are super expensive while something like Hopper or Binary Ninja are pretty affordable or even radare which is free."}
{"prompt": "What analysis feature does Binary Ninja have that produces pseudo-code?", "completion": "So of course disassembler have the feature to add comments. You can press semicolon do add one and we can basically write here pseudo code of what we just learned. Binary Ninja also has another pretty cool analysis feature and that is the intermediate language. It has severl different views for those in the options and some of those produce pseudo like code on various levels of analysis. So let\u2019s look at some. So this is Low Level IL. You can see that instead of assembler instructions you get these assignments instead which is maybe nicer for you to read."}
{"prompt": "What size are the buffers used in the algorithm?", "completion": "Here you can also see if only bytes or whole dwords are used. Then there is Medium IL. This even has a few more analusis and understands parameters for the functions here. It figured out that it takes 3. And it also created some default variables based on the registers used in assembler and also adds some types. Let\u2019s work with that, that is pretty close to what we did in python last time. So let\u2019s start by going through the code and renaming some stuff. We can also give it types. We know the size of the buffers from the length of the memcpy, which is 12."}
{"prompt": "What is the difference in hexadecimal values between the two buffers mentioned in the video transcript?", "completion": "Oh 12 characters? This is interesting, because we know that our buffer is actually 15 bytes long, so it only copies the first 12 bytes. This function takes a lot of parameters. Mh\u2026 But what does this next construct mean here. We don\u2019t know what var_7c is or var_7d. Let\u2019s go back to the assembler view and try to understand this. We can open the built in console in Binary Ninja to do a quick calculation. 0x74 - 0x5f to see how far away those buffers are. But 21 is larger than the buffer, so this is not pointing inside of this buffer."}
{"prompt": "What is done to the last character of the new 12 byte buffer?", "completion": "And the other new buffer we know here is 0x80, so 0x80 - 0x74 that\u2019s 12. this address seems to be it\u2019s own new buffer address. But this one here 0x75 points at the last character of this new 12 byte buffer. It takes that char, and it with 3, so it only keeps the lower two bits and moves it back into the 12th last character. If we look at the medium IL view again we also understand this now. Here the last character is taken and directly anded with 3. And here it is moved back. Ok now we have here a second memcpy."}
{"prompt": "What register is used to store the source buffer before it is copied to the destination buffer?", "completion": "This time only 4 bytes are copied. But what are these two buffers, I mean the one is the destination and thus empty, but the other one is the source and should have content. Mhmh\u2026 Again medium IL is not very helpful here. So let\u2019s go back to assembler. So rsi and rdi are typically used for source and destination, so this buffer is the destination. And the source here is coming from this add. And rsi before was our input buffer. It adds 0xb so 11 to it and this is the source. So here it copies the last 4 bytes from our buffer."}
{"prompt": "What is the value of the bytes at offset 11, 12, 13, and 14 after being xored with 0x2badcode?", "completion": "Offset 11, 12, 13 and 14. Rsi and rdi are again just used by memcpy and it copies 4 bytes. But before the memcpy the 4 bytes are loaded in eax, shifted by two to the right, and moved back. And then it\u2019s loaded again xored with 0x2badcode and moved back. And then we do the memcpy so we copy that result into the destination buffer. Next we load the address of where this string PWNADV3 is stored into rsi. So it\u2019s again the source of a memcpy. Here the destination is loaded which is the new buffer that contains the xored result from before."}
{"prompt": "What is the size of the buffer initialized in the video?", "completion": "But then adds 4 to it so we move the index after the xored bytes from before and then we copy the 7 new bytes after it. Cool. Now it\u2019s getting interesting. We load a lot of constants now. So this seems to be a single null-byte. But then afterwards are all consectutive bytes. So this is initialising a buffer. 5,6,7,8,9,a,b,c,d,e,f,a0 12 bytes. And these three also belong together. These bytes look fairly random, so I call this buffer random_buffer for now and down here I call it 101. And then we call SJnUAhG."}
{"prompt": "What is the number of iterations in the for-loop mentioned in the video transcript?", "completion": "Another obfuscated function. If we switch to medium IL again we see how many parameters it takes. That looks like a serious function. And based on the variables we named before we can also se now which parameters are passed to it. It takes 4 constants, an empty new buffer and our buffer that is filled with data from our input. So I assume the final result will be written there. Before we look more into it, let\u2019s quickly peak ahead. So right afterwards is another for-loop. We are looping for 0xc, so 12."}
{"prompt": "What is the comparison loop in the key verification algorithm doing?", "completion": "Which means we loop over 11 bytes which would match with the sizes of buffers we handled before. In the loop it then loads a byte from the buffer that we used before as well as the empty buffer we assumed will have the final result Ok, we take a byte from each of them and compare them. If they are correct, we stay in the loop, but if it was wrong, we set the key_correct return value to 0 and break out. Ok so that\u2019s basically a memory compare, it just compares these two buffers. This is the final check if we pass the key verification or not."}
{"prompt": "What is the first unnamed function encountered in the SJLnUAhG function?", "completion": "This means the actual magic is happening in this obfuscated function SJLnUAhG. Let\u2019s have a look at it! Okay, this looks fairly simple on first sight. Not that many blocks. And a simple loop. We see another memset and memcpy but also a new unnamed function. So how does this look like? Oh damn, this looks pretty similar. More memset and memcpy and another loop. But this time with two unknown new functions. pCsLWByS and pzsMuHFR. So let\u2019s look into the first one. Okay, this looks like a simple loop again."}
{"prompt": "What platforms does the algorithm code have been compiled for?", "completion": "Very similar to memcpy or memcmp just quite a bit more instructions inside the loop. And the other function has a bit more going on. But also not that much. OH, but there is another unknown function hidden, but this one is also pretty short again. Another loop. Okay phew\u2026 All together it\u2019s quite a bit of code. And to be honest with you, I spent quite some time trying to understand it but I just didn\u2019t get it. I couldn\u2019t figure out what this algorithm does after several hours of staring at it. The cool thing is we also have the same code compiled for Mac, Windows and Linux."}
{"prompt": "What is the point value of solving the keygenme task?", "completion": "So you can actually look at any of those to see if maybe the compiled result is easier to understand on another system. But I have to admin. I got weak. I knew that there are writeups out there and I got so frustrated and felt really stuck, so I\u2019m sorry. I had to look it up. So here is the writeup from 0xebfe. He writes: \u201cThis task is a standard keygenme. Solving it would get you 500 points, which is a bit high for the difficulty.\u201d WHUUAAT??? Too high? I\u2019m so stuck, why is he saying that it is much easier."}
{"prompt": "What is the custom Base32-decoded algorithm used in the Key Verification Algorithm?", "completion": "Let\u2019s continue reading. \u201cThis routine takes entered DLC key as argument and return 1 if passes all checks.\u201d. The checks are: The length has to be 25 chars, The alphabet is this, and there is a checksum charcater. So cool, we figured that out too. He also shows a cool compaison between the standard base32 algorithm and the custom one used here. You can see how the bits are mapped. \u201cAfterwards a function woth obfuscated sumbol name decrypts the custom Base32-decoded bytes. \u201cThe function takes two big numbers."}
{"prompt": "What is the constant used in the RSA decryption routine mentioned in the video?", "completion": "0x10001 and 0x3c9921\u2026 and so forth, as arguments and decrypts the buffer. It is obviously a RSA decryption routine. N module is 90 bits only so it can be factored in seconds.\u201d WAIT WHAT!? Obviously RSA? How is that obvious? This is exactly the information I was looking for. There is one tiny detail though that I f\u2019ed up. Remember that I named this buffer 101? But the constant isactually 0x10001. And that constant is very common with RSA. If you have ever looked at an SSL key it\u2019s very likely that you have seen it."}
{"prompt": "What value is commonly used as a public key exponent in RSA encryption?", "completion": "I know that this is a typical public exponent. And so the only explanation I could tell myself why it is obviously RSA is, that you can assume this when you see the constant 0x10001. But I was an idiot, I mistook it as 101, so maybe that\u2019s why I didn\u2019t get it. But even then I feel like it\u2019s kind of a lucky guess or based on other experience. So I wrote 0xebfe on twitter and asked him. And he confirmed that. \u201cThe 0x10001 (65537 in decimal) is used often as public key exponent. It is almost standard e value."}
{"prompt": "What is the standard value used to identify an RSA scheme?", "completion": "\u201cWhen I see 0x10001 one can assume it\u2019s RSA scheme because this value is used so often.\u201d I kind of agree with that. Cryptographic algorithms often rely on well known constants. For example MD5 has some initialize buffer values that are very obvious and recognizable. So when you see these you can assume there is MD5. He also then added that \u201cIn addition to that you can try to factor N module. If it has 2 prime factor - it is probably RSA\u201d. And so this big constant would obviously be N and we can extract those bytes, assemble the large number, use python to covnert it to decimal and submit it to factordb."}
{"prompt": "What underlying algorithm is used in the assembler code to verify keys in Pwn Adventure 3?", "completion": "That website has a huge database of numbers and it can tell you if a factorization is known for one. And yes, here is are the prime factors for N. Essentially now you know the RSA private key, that\u2019s why you should have much larger keys. But yeah. Theoretically we can now implement a keygen, but I\u2019m not satisfied. I know the RSA algorithm. I know the math involved and if I had realized that there was exponentiation or modulo exponentiation implemented here in assembler, I would have probably realized that it\u2019s RSA."}
{"prompt": "What is the best way to implement a fly-hack in Pwn Adventure 3 on Windows?", "completion": "I really wanted to implement a proper fly-hack for Pwn Adventure 3. After failing around when doing this on Linux, I thought I could need some help when doing this on Windows. So I contacted Guided Hacking, who makes awesome easy to follow game-hacking videos, and asked for some help. I asked him if he can figure out how to make a fly-hack and then explain it to me, and then we have a YouTuber collab. He said yes and followed up with a basic plan. The best way to do a fly hack is to overwrite your current position values, like you do."}
{"prompt": "What trigonometric functions can be used to translate a 3D coordinate in a specific direction?", "completion": "But you get the next position variable (for flying forward), using trigonometry. You do what\u2019s called a translation moving a 3d coordinate in a specific direction. You can do this with matrix multiplication using the world view projection matrix, but it\u2019s easier just to do simple trigonometry cosine, sine, arctang etc. I already have code written for this that I can share. I actually wrote this code because Stephen Chapman asked a question on Stack Overflow and I knew the answer. So I felt like a boss."}
{"prompt": "What trigonometric functions are used in the MoveInCameraDirection() function?", "completion": "Stephen Chapman is another awesome youtuber with some game hacking videos. So that\u2019s why that is funny. So here is the code. You can see here a function MoveInCameraDirection and then it does some trigonometry. If you are still in school, you should really pay attention to trigonometry and especially matrix stuff. If you are interested in game hacking or game development, you need that foundation. Anyway. A few hours later Guided Hacking got back to me with a Visual Studio project and some code."}
{"prompt": "What is the name of the tutorial referenced in the video?", "completion": "But he added that \u201csomething is not right. Here it is in it\u2019s broken state if you want to take a look. Of course I want to take a look! So what is it that Guided Hacking sent me? In the folder you can find a .sln file, so that\u2019s a \u201csolution\u201d file (a project file) for Visual Studio. Let\u2019s open it up and have a look. Let\u2019s start with the dllmain.cpp. This defines the entry point for the DLL application Based on this here. \u201cHow to hack any game - First Internal Hack DLL Tutorial\u201d. And here is a good description of what this is all about:"}
{"prompt": "How can DLLs be used to inject code into a target process?", "completion": "Internal hacks are created by injecting a dynamic link library or DLL into the game process. when you do this you have direct access to the process's memory which means fast performance and simplicity. Normally a DLL is used to export functions and to be used like a lib, accessing the functions from the lib when necessary. But in our case, we're just going to use them to get our code to run in a target process. Injected DLL's can be made more sneaky by using different injection methods such as Manual Mapping."}
{"prompt": "How does the entry point for a DLL get executed when it is loaded or unloaded?", "completion": "So yeah. This Visual Studio project is just creating a .dll And when the dll is injected into the target process, the DLL main entry point will be executed. The system calls the entry-point function for a DLL when it is loaded or unloaded using the LoadLibrary and FreeLibrary function. And upon the DLL_PROCESS_ATTACH case, we create a new Thread so that it can run in parallel in the background. The HackThread. And this HackThread then does the magic. Remember, you have to imagine that this code is now running in the PwnAdventure game process."}
{"prompt": "What is the function \"FindDMAAddy\" used for in the video?", "completion": "And so here you can see that it uses GetModuleHandle to get a handle to the GameLogic.dll module, which basically returns the address where it is loaded. And you can see it being used here in the function \u201cFindDMA\u201d (direct memory access) addres. And here we have the start address, followed by a pointer path list. Pointer paths. They are just everywhere. We can also peek into that FindDMAAddy function to see how it works. It\u2019s very simple. Ptr is the starting address and is assigned to the variable address."}
{"prompt": "What is the purpose of the loop in the code that is mentioned in the video transcript?", "completion": "offsets is a vector, or list of the offsets. And here we have a loop that loops over those offsets. So addr, and at this address we have a value that is another address. So we dereference that now, which means we follow that address. So addr is now the new address. Then we add the offset to that address. This should now point to a new location that stores another pointer (or address). So in the next loop we dereference that and follow that address. So now addr is that new address, we add the offset and we get the new location."}
{"prompt": "What is the function of GetAsyncKeyState used for in this video?", "completion": "And we do that for all offsets, and then return the final address. If we then cast the pointer we found to for example a 3d vector, then we have now a position variable pointing into that memory. That\u2019s how we can then read or write those values. So apparently Guided hacking found some position and angle vectors at these locations in memory. Around this code you can also see GetAsyncKeyState, which checks if you press a certain key. This is used to enable or disable the fly hack, here the numpad key."}
{"prompt": "How can you create a console for a process in Windows?", "completion": "And also numpad 5 is apparently used to move into camera direction, so this should fly around. And with the END key, it should break, then of course return, thus exit the thread. By the way there is also a call to \u201cAllocConsole\u201d, which is another wondows API function that will create a new console for the calling process. And then with std::cout, you can write text out to the console. I actually didn\u2019t know that it\u2019s that simple to create a console for a process. Cool. Alright. Now Guided Hacking already said that it doesn\u2019t work."}
{"prompt": "How do you create a Dynamic-Link Library (DLL) project in Visual C++?", "completion": "But this is already very helpful, because we can build upon that. We can use it as a template. In the last video I showed you how I found the camera position and view direction. This means we could now use those pointer paths! So let\u2019s create a new DLL project. Visual C++, Windows Desktop, Dynamic-Link Library (DLL). And we call it pwn3hax. If we look into the source files, we can see that Visual Studio already created the dllmain.cpp file with the DLLMain entry point function. As you can see, looks pretty similar to the example code by Guided Hacking."}
{"prompt": "What is included in the mem.h and mem.cpp files?", "completion": "So let\u2019s just copy and paste that code. Visual Stdio already warns us about types like FILE that they can\u2019t be find. For that we need to include stdio - standard in and out. Looks already better. But of course the mem namespace and this vector 3 is also still unkown. Let\u2019s add the include of the mem header and then we have to add a new file, header, mem.h Copy and paste that code. And then we also need the mem.cpp file. Copy that too. Wow!! We are incredible fast programmers. Copy&paste! But don\u2019t tell anybody this secret of programming."}
{"prompt": "What is the purpose of the VirtualProtect Windows API function?", "completion": "*shhhh* Let them all think you need to remember everything! So the mem.cpp by Guided Hacking defines three functions. Patch, Nop and FindDMAddy. The last function we already looked at. Path and NOP are very similar. They both use the VirtualProtect Windows API function to change the permissions of this memory area to be writeable. You have to do this in case it;s non-writable memory like the assembly code. But after that you can simply use memcpy, or memset to that address and overwrite it. Patch will of course copy the bytes you want to patch."}
{"prompt": "How do you modify the code to enable/disable the fly hack using a different keyboard key?", "completion": "And memset writes assembly NOP instructions, which is a hex 0x90. Cool! This will be useful. And let\u2019s also add the geometry files geom.h, which gives us this 3-d vector vec3 and the geom.cpp file, which contains some trigonometry functions. After we include the mem.h in the dllmain, we can also try to compile it. STRG+SHIFT B. And we built it. We have pwn3hax.dll. Let me quickly modify a bit the code. Because my keyboard doesn\u2019t have a numpad. The key that should toggle the fly hack enable or disable I set to Left Control key."}
{"prompt": "How can a .dll be injected into a game process?", "completion": "And the flying around I set to the right mouse key. We know this doesn\u2019t work yet, so let\u2019s remove some of the code here, only keep the position, and then add a debug output with cout, to print the position. Let\u2019s try it out. Compile the .dll, there we go. Now we just need to figure out how to inject the DLL. Because I don\u2019t want to go into detail right now how DLL injection works, we are just using a tool. Actually Cheat Engine can also inject a dll. It\u2019s here in the tools menu. But I\u2019m going to use Guided Hacking\u2019s Injector tool."}
{"prompt": "How is the fly hack in Pwn Adventure 3 activated?", "completion": "It has a lot of features. I guess at least. I have no clue. I\u2019m just gonna try to load a dll. So here we specify the process we want to inject to, and here we select the dll file. The built dll is in the Debug folder. Pwn3hax.dll. After that we can hot Inject. And that seems to have worked, because we get the console with the debug output. Now we are in game. If we press the left control key, we should be able to toggle between the fly hack on and off. That works. Now that it\u2019s on, let\u2019s try to press the right mouse key and see what happens."}
{"prompt": "How do you identify the correct pointer to the first x coordinate?", "completion": "Oh\u2026 game crashed\u2026 I guess this doesn\u2019t work at all. So let\u2019s quickly take the pointer path we have identified with Cheat Engine and replace it here. By the way, pay attention to the correct pointer. Because we cast this memory to a 3d vector, we need the pointer to the first x coordinate. And it turned out I labeled them wrong, and when I tested it I read garbage values. So the first coordinate is at offset hex 0x90. So let\u2019s build it again, and inject it into the game. Enable the fly hack. Press right mouse button, and there we see output!!!!"}
{"prompt": "What is the purpose of the .well-known directory?", "completion": "Hey, I\u2019m LiveOverflow, and I\u2019m the inventor of security.txt NO! GET OUT OF HERE! I\u2019m LiveOverflow, I\u2019m the inventor of security.txt. Let me explain what it is. Security.txt is a proposed standard which allows websites to define security policies. The security.txt file sets clear guidelines for security researchers on how to report security issues.  Security.txt is a simple text file that you can find on many websites in the .well-known directory. But before we talk more in depth about security.txt - my invention - I wanted to quickly talk about the .well-known directory."}
{"prompt": "What is the path prefix for \"well-known locations\" in the RFC?", "completion": "I would actually be surprised if you didn\u2019t know, because this directory is actually \u201cwell known\u201d. There is even a standard for this. And of course as computer interested people we read ALL standards for fun. So this is old news for you. But because it\u2019s so much fun, let\u2019s check it out together again. This memo defines a path prefix for \"well-known locations\", \"/.well-known/\" Many of you probably know the robots.txt file. Which provides easily accessible policy information about how a bot accessing the website should behave."}
{"prompt": "What is the procedure for registering a well-known URI?", "completion": "So this file provides useful metadata information for bots. Now you could imagine that there are many other cases where such a file could be useful for other kinds of \u2026 things. And you could maybe endup with tons of these files in the root directory. so at some point there was this suggestion to place these files into their own URI path called .well-known. Now you shouldn\u2019t just place any file in there, because it should be a well known useful file, so there is a procedure to register well-known URIs."}
{"prompt": "What is the process for registering a well-known URI for security.txt?", "completion": "Basically send a request for registration to the wellknown-uri-review mailinglist. So security.txt is such a policy informational file, which registered a well-known uri. Let\u2019s check it out. We can go to the mailinglist archive and see here other requests. let\u2019s search for my request\u2026. Oh\u2026 not found? I\u2019m sure I registered it. Am I going crazy? Ah. I forgot. I\u2019m a smarty pants. We did it over IANA in 2017. This will get done as part of the RFC publication, no need to track separately. Security.txt is not an RFC yet."}
{"prompt": "What is the purpose of security.txt?", "completion": "So security.txt is not a full standard yet. It\u2019s still in the process of becoming one. But what is it actually about? Security researchers and bug bounty hunters have often been very annoyed at finding the correct contact to report security issues. Some people simply try to write an email to security@.com but that\u2019s just a guess. Some have bug bounty programs, but you frst have to find the correct page. There is not an easy clear place to find this information. And so this is where security.txt comes in."}
{"prompt": "What is the PGP key used for when submitting a security vulnerability report?", "completion": "This text file describes a standard to help organizations define the process for security researchers to disclose security vulnerabilities securely. Here is for example the file from our domain securiytxt.org. If you want to report a security issue for this domain, you can contact me here. And here is my PGP key for encryption. It\u2019s that simple. Simple, but very useful. And what is awesome, we are already see wide adoption. For example here on Dropbox, Facebook and even Google. I\u2019m so proud of my invention."}
{"prompt": "What challenge is discussed in the video?", "completion": "Let\u2019s do another trip to the United Exploitation country. We already visited the casino and the photo manager, so let\u2019s continue this road and head to the animals. This is a 200 points exploitation challenge and it doesn\u2019t provide us anything to reverse engineer. So we must be able to blindly exploit this. The description reads: After decades of research, we finally managed to catalogue all the animals on the planet earth. Including very rare pictures! Often times the text can contain hints, but this one is so short and generic, that it probably doesn\u2019t really include anything."}
{"prompt": "What is the odd behavior that the speaker noticed when entering characters in the prompt?", "completion": "So let\u2019s load the challenge onto the board, and get started. Let\u2019s quickly checkout the functionality. We see here a menu and a prompt where we can enter characters, The menu items indicate that we can enter a c to print a cat or a d to print a dog or a m to print a mouse. We can also try to enter some more characters. Like write \u201ccat\u201d, and while it still just prints what the first character says, it\u2019s interesting that we can enter more characters and get the whole string. So we could definitely try and see what happens when we enter more characters and you might already notice some odd behaviour, but let\u2019s not get ahead of ourselves, this was the mistake I first made when approaching this challenge."}
{"prompt": "What is the first step to exploit a blind buffer overflow challenge?", "completion": "Let\u2019s do this systematically. I decided to use a whiteboard to visualize what goes on in my head as well as to document each discovery. Especially with blind challenges like this you need to build a good mental model of the program running there. And taking notes is crucial. So I start with writing down what I know. That there are three different characters in the menu. M, C and D, so I wonder, is there maybe a hidden menu option? Let's find out. Let's write some code that tries out every character and we look at the response."}
{"prompt": "How can we construct a payload to test each character?", "completion": "By now you already know this code, this just sets up the serial connection with the board and some helper functions. So first we read until we get the menu enter promot so we can send a character, and it makes sense to put this into a loop. So now we print the last output, construct our payload, which is just one character and enter it into the menu. Then we read the result, and try the next character. When we try to run it it doesn\u2019t find serial, I forgot to enter the virtual environment. If you do any python programming make sure to checkout virtualenv. So now it works and it tries every character. But it\u2019s a a lot of output, I think it\u2019s better if we remove all the newlines and also show the raw bytes with repr(). Now it\u2019s easier to spot stuff."}
{"prompt": "What is the effect of using a percentage sign as part of the input?", "completion": "When you now look through here, we notice that some characters, for example the percentage sign are turned into a null-byte. There are a couple of them. No idea if it\u2019s important in some way or not, but let\u2019s make sure to note these down. It\u2019s important to not ignore an oddity like this. But besides that we didn\u2019t find any secret menu option. So let\u2019s think of something else we could try. How about trying out different lengths of input. Let\u2019s modify our code to test that. So instead of using the loop number as a character, we use it to change the length of the input. And we just try it with some As."}
{"prompt": "What happens when the 11th character is entered?", "completion": "When we run it we can observer multiple things. First of all, the input seems to be capped at like 59 or 60 characters. Our input keeps growing, but the output stops. So let\u2019s take notes of that. The first shorter lengths happened obviously very quickly so if we look there again more closely, we notice that with the 11th character we screw with something and suddenly leak a lot of bytes. Let\u2019s write it down. So that\u2019s very interesting, what is so special at this last character position. We can write some code to explore that further. Let\u2019s enter a couple of Cs and then play with this exact value."}
{"prompt": "What is the maximum number of bytes that can be leaked with the buffer overflow exploit?", "completion": "And here is a very interesting result. You see we always enter a bunch of Cs but it only prints the amount of bytes we specify. So nullbyte will print nothing and 3 will print 3 characters. And so when we get to high byte values, like actual ascii characters, we obviously leak like 30 or mroe bytes. It doesn\u2019t leak up to 255 bytes, so there is a limit, but we can write this down. And we can change from 11 chars dumps some memory, to that the 11th char controls the output lenght. So now we now that we have this big range of memory we can write to to, and certain positions can contain important information."}
{"prompt": "What character is used to print the maximum amount of output?", "completion": "So for example the 11th character is the print length. And to take notes we can enter the bytes that we leak into this long array. Also the ascii character number 7, hex 37, prints the maximum amount of output. After that the output doesn\u2019t grow, that\u2019s why I write a 7 here. So no we wonder, what could other positions in this memory here mean. When we fuzzed the input length we used the character A, so I\u2019m wondering, what if you used a character that actually prints a picture, like c. The cat. So modify the code slightly and then let\u2019s see what happens. And very quickly the cat disappeared."}
{"prompt": "What is the value of the three bytes related to the cat in the leaked memory?", "completion": "And if you do the same thing for dog, the dog picture disappears a little bit later. So you can write down how many characters it takes to reach a point where a particular picture is not shown anymore. That\u2019s very interesting. What could we possibly overwrite in that memory that causes this behaviour? Look at the memory we leaked and mark the apparently interesting offsets. It\u2019s clear that these bytes must mean something. these bytes have something to do with cat. So let\u2019s modify the code. So I add the three bytes I know are the correct value, but replace the first one to try different bytes."}
{"prompt": "What is a stack cookie and how can it be used to leak data?", "completion": "But it doesn\u2019t do anything. It seems like there is only one correct value that leads to printing the cat. In retrospect it\u2019s probably like a stack cookie. We must use that one particular value. So let\u2019s move on to the next byte. Do the same thing. And this time it does print the cat more often. But it\u2019s a bit weird. I have strong feeling that it is part of an address, but I don\u2019t know. Let\u2019s move on to the third byte. Oh holy crap! This shifts the rat. This clearly moving the cat around. So that is definitely part of the address, or offset into memory where the cat is stored."}
{"prompt": "What is the difference between the dog, mouse, and cat in the leaked memory dump?", "completion": "Also it\u2019s very interestign to see some weird characters before and afterwards. It\u2019s not just 0 and cleary not just random garbage. So that\u2019s something we shouldn\u2019t ignore. But we still didn\u2019t get the big breakthrough. But if you look at the leaked memory dump, you will notice that the dog and mouse seem to have 4 interesting bytes, while the cat only ahs three. Maybe the 4th byte of the cat just happens to be 0, but actually it also has 4 byte. Ignore some of the notes here, I was just exploring some random ideas."}
{"prompt": "What is the python script used to XOR the leaked characters and print the correct output?", "completion": "Anyway, let\u2019s try the 4th byte. wooooh. This output is damn interesting. This is gold. If you look very closely, you notice that these weird characters have indeed a pattern. Doesn\u2019t this look like the dog? The shape is there, just the wrong characters. And here this looks like the mouse. This reaaaaly stinks like XOR. The pattern is there, just the characters have to be transformed into something else. Si let\u2019s write a simple python script that tries out all different XOR keys, applies them to the leaked character output and prints it. And when we now look through the possible outputs, we find a cleartext mouse!"}
{"prompt": "What steps are necessary to leak the flag from the memory location?", "completion": "So to recap, We have a big chunk of memory. And at certain offsets we know there is some kind of information regarding the animal pictures. At least the last two bytes affect what we read from memory. We were able to extract an XORed picture from the mouse by changing the bytes of waht corresponded to the cat. So we clearly control here the location of memory we read. But the output is XORed. So now, we have a first serious shot at getting the flag. Let\u2019s modify our loop to iterate over all 2 byte values. Then we take the leaked memory output, pass it to a function that brute forces all possible XOR keys. And our assumption is, that some memroy location will contain the flag, just XORed, so if we find the word FLAG in any of the decrypted memory leaks,"}
{"prompt": "What are the names of the two researchers who conducted the research on FFmpeg security?", "completion": "Paul Cher is a research who together with his colleague Emil found vulnerabilities in ffmpeg. He then wrote me an email asking if I would like to make a video with him. And this lead to the very first LiveOverflow podcast episode which you should listen to, to get a bit more context for this video. So Paul will now walk us through some of his exploit process and I will add some comments here and there to hopefully make it a bit easier to understand. ok. Hello everyone. My name is Paul and today I will be presenting you guys research about FFmpeg security made by me and my colleague Emil Lerner."}
{"prompt": "What is FFmpeg used for?", "completion": "We have already presented it in our talk on PHDays conference which took place in Moscow earlier this year, and you can watch it in recording, but we did not cover the binary exploitation part too much, and now we are gonna focus only on binary exploitation and go as much in-depth as possible. But first, let\u2019s take a quick look what is FFmpeg and how it really works. FFmpeg is powerful opensource software, to easily record, convert and stream out videos. Thus, it is used by many platforms and services that provide file storage conversion and editing functionality."}
{"prompt": "What research was presented at Blackhat 2016 related to FFmpeg?", "completion": "And this really means that FFmpeg is used almost everywhere starting from your favourite messenger finishing up with some lovely meme storage. When you upload a video as a gif or so on some image sharing plattform it\u2019s very likely that the video is handled by ffmpeg. It\u2019s really a very popular and big tool. Of course such a system would be a good target because it has a very large attack surface. There are some really cool researches already, for example research presented at blackhat 2016 by Maxim Andreev and Nikolay Ermishkin."}
{"prompt": "What networking protocols can be used to collect files from remote systems with FFmpeg?", "completion": "Or research by Gynvael Coldwind and Mateusz Jurczyk from google, who managed to fix thousands of bugs in ffmpeg and many other researches. Knowing this, me and my colleague Emil still tried to take this challenge and to find some new bugs. First let\u2019s take a quick look at the ffmpeg functionality. Ffmpeg has really cool features and all of them are described in the documentation on the official website. Seems like there is a feature that allows you to collect files not only from the local filesystem but also form the remote systems by using networking protocols."}
{"prompt": "How can I downgrade to a vulnerable version of FFmpeg?", "completion": "So as you can see you can provide a link as an option to ffmpeg and it will go for the remote file, and take it, and process it. Let\u2019s download the sourcecode from the github and see how this process is implemented. And now I\u2019m going to clone the repo to my ubunut virtual machine. And this may actually take a while. So now we have downloaded the ffmpeg sourcecode. To follow me in my next steps you need to be sure that you have downgraded your FFmpeg to vulnerable version. You can do it by resetting FFmpeg to correct version by using exact commit number or by grepping from the commit log."}
{"prompt": "What custom protocols does FFmpeg implement?", "completion": "As I do right now. So i\u2019m using git reset hard to pull the head driectly to the exact commit number. Heh. Funny little advice. Look through the git commit log with his name in it to find the latest version before it was fixed. Now let\u2019s take a quick look at the http protocol implementation. I\u2019m using vim to do this So, as you can see, ffmpeg doesn\u2019t use libcurl or any other library, and it has a custom implementation of the HTTP protocol and also many others. So it is really a good [attack] surface to search for the vulnerabilities."}
{"prompt": "How does FFmpeg handle HTTP requests differently than other libraries?", "completion": "And this is a very important observation. Libcurl has been audited and around for a long time. It\u2019s a very very safe library and also used a lot. But instead of relying on some other library ffmpeg implements it\u2019s on HTTP handling. And sure you will think that HTTP is very simple, but there are weird protocol features that can break your neck when you actually have to implement it in C. So, for now I have two versions of ffmpeg compiled, the first one is compiled with addresssanitizer. We talked about this one in our podcast."}
{"prompt": "What is the purpose of filling certain memory areas with a recognizable pattern when using Address Sanitizer?", "completion": "And the second one is the original ffmpeg binary, but it has debug symbols and it is compiled without code optimization options, so I can easily debug it. You can do it as well by configuring project with the following options. I just want to quickly explain the basic idea behind address sanitizer and why it\u2019s great for debugging but also finding heap vulnerabilities. For example one feature is that asan will automatically fill certain memorz areas with a recognisable pattern. And when then some code uses bad memory, for example in a heap overflow case, it will likely crash because of those values and you can easily recognise that it crashed because it read data from that memory."}
{"prompt": "What techniques did Paul Cher use to fuzz the network protocols inside FFmpeg?", "completion": "And there are a few more ideas and tricks like that. So it\u2019s very convinient. So, let\u2019s quickly recap on how we actually did the fuzzing. At some point, we thought that there might be a small chance that nobody has been fuzzing the network protocols inside FFmpeg before us, and there might be some vulnerabilities. And yeah, this is exactly the case. I won\u2019t explain too much about the fuzzing process, because we used secret dark magic related technique called ehm \u201claunching AFL\u201d and the process of fuzzing was already described in the podcast."}
{"prompt": "What is the HTTP Transfer-Encoding header used for?", "completion": "So let\u2019s jump directly to the part where we already have a crash. So, here I got my crashes, I have already simplified them a bit to be more readable for you. So Let\u2019s take a quick look at them first. The first one is ascii text basically. Let\u2019s open it with my favorite. Vim. Soo\u2026 this is HTTP protocol. it has a lot of really interesting features like \u201cTransfer-Encoding: chunked\u201d for example which was used here. Basicly what it does is instead of setting the content-length header and length of data and then whole bunch of data afterwards, it allows you to send the data to server in little chunks."}
{"prompt": "What is the purpose of the echo server written in the video transcript?", "completion": "First you send the size of the chunk in hex and the next line is the chunk itself finished with the CRLF (\\r\\n). And there -1 was used as size as you can see, maybe this was causing an issue. So, let\u2019s move on. So here I wrote a simple echo server. Basically what it does is, it is binding on the port, listens for everyone. And it\u2019s basically reading the argv filename. It reads it and basically echoes to the output. So nothing special. Let\u2019s now launch both binaries with this output and see what happens . Let\u2019s launch the original binary first."}
{"prompt": "What function in ffmpeg was causing a heap buffer overflow?", "completion": "Segmentation fault confirmed. So he wrote a small server that just responds with this test case that causes a crash and pointed ffmpeg to load the file from there. And then it caused a segmentation fault. But how do you figure out now where and why it happened? That\u2019s why he compiled a second version of ffmpeg with address sanitiser instrumentation included. So for a more detailed report we are now launching the address sanitizer binary. Ho ho. Let\u2019s see. So the heap buffer overflow in function http_buf_read."}
{"prompt": "What does the output of Address Sanitizer show in this exploit?", "completion": "This is nice. You can see here the output of address sanitizer. And it recognised a heap buffer overflow. And it shows you here how the heap looked like and fa means heap redzone. So that\u2019s a bad address. And because it was also compiled with debug symbols you can easily see the trace of functions. So let\u2019s launch FFmpeg using GDB and take a closer look at what happens and then we will start auditing the source code. As you can see the server is already launched. Let\u2019s connect to it using ffmpeg in gdb."}
{"prompt": "What debugging method is used to analyze the exploitable condition?", "completion": "So as you can see the crash is actually caused by memcpy, because it reached the end of the mapped virtual memory region. Let\u2019s look at the backtrace. So in this functions it seems that the size equals to -1 integer\u2026 So being able to pass in a negative chunk size is clearly a programming mistake that apparently leads to an exploitable condition. These two functions are very interesting, let\u2019s look at them. Once again I will be using vim as my IDE with support of ctags, which will allow me to navigate through the sourcecode quite quickly."}
{"prompt": "What is the name of the function that is responsible for the corruption of the size parameter?", "completion": "So keep up. Just FYI: Ctags is a tool that will sift through your code, indexing methods, classes, variables, and other identifiers, storing them. And vim can then use it to quickly jump around the c source code. So paul now investigates a bit around the line that caused the crash. So this is the http_buf_read function. And inside the memcpy the len is actually -1 over here. So this is actually not exploitable. But let\u2019s look at what caused the corruption of the size parameter. This was already corrupted in the previous function which called it."}
{"prompt": "What function is used to convert a string to an integer in the http_read_stream function?", "completion": "So. Let\u2019s look at it. This is http_read_stream function. It\u2019s actually in the same file. Let\u2019s scroll up to the top of the function. Ok. As you can see here is the piece of code which corresponds for reading the HTTP chunked data. So there is the line reading. And there is the strtoll function, which also accepts a negative numbers. So the chunksize could have been negative. So str to long long integer is a function that converts a string to an integer. And integers can be negative and we know that the HTTP chunk size was set to -1."}
{"prompt": "What is the function that is called with a negative argument that causes the crash of FFmpeg?", "completion": "So this function will return -1. And a memcpy with -1 is nonsensical. And later the minimum was taken of these two and of course the negative number was less than any positive. So that\u2019s probably how our size integer was corrupted, which caused the crash of FFmpeg. And later there is the http_buf_read function which was called with the negative argument. So as you can see this is actually not quite exploitable. Let\u2019s jump back to it. But still if we are able to make this fall through this branch, meaning that buf_end will be equal to the buf_ptr we will be able to call ffurl_read function, which is different from the memcpy."}
{"prompt": "What is the function that reads the parameters and feeds them to the read function?", "completion": "Let\u2019s look inside it. And this is basically calling the retry transfer buffer with the callback url_read. So. here it is called. And url_read is basically a function which accepts some parameters and it feeds those parametrs to the read function and calls it. And that\u2019s it. Maybe that\u2019s it. Maybe we can translate the -1 to the read function and this issue will be actually exploitable. If we will be able to make buf_ptr be equal to buf_end we will fall through this check, into the ffurl_read which will call the ffurl_read,"}
{"prompt": "What are the consequences of the programming error discovered by Pangu Lab in regards to Zip Slip and Zipper Down?", "completion": "On June 5th 2018 we heard about Zip Slip: We just disclosed a widespread critical vulnerability called Zip Slip. It may affect you! Zip Slip is a widespread arbitrary file overwrite critical vulnerability, which typically results in remote command execution. It was discovered and responsibly disclosed by the Snyk Security team Coincidentally, a couple of weeks before that we heard about Zipper Down While auditing iOS Apps from various customers, Pangu Lab noticed a common programming error, which leads to severe consequences such as data overwritten and even code execution in the context of affected Apps."}
{"prompt": "What is the programming error behind ZipperDown that was not disclosed by its discoverers?", "completion": "And then listing almost 16.000 apps that could be vulnerable. What is going on with ZIP files? Why can it lead to remote code execution and why is like affecting everything? In case of Snyk Security, seveal CVEs were assigned. It\u2019s like a massacre. So first of all, what do these two different disclosures have in common - Zip Slip and ZipperDown. So when ZipperDown was made public, they wrote that \u201cTo avoid leaking the details of the programming error, we named it ZipperDown.\u201d. So they didn\u2019t want to disclose what exactly the issue was."}
{"prompt": "What type of attack is used to exploit zip files?", "completion": "But if you have experience in IT security, or maybe played CTFs, then it was pretty obvious what was going on. My guess at the time was: (.zip) archive unpacking with path traversal from resources downloaded via insecure connection. It allows to overwrite files inside the app's sandboxed folder and in some cases even RCE. PoC video shows \"code exec in js\" probably overwrote some .html/.js files. And yes, that is basically what it is about. It\u2019s about having relative paths, more specifically with a path traversal .., as files in the archive."}
{"prompt": "What types of malicious activities can be enabled by exploiting the Zip Slip vulnerability?", "completion": "This allows you to to go up in the folder hierarchy and write to files and folders outside of the intended unpack destination directory. And of course, when you have a software that takes a zip file and unpacks it, and allows path traversal, maybe some important files can be overwritten. And that could open doors like overwriting a script that would be executed later or stuff like that. And the reason why I was able to guess this, is because I play CTFs. and screwing around with zip files, or other archives, is a very typical challenge."}
{"prompt": "How was the Zip Slip vulnerability exploited by hackers in 1991?", "completion": "A typical beginner challenge. But actually this issue with zip files is ancient. Hackers have exploited this before I even existed in the world. Checkout this phrack article from 1991. That\u2019s over 27 years ago. Let\u2019s check it out. It\u2019s hacker history. The Complete Guide to Hacking WWIV by Inhuman. September 1991. WWIV is one of the most popular BBS programs in the country (that\u2019s like a forum). With thousands of boards in WWIVnet and hundreds in the spinoff WWIVlink, there is a lot of support and community."}
{"prompt": "What method can be used to gain sysop access to a WWIV BBS and steal user and configuration files?", "completion": "The nice thing about WWIV is that it is very easy to set up. This makes it popular among the younger crowd of sysops who can't comprehend the complexities of fossil drivers and batch files. In this file, I will discuss four methods of hacking WWIV to achieve sysop access and steal the user and configuration files. I don\u2019t want to read the whole thing but let\u2019s jump ahead to this section: This technique also plays on the openness of WWIV's archive system. This is another method of getting a file into the root BBS directory, or anywhere on the hard drive, for that matter."}
{"prompt": "How can attackers exploit a zip file to gain access to a system running an outdated operating system?", "completion": "And then down here it explains, load STUFF.ZIP into a hex editor, like Norton Utilities, and search for \"AA\". You could even work backwards, by forgetting the WWIV subdirectory, and just changing the \"AA\" to \"..\". This would be foolproof. You could work from there, doing \"..\\..\\DOS\\PKZIP.COM\" or whatever. Then upload STUFF.ZIP (or whatever you want to call it) to the BBS, and type \"E\" to extract it to a temporary directory. So this was done in different times. When more servers were running DOS."}
{"prompt": "What is the Zip Specification?", "completion": "But it\u2019s the same issue. Exploiting a path traversal when unpacking zip files. So maybe now you can understand why it is a little bit misleading or disappointing how the Snyk Marketing Team advertised this with \u201cwe just disclosed a widespread critical vulnerability called Zip Slip\u201d. And they write \u201cIt was discovered and responsibly disclosed by the Snyk Security team\u201d. It\u2019s just not accurate. Zip files and many other archive file formats just can contain relative paths and thus path traversals. It\u2019s not forbidden in their specification,"}
{"prompt": "What warning does the Python documentation for zipfile contain?", "completion": "and like we just learned, it is known since forever. I mean even the python doc for zipfile has a huge red warning saying: \u201cWarning Never extract archives from untrusted sources without prior inspection. It is possible that files are created outside of path, e.g. members that have absolute filenames starting with \"/\" or filenames with two dots \"..\".\u201d So I hope I made it clear that this is nothing new or suprising. In their whitepaper they also claim that \u201cThe contents of this zip file have to be hand crafted."}
{"prompt": "What is path traversal and how does it relate to zip files?", "completion": "Archive creation tools don\u2019t typically allow users to add files with these paths, despite the zip specification allowing it.\u201d. I don\u2019t know. But the zip utility on most systems will happily include files with relative paths and path traversals. See here. Simply creating a zip file with a relative path. And there it is. No problem at all. And I understand that this fact about zip files might come to a surprise to many developers, but the security team of snyk should know better. They themselves write \u201cdespite the zip specification allowing it.\u201d."}
{"prompt": "What is the issue with .zip files that was reported by Pangu before the Zip Slip and ZipperDown vulnerabilities were discovered?", "completion": "They know this is known. So phrasing it in this way that THEY DISCOVERED this issue. And hype it up this much. And give it a name. Especially because Pangu released basically the same thing just more specialized for iOS apps a little bit before that. With their own name. I don\u2019t know what to say. I like to believe that the researchers were maybe a bit over excited or didn\u2019t have much say in it, and the less technical marketing department took it a few steps too far. But. despite the little bit cringy overhype, and kinda misleading advertisement, this is probably positive work."}
{"prompt": "What are the implications of changing the zip specification in order to address security vulnerabilities?", "completion": "So they reported this to many libraries that happily follow the zip specification. And changing this in the libraries means, violating the specification, right? Violating the spec means, you think you know that a zip unpack behaves as you expect but then it doesn\u2019t. And there are a lot of specification purists out there that will tell you that you shouldn\u2019t never diverge from the specification because then what resources can you trust. BUT zip is very old and has been created in a time where there was probably not that much deep understanding of security issues that could come from it."}
{"prompt": "What steps did the security researchers take to address the path traversal vulnerability in .zip files?", "completion": "I mean the computer systems were soooo different back then anyway. And today we can see so many serious vulnerabilities that happen because of that. And while refusing to unpack path traversal files might violate the spec, and break some implementations that relied on that, probably the majority of the world will be fine. And so not only did they report this to the libraries so they change that behaviour, they actually did that with pull requests. They didn\u2019t just complain, they fixed it themselves."}
{"prompt": "What are the potential solutions for preventing path traversal attacks in .zip files?", "completion": "And I think that deserves credit. And so overall this effort will probably have some positive effect for security in the future, if these libraries stay relevant. Though, there is still the issue that maybe we should update the zip standard itself so that future reference implementations won\u2019t allow it by default. Maybe we could introduce a flag to optionally turn it on. And so it\u2019s kind of a shame that they didn\u2019t market it this way. Instead of making it look like any other hyped vulnerability and claiming they discovered it, they should have written about the decades of issues with zip, and their effort to get libraries fixing it, which will then lead to software built on these libraries to be safe."}
{"prompt": "What potential security risks can be caused by improperly configured zip files?", "completion": "This could have impact. That would have been genuine and honorable. But unfortunately, the reality is, advertising it in this terrible way will probably help their business more. Who cares what some researchers think, if they can use it to fish for the big contracts by being mentioned with flashy headlines in news, then they got what they wanted. And that\u2019s a little bit sad. But let\u2019s not stop with video here\u2026 because zip files and other archive files are f\u2019ed up. If you are a developer and this was new to you."}
{"prompt": "How has Ange Albertini experimented with zip files?", "completion": "Then please research more about zip files. I can really recommend the work from ange albertini. He has done several presentations on file formats and zip files, and has done a lot of experimentation with them. For example crafting a .pdf with an issue of PoC||GTFO, which is at the same time a bootable image AND also a zip file that can be unpacked. Funy fileformats. Or gynvael who also has a great youtube channel and has recently done this greta talk \u201cTen thousand security pitfalls: the ZIP file format\u201d."}
{"prompt": "What libraries support symlinks in zip files or other archive files?", "completion": "I guess that title says it all! So you should definetly look up his slides and talk. I will list some links below in the description. And by the way, I was talking with gynvael about this zip slip issue and he had another excellent idea. You know zip files, or other archive files sometimes also support symlinks. Not every library implements symlinks, but if a library supports symlinks , you could maybe bypass those path traversal fixes. Again, this is something you could learn from playing CTFs."}
{"prompt": "What libraries have been patched by the Snyk team to fix path traversal vulnerabilities?", "completion": "Here just a short excerpt from the challenge extract0r from the 34c3ctf. This writeup is by the challenge author eboda, and he writes: If you have been playing CTF for a while, you know that when you can extract or compress ZIP archives, you probably have to do something with symlinks ;-) So yeah, that\u2019s also pretty common knowledge. And I wanted to try gynvaels idea. I went down the list of libraries that were fixed by the snyk team. their patches are supposed to fix the path traversal. Unfortunately, as expected, a lot of libraries don\u2019t implement symlinks."}
{"prompt": "How can a symlink be included in a tar file?", "completion": "Especially for zip files even though the standard theoretically supports it. But this one go library supports symlinks for tar archives. Here is the original issue from the snyk team, to fix the path traversal, and as an example they use tar. So let\u2019s see if we can bypass the fix. I create a ziptest directory in tmp, and create also a file \u201cohoh\u201d inside tmp. Then I create a symlink called root, that points to the root of the filesystem. Slash. Now we create a test.tar file and include the symlink root, and reference the file we created in tmp, via following the root symlink."}
{"prompt": "What library is necessary to unpack test.tar into a folder?", "completion": "And when we list the archive we see those two files now. Here is the simple .go program that uses the library that I just mentioned to unpack the test.tar into the folder test_out. Let\u2019s remove the ohoh file in tmp and then go run test.tar. This should have now unpacked the files. And here is the test_out folder and it does contain our symlink. And when we now check /tmp/ohoh, then yeah. Our file is there. We bypassed the fix. You see. Fixing common issues with archives is not that simple. Zip files and archives are dangerous."}
{"prompt": "What is the bootrom bug in the Nintendo Switch, and how does it enable the hardware to be attacked?", "completion": "So quite a while ago the Nintendo Switch was released and I made this video about the webkit bug. I didn\u2019t really understand it well enough to actually participate in the switch research and a lot of it was then done in private anyway. But since then we have seen quite a few releases, a nice talk at congress, a nintento bug bounty, some infighting between groups \u2026 and I have no clue. But I remember hearing about this bootrom bug, and that it was apparently super awesome, though I never really looked into it."}
{"prompt": "What kind of event was Andy's talk held at?", "completion": "This was until Andy - G33KatWork on twitter - told me about a talk he gave at OpenChaos, a very small Chaos Computer Club event in some random german city and I should check it out. And so let\u2019s talk about this. So the talk Andy gave is pretty long with 1:30h. And staying concentrated and listening to it all might be hard, But this also means, the talk is very detailed and can be fairly easily understood. You don\u2019t need a lot of prior knowledge. And it is kinda structured in chapters as well, so that you can easily watch and pause and continue another time."}
{"prompt": "What boot stages does the Nintendo Switch go through during the boot process?", "completion": "So there is no excuse to not watch it. And I really want to recommend this to you because, he explains how he together with q3k from the Dragon Sector CTF team approached the nintendo switch. They were not coming from the browser exploit software side, they tried to come from the hardware side. And so Andy is telling what their thought process was and also explains a lot about hardware in general, how booting a system works, the different stages, basics of USB and also about how they then tried to glitch the switch, the title of the talk is \u201cglitching the switch\u201d."}
{"prompt": "What type of chip is used in the Nintendo Switch?", "completion": "I had one CTF video writeup where I used an FPGA to glitch a very simple software on a simple arduino board. But in this talk, glitching is a lot better explained and you get an actual real-life example of how AND WHY they wanted to glitch the switch. But enough of this praise and worship, I hope I convinced you to watch it. Soo... first of all, the nintendo switch is kinda unique because it is based on Nvidia\u2019s Tegra X1 chip. This chip contains a lot of stuff, it contains a CPU, GPU and a lot of more parts."}
{"prompt": "What peripherals are available on the Tegra X1 development board?", "completion": "Here you can see the block diagram of all the components. It\u2019s a whole system in that chip. The cool thing was, that this chip is available for us consumers. You can buy a tegra X1 development board, which has the X1 chip on it and exposes a lot of different peripherals for you to develop and test software and create prototypes and so forth. You can kinda imagine that nintendo might have used such development board during early software development, before the switch hardware itself was finished."}
{"prompt": "What motivates security researchers to work on gaming consoles?", "completion": "So the reason why gaming consoles are so locked down is mostly because of piracy, and a lot of security researchers who work on consoles are very vocal about not being interested in piracy at all . They are usually not motivated by free pirated games later, because that NEVER would cover the cost of tools, hardware and time invested into those hacks. Economically this only make sense for people who want to directly or indirectly profit off piracy. A lot of these researches just do it for the challenge."}
{"prompt": "What are the benefits of exploiting a browser versus a console?", "completion": "So please don\u2019t support that commercial form of piracy and instead buy the games and celebrate the cool hacks that were done. Anyway, so what I wanted to say is that the the goal of \u201chacking a console\u201d is to somehow run your own code on there or even get so far to build a whole homebrew environment so that anybody can develop games for the switch. When exploiting a browser you only get some user-land access. Maybe the browser is even sandboxed or there are other mechanisms that make this priviledge level less powerful, and it definitely is not persistent."}
{"prompt": "What are the practical issues of physically accessing the Tegra X1 chip?", "completion": "So you would have to find more vulnerabilities to go down the layers. But of course you could also ask yourself, can you not just start from the other side? Could you not just like replace the internal hard drive or storage and just overwrite the raw switch code with your own code? Kinda, yes, that would be an idea and might theoretically work. But we have just learned that the tegra x1 is like this whole system inside of a chip, so physical access has some practical issues - there is no like external hard drive that you can just replace."}
{"prompt": "What is the first CPU that runs code when the Nintendo Switch is turned on?", "completion": "And there is also some crypto involved too. Another idea would be to use some kind of update or flash mechanisms to overwrite those things in storage, but these kind of \u201cattacks\u201d are of course mitigated. There are a few security measures in place. But let\u2019s start with the beginning, let\u2019s Andy introduce the first step in booting the switch. this is the so called bpmp. Bpmp stands for boot and power management processor. And this thing is the first CPU that runs code when the system is turned on."}
{"prompt": "What is the name of the processor that executes the first code when the system turns on?", "completion": "The CPU, GPU and so on don\u2019t even have power when you turn on the CPU. When this core executes code the DRAM is not configured yet. So you don\u2019t have memory. And also here is a block called iROM. And irom is the boot rom. This is the first code that this bpmp processor executes when the system turns on. And this code in the ROM is responsible for checking a lot of stuff that is security related. This is the code that enforces that you can\u2019t run whatever you want on this platform. This is key. So booting a system has a lot of different steps."}
{"prompt": "What privileges does the boot process drop when moving from ARM level 2 to level 1?", "completion": "Modern computers are very complex and there are multiple chips, and multiple little programs that will configure hard ware and whatever, and eventually handover the execution to the operating system kernel, which can then use a lot of the configured hardware to create a user land environment for regular programs. So during the different stages of booting, those stages verify the integrity of code that follows by checking hashes and signatures, or it drops other forms of privileges. Like moving from ARM level 2 to level 1."}
{"prompt": "What processor is used to execute the Switch's boot ROM?", "completion": "Or for example locking down certain memory areas that contain secrets, like cryptographic keys and so forth\u2026 Here you can see how the Tegra X1 development board boots, this is very similar to the switch, but the switch obviously doesn\u2019t go into Linux. But the bpmp processor, which executes the boot rom is the same. So if you could somehow change the code of one of these stages, the previous stage would see that some signature doesn\u2019t match anymore and refuses to execute it. So it all starts with the boot rom."}
{"prompt": "What is the purpose of the RCM path in the Nintendo Switch?", "completion": "The rom is interesting, because the ROM is the root of trust. If you defeat any kind of security in that rom, you can load whatever code you want. So running your own code here, would be kind of the holy grail. And like a lot of devices that you know, if something goes wrong during boot, you end up in some kind of recovery mode. The other path is interesting. It\u2019s called RCM and stands for recovery mode. If the boot rom fails to load nvtboot for example from the emmc, because the emmc is not there or is corrupted or whatever then it goes into that RCM path."}
{"prompt": "What is nvtboot recovery and what does it do?", "completion": "You can also force this by pressing some button. And then you have a USB device that you can use to load code into the chip. And then you usually load somethng called nvtboot recovery. Which then runs from ram and then you can talk to this thing and reflash the emmc or whatever mass storage you have on your board or device where the operating system lives. so could we just somehow get into RCM and then load our code? Of course we can\u2019t use this, because RCM has well enforced security. Because everything that you load has to be signed by a certain private key from nintendo That would have been to easy."}
{"prompt": "How can the boot ROM be accessed for analysis?", "completion": "But maybe there are other vulnerabilities. But the issue is, that these parts are proprietary. There is no source code available for the boot rom. So how could you get the boot rom? even just the binary to reverse engineer and analyse for bugs would help. This is where the development board comes into play. On there you CAN run your own code and it has the SAME boot rom as the switch. So can you maybe run code, that will access the boot rom memory and just read it out? well... it turns out that the boot rom is locked down."}
{"prompt": "What is the setup for glitching the Switch, as described by Andy?", "completion": "once your code is running you can\u2019t access this memory anymore. And this is what Andy and q3k tried to glitch. They ran code that keeps trying to read from the boot rom, and tried to glitch at a specific moment in time to hopefully circumvent this protection. Here you can see an oscilloscope trace of the glitch attempt by andy. In his talk he explains exactly why they wanted to glitch at this moment and how they do it. So if you are curious about the setup, watch the talk. But so now he had a glitching setup and now you have to try for a bit."}
{"prompt": "What did the code running on the Switch say?", "completion": "The glitches would do something, some time. Maybe I am lucky. And then on another screen I suddenly saw this. And this was my facial expression. This is the code that was running there and said all the time \u201cboot rom locked, boot rom locked, boot rom locked\u201d. And always cehcked \u201cis the boot rom locked?\u201d yeah, hmpf okay then. Don\u2019t do anything. Wait for the reset, be glitched again, and suddenly it said boot rom unlocked and started dumping stuff at mev. And iwas like \u201cwhat?\u201d. And again we can see, this actually worked."}
{"prompt": "What are some potential security issues that could be discovered when reverse engineering the Switch's BootROM?", "completion": "Awesome. The glitch was succesfull , and now reading the previously locked boot rom is possible. This is actually also how at least one other group acquired the boot rom as well. Now you have the boot rom and you can reverse engineer it in the hopes to find bugs. For example, maybe there are cryptographic vulnerabilities so you can bypass some signature checks, or they forgot to check one small thing ... So multiple people and groups got the boot rom and independently started to find the same security issue."}
{"prompt": "What is the response from Nvidia to the recent publications of the security issue regarding the NVIDIA Tegra Recovery Mode (RCM)?", "completion": "And that one is this holy grail vulnerability. Keep in mind this boot rom cannot be updated by a switch software update. This boot code basically is baked into the hardware of the switch. That\u2019s why Nintendo had to release a new fixed hardware revision. All old switches will forever be vulnerable to this. Here is the advisory by Nvidia: \u201cSecurity Notice: NVIDIA Tegra RCM Vulnerability\u201d. This notice is a response to recent publications on a security issue regarding NVIDIA Tegra Recovery Mode (RCM)."}
{"prompt": "What is the RCM and what does it do?", "completion": "[...] a person with physical access [...] could connect to the device's USB port, bypass the secure boot and execute unverified code. This issue cannot be exploited remotely, even if the device is connected to the Internet. Rather, a person must have physical access to an affected processor\u2019s USB connection to bypass the secure boot and run unverified code. So what is this bug. First we need to talk about the RCM, the Tegra Recovery Mode. A lot of devices you own can somehow be interrupted during boot."}
{"prompt": "How can one access RCM mode on the Nintendo Switch?", "completion": "For example on your PC you can like pres del or f1, to enter the BIOS, or on your phone you can keep like volume down or so pressed, or on your mac you can like press the option key during boot, I don\u2019t even know the keys, I might have just said completly wrong ones, but you know what I mean. And the Tegra also has a way to interrupt regular boot and instead go into RCM mode. This works by holding down the Volume Down button, the HOME button and then power. The home button in this case is not the home button on the switch joycon, it\u2019s what the TEGRA sees as the home button and there is no real button exposed, you actually have to bridge the 10th pin here inside of the joycon connector."}
{"prompt": "What are the messages contained in the RCM message sent to the board?", "completion": "So if that is like shorted, you press volume down and then power, the switch will go into the RCM, the recovery mode. The screen stays off, because it actually just communicates over USB. There are special RCM messages you can send to the board, for exmple to write new code. But as you can see here the RCM message contains crypto stuff like signatures and you would need the nintendo private key to actually send valid messages to the boot rom. So most of the functionality of the boot rom is implemented after messages are verified."}
{"prompt": "What is the RCM message protocol and how does it work?", "completion": "SO a lot of the bug prone more complex parts might only be reachable if you could send verified messages. So How likely do you think is it, that there is vulnerability even before the message could be verified. Like, during the whole receiving of the messages. Also here I encourage you to watch the talk, because andy explains very detailed how the RCM message protocol works AND how USB works. I just try to explain the gist of it. There are two parts to this bug. First, here is a loop in the RCM receive message function:"}
{"prompt": "What is the memory layout of the Switch's Boot ROM?", "completion": "This just receives the message. It does all kinds of sanity checks already so you don\u2019t overflow anything. And it puts the header in one place and the payload into another place. Here is the memory layout of the boot rom. This is continuous physical memory, but divided into dedicated areas. This here is the RCM payload buffer, which is pretty big. And so when you send data via USB to the switch, and it receives it, this is where your payload is placed. And here we have USB DMA, a direct memory access area."}
{"prompt": "What is the vulnerability in the Switch's boot process?", "completion": "If the switch would want to send data via USB, it would write the data into that DMA buffer, and then tell the USB stack in the chip to send this USB data out. And there is an issue in one function that sends out data. You can request some status from the switch via USB and this is then processed in the handle_pending_control_transfer function. And in here you can control a length value, which will result into a memcpy from the buffer area into the USB DMA buffer so that the data can be sent out as a response."}
{"prompt": "What happens when 16kb of data is copied from the payload area into the USB DMA buffer?", "completion": "But you control the length. And now you can combine the receiving of a large payload, and the copy of data from the payload area to the DMA. And In the meantime it also has to handle these control transfers. At that point we send the GET_STATUS_CONTROL request, with that overly long w_length value that we can control. So to send out data, the data is copied from the payload area into the USB DMA buffer. But the stack is directly behind the DMA buffer. So we always copy stuff from here, to here. what would happen if we copy 16kb from 12kb from here to here."}
{"prompt": "What does the GET_STATUS_CONTROL function do when a large length is set?", "completion": "Like this. We overwrite the stack. BOOM! So overwriting the stack happens during a memcpy, andy shows the call stack for this here. The rcm_receive_message function is receiving a lot of data, that we can send to the switch in multiple packets, an places it in the buffer. But before we complete the transfer you send a different USB packet to call that GET_STATUS_CONTROL function, and set a large length. And you can imagine what happens next. The area you previously wrote here is copied with a memcpy into the DMA, but you copy so much, it overwrites the stack."}
{"prompt": "What algorithm is used in the key verification check of Pwn Adventure 3?", "completion": "Last video was pretty boring reversing. And I also told you that I gave up and looked at a write-up, which told us the the main component in the key verification check is RSA encryption or decryption. I was really surprised because I was not able to find out that it\u2019s RSA. But now that I know it\u2019s RSA I don\u2019t just wanna write the keygen, I want to understand how RSA is implemented in assembler here, so that I learn and in the future I will then be able to recognize RSA again. So let\u2019s head right in."}
{"prompt": "What is the algorithm used to perform modular exponentiation?", "completion": "We have encountered RSA on this channel before, and I recommend to watch that one as well to learn a bit more about it. But let\u2019s have a quick look on wikipedia page again. RSA has a public and private key. And at the heart of the RSA encryption or decryption is a modulo exponentiation. To encryp you take the message, which you converted to a number and raise it to the power of the public key modulo the public exponent n, and to decrypto you raise the encrypted message to the power of the private key d modulo n. So what we are basically looking for in assembly is simply an algorithm that implements exponentiation with modulo. Modular exponentiation is a type of exponentiation performed over a modulus."}
{"prompt": "How can CPU operations with large integers be implemented using an algorithm?", "completion": "The big problem with this simple math is, that our CPU only has 64bit registers and not really instructions for exponentiation or modulo. So these have to be implemented by an algorithm. Not only exponentiation has to be implemented by an algorithm, but we are dealing with large numbers that don\u2019t fit into 64bit, so you can\u2019t simply add two numbers that are much larger with a simple instruction. And apparently all of that is what is implemented here. So the approach that I took to understand the assembler code was to meet in the middle."}
{"prompt": "What is the function call tree of the RSA implementation in assembler?", "completion": "This image shows a function call tree from here. Here is our function we enter. And these leaves were the super simple functions without any outgoing ones. So they can be understood in isolation. During my own failed analysis I actually reversed these very simple functions but I couldn\u2019t see the wider context of it. What they are used for. So I will show you what the simple components do, and then we research basic modular exponentiation algorithms and see if we somehow get the wider picture. So here is the function that is supposedly implementing RSA. Let\u2019s follow the references of unknown functions until we reach one of the simple ones."}
{"prompt": "What is the purpose of the for-loop in the video transcript?", "completion": "Okay, this is a simple loop and has no other outgoing functions. So here we have a clear for-loop again. Initilise i with 0, increment down here and the cindition is comparing i to the value coming from a parameter. So that parameter is clearly length. And inside the loop we then see that i is used as an offset into some buffer, in fact it\u2019s used to load a byte from two different buffers, so we can take that as buffer1 and buffer2. And these were also our parameters. So we take that byte and then we add it. Together."}
{"prompt": "How is the temporary value used in the modular exponentiation algorithm?", "completion": "Then we load some other byte which was initially set to 0, but down here we can also see it set again, so let\u2019s call it a temporary value for now. That value is moved around a bit but then in the end added onto the previous add result. Then we find another temporary value. It\u2019s always written here and used here. So we write that add result of those bytes and that one temporary value into it, but load it again, shift it right by 8, and move that result into the first temp value. So if our add result was larger than 1 byte,"}
{"prompt": "How is the add implementation for large integers implemented in assembler?", "completion": "so if there is something left after the shift right, that is what is stored in that first temp value. Then we load the add result again, only take one byte from it, so these are the lower 8 bits then and move that into the offset of the first buffer. That is a very clear add implementation for large integers. Integers that span as many bytes as you want. Was this to fast, do you not understand how this is implementing an addition over large integers? Let\u2019s do it again while at the same time we do some elementary school math."}
{"prompt": "What is the process for adding two numbers that are more than one digit in length?", "completion": "Let\u2019s say you want to calculate 151 + 272. How do you do that in elementary school? You write it like this and then you go digit by digit. So 2 + 1 is 3. Boom. 7 + 5 is 12, so that is more than a digit, so you know what you have to do? You have to cut it off there, take the one as a carry, remember it for the next round and just keep the 2. Then comes the last digit, 1+2 is 3, but we also have a carry of 1, so we add 1 and the result is 4. 423. Now quick recap of the assembler code, we load one byte from each number, it\u2019s like digit, we add it together, we check if we have a carry that we have to add as well!!!"}
{"prompt": "What is the purpose of the \"shift right of 8 bits\" in the add function discussed in the video transcript?", "completion": "Right? So that\u2019s the carry. Then we do the shift right of 8 bits, which would now get anything that doesn\u2019t fit into the byte, into the digit. We cut off this byte, and remember this cut off part in the carry for next round. And we only write down the byte that we just cut off in the first buffer as a result. Makes sense right? Super simple. So we can change the type and name of this function. The first two parameters are the two numbers A and B, the last parameter is the length of the buffers that holds A and B and the function is simply called add."}
{"prompt": "What is the purpose of the subtract operation in the unknown function?", "completion": "Now when we back out we find another unknown function, but that one does a bit more, though it has also a reference to another simple function. This one looks super similar. And we can very quickly assign the same variable names as before. This is i, the length, the carry and so forth. And instead of a simple add, we see an add and a subtract here. Could this be simply a subtract function? But why then the add? So let\u2019s see. The subtract is done on r10 - edi. R10 is loaded from rcx + an offset. The offset is i and rcx is the first buffer. Ok."}
{"prompt": "What is the formula for subtracting two bytes from two different buffers in assembler?", "completion": "So a byte from the first buffer is taken and subtracted by edi. Edi is coming from this add. Edi here is the byte from the second buffer. And r11 is from r8, r8 is from di, di is from sil and sil is the carry. So we do byte1 - (byte2 + carry). That\u2019s exactly like elementary school math again. If we have a carry we add the carry basically to the second value we subtract and subtract it from the first. So yeah, this is simply sub. We can also change the type here, A - B, and the length of the buffers. Cool."}
{"prompt": "What is the algorithm used for quickly calculating large positive integer powers of a number?", "completion": "So we understood these functions. Like I mentioned at the beginning, I figured that out on my own before I knew it was RSA, and so now you are on the same level. Next I want to research how RSA or better to say modular exponentiation could be implemented. Actually from a hardware security lecture at university, which I also mentioned in a video where I introduce hardware side-channel attacks, I already introduced such an algorithm. Exponentiation by squaring. Let\u2019s checkout wikipedia. exponentiating by squaring is a general method for fast computation of large positive integer powers of a number."}
{"prompt": "What algorithm is used to perform RSA modular exponentiation?", "completion": "And here it shows how it\u2019s done. If you have x to the powe of n, you perform this recursive algortihm here. If the exponent n is even you just square your base x, ad if your exponent n is odd you also square the base but also multiply the base to it as well. And then that result is the new base, the new x and you update the power. This is defining a recursive algorithm but it can also be written as a easier iterative loop. Especially when you work with bits. Because in binary the number is even when it ends with a 0 and odd when it ends with a 1. And division by two in binary is basically just removing the last digit."}
{"prompt": "How does the pseudocode of modular exponentiation look?", "completion": "Right? So in binary you just go through each bit, on a 0 you simply square and on a 1 you perform a square and multiply. This means the pseudocode of it looks like this. For each bit of the exponent we perform the suaring, but if the bit was 1 we do an additional multiply. So if we look again at our function, we should maybe find that. Let\u2019s first define the parameters of this function. If we assume this is RSA then the first parameter here, which we called radom_buf at first is in fact the RSA modulus n."}
{"prompt": "What does the xor esi, esi instruction do in the function?", "completion": "And is the public exponent e. So we can also name the parameters of this function now. Modulo n, the length of n, e, the length of e, the empty buffer which will probably be our result and the user input data, that is our cipher message we will decrypt. Let\u2019s go into the function and also name the local variable based on the parameter names. Xor esi, esi will zero out esi, so this memset will zero out the result buffer. Then we have a memcpy and it copies the data, our user input, into a new buffer that was allocated on the stack here. You see how it subtracts from the current rsp value, so it makes space on the stack."}
{"prompt": "What is the maximum value of the counter 'i' in the for loop?", "completion": "Then we have a for loop. Init i = 0, and the loop condition depends on the length of the exponent buffer. So the length is loaded, shift left by 3, that is equivalent to a *8 and then we compare it to i. Because e is 1 0 1, thus the e length 3, this loop go from 0 to 3*8 - 24. Then inside the loop we have seen this kind of pattern before in the base32 encode algorithm. Here we load i, and divide it by 8. So that will be 0, 1 and 2, which will be used to load a byte from the e buffer. So for example this will be 0 for the first 8 iterations of the loop. And then here i is masked with 0x7, so that is the modulo 8. And then a bit is shifted by this value."}
{"prompt": "What is the mathematical relationship between squaring and multiplication when it comes to modular exponentiation?", "completion": "So this produces the same pattern like in that other video. So here we go over each bit of the public exponent. And if the bit is set we execute this part, if it\u2019s not set we skip it. Does this remind you of something? Look at the pseudo code again. Here it says we go over each bit of the exponent and then we execute the multiply if the bit is set and square everytime. That is the same loop pattern here, or is it? It\u2019s the same function. It\u2019s not different. Like one is square and one multiply. And don\u2019t call me stupid now. It took me a bit to remember but eventually I figured it out. when you square x, you can also write x * x. So there you have a multiplication."}
{"prompt": "What does the for loop inside the multiplication function do?", "completion": "So this function should be multiplication including modulus. It does take the modulo n as a parameter, and the outer function here doesn\u2019t appear to do the modulo. Let\u2019s look into that function and start again by naming the local variables based on the parameters we passed to it. We know that these two buffers hold the data that is being multiplied, so that\u2019s A and B and this unkown buffer will probably hold the result. Then we have another for loop. And the same pattern of multiplying the condition length by 8, and here the divide by 8 and shift by up to 8. So this is again checking single bit,s and the buffer it is checking is, B."}
{"prompt": "What is the value of var_38 after the memcpy operation?", "completion": "So this loops over the bits of B. If the bit is set it will call this add, and otherwise always this add here. Mmhmh\u2026 that is kind of similar to the modular exponentiation. There we looped over bits and multiplied to achieve the exponentiation. And here we loop over bits and add numbers to achieve, hopefully multiplication. So how can you multiply by adding? Well let\u2019s see what is being added? Ok we know the result, but what is var_38. It was used up here in the memcpy so it holds a copy of the number A."}
{"prompt": "How does the algorithm implement multiplication when working with binary numbers?", "completion": "So in every loop we do A + A, so we double it. And if a bit in B is set, we add this A to the result. If you don\u2019t see why this also implements multiplicatio, we have to go back to elementary math. Let\u2019s multiply two numbers. 123 * 102. So we first do 1 * 3, 2, 1 Then 0, then two times 3, is 6, eh 4, and 2. Then we have to add these up. 12546. Ok so here is an adding step involved. ANd that is actually the same that is happening here. Let\u2019s do an example with binary numbers then it becomes clear. Let me also kinda do it in reverse order, so we start with the first bit, not the front."}
{"prompt": "What is the process for determining the first bit that is set in a binary number?", "completion": "We find the first bit which is set, so we note down, 0 1 0 1, then we have a 0 we note down, and then another 0101. Now if we compare this to our loop, we would have in the first step added the current A to the result. So that\u2019s this line. Then we would double it, and in binary, doubling the number is just shifting it by 1 to the left. So we add a 0 at the end. See where this is going? Then in the next loop we look at the third bit, where we now add the doubled value. And the doubled a value in this case is now 10100."}
{"prompt": "What type of loop is used to implement the modulus in the RSA algorithm?", "completion": "I hope I made it clear. So this clearly implements multiplication. However what is the other function? It takes the intermediate result and the modulus. So I guess that one implements the modulus. Let\u2019s name again the local variables and have a look at the obvious for loop. Though this time the for loop is initialised with the length and counting down to 0. And in the loop we see that a byte from A and the modulus is loaded and compared. Quick reminder, the modulus was the buffer with the random looking data."}
{"prompt": "What algorithm is used to determine if the value is larger or equal than the modulus?", "completion": "So it goes over each byte from the front comparing the current value to the modulo. If the value byte is smaller than modulo byte then that means the whole value number is smaller and then we just leave the function. If the byte was larger, then our value is larger which means the modulo has to be applied and it does that here with a subtraction. It\u2019s subtracting the modulus from the current value. But if the bytes were the same we keep looping until we find a larger or smaller byte. So essentially this is just a check if the value is larger or equal than the modulus,"}
{"prompt": "What are the steps needed to implement RSA in assembler for arbitrary large integers?", "completion": "and if that is the case we subtract it. That means if our value was more than twice the modulus, then this wouldn\u2019t quite work, but that will never be the case. Because this is done in a loop constantly with only additions before, so immediately when the add makes the value larger, it will cut it back down. Amazing. Now we covered all functions and we finally were able to see that yeah, this implements RSA. I have never looked so closely at algorithms that implement exponentiation, modulo or multiplication with larger integers in assembler, so maybe I would have solved it if I had known that before. But as you know, it\u2019s all about learning and studying new things and so even the fact that I surrendered and looked up a write up doesn\u2019t matter. I\u2019m suuuper happy that I was able to fully understand it now. And I\u2019m sure I will recognize RSA in assembler next time. This is what CTFs are for."}
{"prompt": "What algorithm is used for RSA decryption in the video?", "completion": "So indeed, we have RSA decryption here. Our DLC unlock code, at least the first 12 bytes, is encrypted text, and then we compare the decrypted data to the buffer that was created before. The buffer that was combining the xored last 4 bytes of the unlock code with the PWNADV3 string. Now all that is missing is to use everything we learned about the key verification and create a keygen. But this video is getting pretty long so I will create a short additional video just implementing the keygen, and I will release that in a few days. So you have the chance to implement your own keygen now."}
{"prompt": "What is the blog post written by Daniel Mitre which explains how Docker works?", "completion": "In the very first video, we learned some basics, on how to use docker, as a regular user. With a bit of focus on playing CTF. In the second video we investigated how docker works by tracing the syscall used to start a container. And we found out that there is this kernel feature called \u201cnamespaces\u201d that facilitates this. On that first video I got a comment by Daniel Mitre who wrote: \u201cI made a docker-like programm and a tutorial that made me understand how docker works\u201d And I remembered seeing that blog post somehwere."}
{"prompt": "What methods can be used to explore technologies for learning purposes?", "completion": "I wasn\u2019t planning on making a third video about this, but actually that blog post motivated me. For me this blog post is an excellent example of what I always try to get across. This playful investigation of technologies for learning purposes. This is why most of my videos are not just typical step-by-step explanations, but they are more like investigations. CTFs reflect that too, they are a playful tool to learn stuff. I feel like this loose and wide approach to learning, gets you further and deeper than just being boxed into a topic by some kind of standard tutorial."}
{"prompt": "What system calls are used to implement namespaces in C/C++?", "completion": "So let\u2019s checkout some interesting and playful docker and linux namespace resources. And at the end we even look at some Linux kernel source code. So here is Daniel\u2019s blog post. \u201cUnderstanding Containerization By Recreating Docker\u201d. \u201cWe choose to implement in C/C++ to call the system calls directly\u201d. He explains what namespaces are and shows with sample code how to do it. Here for example he looks at the PID namespace like we did last video. The writeup comes with animations showing you everything."}
{"prompt": "What is the command to start a container in Bocker?", "completion": "So if you want a bit more hands on trying it yourself, checkout the blog post linked below. I also remembered a similar project called bocker. \u201cDocker implemented in around 100 lines of bash\u201d. Yes, it\u2019s as terrible as the title suggests. But again, it\u2019s not necessarily useful, but it\u2019s a fun playful experiment to learn more. And it can also be a learning resource to you, by practicing reading code and seeing how it was done. So let\u2019s check it out for a moment. \u201cBocker run\u201d is like \u201cdocker run\u201d the command to start a container."}
{"prompt": "What command is used to create a snapshot of a subvolume in the container image?", "completion": "So here we should see the unshare syscall, to create the namespaces. First we see some ip commands, so those are for setting up some networking stuff. Then there is a btrfs commands. As we know docker containers have their own separate filesystem structure. If you remember in the second video, we had different /etc/passwd inside and outside the container. So we can lookup what this command does. \u201cCreate a snapshot of the subvolume  with the name  in the  directory.\u201d So essentially it creates a copy of the prepared filesystem in the container image, so it can be used by the started container."}
{"prompt": "What is the unshare syscall used for?", "completion": "And then eventually we see an unshare. Unshare is basically a command-line wrapper for the unshare syscall. So you can easily call unshare from your shell or from a bash script like here. And from the flags we can see it creates for example a new pid namespace. And then it also chroots - so changes the root of the filesystem - into the new btrfs path. Where we copied the filesystem to. So that for the container it looks like this btrfs filesystem is the real filesystem. Pretty neat. Another interesting command could be \u201cbocker exec\u201d."}
{"prompt": "What is the command used to execute a program inside of a container?", "completion": "As we know \u201cdocker exec\u201d can be used to execute a program inside of a container. We typically execute /bin/bash to get a shell inside the container. And you can see the command here is very short. It\u2019s essentially just nsenter. And I find \u201cnsenter\u201d a much more fitting name than \u201cdocker exec\u201d. \u201cnsenter - run program with namespaces of other processes\u201d. Very self-descriptive. Docker exec is so abstract, but \u201cnamespace enter\u201d makes much more sense. So here I have the docker container running from last time with the \u201cwatch process."}
{"prompt": "What is the command used to enter a process's namespace with nsenter?", "completion": "We also remember that we could look up the actual pid of it with ps on our host, and we can check the namespaces of this process in the procfs. So let\u2019s try to enter this processes namespace but instead of using docker exec, let\u2019s use nsenter. The flag -t specifies the target process id whos namespace we want to join. And then we use the other flags to join all of the different namespaces. Mount namespace, uts namespace. IPC namespace. Network namespace and our good old pid namespace. But then it executes chroot, with the path of the container filesystem and then execute the command we want."}
{"prompt": "What is the difference between joining namespaces and chrooting in the context of Docker?", "completion": "Actually I\u2019m curious what happens if we join the namespaces and don\u2019t chroot. Because we do have a mount namespace which should isolate mounts from the host system. Let\u2019s see. Directly /bin/bash. So here we are\u2026 this looks like a typical docker shell with the docker hostname. And this for sure looks like our docker image filesystem. The mounts also look fine? We see here the docker overlay fs. So maybe this chroot is just necessary to make bocker work. But not really needed here for docker. No clue."}
{"prompt": "What command can be used to switch to the ctf user when manually joining namespaces?", "completion": "I\u2019m not that experienced with that stuff. If you know more, let me know in the comments. Anyway. There is a very interesting observation that can be made. WE ARE ROOT! This is special because when you do docker exec on this container, you are the unprivileged ctf user. This is because in the docker image we specified that the user is switched to CTF. But if we directly by hand join these namespaces we just didn\u2019t switch the user. But we could by hand execute \u201csu ctf\u201d and then we are also ctf user."}
{"prompt": "What command can be used to gain root privileges inside a container when docker exec drops down the privileges?", "completion": "I hope it\u2019s clear, this is not some kind of vulnerability. We needed to be root to execute nsenter. Thus we became root. And then we simply entered that namespace while being root. But it\u2019s a cool trick if you need root privileges inside of your container, when docker exec drops down the privileges. For example maybe you are debugging something and you needed netcat. But it was not installed in the image. And your user inside of the container isn\u2019t root, so can\u2019t apt-get install something. This can be annoying."}
{"prompt": "What is the purpose of using namespaces and cgroups in Linux kernel-isms for containers?", "completion": "Remaking the whole image and installing those tools. Instead you can use nsenter as root to enter the same namespace and then simply install for example netcat. when you now try it as the ctf user, it works. Netcat is installed now. I was looking around a bit more for interesting resources. And I stumbled over this blog post by Denis Andzakovic - \u201cPLAYING WITH NAMESPACES - WRITING DOCKER-AWARE ROOTKITS\u201d. And I really like the first two sentences. \u201cContainers aren\u2019t really a thing. They\u2019re a mishmash of Linux kernel-isms like namespaces and cgroups.\u201d And I love that, because it highlights again that containers are not some kind of isolated system like a VM can be."}
{"prompt": "What are the effects of running a Docker container in privileged mode?", "completion": "And this namespace kernel feature mish-mash we have also seen. This blog post also talks about something that shouldn\u2019t be too surprising, but it underlines again what containers are, or more, what containers are not. Docker containers can run in privileged mode, which allows you do to things like install kernel modules and gives you complete access to /dev. If you can see /dev/sda in your docker container, it\u2019s probably privileged. You can usually just mount the root file system. So even if you didn\u2019t have the root filesystem inside the container, you can simply mount it again from /dev/sda directly."}
{"prompt": "What is the Linux Kernel source code for the getpid() syscall?", "completion": "And obviously if you are root and have the capabilities and privileges to install kernel modules, you can execute code in the kernel and get around any namespace restrictions. And this blog post goes through such an example on a very technical level. It also includes some notes on how to setup a kernel debug environment. I haven\u2019t tried it out myself, but seems very interesting. Link is also below. And now at the end I thought it could be interesting to take a small peak behind the curtain and look at the kernel source code."}
{"prompt": "What is the name of the function inside the Linux kernel that is called when the getpid syscall is executed from userspace?", "completion": "Because now we have touched upon the pid namespace so much, I thought it could be interesting to look at the getpid syscall. This syscall essentially returns the process id of the current process. Which means if a process is running inside a pid namespace it should see its fake pid. And not the real host pid. So let\u2019s check it out. I\u2019m using here Elexir cross referencer to move around the kernel sources. And we are looking for the getpid syscall entry. The function inside the kernel that is called when you execute the syscall getpid from userspace."}
{"prompt": "What is the purpose of the task_struct structure in the Linux Kernel?", "completion": "So search getpid. And then I know it\u2019s here in the sys.c file. It\u2019s a bit tricky to know where to look if you have never done it before, because there is heavy usage of macros and especially that userland and kernelland boundary is special. But here it is. sys_getpid - return the thread group id of the current process So it calls task_tgid_vnr with current. Current is the task_struct of the current process that called this syscall. The task struct is a big structure containing all the information about the current process."}
{"prompt": "What parameters are stored in the task_struct of a process?", "completion": "For example the priority, exit state, the pid, the stack canary if stack protection is turned on, a reference to the parent process\u2019s task struct. References to children. And so forth. Anyway. Let\u2019s get back to the function task_tgid_vnr. So it gets passed in the tastk_struct of the current process. And then it calls __task_pid_nr_ns, with the flag PIDTYPE_TGID. This function has this comment here: The helpers to get the task's different pids as they are seen from various namespaces. The namespace wasn\u2019t specifically set here,"}
{"prompt": "What is the function in pid.c that is used to get the active namespace for the current process?", "completion": "it was NULL, but we are not looking for the pid as seen from some other namespace, we want to know from our current namespace. So this is just a prototype, the actual function is somewhere else. It\u2019s in pid.c If the ns parameter is not set, it will call this helper function to get the active namespace for this current process. Taks_active_pid_ns takes the task struct of the current process and get\u2019s the task_pid, of it. Which is simply the thread_pid of this process. It then looks up the namespace of this process,"}
{"prompt": "What is the purpose of pid_nr_ns() in Linux Kernel source code?", "completion": "which can also be found in some member variable of this pid struct. Dot NS. And returns that. We go all the way back, now we have the reference to the namespace of the current process. And then it calls pid_nr_ns, and passes in that namespace reference. Along the pid struct taken from the task struct. And here it almost does the same as the previous function that looked up the namespace reference. It also follows the pid struct into that namespace reference. But here it goes a step further because it now gets the process id number as seen in this namespace reference."}
{"prompt": "What is the process for returning a process ID from a syscall back to userspace in Linux kernels?", "completion": "Return that. And eventually we return all that from the syscall back to the userspace. So this is how essentially the pid namespace is implemented. Instead of just returning a process ID how it might have been many years ago in oldschool linux kernels, you now need to always be aware and need logic to determine which namespace you are in and then getting the correct number. I hope all of this helped you getting an even deeper understanding of linux namespaces and containers and docker. And don\u2019t be scared to always investigate and play around with technology."}
{"prompt": "How can one extract the license key from a binary?", "completion": "Let\u2019s say you work for a company and your manager is mad that there are pirated versions of your product out there. He tells you to secure their intellectual property and make the program uncrackable. Is that possible? Last video I claimed that every program is crackable. But that was old me. Maybe I learned more in the meantime, so let\u2019s try it out. First problem is, that the license key was inside the binary. The simplest technique we had was to extract all strings and we found the key. In the repository on github you can also find the source code of this simple license check."}
{"prompt": "What algorithm could be used to scramble the key in order to prevent reverse engineering?", "completion": "So our first attempt to make this secure would be to not have the key inside. We can do this by writing an algorithm that scrambles the key. You can come up with very creative ideas. And then you can give your secured binary to a friend and ask him to crack it. Or write a keygen. That can be really fun. The first idea I have is to simply sum up the ascii values of the key, and compare it to a magic value. So let\u2019s modify the original program. First we have to define a new integer value that will store our calculated sum."}
{"prompt": "What is the loop condition for the for loop used to sum up the value of each character?", "completion": "So int sum and set it to 0. Then we will add a for loop with the counter variable i, which starts at 0, with the loop condition that it continues to repeat this loop as long i is smaller than the string length of the key that we can supply via argv[1]. And in each repetition we will increment i by 1. Now we want to sum up the value of each character, so sum += argv[1][i]. As you know a computer understands only numbers. So each character, as you know from the ascii table, is a number. But the compiler knows, that argv is defined as a character sequence. So to not get any complaints we cast this value to an integer like that. Now we want to find out what the sum of our original key is. So let\u2019s add a printf with %d in the format string and the sum as parameter. Now we can compile it and execute it with the original key. So here is the sum of all character values for this key. Let\u2019s go to the code again and change the key check. We remove the string compare and replace it with a check that sum has to be that number."}
{"prompt": "What is the process for determining if a license key is correct or not in the program?", "completion": "Remove the debug printf and try it. So here it says that it\u2019s a wrong key, and here it says that it is a correct key. Now try strings, and you will not find this key anymore. How can we crack this now? Let\u2019s open it with radare2. Analyse all, seek to the main function and print the disassembly. So let\u2019s look for the Success or Fail message. Here it is. And then we can check where the branches are coming from to find the check if the license was correct or not. Ok so this compare and jump decides if we print Access Granted or if we follow it Wrong."}
{"prompt": "What python command can be used to convert between hex and decimal?", "completion": "You can also see this hex value that is used for the compare. I like to use python to convert between hex and decimal. So that\u2019s exactly what we have in our c code. So open the file again in debug mode and add a wrong license key. If we start the program it says it\u2019s wrong. great. Now let\u2019s set a breakpoint with db at this one compare and reopen the file in debug mode. Now dc to continue. Now we hit the breakpoint. with dr you can see that rip is at the jump. With dr rip= we can set rip to the address we want to execute next. And obviously we want to print the success."}
{"prompt": "What is the first step to writing a keygen for a program that has a license key validation algorithm?", "completion": "So we have cracked it again. Ok so we have found out, that if you can find this one compare where it is decided if you have a valid license or not, you can simply bypass it. But we are hackers, we love challenges. And patching a jump is just boring. So let\u2019s write a keygen. So first we have to reverse the algorithm. I will open the source code next to it, so we can compare. I Seek to main function. And enter visual mode. Ok so we already know a little bit about this program from the other video. So here we can see the compare if we have supplied a license key."}
{"prompt": "How is the address of the first variable calculated in the assembler code?", "completion": "Then comes a printf. Like in our c code. After the printf we set the sum to 0. And also the for loop is initialised with the index counter i to 0. And you can see that in the assembler code to the left. Two addresses are set to 0 with a mov. And the address is calculated with the base pointer address, that\u2019s just another fancy register. And then the first variable is at offset -0x18 from that, and the other one, well, radare replaced the number with a name and calls it local_2_4 variable. But behind this name is just another number."}
{"prompt": "What is the purpose of the strlen call in the for loop?", "completion": "Now when we look closely we can find a branch that loops back up. So those blocks here are our for loop. And at the end of the for loop is a add instruction that adds 1 to this local variable that was set 0 earlier. So that is the increment of i. And this local variable that radare identified is i. We can rename the variable with \u201cafvn locale_2_4 i. In this block we have a strlen call. And afterwards we compare two registers and it either continues with this main block or leaves. So that is the for loop condition here."}
{"prompt": "What is the purpose of adding 8 to the loaded value in this assembler block?", "completion": "Now comes a little bit of an ugly part if you have never seen this before. But if you practice that it\u2019s easy to see. Don\u2019t worry if you get lost for the next minute. This just requires some practice. So first it loads a value from an address. Which radare assigned a name to. This name came up before near the strlen. And if you compare these two assembler blocks they are similar. You can see that it adds 8 to the loaded value. So usually that means the value that was loaded is an address. Because we have 64bit, we often divide memory in 8 byte chunks."}
{"prompt": "How is argv[1] accessed in memory?", "completion": "Imagine an array in memory, it might use multiple 8 byte chunks. The first chunk, which is the first value in the array is simply there where the address points to. This means that if you want to get the second value in the array you have to add 8 to the address. Now it points to the 2nd array entry. So this is argv[1]. Remember we start counting at 0. So argv[0] would be the first array entry. argv is basically a variable that contains an address which points to an array in memory. And this address is loaded into rax. And then we add 8 to it,"}
{"prompt": "What is the goal of the video?", "completion": "This video is the third and final video where we will now finish the exploit for stack level 0 from protostar, which we have compiled on a modern system. In the first part we got a general overview of what has changed when the code is compiled with a more modern compiler and looked more closely at the stack cookie. In the second part we then ignored the cookie for now and identified a few more exploitation mitigations and developed a bypass for them. So only one thing is left. Finally defeating the stack cookie."}
{"prompt": "What techniques can be used to reduce the amount of time required to bruteforce a stack cookie?", "completion": "Like we talked about in the first video, we can bruteforce a stack cookie if the binary is a 32 bit binary. There are around 16 million possible values for a stack cookie. That\u2019s not that much, but 16 million executions is maybe a number where you start want to optimize a bit. While I\u2019m not an expert in super fast computing, I decided I didn\u2019t want to write a potentially slow python script, but write some C code. But like I said I\u2019m not an expert in what is the fastest and I actually suspect that maybe the bottleneck here would not be a slow script, but the kernel which has to do a lot of stuff to execute the program over and over again."}
{"prompt": "How does libc provide wrapper functions for the exec syscall?", "completion": "So maybe it\u2019s unnecessary to write C code and maybe my C code is very bad too. But I just wanted to mention it that it\u2019s not always easy to decide what is the best approach. Now that we said that, let\u2019s try to approach this step by step. First. How do you execute a program in C. Well, there is a system call for it called exec. But usually we never call syscalles ourselves directly, but use wrapper functions provided by something like libc. So libc offers a few different versions of exec, but they are ultimately all using the same exec syscall underneath."}
{"prompt": "What is the execution model of Linux?", "completion": "It says here in the man page: \u201cThe exec() family of functions replaces the current process image with a new process image.\u201d I think when you never thought about how a program is executed before, this sounds really weird. \u201cWhy do you replaced the current process and not just execute it? That\u2019s so weird\u201d. Well that\u2019s just how it works, that\u2019s the execution model of Linux. And so in our case we don\u2019t just want to exec and thus replace our program, but we want to execute the stack0 binary as a new process over and over again."}
{"prompt": "What is the difference between the glibc fork() wrapper and the traditional system call for fork()?", "completion": "To spawn a new process we have to fork the process before we exec. fork() creates a new process by duplicating the calling process. The new process is referred to as the child process. The calling process is referred to as the parent process. And maybe also interesting is this down here: Difference between C library function and the actual kernel. Since version 2.3.3, rather than invoking the kernel's fork() system call, the glibc fork() wrapper [...] invokes clone(2) with flags that provide the same effect as the traditional system call."}
{"prompt": "How can we create a separate process to execute a program multiple times?", "completion": "So what you do to execute the process over and over is to: First fork our current process. now we have a child. An actual new separate process. And you have to imagine this code is now dooplicated, we have two processes running the same code, just one runs as the child and one runs as the parent. And you can check the return value of fork which process you are. In the parent process you get the pid of the child. In the child it\u2019s just 0. And then in the child process we can call exec, to replace the current process with stack 0."}
{"prompt": "What does pipefd[0] refer to in pipe()?", "completion": "Now in our case we want to communicate with the child. Meaning we want to write the exploit input to it, and read the output of it, to determine if we were successful. Usually you would do this by creating pipes. pipe() creates a pipe, a unidirectional data channel that can be used for interprocess communication. The array pipefd is used to return two file descriptors referring to the ends of the pipe. pipefd[0] refers to the read end of the pipe. pipefd[1] refers to the write end of the pipe. Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe."}
{"prompt": "What is the purpose of using a pipe for communication between a parent and child process?", "completion": "Basically the same pipe you can use on the commandline. You pipe stdout from one program, cat, into the stdin of another program, grep. That\u2019s why we call this character a \u201cpipe\u201d. So for basic stdin and stdout communication you would create two pipes. And then when you fork, because you clone the process, the child and the parent have access to the same pipe. Now obviously depending on if you are the parent or the child, you use one or the other side of it. And in case of the child, we are actually going the replace the default stdin and stdout now with those pipes."}
{"prompt": "What is the purpose of the dup2 system call?", "completion": "By calling dup2. The dup2() system call performs the same task as dup(), And The dup() system call creates a copy of the file descriptor. After a successful return, the old and new file descriptors may be used interchangeably. They refer to the same open file description and thus share everything. But dup2, instead of using the lowest-numbered unused file descriptor as dup(), it uses the descriptor number specified in newfd, the second paramenter. If the descriptor newfd was previously open, it is silently closed before being reused."}
{"prompt": "How can we establish communication between a parent process and a child process in a C program?", "completion": "So dup2 closes the current stdin and stdout of the child, and plugs in the new pipe we created. And when we exec, the stack0, and replace the current process with the new one, stuff like open fildescriptors stay in tact. So the new process will use the pipes we just connected for reading input and writing output. And then in the parent we can simply read and write to the other end of the pipe and thus communicate with the child process stack0. A nice thing to do is to close the ends of the pipes you are not using in either process."}
{"prompt": "What is the issue with buffering output when trying to execute a buffer overflow exploit?", "completion": "So for example we don\u2019t need the reading side of the stdin pipe because we want to write, send data, to the child process. Ok. Once we have written our buffer overflow input, we can wait for the child process to finish and read the output to see if we were successful. Now here is a first big issue. Buffering. Libc will buffer output you write. So the output of the child process is buffered in the process. And you can imagine, that if we do a buffer overflow, screw with the stack and get a segfault this buffer is lost."}
{"prompt": "How does the libc buffer output data in a regular pipe?", "completion": "The program is just dying horribly. But maybe you think that doesn\u2019t make much sense, because we showed in part 2, that our exploit theoretically works and we see the output on the shell. We saw the modified variable message. SO how how does it make sense that the shell would see the output but I\u2019m telling you now, we won\u2019t see it with the code we just have written? Well. There is a difference to how libc buffers output depending on what kind of pipe it\u2019s connected to. And in our case we have just used regular pipes and libc will buffer the output data until the process calls flush(), or maybe until it\u2019s filled nicely, maybe after 1024 bytes or so."}
{"prompt": "How does the C library recognize when the output should be flushed?", "completion": "I don\u2019t know. But we have neither, the output is super short and the child process never calls flush(). So what\u2019s different on the shell. Well programs executed by the shell are not connected via regular pipes, but are connected to a pseudo terminal. Pty. And when libc sees. That the output is written to a pty, pseudo terminal, then it will flush() the buffer upon a newline. Because newlines are like the ultimative indication that you want to print a new line (laugh) on the terminal output. I think it\u2019s like speed thing, you don\u2019t want to flush if not necessary, but on the terminal you want to see outputs after a newline."}
{"prompt": "What is the purpose of the forkpty() function?", "completion": "This means, we could also execute the stack0 program in the context of a pty, so that we fool libc into flushing on every newline. And there is a convinient libc function that does that for us. Called forkpty() The forkpty() function combines openpty (open pseudo terminal), fork(2) (which we know), and login_tty() to create a new process operating in a pseudoterminal. The file descriptor of the master side of the pseudoterminal is returned in amaster. So that\u2019s really cool. We fork a child process and already get the filedescriptor so we can communicate with the child process."}
{"prompt": "How can we configure the terminal so that characters typed into the shell are not echoed back?", "completion": "Then I disable a few options of the terminal, for exampel I don\u2019t want to echo the input again. For example if you watch my embedded hardware security CTF videos you notice that usually whenever I type something on the shell to the board, I don\u2019t see the characters I type, that\u2019s because I didn\u2019t configure the terminal to echo back the characters. While it would have been nice there, I don\u2019t need it here. And there are a few other options that could screw with what we want to do. And then we also don\u2019t have to fiddle with pipes."}
{"prompt": "How is the buffer overflow string generated in the brute_cookie.c program?", "completion": "So the child is just exec now. In the parent we define our bufferoverflow input, that\u2019s basically the one we developed last video, and then also add some random() function to get three random bytes for the cookie. And place those into the buffer overflow string. A simple ugly loop to avoid newlines, because that would indicate the end of our input, and we dont\u2019 want that. Then we write the bufferoverflow string to the master filedesriptor of our pseudo terminal and stack0 will read it and will get exploited."}
{"prompt": "What is the purpose of the loop in the program?", "completion": "Then I create a short loop to check the status of the child, but I don\u2019t want to block and wait for it, because the child could horribly die or not die because of the buffer overflow, so I just check the status a few times in a loop and if the child is dead, we continue, If we waited already a few times we decide to kill the child process, And otherwise we sleep a bit. Usually it shouldn\u2019t loop much, as the child program is very short, but it\u2019s a safety-net. BTW. program ids, pids, are prone to race conditions in linux."}
{"prompt": "How can a signal handler be used to detect when a child process has died in Linux?", "completion": "You see we don\u2019t have some kind of handle direclty pointing to the child process, we only have the number. And numbers can be reused. So theoretically our child could have died, another process like a webserver could have been executed and assigned our old pid, and then we kill it here. And there is no better way, linux is just really ugly some times. Anyway. One other thing I want to add now is a signal handler, which will be notified if the child dies or so. We could just read the output after the wait,"}
{"prompt": "What technique does LiveOverflow use to determine when the child process has finished executing?", "completion": "but we don\u2019t know why and how the child might die and so forth, and I also found it to be a third slower if I do that. So used the signal handler instead. This handler function is called to notify us if anything happens to the child. So when it receives a SIGCHLD. And in the handler function we then read from the terminal the output of stack0. First we read the \u201cTry again?\u201d message. And then potentially read the stack smashing detected error, OR maybe the successful modified variable message. Or maybe nothing."}
{"prompt": "What library must be linked to use the forkpty function?", "completion": "Then I do an ugly check of the second output to see the success message. If that\u2019s the case we print it and we are done. So now it\u2019s basically ready. I add some more debug output to see whats going on, add an argument to supply a seed. and then we can compile it. Because we want to use forkpty, we have to also link the utils library. Here you can see how many executions we get per second per process. This machine has only one CPU, so this will take a while, let\u2019s come back later. Let\u2019s see. Mhhm\u2026 nothing happened yet."}
{"prompt": "What is Apport and what does it do?", "completion": "Maybe let\u2019s rent a bigger server for a few hours with more CPU cores. Mmh maybe this one. Now to run it I do some ghetto parallelisation. But oh what. Only 9 executions per second, what kind of crap is that? If you look at the processes you can see something called apport. Apport is a system which: intercepts crashes right when they happen the first time, gathers potentially useful information about the crash and the OS environment, Ah, so because we constantly crash a process this thing is gatehring information and slowing everything down."}
{"prompt": "What is the purpose of using netcat in CTFs, web security series, and last video?", "completion": "Last episode we did our first networking challenge were we first reverse engineered how the server is listening on a port and then we connected to it with netcat. This video we want to go one layer deeper and have a look at the TCP protocol. This will be the first time that we have a look at what it means to send a packet over the network. We have used netcat now multiple times. We used it in CTFs and last video to connect to challenges. And in the web security series we used it to talk to a real webserver."}
{"prompt": "What is the loopback interface and how is it used?", "completion": "So you know that netcat is a very handy tool to send tcp packets over the network. So I suggest we download wireshark to analyse packets we send with netcat. When we open wireshark we select the network interface we want to capture packets. In this case our traffic doesn\u2019t leave the machine thus we can select the loopback interface. Loopback is more like a virtual network interface, it\u2019s not a real physical network card stuck in your PC. Through this interface will go all our traffic that we send around on our local machine."}
{"prompt": "How can we list all processes that are listening on a port?", "completion": "And as you may know, the own machine is always identified as localhost or IP 127.0.0.1. Now let\u2019s use two terminal windows and in one window we start netcat in listening mode and we select a port. In the other window we can then execute netstat, like in the last video, and we can list all processes that are currently listening on a port. And here is our netcat process. You know what, let\u2019s execute our netcat server with strace, so we can see all the syscalls that netcat uses to establish a server."}
{"prompt": "What does the netcat server do after it has created a socket and set some options?", "completion": "So it will first create a socket, set some options, then bind the port 1234, is now listening on that port and is now waiting for a connection to be established with accept. It\u2019s basically exactly what we reverse engineered in last video. We can also quickly check wireshark, and we don\u2019t see any packet being sent over the network yet. Ok. Now let\u2019s use the second window to connect to this netcat server. You can see on the server that accept now returned, because a client conencted to the port. And now, we see three entries in wireshark."}
{"prompt": "What is the purpose of the Ethernet layer in a packet?", "completion": "We see a SYN, SYNACK and ACK. packet. Let\u2019s quickly have a look at those. As you can see in the lowest window, a packet is just some binary data. And that binary data has meaning which wireshark can parse and display us nicely. So above it we can see the decoded packet and it\u2019s divided by layers. Because this packet didn\u2019t leave our machine the ethernet layer is just all zeroes. Usually you would find here your mac address and the mac address from your switch or router. So that layer is only used between two direct connections."}
{"prompt": "What type of packet is indicated by the Hex 800 value in the Ethernet layer?", "completion": "Besides the Mac addresses, this layer also contains a TYPE. And the type is set to hex 800, which indicates that the next layer is an IPv4 layer. Wireshark sees that and knows now how to decode the next bytes. When you click on the next layer, wireshark will highlight which bytes of the packet belong to that layer. And you can then see how it is decided that it is an IP v4, version 4 layer, because the first 4 bits of this byte is 4. You can also see here the source and destination IP, which in this case is the same."}
{"prompt": "What is the protocol identifier for TCP?", "completion": "So while the ethernet layer with mac addresses was about direct connections, the IP layer can contain an address very far away on the internet, and the switches will make sure that this packet is forwarded until you reach that machine. This layer also contains information about the layer afterwards, and that is the protocol identifier. In this case it\u2019s 6, which means the content of this IP layer is a TCP header. IP and TCP are usually always together, it\u2019s very common, thus you have probably heard of TCP/IP before, which just says that there is a TCP layer over an IP layer."}
{"prompt": "What is the purpose of the source port in a TCP packet?", "completion": "So the ethernet layer helped to get from machine to machine, the IP layer helped to identify which machine is the real destination of this, the TCP layer will now help identify which program or process on this machine should handle this packet. And that is identified with the port number. You can see here that the destination port is set to 1234. You can also see here a source port, which is required so you can receive answers from this server. So when the server responds with a packet, it will use this port, so that the client machine knows which process gets this response."}
{"prompt": "What is the purpose of a Protocol?", "completion": "And that\u2019s usually a random high port number. Anyhow, now we understand how a full TCP packet is constructed, now let\u2019s have a look at the protocol. A Protocol just refers to a set of rules on how to talk to another computer. If a client and server agree on how to send data back and forth, it will work. So What we will see now is just what somebody came up with in order to create a data connection. Just remember, at the moment we have not sent any data with netcat, so far we only established a connection."}
{"prompt": "What is the purpose of the SYN packet sent by the client?", "completion": "Ok, so we see that 3 packets were exchanged. First the client sent a so called SYN packet, a synchronize packet. And then the server responded with an SYN,ACK packet. Meaning I acknowledge that I received it. This is important because maybe the initial packet didn\u2019t arrive. So when you as a client get a response, you know that the server got your message. This means the client knows now that the connection works. But from the perspective of the server the server doesn\u2019t know yet if the sending the packet was successful."}
{"prompt": "What is the sequence of packets exchanged when establishing a TCP connection?", "completion": "Maybe the server can only receive but not send packets. Thus the client will respond to the SYN,ACK packet with an ACK packet, acknowledging that it got the servers answer and now both parties are sure, YES I successfully exchanged packets with this other machine, now we can talk data. And this is all done transparently. You didn\u2019t have to construct these packets yourself. You simply opened a socket and waited for a connection. Ok. Now let\u2019s send some data from the client to the server. You can see that immediately the server was able to read the line you sent."}
{"prompt": "What is the purpose of the ack packet sent from the server to the client?", "completion": "How does that look in wireshark. We see two new packets. A PSH packet from the client to the server, and an ack packet back. The packet from the client also now has an additional DATA layer. And that data layer just contains the raw bytes we sent. And the server responds with an ack, to inform the client that the packet was succesfully received. Now let\u2019s send a response from the server. You see, the server simply wrote the text to the filedescriptor 4, which is the filedescriptor that accept returned."}
{"prompt": "How does TCP handle sending a large amount of data at once?", "completion": "As you can see, an application simply writes to that paseudo file, that socket, and the magic below sent that over the network. Now let\u2019s have a look what it did, It also just sent a PSH packet and the client acknwoledged the arrival with an ack packet back. One more more thing. Obviously the size of a packet is limited. So what happens when you send a lot of data, let\u2019s say you upload a huge file somewhere, how will that work? Let\u2019s just copy a bunch of characters and send them. Ahhh, see, now there are more than just two packets."}
{"prompt": "What is the purpose of the FIN packet?", "completion": "You don\u2019t see it when you develop an application, but somwhere in the kernel, network card or driver, I don\u2019t really know, it got split up. You can also see that the second packet was not sent along with the first one, the second packet was only sent out once the server acknowledges the first one. Let\u2019s see what happens when you kill the client. Even though we just ctrl+c netcat, we can see in wireshark, that FIN packet was sent out, do indicate we are done with this channel. You can free up your resources and you don\u2019t have to expect more packets from this connection."}
{"prompt": "What is the name of the process that occurs when a client and server end the connection?", "completion": "And like during setup, there are 3 packets exchanged. The server acknowledges the fin by the client, now the client knows, that the server knows that it is done. but the server doesn\u2019t know yet if the client knows that it knows it\u2019s done, so it also responds with an ack. Now both now that it\u2019s over. Now this whole exchange is referred to as a TCP stream. We established a connection, then exchanged data back and forth, and then quit the connection. And wireshark allows us to investigate this stream, for example with Follow TCP stream."}
{"prompt": "How can a tree be used to craft a boat in Minecraft?", "completion": "I couldn\u2019t remember who I was or where I was\u00a0 going. All I had was a feeling that drew me into this direction and so I kept walking and swimming.\u00a0 Survival was my top priority. But once a while I got flashes of memory of what had happened to me. I remembered falling out of the sky. Probably lost consciousness from the impact. But I had no time to question it. It was night, monsters everywhere and I had no shelter. Eventually I reached a shore and using my bare hands I used the tree to craft a boat."}
{"prompt": "What type of machine was carrying the protagonist at the beginning of the video?", "completion": "It was peaceful on the sea, and so I had more time to think about what had happened. Another memory. There were people around me. They were floating. And they watched me\u00a0 while I was carried by a weird machine. Who were they? I kept sailing through the night until the next morning. Finally\u00a0 it was safe to gather some food, cook my first meal and upgrade my tools. Eventually\u00a0 I continued my journey and I was wondering about the bottle I carried with me. This is the\u00a0 only thing I had in my posession after the fall."}
{"prompt": "What flying machine was used to kidnap the protagonist at the concert?", "completion": "It started raining. And the lush oak trees\u00a0 turned into dark forest. It was scary, but I had no choice but to follow\u00a0 the urge and keep on going. But then. A blue light in the distance. The\u00a0 feeling inside of me got stronger. I climbed up the mountain getting closer and closer. It looks\u00a0 like a lantern. And a chest. What could it be. Eventually I reached it. I opened the\u00a0 chest. There was Club Mate. Everything rushed back to me! I REMEMBERED! During a concert I fell asleep and they kidnapped me with a flying machine. They\u00a0 didn\u2019t want me anymore so they sent me off into the distance. I kept flying and flying\u00a0 until. Until\u2026 Until the world turned upside down. The world seemed to suddenly change\u00a0 and I found myself falling out of the sky."}
{"prompt": "What server plugin was developed to destroy other players' builds on the new 1.19.2 server?", "completion": "But now I\u2019m here. I remember my powers. I remember\u00a0 what I\u2019m capable of. So I will rebuild my kingdom right here. This is my new place. You wonder where\u00a0 I am? Here are my coordinates. Come and find me.  You know what. All those players who kicked me\u00a0 out and made me come all the way here, they are going to suffer. This is now a 1.19.2 server.\u00a0 All your hacks will become useless. And the old server will become HELL. For that I created\u00a0 a basic server plugin that when players move, will fling TNT into random directions. This way\u00a0 I can destroy ALL OF THEIR beautiful builds."}
{"prompt": "What materials did the narrator gather on their long walk to the new base?", "completion": "Look at it. How confused they are about what\u00a0 is happening?! All the time they invested into building this place. And I will take\u00a0 it away within minutes. Enjoy hell\u2026 But I\u2019m here now. And I gotta say. I love\u00a0 this place, I think I can build something really cool on these thin floating pillars. And\u00a0 deep down some more secrets are waiting for us. But before we try to go there, let\u2019s setup camp. On the long walk here I gathered a few materials, so we can already place down a crafting table, get\u00a0 a bed and use an oven to cook some of the meat."}
{"prompt": "What techniques are used to bypass the anti-flight check of the server?", "completion": "Now where do we go from here? The area\u00a0 looks amazing. I love the change of scenery from the previous area. Lots of\u00a0 mountains. And a village on the horizon. So let\u2019s start with the basic game\u00a0 loop. Cutting down trees to gather wood, setup chests, and maybe mine some coal and\u00a0 iron. This is always the most relaxing and enjoyable part in minecraft for me.\u00a0 The start of a new world. So join me.  As you can see I\u2019m using my fly-hack to get\u00a0 around. But as you know, I\u2019m not using a hacked client I downloaded somewhere. Actually we we\u00a0 figured out how to bypass the anti-flight check of the server in episode 4 of this series. But\u00a0 since then I actually changed the way how I do it. Back then I fully coded the movement.\u00a0 I look at the key presses and then modify the velocity and movement of the player."}
{"prompt": "How can a player enable flying in Minecraft on the client side?", "completion": "But you know how the fly hack looks now? It\u2019s so much simpler. It\u2019s just one line.\u00a0 client.player.getAbilities().allowFlying = true; So during this whole project at some\u00a0 point I realized that setting this, it\u2019s basically giving the player the\u00a0 ability to fly like in creative mode. Which makes it so much easier for me not to\u00a0 handle each key press and it feels a lot more familiar. But of course this only has effect\u00a0 on the client side. The game client thinks we are in creative fly mode basically. Which\u00a0 means we still need a bypass for the anti-fly kick. Quick refresher, the minecraft server\u00a0 counts for how long you have been floating,"}
{"prompt": "How can a player reset their threshold counter to avoid being kicked in a Minecraft server?", "completion": "kicking you when a threshold is reached. But\u00a0 when sending a brief movement packet downwards, as if you were falling, it resets this counter. I used to do it by setting the player position lower directly, but now I\u2019m actually just\u00a0 sending a spoofed movement packet with this lowered position. To send this packet I\u00a0 created this PacketHelper class that uses a ClientConnectionInvoker mixin to access the\u00a0 private sendImmediatly method. This can be used to just send any minecraft packet to the server.\u00a0 immediatly. Seeing this it still feels like magic to me. I mean not the flying, I mean being able\u00a0 to access a private method of the connection class. But we know already how it works because\u00a0 I introduced how modding works in episode 3 and there I also explained how mixins work. So this\u00a0 ClientConenctionInvoker mixin exposes the private method now. Anyway. As you can see, I use what\u00a0 I learned over time and keep improving my hacks."}
{"prompt": "What difficulties did the speaker encounter while building the iron farm?", "completion": "After I gathered a lot of stuff like diamonds\u00a0 and even netherite I wanted to really start working on the base. And the first thing\u00a0 I thought about building was an iron farm. Look what I found! I was looking for open\u00a0 mineshafts to find name tags in chests. I need that for the zombie in the iron farm\u00a0 and came across a woodland mansion. Now that we are on 1.19 I had to kidnap an allay. Well, in the back you can also see that slowly the iron farm is coming together. Unfortunately\u00a0 I had some failures along the way. like the first time I got a zombie the villagers got\u00a0 scared and jumped to their death. Oops."}
{"prompt": "How does the XRay mod work to identify important blocks?", "completion": "But eventually I got a working farm. Iron golems\u00a0 spawn at the top in the water get flushed down and fall into a lava kill room. Awesome. But\u00a0 I know you don\u2019t care about normal minecraft. So let\u2019s talk about another hack of mine. If you carefully watched the episodes you might remember that I created an XRay mod, but then\u00a0 never really used it afterwards. The reason for that was, that it was incompatible with Optifine.\u00a0 Optifine is a mod to have fancy shaders and better performance. So it messes with the way how blocks\u00a0 are drawn. And my Xray mod was basically a Block mixin that hooks the shouldDrawSide method. And\u00a0 returns true or false if the current block is an important block."}
{"prompt": "How does the game know which blocks to draw or not when using Sodium + Iris?", "completion": "But that simple solution didn\u2019t work with optifine. Now with the change to 1.19.2, I also switched from optifine over to sodium + iris, another combo\u00a0 for performance and shaders. But it still broke my xray mod. But this time I was motivated to try\u00a0 to make my Xray work. But how would I do that? Well! Xray how I want to do it, I basically just\u00a0 want to tell the game which blocks to draw or not. Somehow the game has to know that Air blocks\u00a0 are not drawn, glass blocks are translucent, and stone blocks are solid. So I started\u00a0 looking into the iris and sodium source-code to see how they mess with blocks. Maybe I could\u00a0 figure out why my simple mixin doesn\u2019t work."}
{"prompt": "How does the BlockOcclusionCache method work to improve the rendering of blocks in the game?", "completion": "And I started searching for shouldDrawSide,\u00a0 because it\u2019s the only related method I knew. And in the sodium code I stumbled over the\u00a0 BlockRender class, which does sound very related. And it calls this shouldDrawSide method.\u00a0 Following it it leads to a BlockOcclusionCache. So occlusion means that something is covering\u00a0 something else. Meaning the block behind other blocks don\u2019t need to be rendered. And cache\u00a0 means it\u2019s storing that occlusion information. So maybe if I could figure out how to make this\u00a0 shouldDrawSide return true or false depending on the block type, maybe I could get xray to work."}
{"prompt": "How can a mixin be used to control the return results of the isSideInvisible function?", "completion": "So I started going over all the code paths that return true and false. Is there maybe a way\u00a0 how I could control these return results. For example to return a false, all I had to do is\u00a0 to make isSideInvisible return true. And this is called on the selfState, which is a BlockState\u00a0 object. And we can create a mixin for BlockState. So here it is. Here I have a new mixin\u00a0 for BlockState and it hooks into the isSideInvisible function and it returns false\u00a0 for all the important blocks. And return true for all the unimportant blocks. So\u00a0 their sides should be invisible."}
{"prompt": "What methods did the speaker overwrite to create a working Xray mod?", "completion": "And that\u2019s basically the process I continued for a\u00a0 little bit, trying to control as much as I could, for example down here the isSolid method. I also\u00a0 overwrote this one. And I did this for a few other interesting methods I discovered this way.\u00a0 Including luminance and ambient occlusion which controls how bright or dark blocks are drawn. In the end, I got a working Xray mod. Compatible with sodium and iris. I was so proud of myself\u00a0 and of course I started using it right away. So that\u2019s what you saw in the footage\u00a0 when I hunted for diamonds and netherite."}
{"prompt": "What farming mod is used in the video to automate the process of planting crops?", "completion": "We are making good progress here, but of course\u00a0 we still have a long way ahead of us. And in the background you can see another project of\u00a0 mine. I needed wheat for breeding animals, as well as carrots and potatoes to trade with\u00a0 villagers for emeralds. So for that I cleared out an area for farming! And let me show you\u00a0 how it works. here, all the crops are grown. Aaaaand. Check this out. Farming goes brrrrrrr. This is another hack *cough* I mean utility mod I added. It\u2019s super simple. On each tick I\u00a0 scan blocks around me and try to plant a crop."}
{"prompt": "What blocks does the player interact with to replant crops?", "completion": "This actually means that we check\u00a0 if the block is farmland and then we try to use a seed we either\u00a0 hold in our main or off-hand. And in here it checks if we are holding wheat,\u00a0 beetroot, potato, carrots and so forth, and then calls interactBlock trying to use the seed on\u00a0 the farmland. Super simple but effective. I can just run through here and crops get automatically\u00a0 replanted, as long as I hold a seed in my hand. You can see I have been busy, but I have done\u00a0 much more and I don\u2019t want to split up the video,"}
{"prompt": "What techniques did the speaker use to create an XP farm from a mob spawner?", "completion": "so let me actually summarize all the stuff I made. When I was using my xray mod to look for diamonds I actually came across a mob spawner and in order\u00a0 to prepare for enchanted tools with mending and so forth I wanted a small XP farm. So I transformed\u00a0 this mob spawner into a basic mob farm. I then also later upgraded it trying\u00a0 to get more XP by adding a regular mob spawner area above it. I dug trenches with\u00a0 trapdoors trying to flush the mobs down. I also went around and tried to place\u00a0 torches in some of the caves nearby,"}
{"prompt": "How is it possible to increase the spawn rate of iron golems in a dark place?", "completion": "trying to increase the spawn rate in that dark\u00a0 place. It helped but it wasn\u2019t super effective. Now back to the main base, I also wanted to add a\u00a0 second iron farm to increase the iron production rate, and I built it right below the previous\u00a0 farm. Which I later realized that it was kinda dumb, because I watched a video about irongolem\u00a0 spawning rules and the villagers down there might see the iron golem falling from the top and\u00a0 then not spawn their own. Anyway, it exists now. I then also added a kelp farm because\u00a0 I wanted to produce kelp blocks for furnaces as well as maybe get a bit more\u00a0 XP this way. At first it was very small,"}
{"prompt": "What utility mod can be used to search for mending books in Minecraft?", "completion": "but then I expanded it a little bit. Yeah. I\u00a0 always tried to kinda integrate it into the rocks. Similarly I also wanted to add a sugarcane\u00a0 farm which I added into another pillar, but this time a bit further up and floating. On top of the pillars I also started to add\u00a0 a new island where I wanted to place two villagers to get some first enchanted book\u00a0 trades. Mainly I wanted mending. Searching for mending books is pretty annoying, so I\u00a0 actually wrote another utility mod for that. Let me first show it in action."}
{"prompt": "How can a librarian villager's trades be checked automatically in Minecraft?", "completion": "When I destroy the lectern it will automatically place a lectern again, then\u00a0 check the trades and print them below. If I\u2019m not satisfied I simply destroy the lectern again,\u00a0 and it automatically places and checks it again. So it\u2019s still a little bit of a manual\u00a0 process, but it\u2019s much faster than always checking the trade menu yourself. The code for that is incredibly ugly, but let me show you. I have a simple\u00a0 state machine, and we first start by scanning for librarians nearby. So if we find a librarian,\u00a0 meaning a lectern must have been placed and turned that villager into a librarian, then we call\u00a0 interactEntity onto that villager and go into the WAITING_FOR_TRADEOFFERS state. So this basically\u00a0 clicks on the librarian to open the menu."}
{"prompt": "How can you extract a book that a villager offers for trading and display it as text in the ClientConnection Mixin?", "completion": "But now we have to go into\u00a0 the ClientConnection Mixin, because here we are waiting for a tradeoffer\u00a0 packet. If we receive a trade offer packet and we are in the WAITING_FOR_TRADEOFFERS state, we\u00a0 can then print the enchanted book the villager offers. Additionally we also cancel the trade\u00a0 offer packet, as well as the open screen packet, because We only want to extract the book the\u00a0 villager offers for trading. And display it as text. we don\u2019t want the client to\u00a0 show us the actual trade menu window."}
{"prompt": "What is the process for obtaining a book from a librarian villager in Minecraft?", "completion": "Then next game tick comes and we are back in\u00a0 the main mod code. So when we got an offer, now we actually wait for the villager to\u00a0 lose the profession again. So if we are not satisfied with the book we got,\u00a0 we can now break the lectern again, which takes the profession away, triggers\u00a0 this code, which immediately places down a new lectern. Which restarts the chain. If the villager turns into a librarian again, we interact with them again to get\u00a0 the trade offers, check the book, and wait for the lectern to be destroyed again."}
{"prompt": "How can you adapt an AFK XP farm design to simplify it for basic needs?", "completion": "Very ugly, but effective. Basically just keep breaking the lectern until the text\u00a0 shows mending. Or whatever you need. Unfortunately I realized that the mob spawner\u00a0 XP farm is just too slow to repair myself and to enchant items on the enchantment table. So I\u00a0 wanted to build a XP farm in the nether. This is the first time I\u2019m doing this, so I looked\u00a0 again for tutorials and watched Rays Works video on an AFK XP farm. basically I adapted\u00a0 this design. You will see mine looks similar but I tried to understand how it works\u00a0 and simplify it for my basic needs. For example I don\u2019t need the piglin bartering."}
{"prompt": "What kind of technique did the speaker use to build the magma block platform?", "completion": "To build this I had to collect a lot of magma blocks, but that turned out to be quite easy. But\u00a0 it was really nice to have a fly hack to build the farm because obviously standing on the magma\u00a0 blocks to build the platform doesn\u2019t work well. It took a few iterations and experiments, but\u00a0 eventually it seemed to work well. Here it is. So I have this zombified piglin with a nametag nearby\u00a0 which is kinda the \u201cmemory\u201d for the aggression towards me. Then I hit some other piglin, they\u00a0 will tell eachother that I\u2019m evil now and I can go to the middle. Now they keep spawning,\u00a0 walking towards me, falling down a trap where then minecarts kill the piglins due to entity cramming.\u00a0 And because they were trying to attack me,"}
{"prompt": "What technique does the speaker use to protect their position from being discovered?", "completion": "I get XP for it. This is a super powerful farm\u00a0 and I don\u2019t know why I never built this before. Maybe an enderman farm in the end is even\u00a0 better, but this one here is an AFK farm AND I\u2019m like SOOOO far away from the next stronghold.\u00a0 So I couldn\u2019t even go to the end if I wanted to. I guess that\u2019s all I have. This is how far I\u00a0 have gotten. And luckily nobody has disturbed me here yet. Probably thanks to my advanced\u00a0 position protection system. Aka texture rotation. In the last episode I actually hid a little teaser\u00a0 for this episode in the description giving people the challenge to find me. And I followed some of\u00a0 their progress and coordinated cracking attempts."}
{"prompt": "What effect does turning on/off the texture rotation feature have on a Minecraft world?", "completion": "But nobody seemed to notice in my hacked mod\u00a0 menu, \u201ctexture rotation\u201d. This should tell them they cannot just bruteforce my location. Look, let me quickly turn texture rotation on and off\u2026 do you get excited now? Leaking the\u00a0 real rotation? No way! You wont get it this easy. Let me actually create a quick superflat test\u00a0 world to show it in action. I also placed some grass so you can see that effect as well. Now when\u00a0 I change the texture rotation state in the menu, you can see that several textures change."}
{"prompt": "What mixin was created to change the coordinates from texture rotations?", "completion": "In episode 9 of this series I learned about cracking coordinates from texture rotations and\u00a0 I showed you the responsible code. This hashCode function returns a seed given a x,y, z location,\u00a0 which is then used to decide how to rotate the specific texture. So I just created a mixin that\u00a0 changes these values. You will never find me here. Besides the new base location I also changed\u00a0 the server IP again I mentioned at the beginning that on the day of the switch,\u00a0 I installed a plugin on the old server that keeps spawning TNT. It was kinda fun\u00a0 to watch this initial destruction. But I haven\u2019t looked at it in a few weeks,\u00a0 so lets see how the server looks now."}
{"prompt": "What version of Minecraft is the player moving to for their new base?", "completion": "Wow\u2026 it\u2019s almost not recognizable anymore. This\u00a0 is the spawn area. And flying up to my base, it\u2019s crazy. It really looks insane. Over there\u00a0 the roller coaster. The sorter. Dammmn. But it\u2019s time to shut off this server now, because this\u00a0 costs me 70Eur a month and running two servers in parallel is just a bit too expensive.\u00a0 Byebye original 1.18 world. Welcome 1.19. So far I have been undisturbed in my base. But\u00a0 you should really try to find it, I\u2019m really far, believe me. But it will be worth it. because there\u00a0 are some secrets hiding deep below this base."}
{"prompt": "What language was Cheesburger's server scanner written in?", "completion": "Now one last thing. Like last episode I also wanted to\u00a0 showcase some community projects. Now that there is a new server IP, players had to start looking\u00a0 for it again and I received many messages with various scanning projects. Here some clips from\u00a0 Cheesburger implementing a server scanner in Rust. Or here, the stats from a scanner by Nocturne.\u00a0 Ever wondered how many active minecraft servers and active players there are? How many servers\u00a0 are online or offline mode. Or historical data, how did the amount of active servers\u00a0 and players change over time."}
{"prompt": "What software is AliFurkan using to host their own internal git repositories?", "completion": "For example this spike here is early\u00a0 August, which should be around the 1.19.2 release. Which apparently made people\u00a0 want to start new minecraft servers. Besides scanning, I also received several mod\u00a0 showcases, people sharing their own hacking mods. Here are some clips from AliFurkan. For\u00a0 me, the most interesting part is always to see what kind of system they are using. Like,\u00a0 what is this resolution and task bar? And also you can see they host their own internal\u00a0 git repositories, here their worldguard bypass project. It\u2019s just really fun to see how much\u00a0 effort everybody puts into their own hacks."}
{"prompt": "What strategies have been used to prevent players from entering the server?", "completion": "Just FYI, I received several showcase submissions.\u00a0 And unfortunately I cannot show everybody at the same time, sometimes I also forget, I\u2019m sorry,\u00a0 or sometimes you might showcase something I don\u2019t want to share just yet. There are quite some\u00a0 spoilers in some of the submitted videos. I\u2019m sorry about that, believe me I don\u2019t leave\u00a0 you out intentionally. It\u2019s mostly random. I love everybody who is motivated enough\u00a0 to submit something. Thank you so much. Anyway\u2026 Let\u2019s get to another full showcase.\u00a0 actually there was kind of a \u201cwar\u201d on the server between bots and players. Philip, the\u00a0 owner of NoobBot actually tried to implement an artificial whitelist. The idea is to\u00a0 fill up all slots of the server with bots,"}
{"prompt": "What is the Qualys advisory that explains the heap overflow vulnerability in sudoedit?", "completion": "We have rediscovered the sudoedit vulnerability in sudo. Our testcase actually triggers a malloc abort, and this abort is just a symptom of a memory corruption that must have happened in some other part of the program. Last video we already setup an address sanitizer build, that helped us identify the location where the actual heap overflow happens. And now we can take this information to look deeper into WHY this actually happened. The explanation of this is already included in the official Qualys advisory for the bug,"}
{"prompt": "How can we ensure that debug information is included when compiling a C program?", "completion": "but it\u2019s sometimes hard to understand it from just a writeup. And also we want to pretend we figured this out ourselves. So let\u2019s do the root cause analysis. To analyse the crash we found, it\u2019s useful to have a debug version that makes the process more comfortable. -g is the compiler flag for adding more debug information, so we can ensure to set that by setting the CFLAGS. We can also add -O0, to disable any optimization. Now let\u2019s launch Gdb with ./src/sudo binary! Btw. in this case I have gef installed as a gdb extension for nicer debugging.."}
{"prompt": "What is the line of code in the sudoers.c file which causes the heap overflow?", "completion": "As we know from last video, where we used address sanitizer, we learned that the overflow happened in this loop in sudoers.c. Specifically this memory moving around, writing bytes from from, into to. And now that we have a debug build, we can actually set a breakpoint based on file and code line. Break sudoers.c at line 868. Then we can run it and we pipe in the minimal crash file as input. Breakpoint hit, right here at the from, to copy. For many of you, this might look like really scary pointer magic."}
{"prompt": "What is the role of the RBP and RSP registers in a stackframe?", "completion": "We not only have pointers, but we also mess with them using ++. I know this looks intimidating, but let\u2019s look at this in assembly. I know assembly looks even more intimidating, but actually it\u2019s much more simple. As long as you can read the basic assembly syntax. So this single line of C, compiled to multiple lines of assembly. So take my hand, and let me walk you through. And you will see, you could have done that yourself. RBP is the basepointer. Together with the stackpointer rsp they define the start and end of a stackframe."}
{"prompt": "What color does Gef use to represent stack addresses?", "completion": "And local variables are stored on the stack, in that stack frame area. So here we are loading the value of a local variable into rax. Gef is awesome because it colorcodes the addresses. This purply color means it\u2019s a stack address. So just from the color we know all these values are stack addresses. And because it\u2019s an address gef also tries to check what is stored in that address. And here we apparently have the malicious argument 00000 with the backslash. And that\u2019s basically how pointers work."}
{"prompt": "How is the pointer incremented in C code?", "completion": "Pointers are addresses. And in rax we have an address. We have a pointer. And this arrow here is just the perfect symbol, because this address POINTS at this value. So rax is the address location, the pointer, where the argument string is stored. And now see what happens next. We move rax into rcx, so now we have a copy of the address in rcx, and then we increment rcx by one. Now look at the C code, we have a from pointer, which is incremented. Which means the address is incremented, so we make the address point to the next byte."}
{"prompt": "What is the difference between using the ++ operator before or after a variable in C?", "completion": "So RAX is the original address, and RCX is the incremented address. And now we write that new incremented value into the same local variable we read earlier from. So we updated the variable. And this is what ++ in C does, right? It increments a variable. So we incremented the FROM variable. And do you know the difference between ++ coming before or after the variable? When used within an expression, then the ++ before or after decides if you take the value and THEN increment, or if you increment first and THEN take the incremented value."}
{"prompt": "What does the assembly instruction \"BYTE POINTER rax\" mean?", "completion": "++ coming after means we first take the value and THEN increment. But didn\u2019t we just increment the variable before using it? Well technically yes, but we incremented rcx. And rax is still the value before we incremented it. And NOW we use rax. So the code just already updated the local variable, but we still use now the non-incremented value. Anyway. Rax still points into our string and we perform a move into dl. But here we use BYTE POINTER rax. So this assembly in brackets means, we take rax as an address, and we want to move the VALUE stored there."}
{"prompt": "How does the debugger evaluate the left side of the equal sign in the copy loop?", "completion": "So here we are coipying the first byte of this data. So this ascii 0. In hex 0x30. So in dl, which is the lowest byte in rdx, you can see now the loaded value 0x30, an ascii 0. So now we evaluated the right part of the equal sign. We loaded a byte from the from pointer, and incremented from. And now let\u2019s see what the left side is doing. We are starting by loading another local variable, also in rax again. And you can see, it\u2019s also an address. But this time it\u2019s color code is green. This means it\u2019s an address located on the heap!"}
{"prompt": "How does the pointer arithmetic line copy a byte onto the heap?", "completion": "So it\u2019s a different address, pointing somewhere else, but like before, we increment it, because the to pointer also has ++. So we move rax into rcx, we increment rcx, and we write it back into the local variable on the stack. But again, RAX still contains the address before we incremented it. And see how we use it now. Now we move the byte we loaded earlier, into the location pointed to by rax. So we are copying this byte onto the heap. And that\u2019s it! Now you understood this magic pointer line. We simply have two addresses, we derefernce the right one to load a byte, and write it into the location of the to pointer."}
{"prompt": "What is the purpose of the while loop in the code discussed in the video?", "completion": "And we increment both. Executing this in a loop copies bytes! And now let\u2019s check the code surrounding this. So we are coming back up now at the start of the while loop, and here is basically the same code. We dereference from. So we load a byte from this variable. And that\u2019s exactly what happens here in the code. We load into rax the first local variable. And then we compare if at that address location is a 0byte. Strings are null-0byte terminated in C, so this is simply a loop that checks if we reached that nullbyte."}
{"prompt": "What is the relationship between pointers in C and arrays in C?", "completion": "And that seems safe, right? We have a loop, copying each byte, and we copy until we reached the end of the string. All fine. Except we have these two lines. Vut Here you can also see something cool, here we write from[0]. And look at the line in assembly. IT LOOKS EXACTLY THE SAME like the dereference of the from pointer. It also just loads the address into rax, and then it loads a byte from that address. It loads a byte like these lines did. In fact *from and from[0] are exactly the same. This is because arrays in C are also just pointers."}
{"prompt": "What type of loop is used to copy the source string into memory?", "completion": "So if you load a value from a pointer by dereferencing it, or loading the first value with the array notation, that\u2019s the same. And so here we check if the current byte is a backslash, and if that is the case, we increment from again. And that is the source of the trouble. Let\u2019s see that in action. I have set a breakpoint right here at the copying of bytes and we can ceep continuing in gdb and observe rax. Rax contains the address of the from pointer. So the source string of the copy loop. And when just running loop after loop, we keep consuming the source string, copy it into to on the heap, and increment the address further."}
{"prompt": "What happens when the from pointer is incremented in the line causing the heap overflow?", "completion": "And now we reach the end. We are at the backslash now. And see what happens now. We reach the compare of 0x5c, so we check if the byte is a backslash. And that;s the case! So now we enter that if case, where we now increment from. So we load the variable. Add 1 to it. And write it back. Which means, the from pointer is now pointing at the null-byte. You can see here how gef does not display a string anymore, because a nullbyte is not a string, it\u2019s the end of a string. Gef displays it just as a hex number now."}
{"prompt": "What is the size of the user_args allocated in the program?", "completion": "But here is the nullbyte. And now we enter the copy line again, where we copy this nullbyte to the heap, and we increment from. Suddenly pointing into another string!!! Here we also have ascii zeroes. And we keep copying that now, because this while loop check missed the nullbyte. This if-case skipped the nullbyte. So we copy more bytes than intended. But how many bytes were intended? The to address on the heap where we copy to, is coming from user_args. And if we scroll up a bit we can find the place where we allocate the size of the user_args."}
{"prompt": "What is the bug that causes the heap overflow?", "completion": "And this size is a sum of all string lengths of av. And av goes over the argv arguments. So we loop over each element of the arguments, we check the string length and add up the sizes, including the string terminating nullbyte. +1. So we allocate memory that is large enough to hold all strings. BUT this loop down here looks for backslashes, and skips the value after the backslash. Which in theory can only make the strings shorter, because we skip characters we don\u2019t copy. But the bug is that we can skip the final terminating null-byte, because the backslash is at the end, and thus we skip over it and start copying more data."}
{"prompt": "What is the purpose of the unescape logic in the code?", "completion": "More than the string length had calculated earlier. But why is it doing that? Why is this even looking for a backslash? And skipping it. Causing this whole drama? Well the comment in the code here says. When running a command via a shell, the sudo front-end escapes potential meta chars. We unescape non-spaces for sudoers matching and logging purposes. So this is an unescape logic. If you have for example an escaped double quote, then this copy detects the backslash, skips it, and just copies the double quote."}
{"prompt": "What is the name of Fabian's YouTube channel?", "completion": "Very much, and thank you for being Up this early in the morning the title of my talk is Play CTF because I believe it's a really great way to learn more about Hacking and just improve your skills and what you know about it Yeah so Okay, so my name is Fabian, I'm Still a student at the Technical University of Berlin still haven't finished my master's degree, and I also work as a freelancer doing Penetration testing most of the time things like code, audit, and I'm doing a lot of application security web app security And it's kind of important to keep in mind because this is my bias on to the topic this is where I'm from in the industry because as you know there are a wide variety of different kind of jobs and skill sets required I also, have a youtube channel called Life overflow where I create hacking tutorials and You know also CTF write-ups, and so this talk is kind of a little bit related to what I do with the YouTube channel It's not a big channel But it's possible that you have maybe come across one of these videos these were kind of like my viral videos They were linked in some of the new sites that were reporting about the Nintendo switch Vulnerability and the dirty calico root exploit. Just in case you've seen those then you can connect the dots So before we start. I just quickly want to recap what CTFs are because I assume that most of you know what it is But I just don't want to lose anybody already So what is capture the Flex capture the Flex are?"}
{"prompt": "What are some common security practices for Linux servers?", "completion": "When I started using Linux and I tried to host my first very own website, I remember thinking about how to protect it. And when you search around, you see a lot of terminology and \u201cbest practices\u201d getting thrown around, like \u201cuse firewalls\u201d, \u201cdon\u2019t use ssh with password\u201d, \u201cdo not use the root user, it\u2019s dangerous\u201d, \u201cchange the default ports\u201d, and so forth. The problem I have is that these supposedly \u201cbest practices\u201d are usually unquestioned. They are presented as \u201chere is the gospel, now follow my disciples\u201d, without teaching one of the most important skills in hacking."}
{"prompt": "What are some typical recommendations for securing a Linux server?", "completion": "Try not to assume things, always look deeper. When people do not explain the reasoning behind something, especially in IT security, it\u2019s a MAJOR RED FLAG. Probably they don\u2019t understand it themselves and you should be sceptical. I guess people just copy from each other, because one person, one time, said it\u2019s \u201cbest practice\u201d. But do these recommendations really make sense (for security)? Or is it snakeoil? For preparation of this video I looked at those typical recommendations by searching for stuff like \u201ctips to secure a linux server\u201d."}
{"prompt": "How can I securely access a Linux server remotely?", "completion": "I then tried to see what they have in common and here is the result. If you want to directly support these videos, checkout liveoverflow.com/support SSH is the defacto standard to access a linux server remotely. For example ssh root@yourserverIP, and you get the shell. A very typical recommendation is to disable password logins for SSH and instead use SSH keys. You do that by updating the sshd_config and disable PasswordAuthentication. Supposedly because passwords are insecure. I mean, the comment in the actual ssh config here even states \u201cdisable clear text passwords\u201d."}
{"prompt": "What are the potential weaknesses of SSH keys as a method for authentication?", "completion": "So is that true? Let\u2019s have a look into the SSH Protocol Architecture, to learn about how your local machine talks to the remote server. And here is a section about \u201cPassword Authentication\u201d where it clearly states the \u201cweakness\u201d: \u201cIf the server has been compromised, [...]\u201d at which point you can already stop, because here we talk about already the case where the server is already hacked. But still, there seem some caveats, so are ssh keys the better option? Well, they come with their own \u201cissues\u201d."}
{"prompt": "What is the difference between public key authentication and tunneling in SSH?", "completion": "\u201cThe use of public key authentication assumes that the client host has not been compromised. It also assumes that the private key of the server host has not been compromised.\u201d You see, both are not \u201cperfect\u201d. But we are talking here very small nuances. And this has nothing to do with a strong protection from hackers coming for your server. But you might still wonder about the clear text password, that sounds really scary. Well, I kinda skipped over a word, and that is \u201ctunnel\u201d. Before ssh sends this kind of information,"}
{"prompt": "What is the purpose of an SSH server's private key?", "completion": "it will establish an encrypted channel with the server. And inside of that the \u201ccleartext\u201d password is sent. So it\u2019s not actually cleartext. That\u2019s why the ssh-server has its own private-key, and that\u2019s why you need to verify the fingerprint before you connect to a new server. Your machine remembers the server\u2019s public key in a known-hosts file, and if for example a network attacker man in the middles you, or you mistype your IP or hostname, the ssh client will warn you that something is not right with the connection."}
{"prompt": "How does TLS/SSL differ from SSH in terms of authentication?", "completion": "Maybe this is easier to think about: Https, so TLS or SSL is a very different protocol from ssh, but the result is very similar. When you login to YouTube, [ALARM] LiveOverflow from the future here, I thought I make an example with YouTube and Instagram. Turns out they do weird stuff when authenticating. So I will continue show some twitter login. you also send a \u201ccleartext password\u201d in the HTTP request, but it\u2019s INSIDE the encrypted TLS tunnel. Thanks to HTTPS. So if you have a network attacker that man in the middles your connection, the browser will warn you about it and refuse to send your password."}
{"prompt": "What measures can be taken to improve the security of SSH password authentication?", "completion": "Like the SSH client would. And that already tells you, that SSH password authentication is not much different from using a password to log into gmail or Instagram. And would you consider that to be dangerous too? But yes, it\u2019s still passwords, so typical password recommendations apply, as they apply to your instagram account too. You don\u2019t want an attacker to guess your password by bruteforcing, or because you re-use the same password everywhere. This means, use a password manager to create unique, random and long passwords."}
{"prompt": "What are some recommended methods for hardening a server that is using SSH?", "completion": "But then you are totally secure. Now I still don\u2019t use passwords for SSH, but only because I am lazy. SSH keys are much more convenient. It just means I DON\u2019T have to use a password manager to copy or type passwords all the time. So in the end \u201cuse SSH keys\u201d is a useful recommendation, but not really for security. it doesn\u2019t make your server magically more secure. It\u2019s a convenience thing. And yes, if convenience even decreases the likelihood of mistakes, is probably the preferred method. Another SSH related server hardening recommendation is to disable direct root login."}
{"prompt": "What is an example of a security measure that is used to reduce the privileges of a user?", "completion": "And instead create an unprivileged user without root permissions. Now generally it always makes sense to use the least amount of privileges you need, to do your job. This is a very important security aspect for software. For example, the webserver nginx does not run as root, and instead creates a new unprivileged user, and when it\u2019s started as root, it drops its own privilege. If now an attacker exploits the website that was running on nginx, the attacker would have those privileges, and not be root."}
{"prompt": "What are the potential security risks of running programs on a laptop as root?", "completion": "So it seems like this is a reasonable recommendation to do the same for when YOU are working on the server, but on second thought, it doesn\u2019t make much sense. Two reasons. First of all, the purpose of a server is different than your local workstation laptop. On a laptop you do a lot of stuff that doesn\u2019t require root permissions. Browsing the internet, writing text documents, programming a python application, playing games, whatever. It\u2019s unnecessary to run around as root, and if you accidentally execute a malicious program that you downloaded from a filesharing site, then that malware doesn\u2019t run as root."}
{"prompt": "What is the recommended security measure to prevent an unprivileged user from executing commands as root?", "completion": "But a server you use very differently. Typically you use a server to setup a service, like a website, and then you let that run. You don\u2019t really work on that server. And to install those services and webservers, you need to be root. So in the end you mostly work as root on the server anyway. And that leads us to the second reason. A typical recommendation that goes hand in hand with the disabling of the root login, is to add the unprivileged user to the sudo group. And now the user CAN execute commands as root,"}
{"prompt": "What are some ways to secure a Linux server?", "completion": "by adding sudo before a command. I guess to some people these two cases feel different. \u201cThis is not the root user, must be more secure\u201d, but from a pure security capabilities perspective, they are the same. By giving a user the sudo group, you essentially elevate that user to a root user. Indirectly, but security doesn\u2019t care about that it\u2019s indirect. It\u2019s just one additional step that has almost no security implications. Now some of you may say, \u201cbut sudo requires a password, and if an attacker is the user,"}
{"prompt": "What is one way that malicious actors can gain root access on a Linux machine?", "completion": "they don\u2019t know it, so can\u2019t become root\u201d. But there are tons of ways around that. The quickest and easiest I came up with is, simply change the bashrc to add an entry for sudo. Where you execute a malicious command, indicated by the program id, everytime the user wants to use sudo. The next time the real user logs in, and wants to do something with sudo, they won\u2019t realize, that they just executed a malicious command as root. Again, here just to visualize, the user executed id without them wanting to."}
{"prompt": "What is the benefit of using sudo versus giving everyone the root password?", "completion": "Now sudo can still help with a bit of auditing what happens on a system, through logging. It\u2019s also easier to just give or remove the sudo group to users. especially in a team environment it makes more sense than just to give everybody the root password. But as you can see, those are mostly convenience features again. But it doesn\u2019t magically protect your server against hackers. The next tip I want to address, is the changing of default ports. This one is a typical security by obscurity recommendation."}
{"prompt": "What is the snakeoil example used in the context of security vulnerability and risk?", "completion": "It\u2019s one of the best snakeoil examples. Snake oil meaning: \"a substance with no real medicinal value sold as a remedy for all diseases\". The explanations for why we want to do that can range from anywhere like \u201ceverything can be hacked so we must hide ssh\u201d, to \u201cpeople will try to bruteforce it if they know there is ssh on port 22\u201d. The term \u201ceverything can be hacked\u201d deserves it\u2019s own video to explore, my TLDR is \u201csure\u201d I guess we can say that, but when people use it, especially in this context, most of the time it\u2019s used for fear mongering to insinuate an urgency to this recommendation."}
{"prompt": "What are the security measures an organization can take to protect against an adversary with the capability to hack into SSH?", "completion": "I\u2019m telling you, an adversary who has the capabilities to just hack into SSH is so powerful, that we losers are not a target. But most importantly, a port change wouldn\u2019t stop that kind of attacker. If such a crazy 0day is made public, or is used by some government agency, a port change won't help you. A port change might only have an effect against script kiddies and automated scanners that look for ssh servers with weak passwords. So try to think about this yourself. If the \u201cattack\u201d is to try out weak passwords or brutforce passwords, the actual security \u201cfix\u201d is to have either a strong password as mentioned before, or only use ssh keys."}
{"prompt": "What is the effect of disabling IPv6 and only allowing access via IPv4 in SSH settings?", "completion": "That\u2019s the REAL defense against this. And that\u2019s why moving the port is snakeoil - it doesn\u2019t address the root medical issue. It just makes you believe you did something for security because somebody said so - unfortunately the placebo effect was not yet proven for computers. But if you are looking for a master's thesis topic in computer science, that might be a cool area to research /s. Another weird ssh setting that some of these guides recommend is to disable ipv6, and only allow access via IPv4?"}
{"prompt": "What are some of the potential security risks of using IPv6 compared to IPv4?", "completion": "The reasoning for that is also very funny. They write: \u201cIPv6 is better than IPv4, but you probably aren\u2019t getting much out of it \u2013 because neither is anyone else. Hackers get something from it though \u2013 because they use it to send malicious traffic.\u201d What does that even mean?! What \u201cmalicious traffic\u201d happens in ipv6 that doesn\u2019t happen in IPv4. Look. Yes, there are a few caveats that immediately come to mind. For example IPv4 addresses are \u201cmore rare\u201d so banning or blocking IPv4 is a lot more \u201cexpensive\u201d for the attacker\u201d."}
{"prompt": "How can an attacker bypass a misconfigured firewall?", "completion": "And there are so many more IPv6 addresses, that banning an IPv6 address is, I guess a bit less useful. It\u2019s \u201ccheaper\u201d to move to the next address. But I think that is a bad economical take. The costs are not that significant. I think a more interesting issue could happen, if you use some kind of firewall, but the firewall only covers IPv4, and over IPv6 the attacker can reach anything, but then the root problem is your misconfigured firewall. Not the fact that you support ipv6. (Not to mention that server firewall recommendations are weird anyway, I get to that in a second)."}
{"prompt": "What are the security benefits of using IPv4 NAT for a home network?", "completion": "IPv6 also has some concern for actual bigger networks. IPv4 nat is basically the best firewall we can have at home. You can open weird ports in your local network without the fear of somebody from the internet directly talking to it. And that might be different with IPv6. But all of that doesn\u2019t really apply to your single server you rent somewhere in a datacenter. Those are only concerns when you build up your own network, and if you searched for this video, you are proably not ready to setup your own professional network?"}
{"prompt": "What is a potential effective way to prevent automated login attempts to a SSH server?", "completion": "Anyway. When I saw this IPv6 recommendation I posted it as a joke on twitter, and I got an extremely funny response. \u201c[...] For now, making sshd listen on IPv6 only stops automated login attempts more effectively than fail2ban.\u201d. This is basically the better \u201cchange default port recommendation\u201d. Script kiddies don\u2019t try as much IPv6 yet, so if your ssh server listens ONLY on IPv6 and you disable IPv4, that would be even more effective than making ssh listen on another port - I think that\u2019s an awesome counter example."}
{"prompt": "What are the potential benefits and drawbacks of using iptables or UWF to block ports?", "completion": "Jokes aside. Lastly, attack surface reduction is in general a really good paradigm. So maybe disabling IPv6 on the whole network interface, not just just the ssh settings, maybe we could argue about that. But the way these articles present this recommendation to disable IPv6, is also snakeoil. It doesn\u2019t hurt, but I don\u2019t see any reasonable positive effect for security. If anything you might get a false-sense of security. Now let\u2019s talk about firewalls. Many resources recommend you to use iptables or UWF (the Uncomplicated Firewall), to block ports."}
{"prompt": "What are the basic firewall settings recommended to ensure security?", "completion": "I think \u201cfirewall\u201d is a really unfortunate term. Because it sounds really cool, and really powerful, as if every hacker trying to walk through a firewall dies in burning agony. Firewalls come in different complexities ans features. But the basic firewall settings these resources recommend, are just about blocking all ports, and open the ones you need. \u201cBlock everything, except SSH and the webserver on port 80 and 443.\u201d This is not different from simply just having ssh listening on port 22 and have the webserver listening on port 80 and 443."}
{"prompt": "What ports are open for external interaction with the service listening?", "completion": "You can confirm that with ss or netstat, to see what is listening publicly. To visualize thios. By listening on a port, you allow the outside to interact with the service listening. Here is a piece of paper with the three listening ports. Send me a HTTP request to this window, and I will give you the response. Send me a bruteforce ssh attempt, and I tell you your password was wrong. Now let\u2019s add the firewall as recommended. Here it is. Everything is blocking except these opened windows, these ports."}
{"prompt": "What are some potential applications of a firewall to secure a database server?", "completion": "And look at that. They match. You achieved nothing. Security wise you did nothing. Again another snakeoil recommendation where you feel cool you did something with fire, but it was kinda useless. Of course firewalls in general are not useless, but you need to have the correct use case for them. For example let\u2019s say you have a frontend server and a database server. And for whatever reason you didn\u2019t put them into an isolated private network, like a VPN, or you use a default password for it. Now you can use a firewall on the database server, to only allow connections from the frontend server IP."}
{"prompt": "What commands can be used to enable unattended auto-updates on a typical Ubuntu server?", "completion": "As you can see in my list, there are more things we could talk about. But the video is getting a bit long, and so I thought to do one more. Auto updates. On a typical ubuntu server, you can update packages, or the operating system itself, with apt-get upgrade or even apt-get dist-upgrade. And some resources recommend you enable unattended auto-updates. Which is again a lot more complex than these resources suggest. I think everybody agrees that generally, auto-updates are extremely vital for general public security."}
{"prompt": "What are the best practices for securing a Linux server?", "completion": "Forcing auto-updates on Windows, Android and iPhones, is great. It\u2019s a bit annoying, but keeping those systems up-to-date is very important. But again, the problem is that an actively used workstation, with tons of different software, and users that don\u2019t understand the tech at all, is very different from the use-case of a server where you run a service. If you want to \u201cseriously\u201d host something on a server, then enabling unattended updates is a great way to disrupt and break your server occasionally."}
{"prompt": "What are some common measures to secure a Linux server?", "completion": "Not every update is security relevant for you and that\u2019s the difficult job of a system administrator, to think about what, how and when to patch systems. And for a larger deployment, this can be a full-time position. If you host something for customers, you don\u2019t want to accidentally kill your server. This sounds a bit like security is in conflict with business, and we always say \u201csecurity must always win\u201d, but reality is not that simple. Let\u2019s be honest, if you just run a server with nginx and ssh."}
{"prompt": "What are two reasons why it is important to stay informed of new security vulnerabilities, even if your operating system is set up to auto-update?", "completion": "The likelihood that a serious critical vulnerability is found in them is a bit low. Especially one that works against a basic default installation. I really wouldn\u2019t worry much. But still you could say, well at least I don\u2019t have to care about it if it\u2019s auto updating, so it\u2019s still a win. BUT! Two reasons you should keep in mind. First, when news hits of a new serious vulnerability, operating system packages that would be automatically updated, might not have the patch yet. So if it\u2019s really serious, you might need to go into your server and do whatever is recommended to mitigate the issue anyway."}
{"prompt": "What steps can a sysadmin take to protect a webapp from vulnerabilities?", "completion": "This is a manual job. And it\u2019s a balancing act. In a business where customer data could be affected, you must have a responsable sysadmin who can deal with the situation. While on a private small server, you can say \u201cwhatever\u201d. There is nothing important on it, or I just turn it off for a few days. So if a vulnerability in nginx or ssh is not the big threat, then what is? And that\u2019s the second thought. Whatever webapp you are running on your server is much more attackable. Maybe it\u2019s your own code you wrote that has vulnerabilities."}
{"prompt": "How can I protect my web apps from vulnerabilities that are not covered by auto updates?", "completion": "Or code of another webapp you installed from GitHub. These softwares are not covered by your auto updates. And most likely need to be updated by hand too. To be fair, there are webapps like wordpress, that are so widespread and have had such a huge struggle with vulnerabilities (and many inexperienced people run it), that they have implemented their own auto-update features, which does in general improve security. But in my opinion, the benefits of unattended system auto-updates, given that it\u2019s not the silver bullet that solves all your update headaches, is too little, compared to the accidental disruption of your service and manual work you have to do by running a server anyway."}
{"prompt": "What are some of the opinions that the speaker has shared in the video about IT security?", "completion": "And that leads me to the conclusion. Yes, any of the opinions I shared are debatable. You might not agree and you have better reasonings for doing what you do. And that is fine, and even awesome. Because that means you have actually thought about these things. The whole point of the video is to showcase and critically question \u201cbest practices\u201d many people just throw around, without any comments on reasoning, limitations and caveats. IT security is complicated, and not as simple as some people believe it is."}
{"prompt": "What is the best advice an IT security professional can give when running your own server?", "completion": "And I think what you see here in this small example, is exactly what also happens in the larger IT security industry, with vendors selling you security appliances that supposedly protect you from those evil hackers. Don\u2019t get blinded, don\u2019t let fear mongering get to you, and always try to dig deeper. If you then have good reasons for why you follow one of these recommendations, that\u2019s totally fine. And one last comment. The best advice I can give as an IT security professional on running your own server."}
{"prompt": "What are some alternatives to hosting a service on a personal server?", "completion": "Just don\u2019t. Of course if you are still learning, and you never tried to run your own server, please do! But if you are seriously considering to run a service in production. Maybe don\u2019t host it yourself. That is a decision you have. Being a system administrator is it\u2019s own job and if that is not fun to you, don\u2019t put that responsibility on yourself. That\u2019s what you pay other people for and that\u2019s why I run my blog on ghost, or why, if I would program a webapp, I would pay the higher prices for stuff like AppEngine or Heroku."}
{"prompt": "What is the name of the CTF challenge that is presented in the video?", "completion": "We are going to learn about a weakness of RSA, that allows us to recover the private key of an admin for a ctf challenge. This will be fun. It was also the next easy challenge after the ones I solved already. If you know what you have to do, you can quickly google and find solution scripts online, but I wanted to take the opportunity to look a layer deeper into RSA. Key Server, crypto 200 points. We have received a portable assymetric key storage for evaluation purposes. It generates and stores administrators\u2019 public keys."}
{"prompt": "What software can be used to flash the arduino board?", "completion": "Customers can use this repository to find the public key of the admin they want to contact, and administrators can use this repository to update their key information. If this fancy keychain passes the test, we are going to give them away like candy, secure candy. And we have a challenge binary that we can download and flash onto the arduino board with avrdude. Then we can use screen to connect to the board via serial. Ok, so we get a menu with two options. First, if you are a customer you can list all public keys."}
{"prompt": "What hash algorithm does PKCS #1 version 1.5 use for its signature?", "completion": "Second, if you are an admin you can update your keys. Just sign the plaintext \u201cadmin\u201d and more options will be provided. The parameters to be used for the signature are SHA1 and PKCS #1 version 1.5 And it\u2019s pretty clear that that is our goal. We want to be able to sign the text \u201cadmin\u201d with one of the admin\u2019s private keys. You can also look up PKCS #1 version 1.5 and quickly see that the asymmetric encryption is RSA. And otherwise it basically just tells you what the description said, that for signature you first reduce the message with a hash algorithm,"}
{"prompt": "What type of encryption does the speaker use to sign a message?", "completion": "by default that would be md5 but in our case we use SHA1, and then we encrypt that hash with the private key. Wait that doesn\u2019t make sense, does it? encrypting with the private key? Do you not usually encrypted with the public key and decrypt with the private key? Well, we want to sign a message. If you have my public key, and I want to send you a signed message, so that you can verify that I really sent it, then I can simply encrypt my message with my private key, and then you decrypt the message with the public key."}
{"prompt": "What is the process for proving that a user is an admin using RSA?", "completion": "Only me with the correct private key would be able to encrypt it so that you can decrypt it with the matching public key. And that\u2019s how signing works with RSA. So if we had the private key, we could take the sha1 hash of the \u201cadmin\u201d message. And then we encrypt it with the private key. And we take the result, and give it to the board. This way we proved that we are admin. Because only an admin with the private key could sign the message. But how can we get the private key of an admin. All we can do is list the public keys."}
{"prompt": "What is the difference between RSA and AES encryption?", "completion": "At this point you can google for common ways how you can break RSA, like mistakes that can happen, because crypto is hard. but let\u2019s see if we can figure it out ourselves by looking at the math. At least partially. So here is the wikipedia article of RSA, and it tells you exactly how RSA works. But first of all I like to mention something. When people ask, what\u2019s the difference between RSA and AES. The textbook response is, one is asymmetric and the other symmetric encryption. But that\u2019s pretty shallow."}
{"prompt": "How does RSA encryption work to secure larger messages?", "completion": "Maybe you have heard about how we usually do assymetric encryption of larger messages. We don\u2019t just use RSA. We generate a secure random key, and use it to encrypt our message with AES. And then we encrypt this random key with the RSA public key of our recipient, and send the RSA encrypted key, and the AES encrypted message to our contact. Our contact then decrypts the key with their RSA private key, and then use AES with that key to decrypt the message. We often say, we do that because it\u2019s faster."}
{"prompt": "What is the key difference between AES and RSA?", "completion": "But again, that\u2019s kind of a shallow reason. what\u2019s really the difference. AES is a block cipher. It basically is a glorified byte mixer. First it operates block based, it divides the message, the data, into blocks, divides that block further and basically handles bytes. It then substitutes those bytes, it mixes them. Of course doing a lot and way more complicated stuff than that. But key takeaway here is, that it operates on bytes. That\u2019s completely different on how RSA works. RSA is pretty much basic math which operates on numbers, it doesn\u2019t really care for bits and bytes."}
{"prompt": "What are the operations involved in RSA encryption?", "completion": "Sure AES is also math. But what I mean is, for plain RSA we never really talk about bytes or bits. We just do calculations with huuuge numbers and that is not trivial with computers. The bigger the message you want to encrypt, the bigger your number gets. Of course there are algorithms how you implement those calcluations on a computer to make it efficient, but still. It\u2019s a big difference. So let\u2019s look at how this RSA math looks like. We won\u2019t get into why it works, but we look at all the operations that are done to do RSA."}
{"prompt": "What mathematical operation is used to encrypt and decrypt messages using RSA?", "completion": "So encryption works by taking the message to the power of the key. And then modulo n. I think that\u2019s like high school level math, isn\u2019t it. It\u2019s super simple. I mean it\u2019s kinda magical that it works, totally goes over my head why. But I don\u2019t care. It\u2019s math. Somebody understands why it works, I just know that it does work. And Decryption works very similar, you take the cipher text, the encrypted text, and take that to the power of the other key. Of course the magic lies in the properties and dependency of the two keys, the private and public key, that it works."}
{"prompt": "How is modulo used in RSA encryption?", "completion": "But whatever. So that also means, if you take the cleartext message to the power of the first key, which results to the encrypted text. And then to the power of the second key, you get back the original message again. Well modulo n. Just so I don\u2019t loose anybody here. Modulo is this clock calculation. Ehm. What is 3 o\u2019clock + 12 hours? 15 oclock? Well, yeah, in a sane country like germany it is. But it\u2019s just 3 o clock again, if you take that whole thing modulo 12. Modulo 12 means to restrict the numbers to only what\u2019s available in that range and you wrap around."}
{"prompt": "What is the first step in generating RSA keys?", "completion": "So even though that exponentiation of the message will be a frkn huge number, if you take it modulo this n, it will be the smaller message again. So what exactly is the public key. Let\u2019s have a look at the key generation. If you want to generate RSA keys, you first need to get two prime numbers. P and q. And they have to be random. Then you calculate p times q and that becomes what we call the modulus n. And n is part of the public key, because the person encrypting something needs to know the n."}
{"prompt": "What is the mathematical relationship between p, q, n and e used to calculate the private key d?", "completion": "So when n is public, and it\u2019s just a product of two numbers, why can\u2019t you just figure out those two random primes? That seems simple? Well it turns out, that it is unbelievably hard. We don\u2019t know how you can figure out the prime factorization of a number efficiently. If we find a way to do this easily, RSA is dead. So now you got your public n. Next we want to get the private key part. There is some fancy math involved how you get your private key d now, but eventhoug you don\u2019t know exactly what they are doing here, they only use p, q, n and e."}
{"prompt": "How can the private key d be generated from the public key?", "completion": "You know n, n is part of the public key, and you do know e, because that is also part of the public key. Mayeb now you are confused, because we only got one number per public key from the admin list, but that\u2019s not a big issue, usually the public key exponent e is pretty constant, there are some typical numbers that are always used. And the reason why they didn\u2019t give us here one is, because it\u2019s a standard one. Anyhow. This means to generate the private key d, you need n and e which you already know and p and q."}
{"prompt": "What is the process for obtaining the private key in RSA encryption?", "completion": "Which you don\u2019t know. So all you have to do to get the private key, is to factorize n into the prime numbers p and q, and with them, the system falls. After that it\u2019s just doing the calculations right. So how could we factorize n. Based on our current knowledge of math, there is no easy way to do that. But let\u2019s start simple. If we would know ONE of these numbers, let\u2019s say we know p. We can just divide n by p and we get q. Mh, that\u2019s easy but also doesn\u2019t help us much. Well here comes the point where you actually have to think a bit outside of the box."}
{"prompt": "What scenarios could potentially be exploited to break RSA?", "completion": "Because in an ideal world, p and q must be random. Also we only looked at ONE public key n, and came to the conclusion it can\u2019t be broken. Well if p or q were super small primes we could probably bruteforce it and get lucky. That\u2019s certainly something you could try. But here is one thing, we have more public keys. We don\u2019t have only one. If they were all perfectly random we couldn\u2019t break them. But what if one of the primes is the same. So two keys share the same p? By coincidence, or because of bad random generation."}
{"prompt": "What algorithm did Euclid use to find the greatest common divisor of two numbers?", "completion": "The thing is, we know an efficient algorithm to find the greatest common divisor, GCD, of two numbers. It\u2019s also known as euclid\u2019s algorithm. This algorithm is over 2000 years old. It\u2019s always blowing my mind what kind of crazy stuff people figured out long time ago. I wish I were this smart. Euclid didn\u2019t even have the internet, and I can\u2019t even figure this out today. Anyway. His algorithm can, given two numbers, find the greatest common divisor. Of course only if they do have a common divisor."}
{"prompt": "What algorithm is used to find the greatest common divisor of two numbers?", "completion": "So if you have two numbers, it can find the value that can divide them both. See what I\u2019m getting at? If two public keys have one random prime number in common, then this prime number is the common divisor. So if one public key is a times q. And the other one is b times q. So they both share q, then euclid\u2019s algorithm will find q. So let\u2019s try this. We just have to implement this. So we loop over all keys, which obviously has to be converted to a number not a string, and we try to find a greatest common divisor and print the result of gcd."}
{"prompt": "What is the typical value of the public exponent e for RSA encryption?", "completion": "Obviously if the greatest common divisor is 1, then that\u2019s not the prime, but look here. Gary and Bob have a greatest common divisor. And as you know that divisor is already one of the primes. We got everything we need now! Because Dividing the public key n by this q, we get p. So we now got n, p and q. Only missing is the public exponent e, but that one has, as I already told you, some typical values like 3 or 65537, you may have seen these before. So we just try them all. Now we just have to perform the math as described on wikipedia."}
{"prompt": "What libraries are used to perform RSA signing in the video?", "completion": "D is the modular multiplicative invese of e module phi(n). I just copied a modular multiplicative function from the internet. So we can do just modinv from e and phi(n). And what is phi(n). phi(n) is just n - (p+q-1) Easy. Then I just use pycrypto to do the RSA signing for me. Just check the documentation how to use pycrypto. First we create a key object from the values we now know. And then we use the PKCS1_v1.5 class to sign our message. Which is the sha1 hash of admin. So we just run this, we get a couple of possible sigantures."}
{"prompt": "What hints are given to complete exploit-exercises stack level 5?", "completion": "Let\u2019s move on to exploit-exercises stack level 5. You should have watched the previous videos to understand how we got here. The challenge description says Stack5 is a standard buffer overflow, this time introducing shellcode. And the hints are: that, it might be easier to use someone elses shellcode. That is also what we will do. And If debugging the shellcode, use the \u201cint3\u201d instruction with the opcode hex CC, to stop the program executing and return to the debugger. And that is very helpful. Ok, let\u2019s have a look at this code."}
{"prompt": "What is the technique used in the video to determine the offset for controlling the instruction pointer?", "completion": "It is surprisingly small. There is just one function call to gets(), which we know allows us to overwrite data on the stack. So how do we get from no functionality of the program, to a root shell? So put on your wizard's hat, because we will do some magic. Let\u2019s open this program in gdb, and let\u2019s just throw a long string against it. To do that let\u2019s already prepare our exploit script. So first we want to find the offset that allows us to control the instruction pointer. I\u2019d like to use a simple pattern like the alphabet."}
{"prompt": "What command should be used to set a breakpoint at the return of main in gdb?", "completion": "So I create this exploit variable and assign the long string to it, and then print that. Now redirect the output of this script into a file, which we then can use as input for gdb. Before we execute the program, let\u2019s create a breakpoint at the return of main. And let\u2019s define a hook, like we have done in a previous video. Define hook stop, and we want to display the current instruction that will be executed next, so examine one instruction at the location of eip. And then examine 8 words as hex from the stack."}
{"prompt": "What is the hex code of the address that was on the stack before returning?", "completion": "And end. Then execute it, and we hit the breakpoint at the return. The next line shows us how the stack looks like right now. And when we execute the ret, we will jump to the address that was on the stack before. So no execute it again with the alphabet. We are at the return again, and we can see that we have overwritten stuff on the stack. So now we try to return to address hex 54545454. Which is obviously invalid, so we get a Segmentation Fault. And with examine as string, we can see that we have overwritten the return pointer with T\u2019s."}
{"prompt": "Which library can be used to create a binary string from an address?", "completion": "So let\u2019s update our exploit script. This will be our padding. And we create the variable eip, which we can use to control the instruction pointer and jump anywhere we want. And I use struct to create a binary string from the address again. So struct.pack. But where do we want to jump to? We don\u2019t have any win() function like in previous levels. Do you have any idea where we could jump to? I think I will give you a second to think about this. Right, we can just jump to the stack where we control data."}
{"prompt": "What instruction is suggested in the challenge description to use when appending code to the return pointer?", "completion": "So obviously we could place some assembler code there. Now let\u2019s find a good address. We could just jump right after the instruction pointer we control. To do that just run again, execute the ret and have a look at the stack pointer. So that is the address we want to jump to. And now we have to append code that we want to execute after the return pointer, so why not use the opcode CC, the int3, they were suggesting in the challenge description. Let\u2019s also quickly have a look at the intel instruction reference."}
{"prompt": "What is the opcode for the INT 3 instruction?", "completion": "Let\u2019s search for \u201cInt 3\u201d. Ok mmhh\u2026 call itnerrupt procedure. what else do we find. In this table about general exceptions it calls this instruction breakpoint? Huuu, that\u2019s interesting. Ok and here is the description of it. Interrupt number 3, traps to debugger. And down here it reads: The INT 3 instruction is a special one byte opcode (CC) that is intended for calling the debug exception handler. (This one byte form is valuable because it can be used to replace the first byte of any instruction with a breakpoint, including other one byte instructions, without over-writing other code)."}
{"prompt": "How does a debugger use the INT 3 instruction to create breakpoints?", "completion": "wooooh. What does that mean? Well, how do you think gdb works? Or any other debugger for that matter? How can you just stop the CPU from executing something. Or just step one instruction? Actually a debugger can just use the INT 3 instruction. Let\u2019s make an example. We just created a breakpoint at this ret. What we actually did was, we replaced this return instruction in memory with int 3. And when the CPU reached this instruction, an exception was raised. Or in hardware terms an interrupt got triggered,"}
{"prompt": "What is an anti-reversing technique that involves using an INT 3 instruction?", "completion": "which stopped the CPU from continuing excecuting this and called an interrupt handler (similar to how a syscall caused an interrupt and execution continued somewhere else). And we can now decide how we want to handle this exception. And if we are a debugger we would now replace this INT 3 instruction again with the original value, the return instruction. That can also be used as an anti reversing technique. Because a regular application will not use the CC instruction. So a malware might constantly scan itself for the CC opcode, and if it finds it, it knows that somebody attached a debugger and tried to set a breakpoint."}
{"prompt": "What signal is received by gdb when the INT 3 instructions on the stack are executed?", "completion": "And now we will use the CC in our payload. So let\u2019s append a couple of CCs after the overwritten return pointer. Don\u2019t forget to write the output of the script into the exploit file. And then test this in gdb. Ok run again. We can see that we stopped at the ret and we see the address where we would return to. And when we continue now, we pop the instruction pointer value from the stack, thus continue excecuting on the stack, where we have our INT 3 instrucitons, and as you can see, gdb stopped because it received a signal SIGTRAP,"}
{"prompt": "What could be causing the addresses on the stack to be different when running the exploit in gdb?", "completion": "a trace/breakpoint trap. Cool. This way we know that we have code execution, because we successfully injected an assembler instruction. Now does that work without gdb too? Let\u2019s try it\u2026 But we get an illegal instruction? That is not what we should see. We should get the breakpoint message. Let\u2019s open it in gdb here and try it again. Still illegal instruction. Let\u2019s set the hooks and the breakpoints like in the other gdb session. Ok run. mhmh\u2026 The addresses on the stack are not the same. Why are they different?"}
{"prompt": "What environment variables are available to the program in the GDB session?", "completion": "Let\u2019s do something crazy. Print the whole stack. I just print a thousand strings or something. Let\u2019s se what we get. Ok first we have some gibebrish. Let\u2019s go further. UUUh\u2026 see. Now we get some interesting stuff. Let\u2019s do the same in the other gdb session. This looks like the environment variables. For example here us the USER environment variable that we have used in a previous programming video. Mh and when you look at the addresses, they are still diferent. So let\u2019s look a bit further down. mh!"}
{"prompt": "What techniques can be used to gain more control over the stack when the PWD environment variable has a different length?", "completion": "down here they are the same. So between here and the environemnt variables above there mus be something different. And when you look closely, you can see that the PWD environment variable, the current working directory is different. They have a different length. So obviously the one execution environment needs more space on the stack to store this path. And thus pushing the stack further up. No wonder that the stack addresses are not the same anymore. So how can we cope with that? There are a couple of techniques that you can use to get a bit more control over the stack."}
{"prompt": "What is the opcode for the NOP instruction?", "completion": "For example by removing all environment variables before executing a binary. But there is another very easy but effective trick. here is a hint: nop, nop, nop, nop, nop Riiiight\u2026 a nop slide\u2026 Let\u2019s just add a looooot of NOP instructions. A Nop instruction performs no operation. And it has the opcode hex 90. And instead of picking a very specific stack address, let\u2019s just pick one that we hope hits our nops. So run again. Now we can see we have a lot of NOPs on the stack. And the address we will jump to points somewhere else further down."}
{"prompt": "What is a good collection of shellcode to use for this task?", "completion": "If we look at more of the stack, we can see that it points almost right in the middle of the nops. So let\u2019s just single step forwards. And now we happily slide down the nop slide until we reach the bottom with our traps! Boom. Cool. And that also works now outside of gdb. Now instead of CC, we want to execute something useful. So let\u2019s look for some shellcode. As the challenge description said, it\u2019s best to reuse shellcode from other people. I really like the collection of shellcode from shellstorm."}
{"prompt": "What is the assembly code used to execute a shell with the shellcode provided by Shellstorm?", "completion": "Shellstorm has a lot of different kind of shellcode, for a lot of different system. So we are looking for a Linux Intel 32bit shellcode. FreeBSD, Linux on ARM, 64bit, and here we have 32bit. They all have a short description and do different stuff. But we are looking for a simple execve that will execute a shell. So, why not take this one. If you look at the assembler code, what it does is basically just pushing some values on the stack, which are infact just a string that is the path /bin/sh. And then calls execve."}
{"prompt": "What is the difference between /bin/dash and /bin/sh?", "completion": "Copy the bytes into the python exploit script as payload and we can throw it against the program. mhmh\u2026 nothing happens. Does it not work? Let\u2019s add the CC at the start of the payload if we still hit it. It should work. Remove the CC againa and try it in gdb. let\u2019s single step. We are sliding down the nop slide. All seems fine. And now comes the shellcode. And it says: \u201cExecuting new program, /bin/dash\u201d. That first sounds weird, but is correct. /bin/sh just points to /bin/dash. So why the hell does it not work?"}
{"prompt": "What can cause an illegal instruction error when running a shell code program?", "completion": "Also on a side note. This gdb session is no broken. Because execve, replaces the current program with another one. So stack5 got replaced by /bin/dash. And you can see that when you try to execute it again. So you would have to load stack5 again with file. Ok. So what\u2019s the issue then? This is one of the things I got nuts. When I first got stuck like this I spend houuurs trying to figure out what is happening. As much as I want to see anybody else suffer like me, I tell you what the problem is. A shell you execute, wants some input, right?"}
{"prompt": "How can you chain programs together on one line in a shell?", "completion": "From standard input. But!. We used a program and redirected it\u2019s stdoutput into the stdinput of this program. And when the program was done it closed that pipe. So now the shell is executed, but doesn\u2019t have any input. Because it\u2019s closed. So it will just exit. And there is a neat trick to get basically around that. When you use cat without parameters, it simply redirect it\u2019s stdinput to the standard output. See like here. You type something in, and it get\u2019s reflected out. Now you can chain programs together on one line, for example with semicolon."}
{"prompt": "What command is used to verify the identity of the user after the exploit is executed?", "completion": "So we can first print the output of the exploit, and afterwards cat is executed, so we can enter new input. And if we group that now with some brackets, and redirect their combined output into the stack level, the exploit will first run and execute a shell, and then cat will take over and we can simply relay input via cat to the shell. BAM! it works. We have an ugly shell, and we can verify our identity with whoami, or id. So now we escalated privileges to root. Damn. feels so good. It\u2019s just beautiful."}
{"prompt": "What version of Chrome was being used in the last video to reverse engineer a popunder technique?", "completion": "I don\u2019t like these nasty popunder ads. And google Chrome tries to stop them. Unfortunately some advertisers find bugs in Browsers that they exploit to achieve a popunder. To me that\u2019s like exploiting any other bug for malicious purposes. So in the last video I reverse engineered a technique that worked on Chrome version 59 and also still worked on Chrome 60 for Mac. And what\u2019s super cool is, that Avi Drissman from Google who works on the popunder blocker for Chrome filed the Bug in the issue tracker and is fixing it."}
{"prompt": "What techniques can be used to work with obfuscated JavaScript?", "completion": "And it turns out, that for Windows this has been already fixed in version 60, so the issue only remained on mac, but when I visit the demo page of the guy who sells this popunder library, then it still works on Windows. How? I got some great feedback after the last video and tried improve my techniques on working with obfuscated javascript. So if you have more awesome tips or ideas, please share them. One was from alex, aka insertScript, who has an amazing blog where he writes a lot about abusing PDFs in browsers, and if you are,"}
{"prompt": "What is the suggested technique for injecting a script into a web page?", "completion": "like many others, surprised about javascript in PDF then you should really check out his work. He suggested instead of mirroring the site locally to insert my own Javascript I could develop a small Chrome Extension to inject a script into every page. This has the awesome advantage that I could inject myself into any iframes that are being created and track whatever they are doing as well. I think that\u2019s a much nicer technique. So I started doing that. In the manifest I declared a script that should be injected into anything, no matter protocol,"}
{"prompt": "What techniques are used to debug and reverse engineer the new PopUnder for Chrome 63 on Windows?", "completion": "domain or path, and do so before any other javascript runs. And this injected script is a content script, which has some access to the page, but not fully, so then I create a dynamic script and inject it into the page. This hook script then does what I did in the last videos, it attaches Proxies to interesting functions and objects and try to print information pretty. Later that would be the explorative task of adding and removing proxies as I need them. Then I use window.postMessage to send this debug log to the content script, which is listening to those messages."}
{"prompt": "What is the process for loading an extension from a folder in Chrome?", "completion": "And in the content script it takes this arriving message and forwards it to the background script. And the background script is always running and can now receive and show all log output of all pages in one place. So a page is loaded, content script is attached to it and executes, inserts another script, and uses messages to send it back to the background script. And then you can simply load the extension from a folder in Chrome. When you now have this extension active on the demo page you will quickly see that it creates again an object tag dynamically with a pdf."}
{"prompt": "What methods can be used to improve a logging output in an extension?", "completion": "And it\u2019s basically the pdf we know, it just calls alert(). But then I kinda got stuck. The logging output was not perfect. I was now wondering if I should improve this extension to log EVERYTHING. Basically create an extensive DOM logger extension with filtering and a nice UI and log property accesses and not only function calls. And that would be an amazing tool to have, but it is a lot of work so I wanted to try something else. At least we know an extension like this could work and a PDF is involved again."}
{"prompt": "What technique is used to hide the PDF alert in the popunder for Chrome 63 on Windows?", "completion": "Next I recorded again the popunder and slowed it down, because last time it revealed the PDF alert and the notification permissions request. But this time it\u2019s different. This time it opens a blank tab, then the popup, which appears in the background and closes the tab again. We don\u2019t see the PDF alert, because it\u2019s just super fast. But when you overwrite the removeChild function, making it not work, like in the last video, and then do it, you see that the alert is actually there. So at this point I felt I understand the underlying idea of this trick."}
{"prompt": "How can malicious sites trigger a popup without triggering the popup blocker?", "completion": "Somehow you retain focus of the main window when you open a new tab PLUS using a pdf alert. But when you start trying to emulate that, then you quickly run into the issue, that you cannot call window.open twice. Eh, window.open is used with different parameters to open popups or new tabs. And calling it twice triggers the popupblocker, and it will prevent that. You see popups are only allowed when triggered through human interaction. So for example when you click. A malicious site would simply overlay the whole page with a click handler, but nonetheless you have to interact to make it trigger."}
{"prompt": "What can be used to identify slow functions in Chrome's Performance tab?", "completion": "But this also means a single click will only open one window. So how do you do it twice, open a tab and a new window? So I looked more closely at the Performance tab of the Chrome developer tools. There you can click record, then perform actions on the page you want, and then stop the recording. Now it recorded everything that happened. This tab is intended to find performance bottlenecks, for example identifying very slow functions, and for our purpose it\u2019s not perfect, a lot of information is missing, but when you look closely you can find two major blocks that call window.open."}
{"prompt": "What is the technique used to open two windows when a user clicks?", "completion": "This graph is easy to read, each function call is a bar, and when a function calls another function, a new bar is below it. So the top most bar is the initial function, and the lowest bars is where it ended in. So you see this one block here triggered on a mousedown and the other one is triggered on a mouseup event. Ohhh, so is that the trick? Abuse two user interaction handlers that happen during one click to open two windows? Just open a window on mousedown and another on mouseup? Let\u2019s test it!"}
{"prompt": "How can the Chrome popupblocker be bypassed?", "completion": "We create two functions that open a new window and declare it to be executed on mousedown and mouseup. And when we test it... it doesn\u2019t work. The chrome popupblocker is not that easily fooled. Somebody was smart and made sure that is not possible. But how the frick does the demo do it then? While the performance tab doesn\u2019t have a lot of information, it does have links to the functions in the javascript source. Unfortunately you know the code is obfuscated and there is this super annoying debugger breakpoint called constantly, which prevents us from debugging with breakpoints."}
{"prompt": "What JavaScript code snippet was posted by peripsis or ww in a comment on the other YouTube video to prevent the demo from calling the debugger?", "completion": "When I initially looked into this stuff for the old video, I defeated this anti debugging thing by overwriting setTimeout, because a function called with it was responsible for constantly triggering the debugger. But a much cooler javascript snippet was posted by peripsis or ww in a comment on the other YouTube video. The code is intended to be loaded with tampermonkey, which is an extension that simply injects javascript snippets into sites to enhance them. c Super freaky script but in the end all what it does is, prevent the demo from calling debugger all the time to annoy us."}
{"prompt": "What anonymous function is used to call the window.open method in the PopUnder Chrome 63 script?", "completion": "If we replace the unsafeWindow with regular window and paste it into the console, we can now simply debug the JS code. So let\u2019s go to the performance tab again and see where the first window.open call is coming from. It comes from this anonymous function and it shows us where it is. And chrome dev tools are awesome, it even knows where in the script it is when we pretty print it. There. So something in there calls open! Let\u2019s just set some random breakpoints in there to investigate. Then trigger another popunder and the debugger should pause."}
{"prompt": "What does the variable \"e\" refer to in the code?", "completion": "There we are. Press escape to open the console in the current javascript context. So \u201ce\u201d is just pointing to a window object. And \u2018er\u2019 is the string \u201cclose\u201d. So this would call window.close() Mh weird. Let\u2019s continue. Always single step forward. N is an array of functions. And Qe is a weird function. If we step in and investigate it doesn\u2019t tell us much. So all I\u2019m doing now is just stepping and investigating the variables. So for example here is \u201ce\u201d again, so window and si is the string \u201cgo\u201d, so it would call window.go."}
{"prompt": "What are the parameters passed to the window.open() function in the script?", "completion": "Mh weird, that\u2019s not a standard window function. But it didn\u2019t really tell us much. And also when we continue the script it doesn\u2019t work, no popunder. So maybe we screwed up some timing. Let\u2019s remove the breakpoint in here and remember that this part wanted to call close() and go() on the e window object. Then we do it again. So what is this. hs() points to open(). AHA! So that\u2019s probably an important window.open() call. And ao as well as ye are the parameters of it. So about:blank and _blank. This will open the new tab."}
{"prompt": "What is the name of the function that is called with 3 parameters?", "completion": "And remember that e was a window object that the other function wanted to close and call go() on, so that window object was infact from the new opened tab. No idea why this one didn\u2019t trigger first. Continue stepping forward, and there we go, new tab. Then Uo.R is called, which is a weird function with 3 parameters, first a window object, infact this one is our current page\u2019s window. Second parameter is the string \u201cfocus\u201d and third is a function which we know tries to call close() and go() on the e window,"}
{"prompt": "What function is called on the window object to set up an event listener?", "completion": "the new tab. I have a suspicion what this obfuscated function R does. T is the window. And q, what\u2019s q? That\u2019s \u201caddEventListener\u201d. Ahhhh. So on the current window it will set an event listener waiting for our current page to gain focus, and then it will call close() and go() onto the new tab. Great. After setting up this event listener something is called on e again. Hi is the string document. So window.document. And xi is write. So it will write to the document of the new tab. And there is a long function call as a prameter,"}
{"prompt": "What is the JavaScript code used to create the new window in the PopUnder for Chrome 63 on Windows?", "completion": "but we know it would like to write a string, so whatever this obfuscated code does it must return a string. So let\u2019s just call it ourselves. And there we go. It writes some HTML and javascript to the new tab. Let\u2019s copy that HTML, make it pretty and have a look at it. So here it defines some variables, a window name and window parameters, the popup url as well as the popup options and then it creates a new event listener. On mouseup. Ohhhhh wait. That\u2019s so clever. So the mouse up did not happen on our page it happened on the new tab."}
{"prompt": "What JavaScript is used to register a mouseup event on the new tab, which will open the actual popup?", "completion": "And that\u2019s the trick how it opened a second window. Chrome looses track that mousedown already triggered a new window because it happend on another page. And it also registeres a new function go() to window, which will simply resize and move as well as redirect the new popup window to another url. That\u2019s it. Let\u2019s put it all together and walk thorugh it. First we declare a function to run on mousedown, this function will create a new tab and immediately write javascript to this new tab which will register a mouseup event to open the actual popup."}
{"prompt": "What triggers an onfocus event handler on the main page?", "completion": "And because Chrome is so fast, the tab will be open before you release the mouse button and thus triggering a mouse up event on the new tab, which will open the popup. How crazy is that. In the meantime the main page also embedded the PDF with the alert() which now triggers and gives focus back to the main page. And that\u2019s why we register an onfocus event handler on the main page to then call go() on the tab to change the url to our popunder target website as well as closing the tab and remove the pdf object because it has fullfiled it\u2019s purpose."}
{"prompt": "What kind of experiment was conducted to compare the speed of vulnerability discovery between fuzzers that had information about sudoedit and those that didn't?", "completion": "where we use afl and afl++ to fuzz sudo. These\u00a0 fuzzer started with some testcases given to them, and two testcases included the program\u00a0 name sudoedit, while the others only sudo. The vulnerability we are looking for is in\u00a0 sudoedit. So this is an interesting experiment, how quickly do the sudoedit based fuzzers find the\u00a0 vulnerability, and how long, does it take for a fuzzer that doesn\u2019t have the initial information\u00a0 about sudoedit need to find that particular functionality? Anyway. Fuzzers have been running\u00a0 over night now. Let\u2019s check their status."}
{"prompt": "How did the AFL++ fuzzer eventually come out of its rut and regain speed?", "completion": "*yawn* I just woke up. And of course first\u00a0 thing is to check the fuzzers?! OH! We have found one crash? Mmhhhh\u2026 First of all, I would have expected that the sudoedit fuzzers would have found\u00a0 a crash MUCH faster. And I\u2019m surprised that the afl version didn\u2019t. Also it\u2019s a bit a\u00a0 concern why this fuzzer is stuck with slow execution speed and large amounts of timeouts. While I quickly moved on from here and continued my research and investigation, I can tell\u00a0 you from the future, that I have actually let this fuzzer run on the side for over a\u00a0 week or so, and eventually this fuzzer came out of its rut and got back some speed. But it\u2019s\u00a0 interesting how that this happened. Also the AFL++"}
{"prompt": "How can we check the crash input file?", "completion": "that only had a sudo testcase and didn\u2019t know\u00a0 about sudoedit, eventually found sudoedit The last new path times are also kinda high.\u00a0 Over 1h here, which means the fuzzer hasn\u2019t found any new code functionality in over 1\u00a0 hour. Which can be an indication that maybe the fuzzer explored everything it could easily\u00a0 find. But it\u2019s ahrd to say if 1h is a lot or not for sudo. I lack the experience. Anyway. Let\u2019s look at this crash! First I want to check the crash input file itself, and look at it with hexdump."}
{"prompt": "What type of error did the instrumented AFL sudo binary produce when given the crash input?", "completion": "Huh?! I would have expected that it found a variant of the vulnerability with\u00a0 sudoedit -s or so. But apparently it didn\u2019t However, the input does have a backslash. So\u00a0 maybe we found another variant to trigger the sudoedit bug? Or maybe this is a false\u00a0 positive and this is not really a crash. So let\u2019s try it. I copy this crash to\u00a0 /tmp/crash, then I cat it to send the file data as input to the instrumented afl\u00a0 sudo binary. And we get a malloc error. invalid next size (unsorted). Aborted. Interesting."}
{"prompt": "How can we test if the crashing code is a 0day or a known bug?", "completion": "Now maybe this is just again a thing with our\u00a0 instrumented binary. So let\u2019s try it with our neat afl2sudo wrapper, which setups the arguments\u00a0 and calls the real installed sudo. And when we do that, we also also malloc() error. Awesome! Now I\u2019m getting excited. But let\u2019s also now switch the user to the unprivileged user.\u00a0 Remember sudo is intended to run as setuid, called from an unprivileged user. So let\u2019s try this again\u00a0 and see if we reach this seemingly crashing code. And INDEED! We also get a malloc error. perfect!"}
{"prompt": "What kind of GDB extension can be used to debug the afl2sudo wrapper?", "completion": "Let\u2019s look at this in GDB. For that I install the gdb extension gef.\u00a0 You can also use pwndebug we used last time. But I just wanted to show another extension. In this case I gdb debug the afl2sudo wrapper, as we need it to properly setup the arguments.\u00a0 And then we pipe in the input. The binary will execute now, setup the arguments and then exec\u00a0 the real sudo binary. And then we crash! It\u2019s not really a crash, it\u2019s an abort(). It\u2019s a\u00a0 forced crash. Apparently malloc detected an inconsistency with the next size and decided\u00a0 to bail out and stop the execution, before something worse happens. But this still means\u00a0 we should have corrupted something on the heap."}
{"prompt": "What source code line caused the crash?", "completion": "So here is the backtrace, those functions were\u00a0 executed and eventually lead to the abort. These functions are from malloc, so from\u00a0 libc. The last function from sudo itself was sudo_getgrouplist2_v1. And when we\u00a0 use \u201cup\u201d to go into that stack frame, gdb can also show us the source code line\u00a0 that caused the crash. And in that case this function tried to reallocate something. But then\u00a0 malloc detected a heap inconsistency and aborted. This means, we should have caused\u00a0 some kind of heap corruption."}
{"prompt": "What is the location of the crashing input on Github?", "completion": "This is exciting, but we need\u00a0 to understand this crash better. Is this a variant of the sudoedit vulnerability?\u00a0 Or is this maybe a new and different sudo crash? I\u2019m too scared to say it is. Because\u00a0 most likely it is not a new 0day. But the testcase did not contain sudoedit.\u00a0 Mhmh\u2026 But let\u2019s not get prematurely excited, we need to investigate it more. You can find the crashing input on github in the episode folder, so feel free to play\u00a0 around with it, Maybe you figure out what happens! So pause the video now. Before I\u00a0 spoiler it to you! Go try it yourself!"}
{"prompt": "What steps are taken to identify if a crash is a 0day or a known bug?", "completion": "The first quick test I make is to see\u00a0 if the latest sudo version on ubuntu, that has fixed the known issue, also crashes. If\u00a0 that\u2019s the case, we would know it must be a 0day. To do that I take the afl2sudo code we wrote\u00a0 and use it outside of docker on the host system, I just have to adjust the sudo binary location.\u00a0 Then we can compile it and use the crash we found to execute the sudo wrapper. And we don\u2019t get a crash. Awww\u2026 Of course I\u2019m hoping to discover a cool 0day, but\u00a0 it was kinda clear to me. It would have been too crazy. So it might be a variant of the sudoedit\u00a0 vulnerability. But still a curious variant,"}
{"prompt": "What tools are available for minimizing AFL testcases?", "completion": "because it seems to not include sudoedit?\u00a0 Remember, sudo shows different behaviour when executed with sudo or sudoedit. So this is really curious to me. Anyway. This testcase we have is pretty complex\u00a0 and probably most of the data in here is useless garbage, so I would like to minimize it.\u00a0 Minimizing it can give us a shorter proof of concept crash that\u2019s much easier\u00a0 to work with and to understand. In the AFLplusplus readme you can find a\u00a0 section about \u201cMinimization of test cases:\u201d I have no experience with any of\u00a0 them, kinda want to try them all."}
{"prompt": "How can we check the return value of a program after it has crashed?", "completion": "But I guess it start with the actively maintained\u00a0 halfempty project from googleprojectzero. To use it we have to create a small wrapper\u00a0 shell script, that checks if the input crashed the program or not. The example checks for\u00a0 the return value 139, which is the value for a segmentation fault. But in our test case\u00a0 we don\u2019t have a segfault. We have an abort, which has a different number. We can check\u00a0 the return value with echo $?. and it is 134. So let\u2019s modify the script accordingly. And then we can call halfempty with the minimizing shell script and our crashing input."}
{"prompt": "What is the command used to verify that the script is working?", "completion": "But somehow it doesn\u2019t work. Strategy failed. \u201cTry it yourself to verify it\u2019s working.\u00a0 Use this command\u201d. And I did. And it seems to work. The return exitcode of\u00a0 the script is 0. it should work. That\u2019s weird. So I give up. Let\u2019s move to another method. How about afl-pytmin wrapper. It seems to be\u00a0 a wrapper around afl-tmin. So let\u2019s try it! Adjusted the tmin path. Let\u2019s go. Done?! It created an empty output file? Huh? Maybe empty input also crashes it? But testing that empty file doesn\u2019t work either."}
{"prompt": "What command is used to crash the program when attempting to exploit the sudoedit vulnerability?", "completion": "Okay. uhm\u2026 let\u2019s just use the minimizer that comes with afl. Afl-tmin. You have to give it a\u00a0 crashing input file, a location where to write the minimized file, and the instrumented binary. Now let\u2019s run it. And it goes pretty fast, which I thought it meant it must have\u00a0 failed too. But when looking at the file with hexdump, WOW! It is very clean now. 0edit and then -s and a backslash. This looks\u00a0 like the sudoedit vulnerability. Let\u2019s try that one with sudo. We can switch to the\u00a0 regular unprivileged user. Then we symlink sudo to 0edit, then the program runs with the 0edit\u00a0 program name. And when we now call it with the parameters like in the input file (keep in\u00a0 mind that here in the shell you need to escape the backslash) IT WILL CRASH!!"}
{"prompt": "What specific pattern must a program name have in order for sudoedit to crash?", "completion": "Like sudoedit crashes. It\u2019s very curious though, that just calling\u00a0 ./0edit shows the sudo help stuff, not how sudoedit showing the sudoedit help stuff.\u00a0 But still seems to go into the sudoedit argument parsing code and then crash. mh. We can also play a bit with the name and try different variants. And it\u2019s really weird why\u00a0 it works. It\u2019s not like the name can be anything. It's weirdly specific to be \u201cedit\u201d\u00a0 with at least one character before it. I already mentioned in a previous video that\u00a0 there is this check that only compares the end of the programname to be edit. But I only\u00a0 knew this from exactly these testcases."}
{"prompt": "Where does the heap corruption happen in the program?", "completion": "So this is where I learned about this behaviour. Now that we have a minimized testcase, we can\u00a0 investigate this further. As mentioned last video, we are crashing when sudo tries to call realloc.\u00a0 It detects that some metadata value is invalid. which means the heap metadata was corrupted and\u00a0 overwritten some time earlier in the program. So now we need to figure out where exactly the heap corruption happened.\u00a0 You can give it a try yourself. How would you find the true location of the overflow?\u00a0 Next video I show you how I have done it."}
{"prompt": "What is the crypto challenge described in the video?", "completion": "We are going to solve a crypto challenge with some cool math. I think it\u2019s an awesome example of linear algebra applied to some real world security problems. The story about this challenge is that we have a firmware update that will only be applied if verified, and works by hashing files and folders with sha256, and xoring those hashes together. The resulting xored result is then checked against a signature. If you want to hear more about how we explored different attack ideas you can checkout part 1, but in this part I just want to focus on the mathematical solution and try provide an intuitive understanding for the linear algebra involved."}
{"prompt": "What is a Galois field (GF)?", "completion": "And I\u2019m also sorry to all mathematicians out there if I butcher some terminology, I\u2019m a math noob. Okay, so to understand the solution I have to introduce two concepts. One is about linear independence, and how linear independent vectors in some vector space can match to any point. And the second concept will be Galois Fields or finite fields, specifically the GF(2), the field of only two elements. If you didn\u2019t learn this kind of math, for example in university or you are still too young, then these terms sound crazy, but I wanted to mention them because while it sounds crazy, I think it\u2019s really easy to understand once I explained it."}
{"prompt": "What happens when a vector is multiplied by a scalar?", "completion": "So let\u2019s start with linear independence of vectors. If you are not familiar with vectors, just ignore the term and just see how we are using it. They are basically just arrows. So... Imagine a 1 dimensional space. So just a line of numbers. And I give you a one dimensional vector. Now a vector is like an arrow, so this vector starts at 0 and points to 2. With a scalar, or just \u201cregular number\u201d we can multiply that vector to move that arrow around. For example 2x the vector will point to 4. And 4x the vector will point to eight, and -3x this vector will point to -6."}
{"prompt": "What is the result of multiplying a vector in two-dimensional space by a scalar?", "completion": "Easy. And as you know, multiplication is just fancy addition. For 4x the vector we just add the vector to itself 4 times. So you see that with this one vector, if we multiply it with some value, we can make it point to EVERY number in that one dimensional space. Now let\u2019s look at this in two dimensional space. Just a flat surface. We add another axis. Now a vector will have two values, x and y. Now let\u2019s take one vector, for example [1 1]. Now this is an arrow that points to this point (1/1). Again we can multiply a scalar or just add/subtract this vector many times, we can move around where it points to."}
{"prompt": "What is the effect of adding or subtracting a vector multiple times?", "completion": "With 2x this vector we point to (2/2). With 5x we point to (5/5). And with -3x this vector we point to (-3/-3). But you see that we can\u2019t add or subtract and reach every value on our plane. We only ever can reach any point on this line. Let\u2019s introduce a second vector. [3 3]. Now this one points to (3/3) and again we can add or subtract it, we can even combine our two vectors, but we are still limited to this line. You might also have noticed, that we could basically create this vector by taking our first vector 3 times."}
{"prompt": "What is the example vector used to illustrate linear independence in the video?", "completion": "These two vectors are linearly dependent. But if we get a vector that is linear independent, that is not laying on the same line, for example [1 0], now we can\u2019t reach this point with only the first vector. And vice versa, the new vector can\u2019t reach a point of the second vector. Except of course 0. But we can now use them together to get to any point on this 2 dimensional field. For example to reach the point (3/5) we can take the first vector 5 times, now we are at (5/5). And then we take the second vector and subtract it two times, and now we reached (3/5)."}
{"prompt": "What is the minimum number of linear independent vectors required to reach any point in an n-dimensional space?", "completion": "And so with TWO independent vectors we can get to any point of the TWO dimensional field. And this also works with three dimensions. If you have three linear independent vectors in this three dimensional space, you can get to ANY point you want by adding or subtracting them. That makes sense, right? Just think about it for a second and imagine in your head how you can combine three different arrows in a three dimensional space and reach any point in there. And of course this also works in 4-, 5- or higher dimensional space."}
{"prompt": "What is the minimum number of linear independent vectors needed for a space with n dimensions?", "completion": "In 4 dimensions we need 4 linear independent vectors and in 5 dimensional space we need 5 linear independent vectors, and so on. Of course you can\u2019t really visualise that anymore, but you can just write them down as a vectors and play around with adding and subtracting them from another to reach any point you want. Amazing right? But if you have very large vectors, it\u2019s a bit cumbersome by hand to select the vectors you want to add or subtract to reach certain points. That\u2019s where you get into linear algebra."}
{"prompt": "What is the name of the mathematical concept related to linear independence that is mentioned in the video?", "completion": "You just put all those vectors as columns into a matrix, here is the point you want to reach, and then you can solve this. But we don\u2019t have to do that by hand, we can let computers do that for us. Ok so, what the heck does this have to do with this challenge? We get there. Patience. So now let\u2019s introduce the second concept. Finite field is already a fancy sounding name. But there is a much nicer name for it. That\u2019s synonymous. Galois fields. That\u2019s a nice french name, right? Ok. So when you wanna, tell your girlfriend or boyfriend or your mother, whoever you want to impress what you did today, at university,"}
{"prompt": "What is the result of adding one and zero in the binary world of GF(2)?", "completion": "say I learned about Galois fields. Ok? Specifically we want to have a look at GF, Galois Field (2). Ahh it sounds sooo cooool. But it\u2019s really dumb. But clever. Basically, throw away any numbers you know and just keep two. 0 and 1. And you live now in a world where only 0 and 1 exists. The binary world. No 2, no 3. Only 0 and 1. Now let\u2019s think about how addition could look like in this world. 0 + 0 could be 0, that makes sense 0 + 1 could be 1, that makes sense too So does 1 + 0, that\u2019s also 1."}
{"prompt": "What is the logical operation equivalent to addition in the finite field of two elements, GF(2)?", "completion": "But 1+1 is a bit weird, because in our world, there is nothing larger than 1. And so we are imprisoned in this weird world and if we try leave here to find a larger number, we just wrap around in our world and arrive at the start again. Like the game snake. And as a computer scientist, do you notice something? What is this? This is XOR. Addition in the finite field of two elements, GF(2) is equivalent to the logical XOR operation. Ding ding ding dinggg. Does it ring a bell? So when we XOR for example two bytes, each byte has 8 bits."}
{"prompt": "What is the result of performing an XOR operation between 0x55 and 0xD9?", "completion": "Eight 1s or 0s. For example 0x55, in ascii the capital letter \u2018U\u2019, would be 0101 0101. And if we XOR that with 0xD9, in binary 1101 1001, we get 1000 1100 , or 0x8C. So these bytes could also be understood as a vector, it\u2019s an 8 dimensional vector with 8 elements either 0 or 1. They are vectors in an 8 dimensional GF(2) vector space. Each vector has 8 bits, and a bit exists only in a world of 0 or 1. A bit can never be 2. It\u2019s always either 0 or 1. And we just learned, that an XOR in GF(2) is like addition."}
{"prompt": "How many linear independent vectors are needed to reach any point in a 256 dimensional Galois Field (2) vector space?", "completion": "So no we just added two vectors together and got another point in that vector space. And this means a sha256 hash, has 256 bits, and can be understood as a 256 dimensional vector in a Galois Field (2) vector space. And the first concept we learned about was, that if we have enough linear independent vectors, we can add or subtract them to reach any point in the space. And so if we had 256 linear independent vectors, 256 linear independant sha256 hashes, we could reach ANY point in the 256 dimensional space."}
{"prompt": "How can we craft a desired XOR result using linear independent vectors?", "completion": "And the point we want to reach, is the 256 bit vector, or better to say the final xor result of the hashes that is already valid and signed! So if we can create these 256 linear independent vectors, we should be able to combine them by addition, or as you know now, XOR, to craft any XOR result that we want. In mathematical terms, we then just have to solve this matrix equation of the 256 independent vectors with the vector that we want, any XOR result that we want. And actually, that is very simple."}
{"prompt": "What is Sage and how is it used in the context of this video?", "completion": "Hashes are basically random data. Random bits. They are a random vector. And it\u2019s very very unlikely that such a random vector is linear dependent. But you can also very easily test that. So let\u2019s start by creating 256 linear independent bit vectors. Or vectors operating in GF(2). To do this I\u2019m using sage, which is basically a tool to perform mathematical calculations. Sage scripts are basically python. The code gets transformed into a python script and that is then executed. Also as I explained in part 1, I did not come up with this."}
{"prompt": "How is the 256bit vector generated in the firmware installer?", "completion": "The solution and the code I show was written by bennofs from our CTF team. Just so that you don\u2019t get the wrong impression that I\u2019m some kind of wizard. He is. So we can start with a loop to find these independent vectors. We know how the hashes are generated by the firmware installer, check out part 1 if you forgot, so we basically we do the same now here, we generate a filename from just counting numbers, and append the null-byte. Then pass it to something that will return the 256bit vector for it."}
{"prompt": "What is the purpose of the lookup table of bits generated at the start of the program?", "completion": "The make_vector function takes the filename, generates the sha256 hash and then goes over each byte of that hash. For each byte it extracts the single bits. It does that via a lookup table of bits that was generated at the start of the program. Long story short, that function will just return the vector with all 256 bits of the hash. Now that we have the vector that represents the hash for this file, we can create a matrix of all the possible vectors. Defined over the Galois Field GF(2). And then we can check the rank of the matrix."}
{"prompt": "What is the rank of a matrix in linear algebra?", "completion": "In linear algebra, the rank of a matrix is the dimension of the vector space generated by its columns. This corresponds to the maximal number of linearly independent columns of the matrix. So if the new vector increases the rank of the matrix, so increases the number of linear independent columns of the matrix, then we can keep that one. And so we just remember all those vectors and filenames that are good. And we can also print if a vector wouldn\u2019t be linear independent. If we run that now, it takes a moment for sage to get going, and then we print out all the filenames that produces linear independent vectors."}
{"prompt": "What is the process for finding the target goal in the 256 dimensional vector space?", "completion": "And you can see, after the first 256 we didn\u2019t even get ONE that was linear dependent. Next we have to define the point in our 256 dimensional vector space, that we want to reach by combining our vectors. To do that we have to read the current valid xor result, the one that is signed, then we do our modification of the pre_copy python script to spawn a shell, and then we get the new invalid xor result. If we xor those two, we get our target goal. If we can somehow craft this XOR result with our files, basically find which vectors we have to combine to reach that point in space,"}
{"prompt": "What is a goal vector in the context of the software_update challenge from the 34c3 CTF?", "completion": "then they would be xored with the now invalid xor result to produce the valid signed result. So we take that result now and define a GOAL vector, and then we take the matrix of all our vectors, and say that we want to solve this system of equations for the goal vector to the right, basically just solve this matrix equation and the resulting vector will tell us which vector we take and not take. Where we have a 1 we take it, where we have 0 we don\u2019t take it. Or to be more mathematical, we multiply the first vector with 1 and add it, we multiply the second vector with 1 and add it, and we take the third vector and multiply it with 0 and add it."}
{"prompt": "What is the goal of creating a modified update.zip file?", "completion": "And so forth. So we can now loop over this resulting vector, and wherever we have a 1 we print the name of the file we have to create in order to craft the corresponding XOR result. And if we do all of that. We can create the new .zip update file with all of these chosen files, and that should have a valid signature, but a modified pre_copy script. And so we can connect again to the service and send our modified update.zip. It gets unpacked, the signature checked, and the precopy script is executed."}
{"prompt": "What is the prize for first place at the Real World CTF Finals?", "completion": "While I was in Las Vegas for the DEF CON CTF, niklas from eat sleep pwn repeat asked me about the Real World CTF Qualification but I had no clue. Apparently my team qualified for the finals, and I didn\u2019t even know. You can see we are well organized. This Real World CTF seemed a bit weird, it kinda came out of nowhere, it promised 100.000 dollars for the first place in the finals, but the price was also in USDT, a crypto currency which is basically bound to the US dollar. It was a Chinese CTF by this company Chaitin Tech."}
{"prompt": "What was the most notable challenge in the Real World CTF Finals 2018?", "completion": "But the challenges were actually really cool, and they were based on real world applications. Most notable was probably the P90_RUSH_B challenge where a CS:GO map parsing bug had to be exploited. So for a while it was unclear if the finals will still happen as we didn\u2019t hear much about it anymore. But then suddenly we got the invitation to come to Zhengzhou, china to participate in the Real World CTF Finals 2018 on the 1. and 2. December. We booked our flight, got our visas and had no idea what to expect."}
{"prompt": "How did the team-mate gain access to the underlying operating system of the iMacs at the Hong Kong airport?", "completion": "Our team met up in Frankfurt Germany to fly together to Hong Kong and then continue to Zhengzhou. On the first flight one team-mate figured out a crazy combination of steps to crash the inflight system which is based on android. It leads to crashing the QT5PacLauncher. Screen goes black. And eventually it restarts. On iMacs at the HongKong airport where you can surf the internet. You are supposed to only use this tool here. But again a team-mate found a way to escape the program and gain access to the underlaying operating system."}
{"prompt": "What type of environment did the CTF take place in?", "completion": "You can tell I was traveling with hackers. Anyway\u2026 we arrived later in the day in Zhengzhou and unfortunately the weather was not great. Organizers actually warned us of the air quality. While it looked kinda sad and grey during the day. The fog or the pollution(?) looked actually really awesome at night. It really had a cyberpunk flair. We were staying in this huuge skyscraper hotel on floor 40-something next to a lake and a convention center where the CTF was going to be. So once we got settled we decided to walked around and see some stuff."}
{"prompt": "What was the first thing the team saw at the convention building?", "completion": "And we couldn\u2019t believe our eyes. There were these big posters about the Real World CTF and pointing into the direction where it would be. Oh wow this seemed a bit more serious than we thought it would be. We walked a bit further and then we saw this. At the convention building there was a HUUUGE banner with Real World CTF and all the team names. And a crazy looking entrance. What is going on?? What is this crazy event? Because I only had a crappy phone, here are some pics from the next day. This is crazy\u2026."}
{"prompt": "What level of professionalism did the team feel when they first walked into the CTF area?", "completion": "There is our name! This is NOT what we expected. Who the f\u2019 would be watching us? This is just a CTF! We are not like esport fun to watch? So the next day was the start of the CTF and this was the first time we walked into the CTF area.  WHAT THE F\u2019 IS THIS!?  Well\u2026 yeah\u2026 so this looked crazy. Each team had a cool table with our team names and logos on it. We felt not at all prepared for this level of professionalism. You would think we would prepare A LOT for the huge prices,... but be real\u2026. We have NO CHANCE against these other teams,"}
{"prompt": "What are the dates of the Real World CTF event that was held in Zhengzhou, China?", "completion": "we were just here to have fun. But if there is a next time I will still prepare more. This is insane. Around the CTF areas a few sponsors had setup some marketing booths, like Pangu Team, Qihoo 360 and many more. But I never interacted with them. So we had about 1h to setup before the CTF starts and after we resolved all our networking issues we were waiting for it to start. Countdown. 19 minutes. The CTF would go for two days. 1. And 2. Of december. And Also the rules of the CTF were introduced to us."}
{"prompt": "What technique did RPISEC use to exploit the host and execute the calculator on stage?", "completion": "It\u2019s a jeopardy style ctf, so very typical, but several challenges required demoing it on stage. For example there was a challenge called station escape where you were given a minimally modified vmware binary, they patched something in it to introduce a vulnerability, and then you had to exploit it and pop the calculator on the stage. For example here RPISEC exploited the host and executed the calculator. And got FIRST BLOOD. There was some browser exploitation, some web challenges, even doing some car hacking on stage."}
{"prompt": "What challenge was the speaker most focused on during the CTF?", "completion": "Oh and each team got a camera as well as a router and both of them were challenges. You had to hack into the router and you also had to find a way to access and control the camera without authentication. So there were really cool challenges. If you want to know what I did during the CTF, well I can tell you I didn\u2019t solve anything. Infact I spent BOTH DAYS. INCLUDING THE NIGHT TIME on the blockchain challenge Acoraida Monica. I have done quite a bit of smart contract stuff this year and I thought: \u201cF\u2019 YEAH!"}
{"prompt": "What did the speaker learn about Ethereum smart contract internals from a challenge?", "completion": "This is my challenge. No problemo. Ezy pointz\u201d... gosh was I wrong. This challenge was crazy hard. And I did make progress. Slow. But progress. And thus I never gave up. Of course in retrospect I should have spent my time on something else for points, but I actually learned SOOO much more about ethereum smart contract internals. It was so useful to me. I\u2019m so blown away by this challenge and I definitely want to make a video talking about. However our team did solve a challenge. And that was the router."}
{"prompt": "How long did team ALLES! have to complete their exploit in order to win a flag?", "completion": "They were actually rushing it. Because demos on stage take time and the end of the CTF was nearing each team had to register for a spot for demoing it. So we registered without having a working exploit. And literally 5 minutes before the end the exploit worked, a super quick test run was done to see if it works, and they rushed onto the stage. With 3 minutes left on the clock, team ALLES! Was the last team to win a flag. Our only flag. But we were so damn proud. Overall the CTF was super hard. We were 5 people and I was sucked into a single challenge, so kinda only 4 people."}
{"prompt": "What is the ideal team size for the Real World CTF finals in China organised by Chaitin Tech?", "completion": "Other teams, especially the ones that were in the top had actually more people helping offsite, over the internet, which is totally fine and allowed. Our team just doesn\u2019t have that many dedicated players. So I feel like this CTF would have been perfect for a team of like 8-10 people. I think that would have been sweet spot. 5 was too low, and 20 or so would too much. On average 1 day per challenge would have been nice. Oh and just in case you wonder, solving a single challenge was still pretty good."}
{"prompt": "What was the final scorebored for the Real World CTF finals?", "completion": "The final scorebored looked like this. Actually a team asked me to censor their cero points because they felt so embarassed, so I hide it here. But they shouldn\u2019t be embarassed. It was a really hard CTF and everybody should be proud to even have qualified. While the stage and light effects and demos was awesome, it was a bit of a bummer that almost nobody celebrated it. Very rarely people would clap or cheer for successful popped calcs on stage. LCBC was probably the happiest on stage for pwning a challenge."}
{"prompt": "What security measures were in place at the entrance of the CTF event?", "completion": "But with every demo we saw I was hoping that the room would burst out into claps and cheers. So this is a call to my fellow CTFers, comeon! Let\u2019s celebrate this awesome hacks more. Let us show people that this awesome! One other thing I\u2019d like to mention was how weird it was to have all those guards there. And at the entrance there were x-ray machines for the bags and pat down. I don\u2019t know if these guards were police or just security, but there were not just a few at the entrance, they were standing just meters apart, and they were standing there for HOURS, I felt so bad for them."}
{"prompt": "What methods did the organisers use to protect the participants at the Real World CTF event?", "completion": "That must have been sooo boring. There was even a large group patrolling with riot shields and sticks and stuff every few hours or so. I think they were supposed to protect us and make us feel safe and make sure nothing bad happens, but to be honest, I felt more threatened by it. It was really weird. One other interesting cultural observation I had was smoking. So apparently smoking was banned inside of places or so just a few years ago, but people just kinda ignore it. Or well\u2026 they hide. In the toilet."}
{"prompt": "What can you say about the amenities provided during the Real World CTF event?", "completion": "So everytime you go to the bathroom there are people and employees just hanging out and smoking. I\u2019m somebody who really likes a clean, quiet, empty bathroom, this was a bit irritating. Other than that nothing weird happened. Everybody was super nice to us and we were put in a nice hotel, and breakfast was awesome, they even apologized constantly when small things went not quite right and the organizers in general made us feel very welcome. It was a really well organized and great event. Kudos for that."}
{"prompt": "What did the speakers at the award ceremony discuss regarding the importance of IT security?", "completion": "On the day after the CTF, when the winner was clear there was a small conference with an award ceremony. This is where we got a small glimpse into day-to-day chinese politics. They even had live translators for us. I don\u2019t remember who exactly spoke, but there were several important people there and I think it was like the mayor and some misters or so, just talking about the importance of security, and that the government has to invest more into this, and support IT security education and this Real World CTF was part of this."}
{"prompt": "What is the population of Zhengzouh compared to Berlin?", "completion": "This was a competition in IT security on a high level, in order to motivate young people to go into this field and also position China as being cutting-edge in IT security. Or actually it was less about China as a whole and more about the region itself, you know China is huuuge and they were often just talking about the Henan province which has even a bigger population than Germany. And the city Zhengzouh where we were, is almost 3 times bigger than german\u2019s capital city Berlin. So of course for local politicians it\u2019s more about positioning Zhengzouh as a hub for IT companies."}
{"prompt": "What kind of marketing tactics did the organizers of the Real World CTF Finals in China use?", "completion": "This is where talent is, and where the REAL WORLD CTF Finals happened. They want their economy to prosper. So of course this is all about marketing and economics, but it was just really fascinating to not just hear about global political news, but to get a small glimpse into this day-to-day boring local politics. And the marketing was really crazy. After the CTF they even got multiple pages in a local newspaper ready for the next day. And so thanks china. Now I have to own a picture of Trump in order to keep this piece of memory of the Real World CTF."}
{"prompt": "How did the participants receive their materials for the CTF finals?", "completion": "I used google translate on my phone to read some lines in the newspaper, but it was a bit rough. \u201cThe Most powerful brain idle sports network offensive and defensive surgery\u201d. We also got some stickers which of course have to go onto my laptop. And we got this metal challenge coin. You can tell I had a lot of fun there and I was so glad that I went. I\u2019m really looking forward to next year and hope we can qualify again. Thanks also to my team-mates, I really enjoyed traveling and playing with you and congratulations to LC:BC, 217 and ESPR for rocking this CTF."}
{"prompt": "What tools can be used to unpack malware?", "completion": "Oh a Labs is an awesome technical YouTube channel about malware Reverse engineering and analysis and I reached out to them and asked if they would be interested in making a guest video for Life overflow They cover topics. I've basically never covered here And I also don't really know much about so I'm super excited to present you a video from them here in this video They will walk us through an example of Fiske aided malware and explain how you can unpack it in order to get to the real malware executable and along the way they will explain a lot about Windows how typical malware operates and also how to use tools like x64 debug Ida or PE Barre one thing for example I had no clue about at all was the command a trip to reveal hidden files So why don't you give them a chance and see what you can learn from this video?"}
{"prompt": "What steps can be taken to force a buffer to be allocated earlier on the heap?", "completion": "We are trying to develop an exploit for a\u00a0 sudo heap overflow. And last video we did an investigation to look for function pointers on\u00a0 the heap that we could overflow, thus hijack the execution. But currently our overflowing buffer is\u00a0 placed after all those function pointers, and we can only overwrite forward. So now we have to try\u00a0 to find a way to force our buffer to be allocated earlier on the heap, or the pointers later. And in\u00a0 this video we want to develop a tool that can try to help us to find such a condition automatically."}
{"prompt": "What techniques can be used to locate a buffer and a function pointer on the heap?", "completion": "Let\u2019s head in.  as I mentioned in the last videos, I don\u2019t really\u00a0 have a clue what I am doing. this idea I have might not work, but it feels like worth trying . So I want to write code that takes configuration arguments or randomly generates them, constructs the input for sudo, runs sudo and\u00a0 tells us where the important heap areas are. This way we can check if we found inputs where our\u00a0 overflowing buffer is before a function pointer. But how will we be able to tell where our buffer\u00a0 and the function pointers are on the heap?."}
{"prompt": "What build configuration would be most suitable for developing an exploit for sudo?", "completion": "Let\u2019s think about this problem. The first important thought I have is that we should be careful on what kind of\u00a0 sudo build we do this research on. The closer we get to writing an actual exploit, the closer we\u00a0 need to be to the regular compiled sudo binary. For example for fuzzing and some debug purposes\u00a0 we used to build the binary with disabled-shared. This creates a single sudo binary, which is a\u00a0 significant difference from the real target. The real target is a smaller sudo binary\u00a0 with a shared library that is being loaded."}
{"prompt": "What approach did the speaker use to collect heap information?", "completion": "For debugging we also built a sudo version\u00a0 with address sanitizer. That also changes the binary AND especially heap allocations a lot. And so because we get closer to exploitation, I think we need to make sure we have a\u00a0 more \u201cnormal\u201d compiled sudo binary to work with. With only minimal and less\u00a0 intrusive changes. Ideally no changes. But I hope that one particular change is small\u00a0 enough, and that is to collect heap information. I use a very simple approach, I want to add a\u00a0 few debug printfs to print the heap addresses of our buffer and the two function pointers. I got\u00a0 the locations from last video when we looked at the callstack. So this is where a function pointer\u00a0 was called. Then we can ./configure and make sudo."}
{"prompt": "What might be the reason why no printfs for the function pointers are being executed when testing sudoedit?", "completion": "Keep in mind, we didn\u2019t use --disable-shared\u00a0 for configure. Which means we now have, ./src/sudo as a bash script wrapper. And\u00a0 the real binary is in ./src/.libs/sudo. A few videos back we talked about that. Caused\u00a0 some major issues. I have PTSD from that. Anyway. To test specifically sudoedit we of\u00a0 course need a sudedit symlink to that binary, and then we can try it. Sudoedit -s 0000\\. And\u00a0 we get\u2026. Almost no output? huh?! No printfs for the function pointers are being executed? This blocked me for like an hour, I couldn\u2019t figure out why this happened. We clearly tried\u00a0 to execute those function pointers earlier so we should reach that code. Why not now. Any\u00a0 guesses? Anybody have a guess what the issue is?"}
{"prompt": "How can we view the heap addresses of function pointers?", "completion": "Again, this was a dumb problem, and so\u00a0 I decided to keep this in this video, just to show you that doing security research is\u00a0 not ever a smooth straight path. You constantly have to fight with small issues like this. ANd\u00a0 these issues are what really cost you time. Well\u2026 you see the problem with ldd. Ldd\u00a0 shows the dynamically linked libraries and from where they are loaded. And the code where\u00a0 the function pointers are used, are part of the sudo shared library. And this is not our newly\u00a0 compiled one, it\u2019s the system one which doesn\u2019t contain the printfs. Which means, we simply call\u00a0 make install, to move our new debug print library into the system paths, and then it works! Now we\u00a0 see the heap addresses of a few function pointers."}
{"prompt": "What is the goal of the python script we are writing?", "completion": "Let\u2019s look at this output. The sudo code is\u00a0 executing, and everytime a function pointer is executed, the heap address is logged. And\u00a0 this is our buffer address. So if we would want to overwrite a function pointer to hijack\u00a0 execution, we have to look at the cases that were executed AFTER we got our buffer which\u00a0 we overflow. Our goal is to find some inputs where one of these function pointer addresses is\u00a0 smaller than our overflowing buffer user_args. Next we need to write a python script that uses\u00a0 this information to do the heap location research!"}
{"prompt": "What techniques can be used to control the size of allocated chunks on the heap?", "completion": "To better understand what I try to do, let me\u00a0 quickly summarize how to think about the heap. The heap is full of memory being allocated\u00a0 and freed. These chunks have different sizes. So over time the heap becomes fragmented with\u00a0 holes. When we then allocate new stuff, we look for a fitting hole. And how the heap fragments\u00a0 depends on the size of those allocations before. So if we identify inputs that will control\u00a0 the size of allocated chunks, we can end up with different heap layouts, where our buffer\u00a0 might be placed in front of a function pointer."}
{"prompt": "What types of inputs can be used to influence allocation sizes when using sudo?", "completion": "So what inputs do we control for sudo\u00a0 that might influence allocation sizes? Generally we don\u2019t have many choices. There are\u00a0 only so many possible \u201cinputs\u201d into a program. Typical ones are std input, opening and reading\u00a0 files, but also command line arguments themselves or environment variables. And for sudo\u00a0 basically only the latter two make sense. So we can \u201csimply\u201d write a script that\u00a0 tries different inputs and logs all input cases where we find our buffer before\u00a0 the function pointers. Sounds simple."}
{"prompt": "What length ranges did the programmer define for different arguments in the script?", "completion": "But it\u2019s not that simple. I\u2019m not a professional\u00a0 programmer. But I\u2019m also not a beginner in programming. But developing such a tool can be\u00a0 quite tricky. And reality is that you enter now a very time intensive loop of iterating over your\u00a0 code. You write code, then you run into bugs and you always have to verify and test if it does what\u00a0 you hope it does. So I want to save you some time so I\u2019m just going to summarize the 8h of building\u00a0 the first \u201cworking\u201d revision of this script. Anyway, here was my script after 8h. I\u00a0 defined a few different length ranges for different arguments. This already is not a trivial\u00a0 decision. For example we could use a full random value between a number range. But after a lot of\u00a0 trial and error and thinking about probabilities."}
{"prompt": "How can you generate different configurations of random arguments and environment variables?", "completion": "It\u2019s very unlikely to get special cases like\u00a0 length 0 or 1, or maxInteger. So in the end I used these biased random values. The number can be\u00a0 anything from 0 to 255, and then we have power of twos including a small offset version of the power\u00a0 of twos. Those should be more interesting length values. Also I haven\u2019t verified or know if command\u00a0 line arguments for sudo influence the heap, but to be sure, I just hardcoded some of\u00a0 the existing flags I got from the sudo help. In the main loop I then generate different\u00a0 configurations of random arguments and random environment variables. Which environment\u00a0 variables you ask? I decided to use one typical existing one, and one made up. At this\u00a0 point I didn\u2019t know if that actually helps us."}
{"prompt": "What is the purpose of using stdbuf with -o0 as a wrapper when calling sudoedit?", "completion": "This is definitely an area where we could\u00a0 do more research to identify environment variables that actually influence the heap. Anyway. Once we have generated random inputs, we can then call run_sudoedit. This function is \u201csimple\u201d it executes sudoedit with the arguments and\u00a0 environment variables and then tries to read the heap information from the output. Also see this here? I\u2019m not directly calling sudoedit, but I call stdbuf with\u00a0 -o0 as a wrapper instead. Wonder why? But when I started running the script,\u00a0 when the code read the output of sudoedit,"}
{"prompt": "How can I disable output buffering when running a script with python subprocess?", "completion": "I often times never saw the heap address\u00a0 information. It was just gone. But testing the same inputs on the terminal by hand\u00a0 worked, it shows it. Even when we crash. I quickly had the thought that output buffering\u00a0 could be the issue. Sudoedit might buffer the printf outputs, and then comes the malloc\u00a0 crash abort, which throws away the buffers. In that case we might never see the output. So I\u00a0 somehow had to disable the buffering, but there was no way that worked with python subprocess.\u00a0 But eventually I found a solution wrapping the execution in stdbuf, which can disable buffering\u00a0 of the std output. now I was ready to find the perfect heap layout and I ran the new script."}
{"prompt": "What techniques did LiveOverflow use to try and make a buffer overflow work when the function pointers were too far away from the buffer?", "completion": "And yeah! I did start to find a few cases where our buffer is placed before any of those function\u00a0 pointers, and we crash the binary too. But unfortunately the function buffers are very far\u00a0 away from our buffer. Over 10000 bytes. I still tried to make it work. Maybe you can overflow\u00a0 other buffers with carefully chosen values so sudo doesn\u2019t crash until we reach the critical function\u00a0 pointer calls. I spent hours in gdb, and debugged it. Basically run the script overflow, look where\u00a0 it crashes, try to manipulate the exact place in the overflow and change the values to\u00a0 something that doesn\u2019t crash. And repeat."}
{"prompt": "What type of vulnerability was found in the web app?", "completion": "\u201cScreenshotter is a novel web app to\u00a0 quickly take notes and screenshots. To make screenshots, simply enter the URL of a\u00a0 website and the app will store a screenshot of it. The site is currently in beta, so\u00a0 only cscg.de screenshots are allowed.\u201d This is a web hacking CTF challenge that I\u00a0 created for the Cyber Security Challenge Germany. And for all those people who scoff at\u00a0 CTF challenges for being unrealistic, well this is a completely realistic challenge.\u00a0 I found this vulnerability in a web app at work,"}
{"prompt": "What command should be used to start the provided files?", "completion": "which felt like a CTF challenge, so I got inspired\u00a0 to create a challenge with the same vulnerability. Of course I adapted it for the CTF, but believe\u00a0 me, the steps for discovery and exploitation are very close to what I found in real life. So if you want to try it yourself, you can find the files on GitHub. I think this\u00a0 challenge can be a really good exercise for doing real-world security audits of webapps. So\u00a0 why not give it a try and practice with it? When you look at the provided files, you can see\u00a0 it\u2019s based on docker-compose, so if you have that installed, you can just type \u201cdocker-compose up\u201d\u00a0 and wait for the containers to build, and then it should be available on localhost port 5000."}
{"prompt": "How can users interact with the screenshot service?", "completion": "And yes, all of these files are part of the challenge, so we can read any code and really dig\u00a0 deep into the app to find the vulnerabilities. Of course the DO_NOT_ACCESS\u00a0 folder contains the solution. So that is not part of the challenge.. So now\u00a0 you have a few more seconds to pause the video, otherwise I will go ahead and tell\u00a0 you how to approach and solve this. Like with every challenge, the first\u00a0 step should be to get an overview of the functionality. Apparently you can login\u00a0 or register, and this is a demo version which can only create screenshots of http://cscg.de."}
{"prompt": "What is the base64 value that can be decoded to an IP address?", "completion": "There is also this activity tab showing you what\u2019s going on on the app. And this is here to show you,\u00a0 that there is a user flagger which added a note, and requested a screenshot via a worker\u00a0 service chrome, and we see the screenshot also got successfully processed. This base64 value\u00a0 is obviously interesting, and this can be decoded to an IP address. Sometimes base64 values are\u00a0 stripped of the paddings, and then it doesn\u2019t decode nicely, so adding some equal signs here at\u00a0 the end makes the output correct. So no clue yet what this is for, but we obviously remember it."}
{"prompt": "How is a screenshot requested in the web app?", "completion": "Now let\u2019s try to register and login with a user. Here simply a test user. And now we can add\u00a0 a note! But the special feature is obviously screenshots, so let\u2019s try to add one by using\u00a0 the test URL. http://cscg.de. It\u2019s processing now and when we wait a moment, we should\u00a0 get a screenshot of the website. Awesome! If we now look at the\u00a0 activity log, we can see that now we also appear here. Test user added a note.\u00a0 And test user requested a screenshot. Cool. Pretty basic web app, not much functionality.\u00a0 But where is the flag? We will see that soon."}
{"prompt": "What does the depends_on field do in the docker-compose file?", "completion": "Let\u2019s head into the source code of the app. The\u00a0 docker-compose file is always great to start with. Because it describes the high-level architecture\u00a0 or setup of this web application. And here we have three services. We have a chrome service,\u00a0 a screenshotter service and an admin service. Each of these services are built from dockerfiles\u00a0 contained in the respective folders. Screenshotter appears to be the main app, it\u2019s the one exposed\u00a0 to port 5000. The other services have no ports exposed. Depends_on is a field that ensures\u00a0 that docker-compose first setup chrome service,"}
{"prompt": "What port is enabled by the chrome service in the web app?", "completion": "THEN the web app, and at the end the admin.\u00a0 So let\u2019s look at the services in this order. First the chrome service. The chrome service is\u00a0 a simple docker file. It basically only installs chrome browser stable version, and then starts\u00a0 chrome in headless mode. So no actual browser window is opened. Also you can see here that\u00a0 it enables the remote debugging port of chrome 9222. But this port is not actually\u00a0 exposed, so we cannot connect to it. Ok so this simply started chrome in\u00a0 headless mode with remote debugging enabled."}
{"prompt": "What database is used in the app?", "completion": "Now let\u2019s checkout the main app. It\u2019s written in\u00a0 python and more specifically the flask framework. Before running the flask\u00a0 server it executes init.py. And here it seems to just initialize the sqlite\u00a0 database. It creates a database with commands from schema.sql. Checking that we can see that we\u00a0 have user table, a notes table and a logs table. And after setting up the SQLite database\u00a0 it will also create a random secret. No clue yet what this is used for. Next we have the main app and right at the top we see that it tries to\u00a0 find the IP address of the \u201cchrome\u201d service."}
{"prompt": "What is the default IP range for docker containers?", "completion": "If we cannot get the IP dynamically,\u00a0 it will fallback to localhost. This IP will then be used in the screenshot\u00a0 function to connect to the chrome debug port 9222. And in this other place, it is base64 encoded\u00a0 and added to the public log, so the activity log, with the text \u201cusername requested a screenshot\u00a0 via worker chrome\u201d, and the IP address. So cool! This means with this output we can get the\u00a0 IP address of the internal chrome service. Now just to give a bit of context, this\u00a0 IP exposure was not part of the real app this was inspired from. I know from\u00a0 my experience with docker, that there are default IP ranges for docker containers.\u00a0 Usually starting with 172..., so I don\u2019t need an IP disclosure to know what a docker service\u00a0 internal IP could be, but I thought I could make the challenge a bit easier, by adding this\u00a0 basic IP exposure to make it a bit less guessy."}
{"prompt": "What is the function used to create a signature of some data?", "completion": "Also because I was not sure how the\u00a0 challenge was going to be hosted, I wanted to make sure that there is an easy way\u00a0 to find the internal IP of the chrome worker, in case it would not be the default docker\u00a0 IP range. And it turns out on my windows PC here the IP is not the expected 172. IP.\u00a0 So I guess it was good that I added this. If this were not here, you would have to take\u00a0 educated guesses or scan the IPs if possible. Anyway. Just after we get the Chrome IP, we also\u00a0 get the secret! And this secret is used in an hmac function to create a signature of some\u00a0 data. And this signature function is called in before request, which acts as a \u201csession\u00a0 middleware.\u201d. It checks if we have a valid session in the cookie. So if we are logged in or\u00a0 not. Feel free to read this code more closely to better understand it, but it should all be safe.\u00a0 I just implemented some basic user authentication that is good enough for this challenge. So\u00a0 spoiler alert: this should not be important."}
{"prompt": "What API call is used to create a note in the screenshot service?", "completion": "But how do we approach this now. It\u2019s not a\u00a0 huge web app, but it\u2019s also not really short. Still quite a bit of code. Actually when hunting\u00a0 for bugs in web applications, I like to go for the unique interesting functionality. You know\u00a0 every app has to implement user authentication, and stuff like creating notes, that\u2019s all boring.\u00a0 But this app is interesting because it can create screenshots. And I like to go after these kind\u00a0 of weird features, because this is where often the really fun vulnerabilities hide. So let\u2019s\u00a0 checkout the API call that creates a note."}
{"prompt": "What is the thread called that takes the note_id and URL and is used to create the placeholder note?", "completion": "We can easily find that by looking at\u00a0 burp or the browser developer tools when we submit the cscg.de URL to request\u00a0 a screenshot. So we simply call add_note, and the body contains the URL. Ok so here is\u00a0 the route handler for add_note in python. here we get the request body and right after you can\u00a0 see a check if the requested URL is a cscg.de. If not we just add a regular note\u00a0 by inserting it into the database. But if we have a cscg.de URL, we\u00a0 are starting a new screenshot task. This will be executed in parallel in a thread. So\u00a0 let\u2019s look at this thread. This screenshot_task thread takes the new note_id. this was generated\u00a0 at the start of the function, and is also used to create this placeholder note, \u201cprocessing\u00a0 screenshot\u201d. So we are just passing the note_id as a reference to the placeholder note. And we\u00a0 also pass in the body, so the URL that we are requesting. Inside this thread we are now calling\u00a0 the async function screenshot. And this function now connects to the chrome service!"}
{"prompt": "What is the port number used by pyppeteer to control Chrome?", "completion": "It is using pyppeteer for that. \u201cUnofficial Python port of puppeteer\u00a0 [which is a] JavaScript (headless) chrome browser automation library.\u201d. So\u00a0 this is just a python library to automate and control chrome. And it controls\u00a0 chrome via the chrome debug port 9222. And I think this code is pretty self explanatory.\u00a0 We first create a new incognito browser window. Then we create a new page. We navigate to\u00a0 that URL. We sleep for 10 seconds to wait for the page to be fully loaded, we extract\u00a0 the title, and we also create a screenshot!."}
{"prompt": "How does the admin service work?", "completion": "And then we close the browser window again. This image is then stored in the database, by updating the note we created\u00a0 before as a placeholder. So far it looks pretty solid, right? Where is\u00a0 the vulnerability now? Maybe you already noticed a first issue. But first let\u2019s checkout\u00a0 to the third service. The admin service. And here we can also find the flag.txt\u00a0 file. So the admin has the flag. The dockerfile starts similarly to the\u00a0 chrome service, it also installs chrome, but then doesn\u2019t start a headless\u00a0 browser. It simply executes admin.py."}
{"prompt": "What is the purpose of the endless loop in the main code of the screenshotter app?", "completion": "This script opens the flag and then wants\u00a0 the IP of the main webapp and creates a flagger password. A random value. The main code then starts in main. Where we execute an endless loop. So here\u00a0 we also use pypeteer, but this time we do not connect to a remote chrome service, but just\u00a0 access the locally installed chrome. We create a new browser and are now simulating a user. So this admin service is just simulating another user using the screenshotter app. A user\u00a0 who has the flag. So what does this user do?"}
{"prompt": "How long does the user wait for before entering the login credentials of the flagger account?", "completion": "The user opens a new page and\u00a0 navigates to the screenshotter site. It then waits for 2 seconds and then enters\u00a0 the login credentials of the flagger account, using the random and secure flagger password.\u00a0 So we probably cannot bruteforce that. After the login it will then add the flag note!\u00a0 This admin user creates a note with the flag! And after that it also requests a screenshot\u00a0 from cscg.de. So now we know the goal. We need to get access to the notes of the flagger user! After waiting for a bit. Sleeping for 10 seconds and reloading the page, it will eventually\u00a0 lookup all notes and then delete the notes that were created. After that the page is closed,\u00a0 and the next user simulation loop starts."}
{"prompt": "What type of attack is required to solve the challenge?", "completion": "cool! To summarize, this is a simulated user,\u00a0 who owns the flag, which means we need to somehow attack this user. And given that this user is\u00a0 using an actual browser to perform actions is a big hint that the attack has to be browser-client\u00a0 based. So we need something like a XSS or CSRF. Btw, if you are now inspired by this challenge\u00a0 to find the vulnerabilities yourself, now is your last change to pause. Because next I\u00a0 will tell you about all the puzzle pieces. 3.2.1. So we just learned from reading\u00a0 the code what the target user does,"}
{"prompt": "What template engine is the web app using?", "completion": "and that we need some kind of client-side\u00a0 attack to leak the notes of flagger. Those notes contain the flag. So how can\u00a0 we do that? Well an XSS is probably the most typical and most powerful way to leak\u00a0 information. So let\u2019s try to find a XSS. Feel free to try to find it yourself,\u00a0 because I will just show you where it is. This web app is using flask templates. I think\u00a0 it\u2019s using jinja2 templates under the hood. And generally they are secure. When you use\u00a0 curly braces to output user controlled data,"}
{"prompt": "What type of encoding is used to make the HTML safe?", "completion": "it is properly HTML encoded and safe. But\u00a0 there is one exception. And it is here. When you have a note that is an image, so a\u00a0 screenshot, then the alt text of the image is set to the title. But it\u2019s missing the quotes. And\u00a0 template engines like this are not context aware. The encoding doesn\u2019t know if this is\u00a0 just an HTML context or an attribute. But the encoding is generally safe, just not in\u00a0 this particular context. Because if an attribute is missing quotes, there are no special characters\u00a0 needed to get a XSS here. If the screenshot title contains a space, we can break out of the alt\u00a0 attribute. We can add additional attributes."}
{"prompt": "How can XSS be used to influence the title of a webpage requested as screenshots?", "completion": "For example \u201conload\u201d, which is executed\u00a0 once the image is loaded. Boom XSS! Okay, so this is a XSS you can easily\u00a0 find by basic static code review, if you have the experience about the typical\u00a0 pitfalls of template engines like this. If you didn\u2019t know that, now you now. Okay the XSS is great, but once you think about how it could be used, you realize it\u00a0 seems useless. You need to be able to control the title of a website requested\u00a0 as screenshots. And the flagger user is requesting cscg.de. So how would you influence\u00a0 the title of that page. It seems impossible to XSS the flagger user this way."}
{"prompt": "How can we bypass the domain check when using the screenshot service?", "completion": "But who knows. This is just one puzzle piece that we can put into our pockets. And\u00a0 maybe it can become useful later. Let\u2019s see. Now we cannot attack the flagger user, but could\u00a0 we just as a proof of concept attack ourselves? A self-xss? Well\u2026 if we could make screenshots of\u00a0 arbitrary websites, then we could just create a website with a malicious title. And here is\u00a0 another puzzle piece you might have noticed earlier. The check for the allowed URLs is\u00a0 done with .startswith. This means we can fully bypass the domain check. We could just use\u00a0 our own domain and use it as a subdomain. So for example http://cscg.de.liveoverflow.com. This URL\u00a0 would be allowed! But there is one more trick,"}
{"prompt": "What is the purpose of using ngrok in the challenge?", "completion": "actually you don\u2019t need your own domain,\u00a0 you can also use @. @ separates the URL into a username part and the actual domain. So\u00a0 http://cscg.de@liveoverflow.com would simply point to liveoverflow.com, and cscg.de would be\u00a0 a username that is just ignored. Let\u2019s try it! Submit the test URL, and requesting\u00a0 screenshot - It seems to work! Let\u2019s give this a moment. And here we go! We\u00a0 got a screenshot from liveoverflow.com. Okay with this bypass we can now test the XSS. To do that I first create a test HTML page with the XSS payload in the title, then I start a\u00a0 local test server using python, which will listen on port 8000. But locally accessible doesn\u2019t help\u00a0 us. The chrome service needs to reach it. So then I\u2019m using ngrok to get a public domain that is\u00a0 tunneled to my local test server. So by requesting cscg.de and the ngrok tunnel URL, I can make the\u00a0 chrome service request my test index.html page."}
{"prompt": "What kind of vulnerability is being used to make screenshots of an internal service?", "completion": "And of course processing the screenshot takes\u00a0 a moment, but BOOM! Here we go. We got a XSS. But unfortunately we still don\u2019t know how\u00a0 we could XSS the flagger user with that, because right now it\u2019s just a self-xss. But let\u2019s\u00a0 see. More puzzle pieces. More is always better. So what else could we do with\u00a0 the domain bypass. Any ideas? Well\u2026 now we have a pretty much unrestricted\u00a0 SSRF (server-side request forgery) to request screenshots from arbitrary websites. Is\u00a0 there any internal service we could try to make screenshots of? Maybe the chrome\u00a0 service? Let\u2019s try it and see what happens."}
{"prompt": "What port does the chrome devtools protocol use?", "completion": "We just have to take the exposed chrome IP\u00a0 and the port 9222. Let\u2019s submit and wait\u2026 as always takes a moment. And here we go. We\u00a0 got a screenshot. \u201cInspectable WebContents\u201d! Mh\u2026 So this is maybe where a bit of research has\u00a0 to start. Probably many of you don\u2019t know the chrome devtools protocol but you can find a lot\u00a0 of resources about it online. Or you can also play with it yourself. To do that you could change the\u00a0 docker-compose file to expose this port, and then restart the whole service, now you have direct\u00a0 test access to it in the browser for testing."}
{"prompt": "What is the URL used in the video for accessing the API endpoint?", "completion": "So here it is. Port 9222. Inspectable WEbContents.\u00a0 And it takes a moment but then shows about:blank. And in the devtools we can see that it\u00a0 accesses an API endpoint json/list. Here it is. Title about:blank. And a websocket debug URL\u00a0 for it. As well as a devtools frontend url. And when you refresh it a few times, for example\u00a0 when you request a screenshot, or when flagger requests a screenshot, another entry appears.\u00a0 Here is suddenly a page requesting cscg.de! So you can use the domain check bypass,\u00a0 to request a screenshot of this json data,"}
{"prompt": "What is the field name used in the websocket debugger URL to inspect the pages open in the Chrome service?", "completion": "and it will leak some information about what\u00a0 pages the chrome service currently has open. Let\u2019s do another test. We can wait for flagger\u00a0 to request a screenshot of cscg.de and once we see the message in the activity log, we can\u00a0 quickly submit our URL to the list of pages. We wait for the screenshot, and here it\u00a0 is. Here is the page where we requested the list of pages and here we have\u00a0 flagger requesting the cscg.de. But what exactly could we do with the\u00a0 webSocketDebuggerURL? This requires a bit of research, but if you for example google that field\u00a0 name, you might find references to puppeteer."}
{"prompt": "How can we use the chrome debugger list to attack the screenshot service?", "completion": "And we learned earlier that puppeteer is a\u00a0 library to automate and control chrome. So could we maybe use this debugger URL to control\u00a0 chrome? Like we also did in python with pypeteer? That is exactly what we can do. This protocol\u00a0 is used by for example the chrome devtools, so with this you can do EVERYTHING the\u00a0 chrome devtools can do. Including for example redirecting the page to a different site. A\u00a0 site maybe with a XSS payload in the title. So here is a rough attack idea. We could request\u00a0 a screenshot from the chrome debugger list,"}
{"prompt": "What is the issue with using the debug protocol to redirect the page away from cscg.de to a site with a XSS payload?", "completion": "to get the secret debug URL of the page flagger\u00a0 is requesting. We can then probably use this debug protocol, to redirect the page away from\u00a0 cscg.de to a site with a XSS payload. When the screenshot is done processing, the XSS payload\u00a0 will be placed into the list of notes for flagger, and when flagger then looks at the notes, it will\u00a0 be executed. And this XSS payload then just has to steal the private notes. This sounds like\u00a0 a really good plan. Except there is one issue. If flagger requests a screenshot, and then we\u00a0 request a screenshot of the debug list, the chrome service will load the list fine. But it will wait\u00a0 10 seconds before actually taking the screenshot."}
{"prompt": "What is the method used to exploit the web hacking challenge for the Cyber Security Challenge Germany (cscg) 2021?", "completion": "So after 10 seconds, the service takes a\u00a0 screenshot of cscg.de, and then it will take a screnshot of the page list. Now we have the secret\u00a0 debug URL, BUT also the service is done processing it and this page doesn\u2019t exist anymore. So is\u00a0 this useless? we cannot do anything with that? Well, now you need a bit of creativity. Can you\u00a0 think of a way to still make this attack work? There is a small trick. And it actually took me\u00a0 a bit to come up with this myself. So pause if you want to think about this. Otherwise, I\u00a0 will share how my exploit works. 3.2.1. Ok First we get the CHROME_IP from the activity log.\u00a0 And then we wait until flagger deleted a note."}
{"prompt": "What technique is used to get the right timing for the screenshot to be taken?", "completion": "This is needed to get the right\u00a0 timing. This message means, soon flagger will request a screenshot.\u00a0 And here is the trick. We are timing our screenshot now to be started BEFORE flagger\u00a0 requests cscg.de. But we are not requesting the page list. We request this index.html\u00a0 site. And this site simply has a timeout, so it\u2019s waiting for 7 seconds, and THEN redirects\u00a0 to the endpoint leaking the debugger URLs. So we request our screenshot, the index.html\u00a0 is loaded. Flagger requests cscg.de. After 7 seconds we redirect to the debugger port\u00a0 list, and after 10 seconds the service takes a screenshot of it. AND THIS WILL now contain\u00a0 the flagger cscg.de debug URL. But thanks to our precise timing, the chrome service still\u00a0 hasn\u2019t completed the screenshot for cscg.de yet."}
{"prompt": "What technology is used in the video to extract the secret debug URL from the image?", "completion": "Now we need to be fast! very quickly we need to\u00a0 get the debug URL. And I\u2019m using OCR for this, specifically tessarect. This can extract text, or\u00a0 the URL from the image. And once we got the secret debug URL, we can now launch our actual attack.\u00a0 We request another screenshot with our attack.html page. And this now creates a new websocket\u00a0 connection to the debug URL and executes a Page.navigate. So we force the browser to navigate\u00a0 to this XSS page. Now this page does not show cscg.de anymore. Which means after the 10 seconds\u00a0 are over for the flagger screenshot request, the screenshot is created of the xss.html page and we\u00a0 successfully got a XSS into the notes of flagger."}
{"prompt": "What attack was the challenge based on that the creator found on a real web app?", "completion": "This XSS payload is simple. It just takes the\u00a0 whole document.body text, so the complete text of the website, and sends it with a GET request\u00a0 to a webserver of mine. Leaking the flag! That\u2019s it. This was the challenge screenshotter. Let me know what you think. I really like\u00a0 this challenge, because it is based on an attack I found on a real web app. There is\u00a0 no guessing, it\u2019s not blackbox, you have the complete code available, so I think it\u2019s a great\u00a0 challenge to practice doing security audits."}
{"prompt": "What are some examples of hardware tokens used for two factor authentication?", "completion": "I guess you know what two factor authentication is. And there exist hardware tokens for example yubikeys or even your google authenticator on your phone that can generate some code that you have to enter as additional proof when you want to get access to something. In this video we will break a bad two factor implementation and learn something about randomness. This example is a special challenge from the riscure embedded hardware ctf. It actually has 400 points. That\u2019s an insane amount of points looking at the other challenges that I struggled with."}
{"prompt": "What is the issue with the first version of the company's 2fa token?", "completion": "But I still solved. How? I solved the challenge in an unintended way, which coincidentally teaches you something about randomness. So let\u2019s head in. Twistword. A company is developing a new hardware 2fa token for their employees as existing solutions are too expensive. The development team got many complaints about the slowness of the first version and sometimes it was not even working. Most likely this is due to resource constraints of the used board. You managed to get one of the first boards with a new version of the system that was given to a few users to test if it is an improvement or not."}
{"prompt": "What message does the board display when you connect to it?", "completion": "However, is it also secure? Let\u2019s have a look at how this looks like on the board. When you connect to it says: Twisted Inc. Scure Token auth 2.0 Debug build. Again a message that they changed the algorithm. Presumably made it now smaller and maybe more insecure. And then they ask for your 2 factor authentication token. Now would be the moment you take your actual hardware token, generate the key and hand it in. If it matches the one the board calculated, you get in. But when you enter an incorrect one it will tell you what token was expected."}
{"prompt": "What is the purpose of a pseudorandom number generator (PRNG)?", "completion": "That will be very helpful. So\u2026 what can we do. Well, one of the first things that comes to mind is mersenne twister. Because of the title twistword. The Mersenne Twister is a pseudorandom number generator (PRNG). This means you give it some kind of seed, and then it will scramble, flip, twist around the bits, if you so wish, in order to create new random states. Pseudo random because it\u2019s not truly random, the same seed will produce the same values, but it\u2019s random enough for a lot of applications."}
{"prompt": "What is the size of the state vector of MT19937?", "completion": "And actually with 2 factor tokens you want pseudo random generators, because the token generator as well as the service you want to access has to generate the same value so it can be compared, right? Also when you scroll a bit further down you can read that: The algorithm in its native form is not cryptographically secure. The reason is that observing a sufficient number of iterations (624 in the case of MT19937, since this is the size of the state vector from which future iterations are produced)"}
{"prompt": "How can computers generate random numbers?", "completion": "allows one to predict all future iterations. So this mersenne twister can be implemented with different values and parameters and MT19937 defines one such implementation. I assumed that for this challenge they used their own parameters and you have to research how this attack works, how you can recover the state with enough samples. Another idea I had was, that randomness is really difficult to do for computers. They are deterministic machines that just execute instructions, there is nothing random about them."}
{"prompt": "What is an ADC and what is its purpose in relation to an Arduino?", "completion": "So what you can do is you can try to collect entropy from different sources. On PCs you often see that they tell you to move your mouse a lot, because that movement is hard to predict. But what to do on an arduino? I assumed one of the most likely ways would be to read an analog value from some of the pins. You reading a digital state would be a 0 or 1, but the arduino can also read analog values from some pins, well it uses an ADC, analog to digital converter to convert the voltage at one pin to a digital number."}
{"prompt": "What is a possible attack to defeat random numbers generated by a two-factor authentication token?", "completion": "And if the pins are not connected it could pick up interference from background radio noise or something and that is pretty random. So maybe you just have to pull all pins to ground, so make them 0. This way the initial random seed would always or often be the same. I thought that\u2019s a cool attack, but I felt like for 400 points, it would actually be harder than that. So I assumed it\u2019s about cracking the math of it. In order to do this I first wanted to start with capturing a lot of tokens that I can later work with."}
{"prompt": "What method did the speaker use to collect data for the challenge?", "completion": "The board is so nice to respond with the expected token. So I wrote two scripts. One would connect via serial and then just enter a wrong string and collect all the expected tokens and the second script I wrote would always reset the serial connection, which resets the board and should newly initialise the PRNG. I figured that maybe I can learn something interesting about the initial states. And this data collection takes a while. Especially the method with resetting the serial is very slow. So I let the data collection run over night."}
{"prompt": "What could be the possible cause of duplicate values in the data?", "completion": "The next morning I did a first quick check of the data. I didn\u2019t expect much because I was sure the real work now just started. Having to research how to recover the initial state and the data just helps testing. So I was casually looking over it if I notice anything. And WTF! One of the files contained a dublicate value. This cannot be the case. These numbers are so big that a duplicate is highly unlikely. In fact there were a couple of duplicates. Something is fishy. If this is about calculating the state of the PRNG and predicting the next value, this wouldn\u2019t happen."}
{"prompt": "What is the process for defeating a two factor authentication token due to bad randomness?", "completion": "So\u2026 I went easy way. I modified my script to now just send this one duplicate value all the time. Also a PRNG, like I said earlier, starts with a seed and then all following values are predictable, if you know the implementation and parameters. This means when we got a duplicate value the next expected token should have been also the same. So if I had saved the first two expected tokens after a board reset, and I had encountered the same first token a second time, I could have used the previous expected second token and win."}
{"prompt": "How can you interact with the board to read what text it sends?", "completion": "So let\u2019s write script for that and let it run overnight and i\u2019m sure I get another duplicate. This is the script I wrote. These functions, you know them already just help me to interact with the board, to read what text it sends me. The most important variable here is the list of tokens I encountered before. And at the beginning it\u2019s empty. I also will write every token pair that I see to a file, so that when I interrupt the script I can simply reload previous tokens I collected to not loose any data."}
{"prompt": "What is the process for solving the challenge?", "completion": "And that\u2019s what I do here. So I have rerun this a couple of times. It just adds the pairs I found before to the tokens list. Anyway. In an endless loop I then create a fresh connection with the board. Then I wait until I get the text that I have to press Enter. Then I read until it wants me to enter a Token and send one of the duplicates I got earlier. Maybe I get lucky, but most of the times I won\u2019t, so then I read the token that was expected. Now I extract that token and check in my tokens list, if I encountered that token before."}
{"prompt": "How long did it take for the author's script to find a duplicate token?", "completion": "If I did, I know what the next token will be. If it\u2019s new I will just enter an empty token and get the next expected token, which I also extract and save it together with the first token in the tokens list. And down here I have some nice fancy debug output. So theoretically this should just work. It will just take a while. In my case I think it ran for 3 hours or so, and then it found a duplicate. So my script sent the token it would expect afterwards and surprise suprise it\u2019s the correct token and we get the flag."}
{"prompt": "How did Andres Moreno explain the challenge solution?", "completion": "Now that was way easier than I thought. It was also not the intended solution. But it really highlights how hard it is to properly initialise the PRNG with a truly random seed in this small arduino. I don\u2019t know how they tried to get a this good random seed value, but it clearly didn\u2019t work. Randomness is not trivial for computers. Lessons learned. By the way there was another small annoyance with this challenge. So when I found my first duplicate it didn\u2019t work. I saw that I predicted the correct value,"}
{"prompt": "What are the two stages of communication when interacting with the 2FA token?", "completion": "because the second expected token was the same, but it didn\u2019t work. And it was an issue with the line endings. Let me explain what happened. It basically comes down to not being really user friendly and flexible regarding input. But basically it expected 32 bytes of input followed by some kind of terminator. Like when you press enter. Typically that could be a newline, or a carriage return or even a newline or carriage return. So in this case it only expected a carriage return. There are basically two stages when communicating."}
{"prompt": "What did the application do when the buffer was filled with a carriage return and a newline?", "completion": "The buffer and the data that is actually handled. So at first I sent a carriage return and a newline. So the buffer was filled with this data and then the application read 32 bytes for the token and the carriage return. And that meant it was done. Now it asked for the second token. Now the newline was still in this buffer, it was never read by the application. So now I supplied the second token, which got written into the buffer, and when the application then read 32 bytes, the first byte was a newline."}
{"prompt": "What are the two components of the game engine used in the Minetest Hardware Challenge?", "completion": "The Google Hacking CTF 2019 Qualifier had a Hardware category. And there is one challenge that caught my eye. minetest. Which is based on the game engine with the same name. Minetest. An open source minecraft clone. I thought that sounds like fun! I've stumbled upon this weird minetest map, can you make sense out of it? Minetest + mesecons required Mintest is the main open source voxel game engine, and Mesecons is a mod which adds advanced digital circuitry like logic gates and programmable blocks."}
{"prompt": "What folder in the challenge files contains the map, world, and other related files?", "completion": "Because this challenge is in the hardware category, it totally makes sense that this is about digital circuitry and logic gates. Setting the game up is super simple, just follow the instructions. When we download the challenge files we can find a folder called real which contains various files like a map.sqlite a world.mt and other stuff. So how can we load this into the game? First I was looking through the folders of the file to see if something looks similar, to know where to place it. I copied it into the mods folders and some others, but nothing seemed to work."}
{"prompt": "What shortcuts are available in Minetest for faster movement, flying, and noclip?", "completion": "Then I had the idea to create a new world testgame in mintest, and looked at the logs. This showed me that there is now a folder called worlds, which seems like a good place. The challenge file is probably a world. So copy it over and restart the game, and there it is! We can load into the game. Awesomes spawn, we first just faaaaaalll down. But like with minecraft, I assumed there must be features in creative mode to fly and teleport around. And in the keybindings I was able to find shortcuts for flying, noclip and even faster movement."}
{"prompt": "How can a participant use the teleport command to gain access to the circuit challenge?", "completion": "And from the mintest wiki I learned about the console and the teleport command. Awesome, now we can teleport back to the start and use flying. This is a recording from DURING the ctf. This was literally the first time I saw it. I just kept flying up\u2026 and was a bit shocked. I immediately made a screenshot and send it to my teammates.. This is one of the reactions. Oh no\u2026 What? \u2026 The circuit that you have to reverse. FUCK! So I just kept flying around a bit, trying to see how big the circuit is and WHAT exactly the challenge is."}
{"prompt": "What logic gates are used in the Minetest Hardware Challenge?", "completion": "After flying for a minute or so I found the first logic gates. And a few minutes later, I reached the end. Here you can see the gates better. So this should be an AND gate, this should be an OR gate, and this is an inverter. And here is the final output. So the challenge goal is clear. If you have watched my pwn adventure series, then you know already the Blocky\u2019s revenge challenge. It\u2019s basically the same. We have levers as inputs and at the end we have a single output. We just have to find the correct input that leads to a 1 at the output."}
{"prompt": "What SAT solver is mentioned in the video transcript as a tool to solve the Minetest Hardware Challenge?", "completion": "So minetest is basically Blocky\u2019s Revenge Revenge. But there is one difference. In pwn adventure the circuit was fairly small and could be reverse by hands in a matter of a few hours. As have teams done during the original pwn adventure ctf. However this mintest challenge is insane. No chance to do this by hand. But this also makes the challenge straight forward and we basically know exactly what we have to do. First we have to somehow extract the circuit, for example from the world map files. And then we have to solve it, for example with a SAT solver like z3."}
{"prompt": "What is the official documentation for the Minetest World Format?", "completion": "But just because the challenge direction is clear, it doesn\u2019t mean the path is without obstructions. So. task 1. Parsing the world file. Because this is open source, we should find plenty of resources about this. For example I was sure people made map generators, like people would make minecraft maps. To draw a map you have to somehow parse the world file. So I was basically googling for a bit for mapping projects, details about parsing and eventually we found the official \u201cMintest World Format\u201d documentation."}
{"prompt": "What is the MapBlock serialization format used to encode the binary blob in the map.sqlite file?", "completion": "And it seemed easy. There is a map.sqlite file. Minetest maps consist of MapBlocks, chunks of 16x16x16 nodes. map.sqlite is an sqlite3 database, containing a single table, called \"blocks\". It looks like this: So this table simply contains position as a single integer and a data binary blob. The documentation also gives us example code on how to turn x,y,z coordinates into the single integer position, and vice versa. And then we have the binary blob. Which is described in the MapBlock serialization format."}
{"prompt": "What Python library is used to visualize the map parsing process?", "completion": "I figrued somebody must have already written parsers for this to extract the map, so I spent quite some time looking for various github projects and scripts that deal with this file. And I found various things that have helped me to write my code, but nothing really worked for me right away, mostly because we have non-standard blocks from the mesecons mod. But eventually I got some first script parsing the data running. I thought it would be a good idea to visualize the map parsing, in order to verify that it works."}
{"prompt": "What Python library was used to draw pixels for the blocks being parsed?", "completion": "So I used Pillow, the python image library, to draw pixels for the blocks I\u2019m parsing. Here it is! I did this based on some metadata information, basically some strings, in each binary block that told me that there was mesecons related stuff in there. Because mesecons is the mod that implements the logic gates, I figured if I color every block that contains mesecons stuff, I should get an image of the whole circuit. I still wouldn\u2019t know what component it is, like a connection or a gate, but I should get a shadow image of the circuit."}
{"prompt": "What is the issue that the speaker noticed while drawing the circuit?", "completion": "Good enough for a first test. Doesn\u2019t this look already awesome. You can really see the circuit emerging\u2026. I could even see that some blocks contain gates, so I even played with different coloring. And I thought I finish it soon\u2026. But at some point I noticed some weird things\u2026 it bothered me\u2026 and that was\u2026. Shouldn\u2019t be the input levers be in it\u2019s on row? Like they start here and then blocks further it starts? But when I draw it, the first layer here is just one long connected line? This really blocked me for a bit."}
{"prompt": "What is the size of a MapBlock in Minetest?", "completion": "Pun intended. And I wonder if you realize my mistake\u2026 The crucial line in the documentation is: Minetest maps consist of MapBlocks, chunks of 16x16x16 nodes. OHHHHHHHHHH crap\u2026 a block is a chunk. And a node is an actual block\u2026 what I thought I was parsing were single blocks. But in fact I was dealing with 16x16 chunks. So inside this chunks I have 16x16 blocks to deal with\u2026. So once I realized that I had to extend my parser and once I figured out how the format exactly works, I was able to draw each individual block\u2026 Here you can see my first attempts\u2026 now the map is also waaaay larger."}
{"prompt": "What format did the author choose to store the parsed data in?", "completion": "And you can see the individual input lever blocks\u2026 This has cost me hours\u2026 but in the end it looks really cool. I didn\u2019t fully have to render it because I knew my parsing was working so I could move onto solving it now. But if you are curious, I rendered the whole circuit and put it up on liveoverflow.com. So head over to the liveoverflow.com blog if you want to look at it. But how do we solve this huuuuge combinational logic circuit? First of all I decided to store the parsed data in a different format, so I don;t have to re-parse the sqlite file with all the chunks I\u2019m not even interested in, every time when I want to test my script."}
{"prompt": "What characters are used to denote different types of blocks in the 2d GRID array?", "completion": "That would be too slow. So I created a 2d GRID array or matrix and just used single characters to indicate what block (or node, as we should call it) is. Here is the large if-case that checks the type. So for a simple line I used a pipe or dash. For a crossover I used a +. For a corner I used one of these characters. And also here some letters for the gates. AND, OR, XOR and NOT. The pygame stuff around here, is just the pixel drawing code. And after I have created this 2d array, I saved it to a file grid.py."}
{"prompt": "How can we use a SAT solver to solve the boolean circuit equation?", "completion": "Then I created a new script trace.py and can simply import the grid, without doing the sqlite parsing again. And now we come to the actual interesting part. How do we solve this. As mentioned in the beginning, we need some kind of SAT solver, that can solve the boolean circuit equation for us. I like to use z3 for that. I have also used z3 in a previous video, I link that in the corner. So here basically it starts. I created the function trace which takes a coordinate and a direction. This is the coordinate of the final output."}
{"prompt": "How does the circuit tracing algorithm work?", "completion": "So this is the end of the circuit. And we are tracing to the left, in the way I have oriented the grid, the circuit goes to the left. This is the whole function. It\u2019s a recursive function that basically walks the whole circuit, starting at the output. So let\u2019s see how that works. We start here , with the direction d to the left. Now we have a while true that gets the character from the grid, and it will be a dash. So dash to the left means we decrement the coordinate on the x axis. We move left."}
{"prompt": "What is the purpose of the simplify() function in the algorithm?", "completion": "And so we we keep doing that until we reach this gate. So now this character c is the AND gate. First we check if we have visited this gate before, this is just to optimize the algorithm. We don\u2019t need to redo the magic, we just return the visited value in such a case. But what is the magic that we do. And this is here. So if we have not visited, we set visited to this. We call simplify. Simplify is a function by z3 to simplify an equation. I call this in every function just to let z3 simplify the equation we currently have in every step, not sure if really needed."}
{"prompt": "What does the trace function do in the context of solving the Minetest Hardware Challenge?", "completion": "But so we return here a boolean function. The boolean function we create here is an AND, obviously we have an AND gate, and the INPUTS to that and gate are of course the two paths going up and down. So the two input parameters to this and gate have to be traced too. We trace now the path down, and we trace the path up. It calls recursively the trace function. So this can only return, once we finished these trace calls. And these trace calls keep walking the circuit in the same way, and keep also calling trace on each new gate."}
{"prompt": "What is the purpose of the trace function in solving the Minetest Hardware Challenge?", "completion": "You can see it slowly walks down the whole circuit recusively. And then at some point we reach the end. At some point a trace function will find a lever. And then it will return a Boolean variable. This is a z3 boolean variable with the name based on the lever\u2019s coordinates. And so now the whole circuit collapes. This returns a Bool variable, which means the trace function that called this trace function can for example finally return the AND. And AND of boolean lever 1 and boolean lever 2. For example."}
{"prompt": "What type of logic gate does the output of the circuit depend on?", "completion": "Now this created a boolean function about these two booleans. And they then return to the next layer of trace function which then pf course pass that return value to it\u2019s new gate, for example an OR. And so you can see how that spans out the whole circuit. So at some point trace returns THE WHOLE circuit as a boolean formular. Here it is. This is the whole circuit printed. The output depends on an AND. Which itself has an input coming from a NOT and that not has an input from an AND. and so forth."}
{"prompt": "How can we use a SMT solver to solve the Minetest Hardware Challenge?", "completion": "And several layers deep we reach at some point our boolean variables, those are the levers. And now we somply ask z3. We want this whole trace to be true, we want the output to be true. Please solve this. That\u2019s it. Z3 will do it\u2019s solving magic and return exactly the value of the boolean variables, that make the output true. Just takes a few seconds. There it is. Those are the state of the levers. Sort them by number. And here is the binary input. That is the flag. We can submit it, and get the points."}
{"prompt": "What is z3?", "completion": "Nice! As you can see, pretty straight forward challenge. It\u2019s more of a programming challenge,because the path is pretty clear. It\u2019s not really security. But it\u2019s really fun and you learn a lot about parsing custom file or data formats and generally practice the craft of using technology. However you need to know about something like z3, but that\u2019s a typical CTF tool that you know about if you read writeups. I mean even if you just watch my videos you would have know about it from that video I mentioned earlier."}
{"prompt": "What language is used to design hardware and program FPGAs?", "completion": "However if you happen to be an electrical engineer, you might even know other tools to solve this. For example q3k solved it using a verilog netlist optimizer or solver - I don\u2019t really know how it works. Verilog is the language you can use to design hardware and program FPGAs, we have also used that before in this video I link up here. And the design suites you use for hardware designs also come with tools to optimize and solve circuits like this. And so he transformed the data into a netlist usable by such a tool and let it solve it."}
{"prompt": "What architecture is used in the reverse engineering challenge discussed in the video?", "completion": "Anybody remember the riscure embedded hardware CTF a long time ago? Rhme2? I have a whole playlist covering various different challenges. Two of them cover reverse engineering a binary that would be running on the arduino board. Which means their architecture is AVR. And if you are not very familiar with reversing embedded devices or AVR I would recommend watching these videos before continuing here. This video will be about another reversing challenge, but explained by Zeta Two. I didn\u2019t solve that challenge, but he was really excited of sharing this write-up with us. This video was planned for a long time and because I still don\u2019t have a good process for working with other people I screwed up the first time we recorded this. So thank you for sitting down with me a second time."}
{"prompt": "What techniques can be used to reverse engineer firmware code?", "completion": "So I\u2019m carl, or on the internet known as zeta two and I play a lot of CTFs. But before we fully head into the technical parts I want to highlight something. I know from the time when all of this stuff was new to me, that reverse engineering and reading all of this assembler code and figuring out what it does, seemed so impossible. How can anybody ever know and learn all of that. The truth is, we don\u2019t know all of it. It\u2019s a mix of knowledge, experience, gut feeling, research and guessing and assumptions. The over time all of these things get better,"}
{"prompt": "How can one employ language when making assumptions about an unknown target to ensure accuracy in their research?", "completion": "more refined and you are able to understand more and more complex systems. And so when you listened to carl I want you to pay attention to his language. Even when he is fairly certain with something, he uses language like \u201cit looks like\u201d, \u201cit could be\u201d, \u201cmaybe\u201d, \u201cif we assume\u201d. And that makes sense because we are exploring an unknown target we have to start somewhere and piece together the puzzle. Early on you can make guesses like \u201cthis is blue, could be the sky in the top of the picture\u201d, but maybe later you realize it was actually part of a blue car. And so I think a key takeaway here is how important it is to always make assumptions, try to picture the whole thing, but try to verify it somehow and be always ready to accept that an assumption was wrong. And that is probably the key to success."}
{"prompt": "What type of CPU does the fridge manufacturer use in its fridges?", "completion": "Anyway. Let\u2019s head in. FridgeJit, reverse engineering 400 points. A senior technical manager of a fridge manufaturer demanded the ability t update the firmware. It turned out that the CPU that comes with the fridges does not allow self-upgrading the firmware, so the developers built a VM for the fridge software. A crafty customer has been able to reverse engineer the software and programmed the fridge with different software. His goal was to build a digital safe. Are you able to crack the password? We have been able to extract the full firmware image of a slightly different fridge and a memory dump of their fridge. We hope this is enough."}
{"prompt": "What is the purpose of the challenge binary in this hardware wallet research?", "completion": "And we get the challenge binary, which you could flash onto the board, which is basically the same as the firmware.bin and the memory.dmp. As you can see rhme2 had this neat map for the challenges. And here is FridgeJit. This was one in a series of challenges about reversing a virtual machine on the AVR. You can see that the path connects to more challenges. But let\u2019s look at the first one. So carl will now retell how he reverse engineered and solved this challenge. And obviously it all starts with IDA."}
{"prompt": "What reverse engineering tool is mentioned in the video transcript?", "completion": "The first start is to load this into IDA. So I\u2019m using my old IDA db, so I have already named stuff but we\u2019ll go through how you can come up with these names and realize what is what - like the reversing process. So IDA is a reverse engineering tool that helps you puzzle together the pieces. It helps you by visualizing code flow and some other stuff and you are able to add names for functions and add comments. So These function names were not there at the start. Carl gave that name to those functions based on what they do. And so he will now walk us through some important functions and how you can figure that out. But some other names referenced,"}
{"prompt": "What is the name of the memory location that can be used to help with IDA analysis?", "completion": "for example this memory location here called io_UCSR0A is how IDA can help you. One thing that's very convenient . That probably is the absolute first thing you should do when reversing some kind of embedded thing. And I did this at some point but took me a while, is to get the memory mapping of the device. So that you can name memory areas properly. So if you look at some datasheet of the processor there will be a list of what memory regions are mapped to what function, different registers have special meanings."}
{"prompt": "How is serial communication supported on AVR microcontrollers?", "completion": "What he describes here you can see in my AVR reversing video in a bit more detail. But essentially small CPUs like this atmega have to interact with other hardware. For example maybe it supports serial. And you know serial is this high/low/high/low protocol at a certain speed and you don\u2019t have to program that yourself in assembler. The chip has this as a feature and al you have to do is to write in assembler which symbol you want to transmit. And a certain memory address is mapped to this hardware feature. So when you write a value to that address in assembler code, some part of the chip, in the hardware, will receive that value and then perform the proper low/high serial communication. That\u2019s what mapped memory means. Very simple concept but very powerful. And additionally the memory in general,"}
{"prompt": "How can one use IDA to find information about a processor such as the atmega328?", "completion": "like the ROM or RAM are also mapped to certain memory ranges. And you want to know where is what in order to understand what is referenced by addresses in the assembler code. And you can find all of this information in the manual, the documentation of the chip used. And in IDA there is support for having configuration files where you can define the processor and you can tell it all the memory areas and what their names are. For the atmega328, which is the one used in the CTF, there isn\u2019t one in IDA, but I actually found a forum post where somebody had created one like this and I just copied it into my IDA AVR config file."}
{"prompt": "What register is used to communicate on the serial port in the atmega328 processor?", "completion": "So this is a definition file for the atmega328 where you have names for all the different registers. And the point of this is, when you load the binary into IDA you will have things named from the start. If we go here you will have some memory areas named in IDA, and this is very nice, because then you can look for interesting registers and look where they are used in the code and you can start working your way backwards from there. For example one very basic thing that we want to find out, is like how and where in the code does it communicate. Like send and receive data on the serial port."}
{"prompt": "What register is used to communicate on the serial port in the manual?", "completion": "So If you look in the manual you will see that it uses this register to communicate on the serial port, you can see where this is used you will find a function. And this means that this is a function responsible for sending data on the serial port. Wait, how do you know that it\u2019s sending data here exactly? It basically tells, \u201cI\u2019m going to send stuff\u201d and then it loads data in this register and then it gets send away on the serial. So basically we are looking for a place where something is writing to this register. And also, conversely it receives data by reading this register. So if we look where this register is used we find exactly two places. So one place it writes data into the register, and one place it reads data from this register."}
{"prompt": "How does the print_text() function use the io_receive() and io_send() functions?", "completion": "So basically we look at this function. It first checks the status of this register. And basically what it\u2019s doing here it\u2019s checking that it\u2019s clear to send data. That it\u2019s not busy. It just loops here until it\u2019s ready to send. And then it sends one byte. And the other way around, if we get the other function, we have here. It loop until it\u2019s ready to receive and then it receives one byte. And returns that. So it felt very natural to name it io_receive and io_send. And we can then see where this is used. And it\u2019s used in a number of places. For example this function. Which I have named print_text."}
{"prompt": "What function is used to send and receive data in the bootloader program?", "completion": "So it is basically calling the io_send function in a loop. So what this function does is basically it takes a pointer to some data and then it loops over this data and sends one byte at a time. And in the same fashion we have the receiving end. There are functions using this to receive data. So that\u2019s nice and we will check deeper on that track later I think. But for now we can just go back to like where the program starts. This is also a thing that you get from loading the config. You get the interrupt table, or what do you call it, so and the reset one is basically the entry point for the processor. So this is where everything starts running. Where the program starts."}
{"prompt": "What is the purpose of clearing a memory region during a bootloader startup sequence?", "completion": "And this is basically like a standard thing where it copies some static data in some location and clears a memory region. So up until here, carl sounds like he knows exactly what he is doing. Like if he reads this stuff every day. And yes, this is clearly coming from experience how programs and chips work and being able to read the documentation, the manual of the chip and making sense of it. But of course he doesn\u2019t know everything. It\u2019s a puzzle, other parts of the picture take more effort and time until he realises it."}
{"prompt": "What is the purpose of the loop that copies static data from the ROM into the RAM?", "completion": "In the beginning I thought this is important, but then I realized this is just a standard set up thing. It\u2019s like the start function before the main function in a regular x86 program. So he had an assumption at the beginning which much later turned out to be wrong. I mean I think I moved on but then I\u2019ve revisited it later. And I realized that what it\u2019s doing, It\u2019s copying static data from the ROM into the RAM. So I think here maybe. Yeah. Basically the RAM is empty when you start and then the program loads basically global variables and constants and things like that. So it\u2019s a loop copying data from the ROM into the RAM at a certain location."}
{"prompt": "How does the firmware start up and get to the main function?", "completion": "And then there is this part which is just zeroes out basically the rest of the RAM. So this is just setting up the whole ram region. And then you call a function. Which eventually ends up. So this is more like the main function where interesting things start to happen. So now that we know where the main function starts, Carl goes into the section here which uses the very obvious print_text function. It\u2019s not far fetched to understand that the loading instructions before the call, load the data for the printing."}
{"prompt": "What strings are embedded in the ROM related to loading a program into the machine?", "completion": "I mean if you look down here a little bit and look at these addresses. So in the ROM we have some string constants embedded. Basically there are these strings related to laoding a program into the machine. And there is something here that looks like a debug menu. And something here that looks like a table of registers. So and here is FridgeJit Console. And so it looks like all of this is related to like debugging this thing. Remember that the challenge description said that the developers built a VM."}
{"prompt": "What is the technical feature of AVR that allows it to load two bytes at a time?", "completion": "So this is some kind of Virtual Machine built on top of AVR so we could then guess that there is some debugging feature in the virtual machine. Here you also have this interesting thing with AVR. that it\u2019s basically an 8bit processor, but it has 16bit addressing, so you load some addresses you load them one byte at a time. So those are the two halves of an address. Which is pointing to this string. Before these were named, this region already looks interesting. Because it has this repeating pattern. Like load two bytes, call a function,"}
{"prompt": "What is the purpose of the AVR's \"meta registers X Y Z\"?", "completion": "load two bytes, call a function. You can guess that this is actually doing something that is interesting, it\u2019s also the same function. Maybe it\u2019s like setting up some data. Or encryption or decryption. I mean I didn\u2019t know before. So first of all it loads into r24 and r25 registers. And you have this other peculiar thing with the AVR that you have these regular numbered registers and you have these meta registers X Y Z, which are 16bit registers that consists of a pair of registers. So basically if you look at this code you can see that it takes this address stored in the r24, r25 register, it loops over it and calls the io_send function. So you can name this function print_text. And then it\u2019s very natural to see what this partis doing."}
{"prompt": "What function is used to print text to the user interface?", "completion": "It\u2019s printing out a menu. So it says that we should provide a boot rom and then it prints out this prompt thing. So a natural guess is that the next thing that it\u2019s going to do is, take input from the user. right? I think this is a good point to cut this episode. We have used the atmega manual and an IDA config to load the binary, identify important registers that are used for communication and traced the usage backwards, to functions that clearly read or print data with it. And then we also went the other way around and started at the real START of the processor and found the main function that is using the print_text function from earlier."}
{"prompt": "What did AngularJS do to fix the sandbox bypass in version 1.4.7?", "completion": "AngularJS fixed the sandbox bypass from version 1.4.7. But very quickly a new bypass was found. The old bypass which overwrote the charAt prototype function to screw with AngularJS internals, got fixed. But the fix was incomplete. Very quickly a new bypass was found but was initially kept private. Eventually somebody else discovered the bypass too, and reported it publicly on github. SO let's try to find the bypass for the incomplete fix ourselves. Let's start by testing the old bypass. No alert."}
{"prompt": "What checks does the ensureSafeAssignContext function in AngularJS 1.5.7 perform?", "completion": "And when we look into the console we can see the Error \"Assigning to a constructor is disallowed!\" What does that mean? Let's have a look at what ensureSafeAssignContext is doing. So this is a function that takes an object as parameter and performs a couple of checks on it. It basically checks if the object passed to it, is some kind of constructor. As we have seen with the first bypass, constructors are dangerous. In that video we used the Function constructor to escape the sandbox. And in the last escape we accessed the prototype of charAt via the String constructor to screw with Angular's internals."}
{"prompt": "What kind of objects are passed to the AssignContext function?", "completion": "So it makes sense that the sandbox tries to prevent you assigning to the constructor. Well... the name \"AssignContext\" indicates, that this is a check used in assignments. I set a breakpoint with the debugger; keywoard here, so let's see what kind of objects are passed to this function. So the first object passed to it is the string \"a\". The second object passed to it is the String() constructor, which will obviously then throw the exception. Now let's check where this is called from in the call stack."}
{"prompt": "What is the difference between the generated code in AngularJS 1.4.7 and the generated code in 1.5.7?", "completion": "It's coming from fn, and fn is again this dynamically generated JavaScript code representing our expression. We can take this generated code here and compare it to the generated code from 1.4.7. You can see that the fix is not super big. It only added two function calls to ensureSafeAssignContext. Anyhow. Let's try to understand what Assign context means. In what cases does AngularJS check an object with this function? We can do this by using simple expressions. So for example 1+1 doesn't trigger the breakpoint."}
{"prompt": "What is the parameter passed to the function generated by AngularJS?", "completion": "So no check here. That's not surprising, we would expect some kind of assignment anyway, right? So let's do an assignment. a=1. Ok this triggered the breakpoint. And the object passed to it is the Scope object. Remember from the very first video, that any variable you use is evaluated against the Scope? So that kinda makes sense. Let's look at the function Angular generated. So v0 is the 1 that we want to assign. v2 up here is s, our scope. So that also makes sense. So now in here it checks if v2 is a safe object for assignments."}
{"prompt": "How can we assign something to the prototype of a on the scope when using AngularJS version 1.5.7?", "completion": "And yeah the Scope is a safe object. After that you see the assignment happening with v2.a. So a on the scope get's assigned the number 1. As you can see, it always only checks the left side of an assignment. So the object to the right is never checked. This means we can still do stuff with the constructor, it just can't be on the left. So we can assign it to a variable on the scope just fine. But is that enough? Now that a is the String() constructor, let's see if we can assign something to the the prototype of a."}
{"prompt": "How can we bypass the incomplete fix of the AngularJS version 1.5.7?", "completion": "First check is the first assignment, which is fine. But the second check, will fail. Because a is the constructor. mhmh.... Playing around like this is enough to find the bypass for the incomplete fix! So go ahead and pause the video to try it yourself and head over to the testbed at liveoverflow.com/angularjs/ You can do it! In case you didn't get it or you just want me to tell you, well here we go. So we can use those evil objects on the right side of an assignment. So we can assign them to anything we want."}
{"prompt": "How can we bypass the AngularJS sandbox in version 1.5.7?", "completion": "But they can't be on the left. But the only evil object that can't be on the left is the constructor. So what we could do is, we could assign the prototype to a instead. And then we use a.charAt in the next step. Theoretically this should work, because a contains now prototype and NOT the constructor. Which means ensureSafeAssignContext will not find a constructor and be happy. So let's try it. First assignment is on the scope. So that is safe. And the second check is on this weird object here, but that is just the prototype!"}
{"prompt": "How does the latest AngularJS sandbox bypass in version 1.5.8 compare to the bypass found by Ian?", "completion": "And when we let the code continue, we pop an alert! Hah! that was super easy. Let's compare our bypass with what ian found. His exploit is a little bit overcomplicated, but in essence it's the same. He assigns the prototype to a property y of x. and then accesses the charAt via that property. Same thing, we just used a simple variable. Also this bypass still works in the latest version 1.5.8. But AngularJs has announced that they will remove the AngularJS sandbox in 1.6. This means, that we don't need any fancy sandbox bypasses anymore and exploitation becomes trivial."}
{"prompt": "What talk by Mario Heiderich provides a great overview of the history of AngularJS sandbox bypasses?", "completion": "It sounds counter intuitive, but I think that's a good thing. But let's discuss this in another video. Now that you understand AngularJS sandbox bypasses, I highly recommend you to watch the talk \"an abusive relationship with angularjs\" by Mario Heiderich. He gives a great overview over the history of angularjs sandbox bypasses. I just finished editing the video and i realized I forgot to give my disclaimer and the proper credits like I did in the previous videos. So here it comes a bit late. I did not discover those bypasses myself."}
{"prompt": "What command can be used to connect to the program running on port 2994?", "completion": "Final level 1 has a format string vulnerability that can be exploited remotely. Over the past few videos we have learned how to talk to these programs over a TCP network connection and how to debug them, so we are all set to go. Like all previous challenges, the program is running as a network daemon in this case on port 2994. So we can use netcat to connect to this service which displays a final1 prompt. But when we enter something we don\u2019t see anything. Mh. Also because we already know it will be about a format string vulnerability, we can try to inject some characters such as %x, but again, nothing happens."}
{"prompt": "What can be an indication of a format string vulnerability?", "completion": "We could also try %s, because if you remember, it will take values on the stack as the address location of a string, thus if values on the stack do not point into valid memory, the program should crash, which would be another indication of a format string vulnerability. But nope. Also doesn\u2019t do anything. We could also try to send a very long string, just to see if there is a buffer overflow that would crash the program, but also doesn\u2019t work. You can see that the prompt got returned now multiple times, which is an indication that the program always reads a limited amount of characters, and you sent so many at once,"}
{"prompt": "What function is used to get the address of the peer connected to the socket sockfd?", "completion": "that the read loop was able to read many times. So I guess it\u2019s time to have a look at the source code. Main calls two functions after setting up all the networking stuff. The first one is getipport(), and the second one is parser(). Getipport calls the function getpeername(), so let\u2019s see what that is about. getpeername() returns the address of the peer connected to the socket sockfd, in the buffer pointed to by addr. We can see that it also defines a struct sockaddr_in which apparently will then contain the source ip address and source port by the client that connected to the socket."}
{"prompt": "How does the parser() function use fgets to read input from the user?", "completion": "You can also look up how the struct exactly looks like on the man page for ip. So it will basically contain the port number, and the ip address, and the ip address is a 32byte integer. And sprintf will write this constructed string into hostname, which is a global variable. Ok so once this function is complete, the code will call parser(). And parser will print the final1 prompt we already know. Then it uses fgets to read 128 bytes into the line buffer. After that it uses trim, which looks for the first occurrence of a newline or linefeed and replaces it with a 0."}
{"prompt": "How does the program determine whether a username has been specified before entering the 'login' command?", "completion": "Basically cutting the string at these positions. Then it will check if the string you entered starts with \u201cusername\u201d, or \u201clogin\u201d. Ahh, ok, so there are special commands for that prompt. If you enter username, it kinda expects additional data after it, because it string copies anything after the \u201cusername\u201d part into the global variable username. If you would use the command \u201clogin\u201d, it would check if you specified a username before, if not it tells you you follow a wrong protocol. But if you specified a username before, it will call logit, with a pointer into the string after login, because it expects a password there."}
{"prompt": "What system log is the failed login attempt logged to?", "completion": "The password is not used in logit, it\u2019s just a mockup for the challenge, but in there it uses a buffer and writes to it with snprintf. Basically creating a line for a log entry, that says that there was a login attempt from a certain client for a specific user with a certain password. And then this string logged in the system log. Then this function returns and it will print \u201clogin failed\u201d. Armed with this knowledge we can try to use the prompt again. And it does what we expect. Now this failed login attempt should have been logged in the syslog."}
{"prompt": "What command did LiveOverflow use to view the last few lines of the /var/log/syslog file?", "completion": "So let\u2019s check it out. Note you have to be root to read that file. So tail, to only get the last few lines, of /var/log/syslog And there it is, final1 Login attempt from this source IP and source port, as LiveOverflow with the password. Okay. But where the heck is the format string vulnerability? There is no printf where we controlled the format parameter. Why am I so hasty? We don\u2019t even fully understand the code yet, do we? We read this code with certain assumptions without questioning if they are true."}
{"prompt": "What is the function mentioned in the video that was not looked into?", "completion": "The meaning of hacking, if anything, is about understanding computers on a deeper level. But there is one function where we got lazy and brushed over, because we assumed it does it\u2019s job. If you take anything away from the stuff I create, then it shall be, don\u2019t be satisfied with what you think you know, challenge your beliefs. Ok, well that rant was a bit overplaying it. But we did not look into this new function we encountered - syslog. I guess what I\u2019m saying is, when you solve these simple challenges, you reach a point where you think you know every dangerous function,"}
{"prompt": "What is the second parameter of syslog()?", "completion": "but that\u2019s not true. So don\u2019t get lazy, and read the man page. If we look at the man page of syslog we will see that the second parameter is a format parameter. syslog() generates a log message, which will be distributed by syslogd(8). The priority argument is formed by ORing the facility and the level values (explained below). The remaining arguments are a format, as in printf(3) Syslog works like printf. And buf in logit(), is the format parameter. And buf will simply contain the username and password we entered, and thus we can inject format characters."}
{"prompt": "What function could be convenient to overwrite in order to exploit the format string vulnerability identified in the video?", "completion": "Let\u2019s try it. Let\u2019s login with %x stuff. Login failed, check the syslog. And there it is. In brackets you can see the leaked values from the stack. Perfect, now we have identified the bug. And from earlier format string exploit videos we learned that a good strategy is to overwrite an address in the global offset table with another function, like system to execute commands. Let\u2019s think about what function would be convenient to overwrite. I think, the strncmp is a cool function, because we control the first parameter."}
{"prompt": "How can we construct a remote exploit for a format string vulnerability due to syslog()?", "completion": "The line. And system uses the first parameter for the string to execute stuff. So if we replace strncmp with system, we can simply type in a line and execute a shell command. Ok, so let\u2019s construct our exploit. We import what might be important, and setup the remote socket connection like we are used to. And maybe we create a new function called, read_until. Which is very useful in these kind of remote service challenges. So read until shall fill up a buffer with single character reads, until the buffer contains the magic string specified by read_until."}
{"prompt": "What function can be used in Python to pause a script until the user hits enter?", "completion": "And then we can simply write, read_until the final1 prompt. And then we can do our stuff. So first we specify a username. Read until next prompt, then we specify the login password, and read again until next prompt. Another trick I use is the function raw_input(), which is actually to read input from the user in python, but is very convenient to kinda pause the script, until we hit enter. So when we execute this now, we connect to the service and then we wait until we hit enter in the script. When we now check the running processes for final, we see two."}
{"prompt": "What is the address of the strncmp function in the global offset table?", "completion": "If you remember the one is the parent daemon, and the new one (with the higher process id) is the spawned child that is handling our client connection. So we can attach gdb to that process and start collecting addresses of important symbols. So first let\u2019s figure out the address of strncmp in the global offset table. With info functions and a search term we can find the function trampoline in the plt quickly. We can disassemble those instructions and we quickly see that it jumps to the address stored here."}
{"prompt": "How can an attacker bypass ASLR on a modern system?", "completion": "And this points into the global offset table, and will obviously contain the real address to strncmp in libc. So that is our target address we want to overwrite. Next is the address of system. System is part of libc and we can quickly get the address of it here. Note, usually libc is randomized due to ASLR nowadays, but on this old linux system, or on embedded devices, it still works this way. On a real modern system you would first have to leak addresses from memory in order to calculate offsets and break ASLR."}
{"prompt": "How can we get the source IP and port of our connection to be included in the exploit?", "completion": "Ok, so we have our target and we have the address that we want to write to it. Also the resulting log message will contain your source IP and port, which might vary in length. Coming from localhost will be different than coming from a remote host. So we should add this into our exploit to be reliable. The challenge used getpeername to get the ip and port of it\u2019s peer. So we can use the equivalent to get your own name. With getsockname(). Now we also know the source ip and port and can write code to adapt accordingly."}
{"prompt": "What is the number of stack pops required to reach the username with the AAAA parameter?", "completion": "Also, I\u2019m sorry, the code is really awful to read this way. I don\u2019t know why I never bothered to turn on syntax code highltighing. So here we go. Better late than never. Syntax on. Let\u2019s have a look again at the logged line from earlier. These characters here at the end look suspiciously like ascii, and when we convert them we see that they spell \u201cLogin from\u2026 and so forth\u201d. Let\u2019s do this again with some recognizable characters to find the username. And there it is. So it took roughly 14 pops of the stack to reach the username with the AAAA."}
{"prompt": "What is the maximum hostname length that should be used to ensure that the memory is 32-bit aligned?", "completion": "You can see that the A\u2019s don\u2019t perfectly align, and they even might shift around because of the length of the IP and port. Thus first step is to make this constant by adapting the amount of As such that afterwards it will be a known aligned offset. So in this case the hostname was 15 characters long. And one more A would have filled up and alligned the memory. So let\u2019s think about what the shortest and longest hostname could be. Shortest would be 9, longest 21. Because we prefer multiples of four to be 32bit aligned, we decide to pad to 24 characters."}
{"prompt": "How many bytes can a line sent to the remote system be?", "completion": "Thus we take the length of the hostname, subtract it from 24, and then we know how many A\u2019s we need. Let\u2019s try this again with some %x in the username. Oh and we must not forget the newline at the end of our test inputs. Oh, doesn\u2019t work? What did we do wrong? Ahh\u2026 we forgot the username and login command. Still doesn\u2019t work\u2026 Oh, the line can only be 128 bytes long, but we send a lot more with 28 of these %x\u2026 See, so many small things that can go wrong and slow you down. Now we get the login failed."}
{"prompt": "What does the dollar notation ($17) refer to when using the single %x format string vulnerability?", "completion": "And looking into the syslog and searching for the Bs, we see that\u2026 god dammit\u2026 we forgot to add the padding with the As. Ok, there we go... the Bs are now perfectly aligned. Awesome. Now it doesn\u2019t matter what IP or port you have, it will always be exactly there. And we can count the words on the stack and get the offset 17. So now we can move on and use a single %x with the dollar notation to refer to the 17th parameter, the 17th value on the stack. So for example we can now place the address of the global offset table entry for strncmp here into the string, and then use %n to write to that address."}
{"prompt": "How do you calculate the correct number of characters needed to print the lower part of the system address?", "completion": "So now we only need to figure out how big of a padding we need to write the values we want. If that confuses you, rewatch the old format string stuff. So before we run it now, add another raw_input so that the script doesn\u2019t exit and then we run it, attach to it with gdb, and observe the GOT entry for strncmp, we see that after the login attempt it got overwritten. Our goal is the lower part of the system address, which is 0xffb0. So now we can calculate the correct number of characters we need to print."}
{"prompt": "What is the technique used to overwrite the address of system with the address of strncmp?", "completion": "And this is basically how the process now works. We write with %n to the address, check the number, calculate how much is missing or how much we are overshooting, correct the number of characters we print and repeat until we have constructed the full address for system. That is super annoying, it\u2019s fiddly and takes some time, but once you got it, it\u2019s so cool. So now I got the offsets right and the address is overwritten with the address of system. Now we can add the telnetlib trick with interact to our program and theoretically, at this point all calls to strncm would call system instead."}
